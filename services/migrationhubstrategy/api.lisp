;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/migrationhubstrategy/api
  (:use)
  (:nicknames #:aws/migrationhubstrategy)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/migrationhubstrategy/api)
(common-lisp:progn
 (common-lisp:define-condition migrationhubstrategy-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'migrationhubstrategy-error))
(common-lisp:progn
 (common-lisp:defclass migrationhubstrategy-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "migrationhubstrategy"
                        :api-version "2020-02-19" :host-prefix
                        "migrationhub-strategy" :signing-name
                        "migrationhub-strategy" :global-host common-lisp:nil))
 (common-lisp:export 'migrationhubstrategy-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyException" . dependency-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceLinkedRoleLockClientException"
     . service-linked-role-lock-client-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-status-union (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-status-union-"))
   (runtime-analysis-status common-lisp:nil :type
    (common-lisp:or runtime-analysis-status common-lisp:null))
   (src-code-or-db-analysis-status common-lisp:nil :type
    (common-lisp:or src-code-or-db-analysis-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-status-union 'make-analysis-status-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-analysis-status))
      (common-lisp:list
       (common-lisp:cons "runtimeAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'src-code-or-db-analysis-status))
      (common-lisp:list
       (common-lisp:cons "srcCodeOrDbAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   common-lisp:nil))
(common-lisp:deftype analysis-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analyzable-server-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyzable-server-summary-"))
   (hostname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vm-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyzable-server-summary
                    'make-analyzable-server-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyzable-server-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyzable-server-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-id))
      (common-lisp:list
       (common-lisp:cons "vmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyzable-server-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzable-server-summary-list ()
   '(trivial-types:proper-list analyzable-server-summary))
 (common-lisp:defun make-analyzable-server-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analyzable-server-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analyzer-name-union (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyzer-name-union-"))
   (binary-analyzer-name common-lisp:nil :type
    (common-lisp:or binary-analyzer-name common-lisp:null))
   (run-time-analyzer-name common-lisp:nil :type
    (common-lisp:or run-time-analyzer-name common-lisp:null))
   (source-code-analyzer-name common-lisp:nil :type
    (common-lisp:or source-code-analyzer-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyzer-name-union 'make-analyzer-name-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "binaryAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-time-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "runTimeAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "sourceCodeAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (antipattern-report-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-antipattern-report-result-"))
   (analyzer-name common-lisp:nil :type
    (common-lisp:or analyzer-name-union common-lisp:null))
   (anti-pattern-report-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (antipattern-report-status common-lisp:nil :type
    (common-lisp:or antipattern-report-status common-lisp:null))
   (antipattern-report-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antipattern-report-result
                    'make-antipattern-report-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-name))
      (common-lisp:list
       (common-lisp:cons "analyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anti-pattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antiPatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype antipattern-report-result-list ()
   '(trivial-types:proper-list antipattern-report-result))
 (common-lisp:defun make-antipattern-report-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            antipattern-report-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype antipattern-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (antipattern-severity-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-antipattern-severity-summary-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or severity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antipattern-severity-summary
                    'make-antipattern-severity-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   common-lisp:nil))
(common-lisp:deftype app-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-unit-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-unit-error-"))
   (app-unit-error-category common-lisp:nil :type
    (common-lisp:or app-unit-error-category common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app-unit-error 'make-app-unit-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-unit-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-unit-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-unit-error-category))
      (common-lisp:list
       (common-lisp:cons "appUnitErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-unit-error))
   common-lisp:nil))
(common-lisp:deftype app-unit-error-category () 'common-lisp:string)
(common-lisp:deftype application-component-criteria () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-component-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-component-detail-"))
   (analysis-status common-lisp:nil :type
    (common-lisp:or src-code-or-db-analysis-status common-lisp:null))
   (antipattern-report-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (antipattern-report-status common-lisp:nil :type
    (common-lisp:or antipattern-report-status common-lisp:null))
   (antipattern-report-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (app-type common-lisp:nil :type (common-lisp:or app-type common-lisp:null))
   (app-unit-error common-lisp:nil :type
    (common-lisp:or app-unit-error common-lisp:null))
   (associated-server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (database-config-detail common-lisp:nil :type
    (common-lisp:or database-config-detail common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (inclusion-status common-lisp:nil :type
    (common-lisp:or inclusion-status common-lisp:null))
   (last-analyzed-timestamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (list-antipattern-severity-summary common-lisp:nil :type
    (common-lisp:or list-antipattern-severity-summary common-lisp:null))
   (more-server-association-exists common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (os-driver common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (os-version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recommendation-set common-lisp:nil :type
    (common-lisp:or recommendation-set common-lisp:null))
   (resource-sub-type common-lisp:nil :type
    (common-lisp:or resource-sub-type common-lisp:null))
   (result-list common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null))
   (runtime-status common-lisp:nil :type
    (common-lisp:or runtime-analysis-status common-lisp:null))
   (runtime-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (source-code-repositories common-lisp:nil :type
    (common-lisp:or source-code-repositories common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-component-detail
                    'make-application-component-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-status))
      (common-lisp:list
       (common-lisp:cons "analysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-unit-error))
      (common-lisp:list
       (common-lisp:cons "appUnitError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-server-id))
      (common-lisp:list
       (common-lisp:cons "associatedServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-config-detail))
      (common-lisp:list
       (common-lisp:cons "databaseConfigDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-status))
      (common-lisp:list
       (common-lisp:cons "inclusionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'more-server-association-exists))
      (common-lisp:list
       (common-lisp:cons "moreServerAssociationExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-driver))
      (common-lisp:list
       (common-lisp:cons "osDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-set))
      (common-lisp:list
       (common-lisp:cons "recommendationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-sub-type))
      (common-lisp:list
       (common-lisp:cons "resourceSubType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-list))
      (common-lisp:list
       (common-lisp:cons "resultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-status))
      (common-lisp:list
       (common-lisp:cons "runtimeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-status-message))
      (common-lisp:list
       (common-lisp:cons "runtimeStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-repositories))
      (common-lisp:list
       (common-lisp:cons "sourceCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-details ()
   '(trivial-types:proper-list application-component-detail))
 (common-lisp:defun make-application-component-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-component-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-component-status-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-component-status-summary-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (src-code-or-db-analysis-status common-lisp:nil :type
    (common-lisp:or src-code-or-db-analysis-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-component-status-summary
                    'make-application-component-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'src-code-or-db-analysis-status))
      (common-lisp:list
       (common-lisp:cons "srcCodeOrDbAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-strategies ()
   '(trivial-types:proper-list application-component-strategy))
 (common-lisp:defun make-application-component-strategies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-component-strategy (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-component-strategy-"))
   (is-preferred common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-set common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or strategy-recommendation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-component-strategy
                    'make-application-component-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-component-summary-"))
   (app-type common-lisp:nil :type (common-lisp:or app-type common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-component-summary
                    'make-application-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   common-lisp:nil))
(common-lisp:deftype application-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-preferences-"))
   (management-preference common-lisp:nil :type
    (common-lisp:or management-preference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-preferences 'make-application-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-preference))
      (common-lisp:list
       (common-lisp:cons "managementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   common-lisp:nil))
(common-lisp:deftype assessment-data-source-type () 'common-lisp:string)
(common-lisp:deftype assessment-status () 'common-lisp:string)
(common-lisp:deftype assessment-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-summary-"))
   (antipattern-report-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (antipattern-report-status common-lisp:nil :type
    (common-lisp:or antipattern-report-status common-lisp:null))
   (antipattern-report-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (last-analyzed-timestamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (list-antipattern-severity-summary common-lisp:nil :type
    (common-lisp:or list-antipattern-severity-summary common-lisp:null))
   (list-application-component-status-summary common-lisp:nil :type
    (common-lisp:or list-application-component-status-summary
                    common-lisp:null))
   (list-application-component-strategy-summary common-lisp:nil :type
    (common-lisp:or list-strategy-summary common-lisp:null))
   (list-application-component-summary common-lisp:nil :type
    (common-lisp:or list-application-component-summary common-lisp:null))
   (list-server-status-summary common-lisp:nil :type
    (common-lisp:or list-server-status-summary common-lisp:null))
   (list-server-strategy-summary common-lisp:nil :type
    (common-lisp:or list-strategy-summary common-lisp:null))
   (list-server-summary common-lisp:nil :type
    (common-lisp:or list-server-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-summary 'make-assessment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-status-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-server-status-summary))
      (common-lisp:list
       (common-lisp:cons "listServerStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-server-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "listServerStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-server-summary))
      (common-lisp:list
       (common-lisp:cons "listServerSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-target-"))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or condition common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or assessment-target-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-target 'make-assessment-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-target-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-assessment-target-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-targets ()
   '(trivial-types:proper-list assessment-target))
 (common-lisp:defun make-assessment-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associated-application (:copier common-lisp:nil)
      (:conc-name "struct-shape-associated-application-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associated-application 'make-associated-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-applications ()
   '(trivial-types:proper-list associated-application))
 (common-lisp:defun make-associated-applications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype associated-server-ids ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-associated-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype async-task-id () 'common-lisp:string)
(common-lisp:deftype auth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-managed-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-managed-resources-"))
   (target-destination (common-lisp:error ":targetdestination is required")
    :type (common-lisp:or aws-managed-target-destinations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-managed-resources 'make-aws-managed-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   common-lisp:nil))
(common-lisp:deftype aws-managed-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-managed-target-destinations ()
   '(trivial-types:proper-list aws-managed-target-destination))
 (common-lisp:defun make-aws-managed-target-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-managed-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype binary-analyzer-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (business-goals (:copier common-lisp:nil)
      (:conc-name "struct-shape-business-goals-"))
   (license-cost-reduction common-lisp:nil :type
    (common-lisp:or business-goals-integer common-lisp:null))
   (modernize-infrastructure-with-cloud-native-technologies common-lisp:nil
    :type (common-lisp:or business-goals-integer common-lisp:null))
   (reduce-operational-overhead-with-managed-services common-lisp:nil :type
    (common-lisp:or business-goals-integer common-lisp:null))
   (speed-of-migration common-lisp:nil :type
    (common-lisp:or business-goals-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'business-goals 'make-business-goals))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input business-goals))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input business-goals))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-cost-reduction))
      (common-lisp:list
       (common-lisp:cons "licenseCostReduction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modernize-infrastructure-with-cloud-native-technologies))
      (common-lisp:list
       (common-lisp:cons "modernizeInfrastructureWithCloudNativeTechnologies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reduce-operational-overhead-with-managed-services))
      (common-lisp:list
       (common-lisp:cons "reduceOperationalOverheadWithManagedServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speed-of-migration))
      (common-lisp:list
       (common-lisp:cons "speedOfMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input business-goals))
   common-lisp:nil))
(common-lisp:deftype business-goals-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (collector (:copier common-lisp:nil)
      (:conc-name "struct-shape-collector-"))
   (collector-health common-lisp:nil :type
    (common-lisp:or collector-health common-lisp:null))
   (collector-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (collector-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-summary common-lisp:nil :type
    (common-lisp:or configuration-summary common-lisp:null))
   (host-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (last-activity-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (registered-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'collector 'make-collector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-health))
      (common-lisp:list
       (common-lisp:cons "collectorHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-id))
      (common-lisp:list
       (common-lisp:cons "collectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-version))
      (common-lisp:list
       (common-lisp:cons "collectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-summary))
      (common-lisp:list
       (common-lisp:cons "configurationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "hostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-activity-time-stamp))
      (common-lisp:list
       (common-lisp:cons "lastActivityTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-time-stamp))
      (common-lisp:list
       (common-lisp:cons "registeredTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collector))
   common-lisp:nil))
(common-lisp:deftype collector-health () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collectors () '(trivial-types:proper-list collector))
 (common-lisp:defun make-collectors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-summary-"))
   (ip-address-based-remote-info-list common-lisp:nil :type
    (common-lisp:or ipaddress-based-remote-info-list common-lisp:null))
   (pipeline-info-list common-lisp:nil :type
    (common-lisp:or pipeline-info-list common-lisp:null))
   (remote-source-code-analysis-server-info common-lisp:nil :type
    (common-lisp:or remote-source-code-analysis-server-info common-lisp:null))
   (vcenter-based-remote-info-list common-lisp:nil :type
    (common-lisp:or vcenter-based-remote-info-list common-lisp:null))
   (version-control-info-list common-lisp:nil :type
    (common-lisp:or version-control-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-summary 'make-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-address-based-remote-info-list))
      (common-lisp:list
       (common-lisp:cons "ipAddressBasedRemoteInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-info-list))
      (common-lisp:list
       (common-lisp:cons "pipelineInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-source-code-analysis-server-info))
      (common-lisp:list
       (common-lisp:cons "remoteSourceCodeAnalysisServerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vcenter-based-remote-info-list))
      (common-lisp:list
       (common-lisp:cons "vcenterBasedRemoteInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-info-list))
      (common-lisp:list
       (common-lisp:cons "versionControlInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (data-collection-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-collection-details-"))
   (completion-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (failed common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (in-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (servers common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or assessment-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or assessment-status-message common-lisp:null))
   (success common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-collection-details 'make-data-collection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "inProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (database-config-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-config-detail-"))
   (secret-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-config-detail 'make-database-config-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   common-lisp:nil))
(common-lisp:deftype database-management-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (database-migration-preference (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-migration-preference-"))
   (heterogeneous common-lisp:nil :type
    (common-lisp:or heterogeneous common-lisp:null))
   (homogeneous common-lisp:nil :type
    (common-lisp:or homogeneous common-lisp:null))
   (no-preference common-lisp:nil :type
    (common-lisp:or no-database-migration-preference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-migration-preference
                    'make-database-migration-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heterogeneous))
      (common-lisp:list
       (common-lisp:cons "heterogeneous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'homogeneous))
      (common-lisp:list
       (common-lisp:cons "homogeneous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-preference))
      (common-lisp:list
       (common-lisp:cons "noPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (database-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-preferences-"))
   (database-management-preference common-lisp:nil :type
    (common-lisp:or database-management-preference common-lisp:null))
   (database-migration-preference common-lisp:nil :type
    (common-lisp:or database-migration-preference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-preferences 'make-database-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-management-preference))
      (common-lisp:list
       (common-lisp:cons "databaseManagementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-migration-preference))
      (common-lisp:list
       (common-lisp:cons "databaseMigrationPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-exception 'dependency-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-component-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-component-details-request-"))
   (application-component-id
    (common-lisp:error ":applicationcomponentid is required") :type
    (common-lisp:or application-component-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-details-request
                    'make-get-application-component-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-component-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-component-details-response-"))
   (application-component-detail common-lisp:nil :type
    (common-lisp:or application-component-detail common-lisp:null))
   (associated-applications common-lisp:nil :type
    (common-lisp:or associated-applications common-lisp:null))
   (associated-server-ids common-lisp:nil :type
    (common-lisp:or associated-server-ids common-lisp:null))
   (more-application-resource common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-details-response
                    'make-get-application-component-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-detail))
      (common-lisp:list
       (common-lisp:cons "applicationComponentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-applications))
      (common-lisp:list
       (common-lisp:cons "associatedApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-server-ids))
      (common-lisp:list
       (common-lisp:cons "associatedServerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'more-application-resource))
      (common-lisp:list
       (common-lisp:cons "moreApplicationResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-component-strategies-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-application-component-strategies-request-"))
   (application-component-id
    (common-lisp:error ":applicationcomponentid is required") :type
    (common-lisp:or application-component-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-strategies-request
                    'make-get-application-component-strategies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-component-strategies-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-application-component-strategies-response-"))
   (application-component-strategies common-lisp:nil :type
    (common-lisp:or application-component-strategies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-strategies-response
                    'make-get-application-component-strategies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-strategies))
      (common-lisp:list
       (common-lisp:cons "applicationComponentStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or async-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-request 'make-get-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-response-"))
   (assessment-targets common-lisp:nil :type
    (common-lisp:or assessment-targets common-lisp:null))
   (data-collection-details common-lisp:nil :type
    (common-lisp:or data-collection-details common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or async-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-response 'make-get-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-collection-details))
      (common-lisp:list
       (common-lisp:cons "dataCollectionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-file-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-file-task-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-file-task-request
                    'make-get-import-file-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-file-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-file-task-response-"))
   (completion-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (input-s3bucket common-lisp:nil :type
    (common-lisp:or |importS3Bucket| common-lisp:null))
   (input-s3key common-lisp:nil :type
    (common-lisp:or |importS3Key| common-lisp:null))
   (number-of-records-failed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (number-of-records-success common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or import-file-task-status common-lisp:null))
   (status-report-s3bucket common-lisp:nil :type
    (common-lisp:or |importS3Bucket| common-lisp:null))
   (status-report-s3key common-lisp:nil :type
    (common-lisp:or |importS3Key| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-file-task-response
                    'make-get-import-file-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-name))
      (common-lisp:list
       (common-lisp:cons "importName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3bucket))
      (common-lisp:list
       (common-lisp:cons "inputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3key))
      (common-lisp:list
       (common-lisp:cons "inputS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-failed))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-success))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-report-s3bucket))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-report-s3key))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-latest-assessment-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-latest-assessment-id-request-")))
 (common-lisp:export
  (common-lisp:list 'get-latest-assessment-id-request
                    'make-get-latest-assessment-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-latest-assessment-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-latest-assessment-id-response-"))
   (id common-lisp:nil :type (common-lisp:or async-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-latest-assessment-id-response
                    'make-get-latest-assessment-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-portfolio-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-portfolio-preferences-request-")))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-preferences-request
                    'make-get-portfolio-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-portfolio-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-portfolio-preferences-response-"))
   (application-mode common-lisp:nil :type
    (common-lisp:or application-mode common-lisp:null))
   (application-preferences common-lisp:nil :type
    (common-lisp:or application-preferences common-lisp:null))
   (database-preferences common-lisp:nil :type
    (common-lisp:or database-preferences common-lisp:null))
   (prioritize-business-goals common-lisp:nil :type
    (common-lisp:or prioritize-business-goals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-preferences-response
                    'make-get-portfolio-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "applicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-preferences))
      (common-lisp:list
       (common-lisp:cons "applicationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-preferences))
      (common-lisp:list
       (common-lisp:cons "databasePreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritize-business-goals))
      (common-lisp:list
       (common-lisp:cons "prioritizeBusinessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-portfolio-summary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-portfolio-summary-request-")))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-summary-request
                    'make-get-portfolio-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-portfolio-summary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-portfolio-summary-response-"))
   (assessment-summary common-lisp:nil :type
    (common-lisp:or assessment-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-summary-response
                    'make-get-portfolio-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-summary))
      (common-lisp:list
       (common-lisp:cons "assessmentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendation-report-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendation-report-details-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or recommendation-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-report-details-request
                    'make-get-recommendation-report-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendation-report-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendation-report-details-response-"))
   (id common-lisp:nil :type
    (common-lisp:or recommendation-task-id common-lisp:null))
   (recommendation-report-details common-lisp:nil :type
    (common-lisp:or recommendation-report-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-report-details-response
                    'make-get-recommendation-report-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-report-details))
      (common-lisp:list
       (common-lisp:cons "recommendationReportDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-details-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":serverid is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-details-request
                    'make-get-server-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-details-response-"))
   (associated-applications common-lisp:nil :type
    (common-lisp:or associated-applications common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (server-detail common-lisp:nil :type
    (common-lisp:or server-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-details-response
                    'make-get-server-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-applications))
      (common-lisp:list
       (common-lisp:cons "associatedApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-detail))
      (common-lisp:list
       (common-lisp:cons "serverDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-strategies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-strategies-request-"))
   (server-id (common-lisp:error ":serverid is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-strategies-request
                    'make-get-server-strategies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-strategies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-strategies-response-"))
   (server-strategies common-lisp:nil :type
    (common-lisp:or server-strategies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-strategies-response
                    'make-get-server-strategies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-strategies))
      (common-lisp:list
       (common-lisp:cons "serverStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (name common-lisp:nil :type (common-lisp:or group-name common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-ids () '(trivial-types:proper-list group))
 (common-lisp:defun make-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (heterogeneous (:copier common-lisp:nil)
      (:conc-name "struct-shape-heterogeneous-"))
   (target-database-engine
    (common-lisp:error ":targetdatabaseengine is required") :type
    (common-lisp:or heterogeneous-target-database-engines common-lisp:null)))
 (common-lisp:export (common-lisp:list 'heterogeneous 'make-heterogeneous))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heterogeneous))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heterogeneous))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heterogeneous))
   common-lisp:nil))
(common-lisp:deftype heterogeneous-target-database-engine ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype heterogeneous-target-database-engines ()
   '(trivial-types:proper-list heterogeneous-target-database-engine))
 (common-lisp:defun make-heterogeneous-target-database-engines
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            heterogeneous-target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (homogeneous (:copier common-lisp:nil)
      (:conc-name "struct-shape-homogeneous-"))
   (target-database-engine common-lisp:nil :type
    (common-lisp:or homogeneous-target-database-engines common-lisp:null)))
 (common-lisp:export (common-lisp:list 'homogeneous 'make-homogeneous))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input homogeneous))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input homogeneous))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input homogeneous))
   common-lisp:nil))
(common-lisp:deftype homogeneous-target-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype homogeneous-target-database-engines ()
   '(trivial-types:proper-list homogeneous-target-database-engine))
 (common-lisp:defun make-homogeneous-target-database-engines
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            homogeneous-target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ipaddress-based-remote-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipaddress-based-remote-info-"))
   (auth-type common-lisp:nil :type
    (common-lisp:or auth-type common-lisp:null))
   (ip-address-configuration-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (os-type common-lisp:nil :type (common-lisp:or ostype common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ipaddress-based-remote-info
                    'make-ipaddress-based-remote-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "authType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-address-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "ipAddressConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "osType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipaddress-based-remote-info-list ()
   '(trivial-types:proper-list ipaddress-based-remote-info))
 (common-lisp:defun make-ipaddress-based-remote-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ipaddress-based-remote-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-file-task-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-file-task-information-"))
   (completion-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (input-s3bucket common-lisp:nil :type
    (common-lisp:or |importS3Bucket| common-lisp:null))
   (input-s3key common-lisp:nil :type
    (common-lisp:or |importS3Key| common-lisp:null))
   (number-of-records-failed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (number-of-records-success common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or import-file-task-status common-lisp:null))
   (status-report-s3bucket common-lisp:nil :type
    (common-lisp:or |importS3Bucket| common-lisp:null))
   (status-report-s3key common-lisp:nil :type
    (common-lisp:or |importS3Key| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-file-task-information
                    'make-import-file-task-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-name))
      (common-lisp:list
       (common-lisp:cons "importName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3bucket))
      (common-lisp:list
       (common-lisp:cons "inputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3key))
      (common-lisp:list
       (common-lisp:cons "inputS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-failed))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-success))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-report-s3bucket))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-report-s3key))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   common-lisp:nil))
(common-lisp:deftype import-file-task-status () 'common-lisp:string)
(common-lisp:deftype inclusion-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzable-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzable-servers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzable-servers-request
                    'make-list-analyzable-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzable-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzable-servers-response-"))
   (analyzable-servers common-lisp:nil :type
    (common-lisp:or analyzable-server-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzable-servers-response
                    'make-list-analyzable-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzable-servers))
      (common-lisp:list
       (common-lisp:cons "analyzableServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzable-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-antipattern-severity-summary ()
   '(trivial-types:proper-list antipattern-severity-summary))
 (common-lisp:defun make-list-antipattern-severity-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            antipattern-severity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-application-component-status-summary ()
   '(trivial-types:proper-list application-component-status-summary))
 (common-lisp:defun make-list-application-component-status-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-application-component-summary ()
   '(trivial-types:proper-list application-component-summary))
 (common-lisp:defun make-list-application-component-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-components-request-"))
   (application-component-criteria common-lisp:nil :type
    (common-lisp:or application-component-criteria common-lisp:null))
   (filter-value common-lisp:nil :type
    (common-lisp:or list-application-components-request-filter-value-string
                    common-lisp:null))
   (group-id-filter common-lisp:nil :type
    (common-lisp:or group-ids common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-components-request
                    'make-list-application-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-criteria))
      (common-lisp:list
       (common-lisp:cons "applicationComponentCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-value))
      (common-lisp:list
       (common-lisp:cons "filterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   common-lisp:nil))
(common-lisp:deftype list-application-components-request-filter-value-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-components-response-"))
   (application-component-infos common-lisp:nil :type
    (common-lisp:or application-component-details common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-components-response
                    'make-list-application-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-infos))
      (common-lisp:list
       (common-lisp:cons "applicationComponentInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-collectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-collectors-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collectors-request 'make-list-collectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-collectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-collectors-response-"))
   (collectors common-lisp:nil :type
    (common-lisp:or collectors common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collectors-response 'make-list-collectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collectors))
      (common-lisp:list
       (common-lisp:cons "Collectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-import-file-task-information ()
   '(trivial-types:proper-list import-file-task-information))
 (common-lisp:defun make-list-import-file-task-information
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-file-task-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-file-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-file-task-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-file-task-request
                    'make-list-import-file-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-file-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-file-task-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task-infos common-lisp:nil :type
    (common-lisp:or list-import-file-task-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-file-task-response
                    'make-list-import-file-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-infos))
      (common-lisp:list
       (common-lisp:cons "taskInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-server-status-summary ()
   '(trivial-types:proper-list server-status-summary))
 (common-lisp:defun make-list-server-status-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-server-summary ()
   '(trivial-types:proper-list server-summary))
 (common-lisp:defun make-list-server-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-servers-request-"))
   (filter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (group-id-filter common-lisp:nil :type
    (common-lisp:or group-ids common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-criteria common-lisp:nil :type
    (common-lisp:or server-criteria common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-servers-request 'make-list-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-value))
      (common-lisp:list
       (common-lisp:cons "filterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-criteria))
      (common-lisp:list
       (common-lisp:cons "serverCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-servers-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-infos common-lisp:nil :type
    (common-lisp:or server-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-servers-response 'make-list-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-infos))
      (common-lisp:list
       (common-lisp:cons "serverInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-strategy-summary ()
   '(trivial-types:proper-list strategy-summary))
 (common-lisp:defun make-list-strategy-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list strategy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (management-preference (:copier common-lisp:nil)
      (:conc-name "struct-shape-management-preference-"))
   (aws-managed-resources common-lisp:nil :type
    (common-lisp:or aws-managed-resources common-lisp:null))
   (no-preference common-lisp:nil :type
    (common-lisp:or no-management-preference common-lisp:null))
   (self-manage-resources common-lisp:nil :type
    (common-lisp:or self-manage-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'management-preference 'make-management-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-managed-resources))
      (common-lisp:list
       (common-lisp:cons "awsManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-preference))
      (common-lisp:list
       (common-lisp:cons "noPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-manage-resources))
      (common-lisp:list
       (common-lisp:cons "selfManageResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   common-lisp:nil))
(common-lisp:deftype max-result () 'common-lisp:integer)
(common-lisp:deftype net-mask () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-info-"))
   (interface-name (common-lisp:error ":interfacename is required") :type
    (common-lisp:or interface-name common-lisp:null))
   (ip-address (common-lisp:error ":ipaddress is required") :type
    (common-lisp:or ipaddress common-lisp:null))
   (mac-address (common-lisp:error ":macaddress is required") :type
    (common-lisp:or mac-address common-lisp:null))
   (net-mask (common-lisp:error ":netmask is required") :type
    (common-lisp:or net-mask common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-info 'make-network-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-name))
      (common-lisp:list
       (common-lisp:cons "interfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-mask))
      (common-lisp:list
       (common-lisp:cons "netMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-info-list ()
   '(trivial-types:proper-list network-info))
 (common-lisp:defun make-network-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (no-database-migration-preference (:copier common-lisp:nil)
      (:conc-name "struct-shape-no-database-migration-preference-"))
   (target-database-engine
    (common-lisp:error ":targetdatabaseengine is required") :type
    (common-lisp:or target-database-engines common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-database-migration-preference
                    'make-no-database-migration-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (no-management-preference (:copier common-lisp:nil)
      (:conc-name "struct-shape-no-management-preference-"))
   (target-destination (common-lisp:error ":targetdestination is required")
    :type (common-lisp:or no-preference-target-destinations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-management-preference 'make-no-management-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   common-lisp:nil))
(common-lisp:deftype no-preference-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype no-preference-target-destinations ()
   '(trivial-types:proper-list no-preference-target-destination))
 (common-lisp:defun make-no-preference-target-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            no-preference-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (osinfo (:copier common-lisp:nil) (:conc-name "struct-shape-osinfo-"))
   (type common-lisp:nil :type (common-lisp:or ostype common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or osversion common-lisp:null)))
 (common-lisp:export (common-lisp:list 'osinfo 'make-osinfo))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input osinfo))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input osinfo))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input osinfo))
   common-lisp:nil))
(common-lisp:deftype ostype () 'common-lisp:string)
(common-lisp:deftype osversion () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-info-"))
   (pipeline-configuration-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pipeline-type common-lisp:nil :type
    (common-lisp:or pipeline-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pipeline-info 'make-pipeline-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "pipelineConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-type))
      (common-lisp:list
       (common-lisp:cons "pipelineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-info-list ()
   '(trivial-types:proper-list pipeline-info))
 (common-lisp:defun make-pipeline-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (prioritize-business-goals (:copier common-lisp:nil)
      (:conc-name "struct-shape-prioritize-business-goals-"))
   (business-goals common-lisp:nil :type
    (common-lisp:or business-goals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prioritize-business-goals
                    'make-prioritize-business-goals))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-goals))
      (common-lisp:list
       (common-lisp:cons "businessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   common-lisp:nil))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-portfolio-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-portfolio-preferences-request-"))
   (application-mode common-lisp:nil :type
    (common-lisp:or application-mode common-lisp:null))
   (application-preferences common-lisp:nil :type
    (common-lisp:or application-preferences common-lisp:null))
   (database-preferences common-lisp:nil :type
    (common-lisp:or database-preferences common-lisp:null))
   (prioritize-business-goals common-lisp:nil :type
    (common-lisp:or prioritize-business-goals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-portfolio-preferences-request
                    'make-put-portfolio-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "applicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-preferences))
      (common-lisp:list
       (common-lisp:cons "applicationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-preferences))
      (common-lisp:list
       (common-lisp:cons "databasePreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritize-business-goals))
      (common-lisp:list
       (common-lisp:cons "prioritizeBusinessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-portfolio-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-portfolio-preferences-response-")))
 (common-lisp:export
  (common-lisp:list 'put-portfolio-preferences-response
                    'make-put-portfolio-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-report-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-report-details-"))
   (completion-time common-lisp:nil :type
    (common-lisp:or recommendation-report-time-stamp common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3keys common-lisp:nil :type (common-lisp:or s3keys common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or recommendation-report-time-stamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or recommendation-report-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or recommendation-report-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-report-details
                    'make-recommendation-report-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3keys))
      (common-lisp:list
       (common-lisp:cons "s3Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   common-lisp:nil))
(common-lisp:deftype recommendation-report-status () 'common-lisp:string)
(common-lisp:deftype recommendation-report-status-message ()
  'common-lisp:string)
(common-lisp:deftype recommendation-report-time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-set-"))
   (strategy common-lisp:nil :type (common-lisp:or strategy common-lisp:null))
   (target-destination common-lisp:nil :type
    (common-lisp:or target-destination common-lisp:null))
   (transformation-tool common-lisp:nil :type
    (common-lisp:or transformation-tool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-set 'make-recommendation-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformation-tool))
      (common-lisp:list
       (common-lisp:cons "transformationTool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-set))
   common-lisp:nil))
(common-lisp:deftype recommendation-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remote-source-code-analysis-server-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-remote-source-code-analysis-server-info-"))
   (remote-source-code-analysis-server-configuration-timestamp common-lisp:nil
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remote-source-code-analysis-server-info
                    'make-remote-source-code-analysis-server-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-source-code-analysis-server-configuration-timestamp))
      (common-lisp:list
       (common-lisp:cons "remoteSourceCodeAnalysisServerConfigurationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-sub-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (result (:copier common-lisp:nil) (:conc-name "struct-shape-result-"))
   (analysis-status common-lisp:nil :type
    (common-lisp:or analysis-status-union common-lisp:null))
   (analysis-type common-lisp:nil :type
    (common-lisp:or analysis-type common-lisp:null))
   (antipattern-report-result-list common-lisp:nil :type
    (common-lisp:or antipattern-report-result-list common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-status))
      (common-lisp:list
       (common-lisp:cons "analysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-type))
      (common-lisp:list
       (common-lisp:cons "analysisType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-result-list))
      (common-lisp:list
       (common-lisp:cons "antipatternReportResultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun make-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype run-time-analyzer-name () 'common-lisp:string)
(common-lisp:deftype run-time-assessment-status () 'common-lisp:string)
(common-lisp:deftype runtime-analysis-status () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-s3keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (s3object (:copier common-lisp:nil) (:conc-name "struct-shape-s3object-"))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (self-manage-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-self-manage-resources-"))
   (target-destination (common-lisp:error ":targetdestination is required")
    :type (common-lisp:or self-manage-target-destinations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'self-manage-resources 'make-self-manage-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   common-lisp:nil))
(common-lisp:deftype self-manage-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype self-manage-target-destinations ()
   '(trivial-types:proper-list self-manage-target-destination))
 (common-lisp:defun make-self-manage-target-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            self-manage-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-criteria () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-detail-"))
   (antipattern-report-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (antipattern-report-status common-lisp:nil :type
    (common-lisp:or antipattern-report-status common-lisp:null))
   (antipattern-report-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (application-component-strategy-summary common-lisp:nil :type
    (common-lisp:or list-strategy-summary common-lisp:null))
   (data-collection-status common-lisp:nil :type
    (common-lisp:or run-time-assessment-status common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (last-analyzed-timestamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (list-antipattern-severity-summary common-lisp:nil :type
    (common-lisp:or list-antipattern-severity-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (recommendation-set common-lisp:nil :type
    (common-lisp:or recommendation-set common-lisp:null))
   (server-error common-lisp:nil :type
    (common-lisp:or server-error common-lisp:null))
   (server-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (system-info common-lisp:nil :type
    (common-lisp:or system-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'server-detail 'make-server-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "applicationComponentStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-collection-status))
      (common-lisp:list
       (common-lisp:cons "dataCollectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-set))
      (common-lisp:list
       (common-lisp:cons "recommendationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-error))
      (common-lisp:list
       (common-lisp:cons "serverError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-info))
      (common-lisp:list
       (common-lisp:cons "systemInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-details ()
   '(trivial-types:proper-list server-detail))
 (common-lisp:defun make-server-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (server-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-error-"))
   (server-error-category common-lisp:nil :type
    (common-lisp:or server-error-category common-lisp:null)))
 (common-lisp:export (common-lisp:list 'server-error 'make-server-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-error-category))
      (common-lisp:list
       (common-lisp:cons "serverErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-error))
   common-lisp:nil))
(common-lisp:deftype server-error-category () 'common-lisp:string)
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:deftype server-os-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-status-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-status-summary-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (run-time-assessment-status common-lisp:nil :type
    (common-lisp:or run-time-assessment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-status-summary 'make-server-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-time-assessment-status))
      (common-lisp:list
       (common-lisp:cons "runTimeAssessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-strategies ()
   '(trivial-types:proper-list server-strategy))
 (common-lisp:defun make-server-strategies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (server-strategy (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-strategy-"))
   (is-preferred common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-application-components common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-set common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or strategy-recommendation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'server-strategy 'make-server-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-application-components))
      (common-lisp:list
       (common-lisp:cons "numberOfApplicationComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-strategy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-summary-"))
   (server-os-type common-lisp:nil :type
    (common-lisp:or server-os-type common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'server-summary 'make-server-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-os-type))
      (common-lisp:list
       (common-lisp:cons "ServerOsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-lock-client-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-linked-role-lock-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-linked-role-lock-client-exception
                    'service-linked-role-lock-client-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-code-"))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null))
   (project-name common-lisp:nil :type
    (common-lisp:or project-name common-lisp:null))
   (source-version common-lisp:nil :type
    (common-lisp:or source-version common-lisp:null))
   (version-control common-lisp:nil :type
    (common-lisp:or version-control common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-code 'make-source-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-control))
      (common-lisp:list
       (common-lisp:cons "versionControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code))
   common-lisp:nil))
(common-lisp:deftype source-code-analyzer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-code-list ()
   '(trivial-types:proper-list source-code))
 (common-lisp:defun make-source-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-code-repositories ()
   '(trivial-types:proper-list source-code-repository))
 (common-lisp:defun make-source-code-repositories
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-code-repository))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-code-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-code-repository-"))
   (branch common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (project-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (repository common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version-control-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-code-repository 'make-source-code-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-type))
      (common-lisp:list
       (common-lisp:cons "versionControlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   common-lisp:nil))
(common-lisp:deftype source-version () 'common-lisp:string)
(common-lisp:deftype src-code-or-db-analysis-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-request-"))
   (assessment-data-source-type common-lisp:nil :type
    (common-lisp:or assessment-data-source-type common-lisp:null))
   (assessment-targets common-lisp:nil :type
    (common-lisp:or assessment-targets common-lisp:null))
   (s3bucket-for-analysis-data common-lisp:nil :type
    (common-lisp:or start-assessment-request-s3bucket-for-analysis-data-string
                    common-lisp:null))
   (s3bucket-for-report-data common-lisp:nil :type
    (common-lisp:or start-assessment-request-s3bucket-for-report-data-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-request 'make-start-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-data-source-type))
      (common-lisp:list
       (common-lisp:cons "assessmentDataSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-analysis-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForAnalysisData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-report-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForReportData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   common-lisp:nil))
(common-lisp:deftype start-assessment-request-s3bucket-for-analysis-data-string
                     ()
  'common-lisp:string)
(common-lisp:deftype start-assessment-request-s3bucket-for-report-data-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-response-"))
   (assessment-id common-lisp:nil :type
    (common-lisp:or async-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-response
                    'make-start-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-file-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-file-task-request-"))
   (s3bucket (common-lisp:error ":s3bucket is required") :type
    (common-lisp:or |importS3Bucket| common-lisp:null))
   (data-source-type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or group-ids common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or start-import-file-task-request-name-string
                    common-lisp:null))
   (s3bucket-for-report-data common-lisp:nil :type
    (common-lisp:or
     start-import-file-task-request-s3bucket-for-report-data-string
     common-lisp:null))
   (s3key (common-lisp:error ":s3key is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-file-task-request
                    'make-start-import-file-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-type))
      (common-lisp:list
       (common-lisp:cons "dataSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-report-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForReportData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   common-lisp:nil))
(common-lisp:deftype start-import-file-task-request-name-string ()
  'common-lisp:string)
(common-lisp:deftype start-import-file-task-request-s3bucket-for-report-data-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-file-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-file-task-response-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-file-task-response
                    'make-start-import-file-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-recommendation-report-generation-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-recommendation-report-generation-request-"))
   (group-id-filter common-lisp:nil :type
    (common-lisp:or group-ids common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or output-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-recommendation-report-generation-request
                    'make-start-recommendation-report-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "outputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-recommendation-report-generation-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-recommendation-report-generation-response-"))
   (id common-lisp:nil :type
    (common-lisp:or recommendation-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-recommendation-report-generation-response
                    'make-start-recommendation-report-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   common-lisp:nil))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or async-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-assessment-request 'make-stop-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-assessment-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-assessment-response 'make-stop-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   common-lisp:nil))
(common-lisp:deftype strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (strategy-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-strategy-option-"))
   (is-preferred common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (strategy common-lisp:nil :type (common-lisp:or strategy common-lisp:null))
   (target-destination common-lisp:nil :type
    (common-lisp:or target-destination common-lisp:null))
   (tool-name common-lisp:nil :type
    (common-lisp:or transformation-tool-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'strategy-option 'make-strategy-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input strategy-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input strategy-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tool-name))
      (common-lisp:list
       (common-lisp:cons "toolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input strategy-option))
   common-lisp:nil))
(common-lisp:deftype strategy-recommendation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (strategy-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-strategy-summary-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (strategy common-lisp:nil :type (common-lisp:or strategy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'strategy-summary 'make-strategy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input strategy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input strategy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input strategy-summary))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (system-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-system-info-"))
   (cpu-architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (file-system-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-info-list common-lisp:nil :type
    (common-lisp:or network-info-list common-lisp:null))
   (os-info common-lisp:nil :type (common-lisp:or osinfo common-lisp:null)))
 (common-lisp:export (common-lisp:list 'system-info 'make-system-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-architecture))
      (common-lisp:list
       (common-lisp:cons "cpuArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "fileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-info-list))
      (common-lisp:list
       (common-lisp:cons "networkInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-info))
      (common-lisp:list
       (common-lisp:cons "osInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-info))
   common-lisp:nil))
(common-lisp:deftype target-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-database-engines ()
   '(trivial-types:proper-list target-database-engine))
 (common-lisp:defun make-target-database-engines
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype tranformation-tool-description () 'common-lisp:string)
(common-lisp:deftype tranformation-tool-installation-link ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transformation-tool (:copier common-lisp:nil)
      (:conc-name "struct-shape-transformation-tool-"))
   (description common-lisp:nil :type
    (common-lisp:or tranformation-tool-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or transformation-tool-name common-lisp:null))
   (tranformation-tool-installation-link common-lisp:nil :type
    (common-lisp:or tranformation-tool-installation-link common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transformation-tool 'make-transformation-tool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transformation-tool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transformation-tool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tranformation-tool-installation-link))
      (common-lisp:list
       (common-lisp:cons "tranformationToolInstallationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transformation-tool))
   common-lisp:nil))
(common-lisp:deftype transformation-tool-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-component-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-component-config-request-"))
   (app-type common-lisp:nil :type (common-lisp:or app-type common-lisp:null))
   (application-component-id
    (common-lisp:error ":applicationcomponentid is required") :type
    (common-lisp:or application-component-id common-lisp:null))
   (configure-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (inclusion-status common-lisp:nil :type
    (common-lisp:or inclusion-status common-lisp:null))
   (secrets-manager-key common-lisp:nil :type
    (common-lisp:or secrets-manager-key common-lisp:null))
   (source-code-list common-lisp:nil :type
    (common-lisp:or source-code-list common-lisp:null))
   (strategy-option common-lisp:nil :type
    (common-lisp:or strategy-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-component-config-request
                    'make-update-application-component-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-id))
      (common-lisp:list
       (common-lisp:cons "applicationComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configure-only))
      (common-lisp:list
       (common-lisp:cons "configureOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-status))
      (common-lisp:list
       (common-lisp:cons "inclusionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets-manager-key))
      (common-lisp:list
       (common-lisp:cons "secretsManagerKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-list))
      (common-lisp:list
       (common-lisp:cons "sourceCodeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy-option))
      (common-lisp:list
       (common-lisp:cons "strategyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-component-config-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-application-component-config-response-")))
 (common-lisp:export
  (common-lisp:list 'update-application-component-config-response
                    'make-update-application-component-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-server-config-request-"))
   (server-id (common-lisp:error ":serverid is required") :type
    (common-lisp:or server-id common-lisp:null))
   (strategy-option common-lisp:nil :type
    (common-lisp:or strategy-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-server-config-request
                    'make-update-server-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy-option))
      (common-lisp:list
       (common-lisp:cons "strategyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-server-config-response-")))
 (common-lisp:export
  (common-lisp:list 'update-server-config-response
                    'make-update-server-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (migrationhubstrategy-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (vcenter-based-remote-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-vcenter-based-remote-info-"))
   (os-type common-lisp:nil :type (common-lisp:or ostype common-lisp:null))
   (vcenter-configuration-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vcenter-based-remote-info
                    'make-vcenter-based-remote-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "osType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vcenter-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "vcenterConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vcenter-based-remote-info-list ()
   '(trivial-types:proper-list vcenter-based-remote-info))
 (common-lisp:defun make-vcenter-based-remote-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vcenter-based-remote-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (version-control-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-version-control-info-"))
   (version-control-configuration-time-stamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (version-control-type common-lisp:nil :type
    (common-lisp:or version-control-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-control-info 'make-version-control-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-control-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-control-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "versionControlConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-type))
      (common-lisp:list
       (common-lisp:cons "versionControlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-control-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype version-control-info-list ()
   '(trivial-types:proper-list version-control-info))
 (common-lisp:defun make-version-control-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-control-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-control-type () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |importS3Bucket| () 'common-lisp:string)
(common-lisp:deftype |importS3Key| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun get-application-component-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-id)
   (common-lisp:declare (common-lisp:ignorable application-component-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-application-component-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-applicationcomponent-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'application-component-id))))
        "GetApplicationComponentDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-component-details))
(common-lisp:progn
 (common-lisp:defun get-application-component-strategies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-id)
   (common-lisp:declare (common-lisp:ignorable application-component-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-application-component-strategies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-applicationcomponent-strategies/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'application-component-id))))
        "GetApplicationComponentStrategies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-component-strategies))
(common-lisp:progn
 (common-lisp:defun get-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-assessment/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetAssessment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment))
(common-lisp:progn
 (common-lisp:defun get-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-import-file-task/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetImportFileTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import-file-task))
(common-lisp:progn
 (common-lisp:defun get-latest-assessment-id ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-latest-assessment-id" :operation
                                "GetLatestAssessmentId"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-latest-assessment-id))
(common-lisp:progn
 (common-lisp:defun get-portfolio-preferences ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-portfolio-preferences" :operation
                                "GetPortfolioPreferences"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-portfolio-preferences))
(common-lisp:progn
 (common-lisp:defun get-portfolio-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-portfolio-summary" :operation
                                "GetPortfolioSummary"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-portfolio-summary))
(common-lisp:progn
 (common-lisp:defun get-recommendation-report-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-recommendation-report-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-recommendation-report-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetRecommendationReportDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommendation-report-details))
(common-lisp:progn
 (common-lisp:defun get-server-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-server-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'server-id))))
        "GetServerDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-server-details))
(common-lisp:progn
 (common-lisp:defun get-server-strategies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-strategies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-server-strategies/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'server-id))))
        "GetServerStrategies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-server-strategies))
(common-lisp:progn
 (common-lisp:defun list-analyzable-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token sort)
   (common-lisp:declare (common-lisp:ignorable max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzable-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/list-analyzable-servers" "ListAnalyzableServers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyzable-servers))
(common-lisp:progn
 (common-lisp:defun list-application-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-criteria
                     filter-value group-id-filter max-results next-token sort)
   (common-lisp:declare
    (common-lisp:ignorable application-component-criteria filter-value
     group-id-filter max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-components-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/list-applicationcomponents" "ListApplicationComponents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-components))
(common-lisp:progn
 (common-lisp:defun list-collectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        "/list-collectors" "ListCollectors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-collectors))
(common-lisp:progn
 (common-lisp:defun list-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        "/list-import-file-task" "ListImportFileTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-import-file-task))
(common-lisp:progn
 (common-lisp:defun list-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-value group-id-filter max-results
                     next-token server-criteria sort)
   (common-lisp:declare
    (common-lisp:ignorable filter-value group-id-filter max-results next-token
     server-criteria sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/list-servers" "ListServers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-servers))
(common-lisp:progn
 (common-lisp:defun put-portfolio-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-mode application-preferences
                     database-preferences prioritize-business-goals)
   (common-lisp:declare
    (common-lisp:ignorable application-mode application-preferences
     database-preferences prioritize-business-goals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-portfolio-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/put-portfolio-preferences" "PutPortfolioPreferences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-portfolio-preferences))
(common-lisp:progn
 (common-lisp:defun start-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-data-source-type
                     assessment-targets s3bucket-for-analysis-data
                     s3bucket-for-report-data)
   (common-lisp:declare
    (common-lisp:ignorable assessment-data-source-type assessment-targets
     s3bucket-for-analysis-data s3bucket-for-report-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/start-assessment" "StartAssessment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-assessment))
(common-lisp:progn
 (common-lisp:defun start-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3bucket data-source-type group-id name
                     s3bucket-for-report-data s3key)
   (common-lisp:declare
    (common-lisp:ignorable s3bucket data-source-type group-id name
     s3bucket-for-report-data s3key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/start-import-file-task" "StartImportFileTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import-file-task))
(common-lisp:progn
 (common-lisp:defun start-recommendation-report-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id-filter output-format)
   (common-lisp:declare (common-lisp:ignorable group-id-filter output-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-recommendation-report-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/start-recommendation-report-generation"
        "StartRecommendationReportGeneration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-recommendation-report-generation))
(common-lisp:progn
 (common-lisp:defun stop-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/stop-assessment" "StopAssessment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-assessment))
(common-lisp:progn
 (common-lisp:defun update-application-component-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-type application-component-id
                     configure-only inclusion-status secrets-manager-key
                     source-code-list strategy-option)
   (common-lisp:declare
    (common-lisp:ignorable app-type application-component-id configure-only
     inclusion-status secrets-manager-key source-code-list strategy-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-component-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/update-applicationcomponent-config/"
        "UpdateApplicationComponentConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application-component-config))
(common-lisp:progn
 (common-lisp:defun update-server-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id strategy-option)
   (common-lisp:declare (common-lisp:ignorable server-id strategy-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-server-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        "/update-server-config/" "UpdateServerConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-server-config))
