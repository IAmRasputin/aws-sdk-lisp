;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/migrationhubstrategy/api
  (:use)
  (:nicknames #:aws/migrationhubstrategy)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/migrationhubstrategy/api)
(common-lisp:progn
 (common-lisp:defclass migrationhubstrategy-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "migrationhubstrategy"
                        :protocol :rest-json))
 (common-lisp:export 'migrationhubstrategy-request))
(common-lisp:progn
 (common-lisp:define-condition migrationhubstrategy-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'migrationhubstrategy-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyException" . dependency-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceLinkedRoleLockClientException"
     . service-linked-role-lock-client-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass analysis-status-union common-lisp:nil
                       ((src-code-or-db-analysis-status :initarg
                         :|srcCodeOrDbAnalysisStatus| :type
                         (common-lisp:or src-code-or-db-analysis-status
                                         common-lisp:null)
                         :accessor
                         %analysis-status-union-src-code-or-db-analysis-status
                         :initform common-lisp:nil)
                        (runtime-analysis-status :initarg
                         :|runtimeAnalysisStatus| :type
                         (common-lisp:or runtime-analysis-status
                                         common-lisp:null)
                         :accessor
                         %analysis-status-union-runtime-analysis-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-status-union 'make-analysis-status-union))
 (common-lisp:defun make-analysis-status-union
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key src-code-or-db-analysis-status
                     runtime-analysis-status)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-status-union
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-analysis-status))
      (common-lisp:list
       (common-lisp:cons "runtimeAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'src-code-or-db-analysis-status))
      (common-lisp:list
       (common-lisp:cons "srcCodeOrDbAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-status-union))
   common-lisp:nil))
(common-lisp:deftype analysis-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analyzer-name-union common-lisp:nil
                       ((source-code-analyzer-name :initarg
                         :|sourceCodeAnalyzerName| :type
                         (common-lisp:or source-code-analyzer-name
                                         common-lisp:null)
                         :accessor
                         %analyzer-name-union-source-code-analyzer-name
                         :initform common-lisp:nil)
                        (run-time-analyzer-name :initarg :|runTimeAnalyzerName|
                         :type
                         (common-lisp:or run-time-analyzer-name
                                         common-lisp:null)
                         :accessor %analyzer-name-union-run-time-analyzer-name
                         :initform common-lisp:nil)
                        (binary-analyzer-name :initarg :|binaryAnalyzerName|
                         :type
                         (common-lisp:or binary-analyzer-name common-lisp:null)
                         :accessor %analyzer-name-union-binary-analyzer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analyzer-name-union 'make-analyzer-name-union))
 (common-lisp:defun make-analyzer-name-union
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-code-analyzer-name
                     run-time-analyzer-name binary-analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'analyzer-name-union
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "binaryAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-time-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "runTimeAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-analyzer-name))
      (common-lisp:list
       (common-lisp:cons "sourceCodeAnalyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzer-name-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass antipattern-report-result common-lisp:nil
                       ((antipattern-report-status-message :initarg
                         :|antipatternReportStatusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %antipattern-report-result-antipattern-report-status-message
                         :initform common-lisp:nil)
                        (antipattern-report-status :initarg
                         :|antipatternReportStatus| :type
                         (common-lisp:or antipattern-report-status
                                         common-lisp:null)
                         :accessor
                         %antipattern-report-result-antipattern-report-status
                         :initform common-lisp:nil)
                        (anti-pattern-report-s3object :initarg
                         :|antiPatternReportS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %antipattern-report-result-anti-pattern-report-s3object
                         :initform common-lisp:nil)
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or analyzer-name-union common-lisp:null)
                         :accessor %antipattern-report-result-analyzer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'antipattern-report-result
                    'make-antipattern-report-result))
 (common-lisp:defun make-antipattern-report-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key antipattern-report-status-message
                     antipattern-report-status anti-pattern-report-s3object
                     analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'antipattern-report-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-name))
      (common-lisp:list
       (common-lisp:cons "analyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anti-pattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antiPatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-report-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype antipattern-report-result-list ()
   '(trivial-types:proper-list antipattern-report-result))
 (common-lisp:defun |make-antipattern-report-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            antipattern-report-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype antipattern-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass antipattern-severity-summary common-lisp:nil
                       ((severity :initarg :|severity| :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         %antipattern-severity-summary-severity :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %antipattern-severity-summary-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'antipattern-severity-summary
                    'make-antipattern-severity-summary))
 (common-lisp:defun make-antipattern-severity-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity count)
   (common-lisp:apply #'common-lisp:make-instance 'antipattern-severity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antipattern-severity-summary))
   common-lisp:nil))
(common-lisp:deftype app-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass app-unit-error common-lisp:nil
                       ((app-unit-error-category :initarg
                         :|appUnitErrorCategory| :type
                         (common-lisp:or app-unit-error-category
                                         common-lisp:null)
                         :accessor %app-unit-error-app-unit-error-category
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'app-unit-error 'make-app-unit-error))
 (common-lisp:defun make-app-unit-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-unit-error-category)
   (common-lisp:apply #'common-lisp:make-instance 'app-unit-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-unit-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-unit-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-unit-error-category))
      (common-lisp:list
       (common-lisp:cons "appUnitErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-unit-error))
   common-lisp:nil))
(common-lisp:deftype app-unit-error-category () 'common-lisp:string)
(common-lisp:deftype application-component-criteria () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-component-detail common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %application-component-detail-status-message
                         :initform common-lisp:nil)
                        (source-code-repositories :initarg
                         :|sourceCodeRepositories| :type
                         (common-lisp:or source-code-repositories
                                         common-lisp:null)
                         :accessor
                         %application-component-detail-source-code-repositories
                         :initform common-lisp:nil)
                        (runtime-status-message :initarg
                         :|runtimeStatusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %application-component-detail-runtime-status-message
                         :initform common-lisp:nil)
                        (runtime-status :initarg :|runtimeStatus| :type
                         (common-lisp:or runtime-analysis-status
                                         common-lisp:null)
                         :accessor %application-component-detail-runtime-status
                         :initform common-lisp:nil)
                        (result-list :initarg :|resultList| :type
                         (common-lisp:or result-list common-lisp:null)
                         :accessor %application-component-detail-result-list
                         :initform common-lisp:nil)
                        (resource-sub-type :initarg :|resourceSubType| :type
                         (common-lisp:or resource-sub-type common-lisp:null)
                         :accessor
                         %application-component-detail-resource-sub-type
                         :initform common-lisp:nil)
                        (recommendation-set :initarg :|recommendationSet| :type
                         (common-lisp:or recommendation-set common-lisp:null)
                         :accessor
                         %application-component-detail-recommendation-set
                         :initform common-lisp:nil)
                        (os-version :initarg :|osVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-component-detail-os-version :initform
                         common-lisp:nil)
                        (os-driver :initarg :|osDriver| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-component-detail-os-driver :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %application-component-detail-name :initform
                         common-lisp:nil)
                        (more-server-association-exists :initarg
                         :|moreServerAssociationExists| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-component-detail-more-server-association-exists
                         :initform common-lisp:nil)
                        (list-antipattern-severity-summary :initarg
                         :|listAntipatternSeveritySummary| :type
                         (common-lisp:or list-antipattern-severity-summary
                                         common-lisp:null)
                         :accessor
                         %application-component-detail-list-antipattern-severity-summary
                         :initform common-lisp:nil)
                        (last-analyzed-timestamp :initarg
                         :|lastAnalyzedTimestamp| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %application-component-detail-last-analyzed-timestamp
                         :initform common-lisp:nil)
                        (inclusion-status :initarg :|inclusionStatus| :type
                         (common-lisp:or inclusion-status common-lisp:null)
                         :accessor
                         %application-component-detail-inclusion-status
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %application-component-detail-id :initform
                         common-lisp:nil)
                        (database-config-detail :initarg
                         :|databaseConfigDetail| :type
                         (common-lisp:or database-config-detail
                                         common-lisp:null)
                         :accessor
                         %application-component-detail-database-config-detail
                         :initform common-lisp:nil)
                        (associated-server-id :initarg :|associatedServerId|
                         :type (common-lisp:or server-id common-lisp:null)
                         :accessor
                         %application-component-detail-associated-server-id
                         :initform common-lisp:nil)
                        (app-unit-error :initarg :|appUnitError| :type
                         (common-lisp:or app-unit-error common-lisp:null)
                         :accessor %application-component-detail-app-unit-error
                         :initform common-lisp:nil)
                        (app-type :initarg :|appType| :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         %application-component-detail-app-type :initform
                         common-lisp:nil)
                        (antipattern-report-status-message :initarg
                         :|antipatternReportStatusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %application-component-detail-antipattern-report-status-message
                         :initform common-lisp:nil)
                        (antipattern-report-status :initarg
                         :|antipatternReportStatus| :type
                         (common-lisp:or antipattern-report-status
                                         common-lisp:null)
                         :accessor
                         %application-component-detail-antipattern-report-status
                         :initform common-lisp:nil)
                        (antipattern-report-s3object :initarg
                         :|antipatternReportS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %application-component-detail-antipattern-report-s3object
                         :initform common-lisp:nil)
                        (analysis-status :initarg :|analysisStatus| :type
                         (common-lisp:or src-code-or-db-analysis-status
                                         common-lisp:null)
                         :accessor
                         %application-component-detail-analysis-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-component-detail
                    'make-application-component-detail))
 (common-lisp:defun make-application-component-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message source-code-repositories
                     runtime-status-message runtime-status result-list
                     resource-sub-type recommendation-set os-version os-driver
                     name more-server-association-exists
                     list-antipattern-severity-summary last-analyzed-timestamp
                     inclusion-status id database-config-detail
                     associated-server-id app-unit-error app-type
                     antipattern-report-status-message
                     antipattern-report-status antipattern-report-s3object
                     analysis-status)
   (common-lisp:apply #'common-lisp:make-instance 'application-component-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-status))
      (common-lisp:list
       (common-lisp:cons "analysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-unit-error))
      (common-lisp:list
       (common-lisp:cons "appUnitError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-server-id))
      (common-lisp:list
       (common-lisp:cons "associatedServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-config-detail))
      (common-lisp:list
       (common-lisp:cons "databaseConfigDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-status))
      (common-lisp:list
       (common-lisp:cons "inclusionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'more-server-association-exists))
      (common-lisp:list
       (common-lisp:cons "moreServerAssociationExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-driver))
      (common-lisp:list
       (common-lisp:cons "osDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-set))
      (common-lisp:list
       (common-lisp:cons "recommendationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-sub-type))
      (common-lisp:list
       (common-lisp:cons "resourceSubType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-list))
      (common-lisp:list
       (common-lisp:cons "resultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-status))
      (common-lisp:list
       (common-lisp:cons "runtimeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-status-message))
      (common-lisp:list
       (common-lisp:cons "runtimeStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-repositories))
      (common-lisp:list
       (common-lisp:cons "sourceCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-details ()
   '(trivial-types:proper-list application-component-detail))
 (common-lisp:defun |make-application-component-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-component-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-component-status-summary common-lisp:nil
                       ((src-code-or-db-analysis-status :initarg
                         :|srcCodeOrDbAnalysisStatus| :type
                         (common-lisp:or src-code-or-db-analysis-status
                                         common-lisp:null)
                         :accessor
                         %application-component-status-summary-src-code-or-db-analysis-status
                         :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %application-component-status-summary-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-component-status-summary
                    'make-application-component-status-summary))
 (common-lisp:defun make-application-component-status-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key src-code-or-db-analysis-status count)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-component-status-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'src-code-or-db-analysis-status))
      (common-lisp:list
       (common-lisp:cons "srcCodeOrDbAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-strategies ()
   '(trivial-types:proper-list application-component-strategy))
 (common-lisp:defun |make-application-component-strategies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-component-strategy common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or strategy-recommendation
                                         common-lisp:null)
                         :accessor %application-component-strategy-status
                         :initform common-lisp:nil)
                        (recommendation :initarg :|recommendation| :type
                         (common-lisp:or recommendation-set common-lisp:null)
                         :accessor
                         %application-component-strategy-recommendation
                         :initform common-lisp:nil)
                        (is-preferred :initarg :|isPreferred| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-component-strategy-is-preferred :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-component-strategy
                    'make-application-component-strategy))
 (common-lisp:defun make-application-component-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status recommendation is-preferred)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-component-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-strategy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-component-summary common-lisp:nil
                       ((count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %application-component-summary-count :initform
                         common-lisp:nil)
                        (app-type :initarg :|appType| :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         %application-component-summary-app-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-component-summary
                    'make-application-component-summary))
 (common-lisp:defun make-application-component-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count app-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component-summary))
   common-lisp:nil))
(common-lisp:deftype application-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-preferences common-lisp:nil
                       ((management-preference :initarg :|managementPreference|
                         :type
                         (common-lisp:or management-preference
                                         common-lisp:null)
                         :accessor
                         %application-preferences-management-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-preferences 'make-application-preferences))
 (common-lisp:defun make-application-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key management-preference)
   (common-lisp:apply #'common-lisp:make-instance 'application-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-preference))
      (common-lisp:list
       (common-lisp:cons "managementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-preferences))
   common-lisp:nil))
(common-lisp:deftype assessment-status () 'common-lisp:string)
(common-lisp:deftype assessment-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-summary common-lisp:nil
                       ((list-server-summary :initarg :|listServerSummary|
                         :type
                         (common-lisp:or list-server-summary common-lisp:null)
                         :accessor %assessment-summary-list-server-summary
                         :initform common-lisp:nil)
                        (list-server-strategy-summary :initarg
                         :|listServerStrategySummary| :type
                         (common-lisp:or list-strategy-summary
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-list-server-strategy-summary
                         :initform common-lisp:nil)
                        (list-server-status-summary :initarg
                         :|listServerStatusSummary| :type
                         (common-lisp:or list-server-status-summary
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-list-server-status-summary
                         :initform common-lisp:nil)
                        (list-application-component-summary :initarg
                         :|listApplicationComponentSummary| :type
                         (common-lisp:or list-application-component-summary
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-list-application-component-summary
                         :initform common-lisp:nil)
                        (list-application-component-strategy-summary :initarg
                         :|listApplicationComponentStrategySummary| :type
                         (common-lisp:or list-strategy-summary
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-list-application-component-strategy-summary
                         :initform common-lisp:nil)
                        (list-application-component-status-summary :initarg
                         :|listApplicationComponentStatusSummary| :type
                         (common-lisp:or
                          list-application-component-status-summary
                          common-lisp:null)
                         :accessor
                         %assessment-summary-list-application-component-status-summary
                         :initform common-lisp:nil)
                        (list-antipattern-severity-summary :initarg
                         :|listAntipatternSeveritySummary| :type
                         (common-lisp:or list-antipattern-severity-summary
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-list-antipattern-severity-summary
                         :initform common-lisp:nil)
                        (last-analyzed-timestamp :initarg
                         :|lastAnalyzedTimestamp| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %assessment-summary-last-analyzed-timestamp :initform
                         common-lisp:nil)
                        (antipattern-report-status-message :initarg
                         :|antipatternReportStatusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %assessment-summary-antipattern-report-status-message
                         :initform common-lisp:nil)
                        (antipattern-report-status :initarg
                         :|antipatternReportStatus| :type
                         (common-lisp:or antipattern-report-status
                                         common-lisp:null)
                         :accessor
                         %assessment-summary-antipattern-report-status
                         :initform common-lisp:nil)
                        (antipattern-report-s3object :initarg
                         :|antipatternReportS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %assessment-summary-antipattern-report-s3object
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assessment-summary 'make-assessment-summary))
 (common-lisp:defun make-assessment-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-server-summary
                     list-server-strategy-summary list-server-status-summary
                     list-application-component-summary
                     list-application-component-strategy-summary
                     list-application-component-status-summary
                     list-antipattern-severity-summary last-analyzed-timestamp
                     antipattern-report-status-message
                     antipattern-report-status antipattern-report-s3object)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-status-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-application-component-summary))
      (common-lisp:list
       (common-lisp:cons "listApplicationComponentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-server-status-summary))
      (common-lisp:list
       (common-lisp:cons "listServerStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-server-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "listServerStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-server-summary))
      (common-lisp:list
       (common-lisp:cons "listServerSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-target common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or assessment-target-values
                                         common-lisp:null)
                         :accessor %assessment-target-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %assessment-target-name :initform
                         (common-lisp:error ":name is required"))
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         %assessment-target-condition :initform
                         (common-lisp:error ":condition is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-target 'make-assessment-target))
 (common-lisp:defun make-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name condition)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-target-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-assessment-target-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-targets ()
   '(trivial-types:proper-list assessment-target))
 (common-lisp:defun |make-assessment-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associated-application common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associated-application-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associated-application-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associated-application 'make-associated-application))
 (common-lisp:defun make-associated-application
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'associated-application
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-applications ()
   '(trivial-types:proper-list associated-application))
 (common-lisp:defun |make-associated-applications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype associated-server-ids ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-associated-server-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype async-task-id () 'common-lisp:string)
(common-lisp:deftype auth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-managed-resources common-lisp:nil
                       ((target-destination :initarg :|targetDestination| :type
                         (common-lisp:or aws-managed-target-destinations
                                         common-lisp:null)
                         :accessor %aws-managed-resources-target-destination
                         :initform
                         (common-lisp:error
                          ":targetdestination is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-managed-resources 'make-aws-managed-resources))
 (common-lisp:defun make-aws-managed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-destination)
   (common-lisp:apply #'common-lisp:make-instance 'aws-managed-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-managed-resources))
   common-lisp:nil))
(common-lisp:deftype aws-managed-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-managed-target-destinations ()
   '(trivial-types:proper-list aws-managed-target-destination))
 (common-lisp:defun |make-aws-managed-target-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-managed-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype binary-analyzer-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass business-goals common-lisp:nil
                       ((speed-of-migration :initarg :|speedOfMigration| :type
                         (common-lisp:or business-goals-integer
                                         common-lisp:null)
                         :accessor %business-goals-speed-of-migration :initform
                         common-lisp:nil)
                        (reduce-operational-overhead-with-managed-services
                         :initarg
                         :|reduceOperationalOverheadWithManagedServices| :type
                         (common-lisp:or business-goals-integer
                                         common-lisp:null)
                         :accessor
                         %business-goals-reduce-operational-overhead-with-managed-services
                         :initform common-lisp:nil)
                        (modernize-infrastructure-with-cloud-native-technologies
                         :initarg
                         :|modernizeInfrastructureWithCloudNativeTechnologies|
                         :type
                         (common-lisp:or business-goals-integer
                                         common-lisp:null)
                         :accessor
                         %business-goals-modernize-infrastructure-with-cloud-native-technologies
                         :initform common-lisp:nil)
                        (license-cost-reduction :initarg
                         :|licenseCostReduction| :type
                         (common-lisp:or business-goals-integer
                                         common-lisp:null)
                         :accessor %business-goals-license-cost-reduction
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'business-goals 'make-business-goals))
 (common-lisp:defun make-business-goals
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speed-of-migration
                     reduce-operational-overhead-with-managed-services
                     modernize-infrastructure-with-cloud-native-technologies
                     license-cost-reduction)
   (common-lisp:apply #'common-lisp:make-instance 'business-goals
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input business-goals))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input business-goals))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-cost-reduction))
      (common-lisp:list
       (common-lisp:cons "licenseCostReduction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modernize-infrastructure-with-cloud-native-technologies))
      (common-lisp:list
       (common-lisp:cons "modernizeInfrastructureWithCloudNativeTechnologies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reduce-operational-overhead-with-managed-services))
      (common-lisp:list
       (common-lisp:cons "reduceOperationalOverheadWithManagedServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speed-of-migration))
      (common-lisp:list
       (common-lisp:cons "speedOfMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input business-goals))
   common-lisp:nil))
(common-lisp:deftype business-goals-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass collector common-lisp:nil
                       ((registered-time-stamp :initarg :|registeredTimeStamp|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %collector-registered-time-stamp :initform
                         common-lisp:nil)
                        (last-activity-time-stamp :initarg
                         :|lastActivityTimeStamp| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %collector-last-activity-time-stamp :initform
                         common-lisp:nil)
                        (ip-address :initarg :|ipAddress| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %collector-ip-address :initform common-lisp:nil)
                        (host-name :initarg :|hostName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %collector-host-name :initform common-lisp:nil)
                        (configuration-summary :initarg :|configurationSummary|
                         :type
                         (common-lisp:or configuration-summary
                                         common-lisp:null)
                         :accessor %collector-configuration-summary :initform
                         common-lisp:nil)
                        (collector-version :initarg :|collectorVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %collector-collector-version :initform
                         common-lisp:nil)
                        (collector-id :initarg :|collectorId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %collector-collector-id :initform common-lisp:nil)
                        (collector-health :initarg :|collectorHealth| :type
                         (common-lisp:or collector-health common-lisp:null)
                         :accessor %collector-collector-health :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'collector 'make-collector))
 (common-lisp:defun make-collector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registered-time-stamp
                     last-activity-time-stamp ip-address host-name
                     configuration-summary collector-version collector-id
                     collector-health)
   (common-lisp:apply #'common-lisp:make-instance 'collector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-health))
      (common-lisp:list
       (common-lisp:cons "collectorHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-id))
      (common-lisp:list
       (common-lisp:cons "collectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-version))
      (common-lisp:list
       (common-lisp:cons "collectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-summary))
      (common-lisp:list
       (common-lisp:cons "configurationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "hostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-activity-time-stamp))
      (common-lisp:list
       (common-lisp:cons "lastActivityTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-time-stamp))
      (common-lisp:list
       (common-lisp:cons "registeredTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collector))
   common-lisp:nil))
(common-lisp:deftype collector-health () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collectors () '(trivial-types:proper-list collector))
 (common-lisp:defun |make-collectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-summary common-lisp:nil
                       ((version-control-info-list :initarg
                         :|versionControlInfoList| :type
                         (common-lisp:or version-control-info-list
                                         common-lisp:null)
                         :accessor
                         %configuration-summary-version-control-info-list
                         :initform common-lisp:nil)
                        (vcenter-based-remote-info-list :initarg
                         :|vcenterBasedRemoteInfoList| :type
                         (common-lisp:or vcenter-based-remote-info-list
                                         common-lisp:null)
                         :accessor
                         %configuration-summary-vcenter-based-remote-info-list
                         :initform common-lisp:nil)
                        (remote-source-code-analysis-server-info :initarg
                         :|remoteSourceCodeAnalysisServerInfo| :type
                         (common-lisp:or
                          remote-source-code-analysis-server-info
                          common-lisp:null)
                         :accessor
                         %configuration-summary-remote-source-code-analysis-server-info
                         :initform common-lisp:nil)
                        (pipeline-info-list :initarg :|pipelineInfoList| :type
                         (common-lisp:or pipeline-info-list common-lisp:null)
                         :accessor %configuration-summary-pipeline-info-list
                         :initform common-lisp:nil)
                        (ip-address-based-remote-info-list :initarg
                         :|ipAddressBasedRemoteInfoList| :type
                         (common-lisp:or ipaddress-based-remote-info-list
                                         common-lisp:null)
                         :accessor
                         %configuration-summary-ip-address-based-remote-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-summary 'make-configuration-summary))
 (common-lisp:defun make-configuration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-control-info-list
                     vcenter-based-remote-info-list
                     remote-source-code-analysis-server-info pipeline-info-list
                     ip-address-based-remote-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-address-based-remote-info-list))
      (common-lisp:list
       (common-lisp:cons "ipAddressBasedRemoteInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-info-list))
      (common-lisp:list
       (common-lisp:cons "pipelineInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-source-code-analysis-server-info))
      (common-lisp:list
       (common-lisp:cons "remoteSourceCodeAnalysisServerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vcenter-based-remote-info-list))
      (common-lisp:list
       (common-lisp:cons "vcenterBasedRemoteInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-info-list))
      (common-lisp:list
       (common-lisp:cons "versionControlInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass data-collection-details common-lisp:nil
                       ((success :initarg :|success| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %data-collection-details-success :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or assessment-status-message
                                         common-lisp:null)
                         :accessor %data-collection-details-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or assessment-status common-lisp:null)
                         :accessor %data-collection-details-status :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %data-collection-details-start-time :initform
                         common-lisp:nil)
                        (servers :initarg :|servers| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %data-collection-details-servers :initform
                         common-lisp:nil)
                        (in-progress :initarg :|inProgress| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %data-collection-details-in-progress :initform
                         common-lisp:nil)
                        (failed :initarg :|failed| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %data-collection-details-failed :initform
                         common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %data-collection-details-completion-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-collection-details 'make-data-collection-details))
 (common-lisp:defun make-data-collection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key success status-message status start-time
                     servers in-progress failed completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'data-collection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "inProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-collection-details))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass database-config-detail common-lisp:nil
                       ((secret-name :initarg :|secretName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %database-config-detail-secret-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'database-config-detail 'make-database-config-detail))
 (common-lisp:defun make-database-config-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-name)
   (common-lisp:apply #'common-lisp:make-instance 'database-config-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-config-detail))
   common-lisp:nil))
(common-lisp:deftype database-management-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass database-migration-preference common-lisp:nil
                       ((no-preference :initarg :|noPreference| :type
                         (common-lisp:or no-database-migration-preference
                                         common-lisp:null)
                         :accessor %database-migration-preference-no-preference
                         :initform common-lisp:nil)
                        (homogeneous :initarg :|homogeneous| :type
                         (common-lisp:or homogeneous common-lisp:null)
                         :accessor %database-migration-preference-homogeneous
                         :initform common-lisp:nil)
                        (heterogeneous :initarg :|heterogeneous| :type
                         (common-lisp:or heterogeneous common-lisp:null)
                         :accessor %database-migration-preference-heterogeneous
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'database-migration-preference
                    'make-database-migration-preference))
 (common-lisp:defun make-database-migration-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key no-preference homogeneous heterogeneous)
   (common-lisp:apply #'common-lisp:make-instance
                      'database-migration-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heterogeneous))
      (common-lisp:list
       (common-lisp:cons "heterogeneous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'homogeneous))
      (common-lisp:list
       (common-lisp:cons "homogeneous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-preference))
      (common-lisp:list
       (common-lisp:cons "noPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-migration-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-preferences common-lisp:nil
                       ((database-migration-preference :initarg
                         :|databaseMigrationPreference| :type
                         (common-lisp:or database-migration-preference
                                         common-lisp:null)
                         :accessor
                         %database-preferences-database-migration-preference
                         :initform common-lisp:nil)
                        (database-management-preference :initarg
                         :|databaseManagementPreference| :type
                         (common-lisp:or database-management-preference
                                         common-lisp:null)
                         :accessor
                         %database-preferences-database-management-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'database-preferences 'make-database-preferences))
 (common-lisp:defun make-database-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database-migration-preference
                     database-management-preference)
   (common-lisp:apply #'common-lisp:make-instance 'database-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-management-preference))
      (common-lisp:list
       (common-lisp:cons "databaseManagementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-migration-preference))
      (common-lisp:list
       (common-lisp:cons "databaseMigrationPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-exception 'dependency-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-application-component-details-request
                       common-lisp:nil
                       ((application-component-id :initarg
                         :|applicationComponentId| :type
                         (common-lisp:or application-component-id
                                         common-lisp:null)
                         :accessor
                         %get-application-component-details-request-application-component-id
                         :initform
                         (common-lisp:error
                          ":applicationcomponentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-component-details-request
                    'make-get-application-component-details-request))
 (common-lisp:defun make-get-application-component-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-component-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-component-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-component-details-response
                       common-lisp:nil
                       ((more-application-resource :initarg
                         :|moreApplicationResource| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-application-component-details-response-more-application-resource
                         :initform common-lisp:nil)
                        (associated-server-ids :initarg :|associatedServerIds|
                         :type
                         (common-lisp:or associated-server-ids
                                         common-lisp:null)
                         :accessor
                         %get-application-component-details-response-associated-server-ids
                         :initform common-lisp:nil)
                        (associated-applications :initarg
                         :|associatedApplications| :type
                         (common-lisp:or associated-applications
                                         common-lisp:null)
                         :accessor
                         %get-application-component-details-response-associated-applications
                         :initform common-lisp:nil)
                        (application-component-detail :initarg
                         :|applicationComponentDetail| :type
                         (common-lisp:or application-component-detail
                                         common-lisp:null)
                         :accessor
                         %get-application-component-details-response-application-component-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-details-response
                    'make-get-application-component-details-response))
 (common-lisp:defun make-get-application-component-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key more-application-resource
                     associated-server-ids associated-applications
                     application-component-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-component-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-detail))
      (common-lisp:list
       (common-lisp:cons "applicationComponentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-applications))
      (common-lisp:list
       (common-lisp:cons "associatedApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-server-ids))
      (common-lisp:list
       (common-lisp:cons "associatedServerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'more-application-resource))
      (common-lisp:list
       (common-lisp:cons "moreApplicationResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-component-strategies-request
                       common-lisp:nil
                       ((application-component-id :initarg
                         :|applicationComponentId| :type
                         (common-lisp:or application-component-id
                                         common-lisp:null)
                         :accessor
                         %get-application-component-strategies-request-application-component-id
                         :initform
                         (common-lisp:error
                          ":applicationcomponentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-component-strategies-request
                    'make-get-application-component-strategies-request))
 (common-lisp:defun make-get-application-component-strategies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-component-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-component-strategies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-component-strategies-response
                       common-lisp:nil
                       ((application-component-strategies :initarg
                         :|applicationComponentStrategies| :type
                         (common-lisp:or application-component-strategies
                                         common-lisp:null)
                         :accessor
                         %get-application-component-strategies-response-application-component-strategies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-application-component-strategies-response
                    'make-get-application-component-strategies-response))
 (common-lisp:defun make-get-application-component-strategies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-component-strategies)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-component-strategies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-strategies))
      (common-lisp:list
       (common-lisp:cons "applicationComponentStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-component-strategies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or async-task-id common-lisp:null)
                         :accessor %get-assessment-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-assessment-request 'make-get-assessment-request))
 (common-lisp:defun make-get-assessment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or async-task-id common-lisp:null)
                         :accessor %get-assessment-response-id :initform
                         common-lisp:nil)
                        (data-collection-details :initarg
                         :|dataCollectionDetails| :type
                         (common-lisp:or data-collection-details
                                         common-lisp:null)
                         :accessor
                         %get-assessment-response-data-collection-details
                         :initform common-lisp:nil)
                        (assessment-targets :initarg :|assessmentTargets| :type
                         (common-lisp:or assessment-targets common-lisp:null)
                         :accessor %get-assessment-response-assessment-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-response 'make-get-assessment-response))
 (common-lisp:defun make-get-assessment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id data-collection-details
                     assessment-targets)
   (common-lisp:apply #'common-lisp:make-instance 'get-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-collection-details))
      (common-lisp:list
       (common-lisp:cons "dataCollectionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-file-task-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-import-file-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-import-file-task-request
                    'make-get-import-file-task-request))
 (common-lisp:defun make-get-import-file-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-import-file-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-file-task-response common-lisp:nil
                       ((status-report-s3key :initarg :|statusReportS3Key|
                         :type (common-lisp:or |importS3Key| common-lisp:null)
                         :accessor
                         %get-import-file-task-response-status-report-s3key
                         :initform common-lisp:nil)
                        (status-report-s3bucket :initarg
                         :|statusReportS3Bucket| :type
                         (common-lisp:or |importS3Bucket| common-lisp:null)
                         :accessor
                         %get-import-file-task-response-status-report-s3bucket
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or import-file-task-status
                                         common-lisp:null)
                         :accessor %get-import-file-task-response-status
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %get-import-file-task-response-start-time :initform
                         common-lisp:nil)
                        (number-of-records-success :initarg
                         :|numberOfRecordsSuccess| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-import-file-task-response-number-of-records-success
                         :initform common-lisp:nil)
                        (number-of-records-failed :initarg
                         :|numberOfRecordsFailed| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-import-file-task-response-number-of-records-failed
                         :initform common-lisp:nil)
                        (input-s3key :initarg :|inputS3Key| :type
                         (common-lisp:or |importS3Key| common-lisp:null)
                         :accessor %get-import-file-task-response-input-s3key
                         :initform common-lisp:nil)
                        (input-s3bucket :initarg :|inputS3Bucket| :type
                         (common-lisp:or |importS3Bucket| common-lisp:null)
                         :accessor
                         %get-import-file-task-response-input-s3bucket
                         :initform common-lisp:nil)
                        (import-name :initarg :|importName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-import-file-task-response-import-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-import-file-task-response-id :initform
                         common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %get-import-file-task-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-import-file-task-response
                    'make-get-import-file-task-response))
 (common-lisp:defun make-get-import-file-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-report-s3key
                     status-report-s3bucket status start-time
                     number-of-records-success number-of-records-failed
                     input-s3key input-s3bucket import-name id completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-import-file-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-name))
      (common-lisp:list
       (common-lisp:cons "importName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3bucket))
      (common-lisp:list
       (common-lisp:cons "inputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3key))
      (common-lisp:list
       (common-lisp:cons "inputS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-failed))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-success))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-report-s3bucket))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-report-s3key))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-latest-assessment-id-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-latest-assessment-id-request
                    'make-get-latest-assessment-id-request))
 (common-lisp:defun make-get-latest-assessment-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-latest-assessment-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-latest-assessment-id-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or async-task-id common-lisp:null)
                         :accessor %get-latest-assessment-id-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-latest-assessment-id-response
                    'make-get-latest-assessment-id-response))
 (common-lisp:defun make-get-latest-assessment-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-latest-assessment-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-latest-assessment-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portfolio-preferences-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-portfolio-preferences-request
                    'make-get-portfolio-preferences-request))
 (common-lisp:defun make-get-portfolio-preferences-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portfolio-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portfolio-preferences-response common-lisp:nil
                       ((prioritize-business-goals :initarg
                         :|prioritizeBusinessGoals| :type
                         (common-lisp:or prioritize-business-goals
                                         common-lisp:null)
                         :accessor
                         %get-portfolio-preferences-response-prioritize-business-goals
                         :initform common-lisp:nil)
                        (database-preferences :initarg :|databasePreferences|
                         :type
                         (common-lisp:or database-preferences common-lisp:null)
                         :accessor
                         %get-portfolio-preferences-response-database-preferences
                         :initform common-lisp:nil)
                        (application-preferences :initarg
                         :|applicationPreferences| :type
                         (common-lisp:or application-preferences
                                         common-lisp:null)
                         :accessor
                         %get-portfolio-preferences-response-application-preferences
                         :initform common-lisp:nil)
                        (application-mode :initarg :|applicationMode| :type
                         (common-lisp:or application-mode common-lisp:null)
                         :accessor
                         %get-portfolio-preferences-response-application-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-preferences-response
                    'make-get-portfolio-preferences-response))
 (common-lisp:defun make-get-portfolio-preferences-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prioritize-business-goals
                     database-preferences application-preferences
                     application-mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portfolio-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "applicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-preferences))
      (common-lisp:list
       (common-lisp:cons "applicationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-preferences))
      (common-lisp:list
       (common-lisp:cons "databasePreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritize-business-goals))
      (common-lisp:list
       (common-lisp:cons "prioritizeBusinessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portfolio-summary-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-portfolio-summary-request
                    'make-get-portfolio-summary-request))
 (common-lisp:defun make-get-portfolio-summary-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portfolio-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portfolio-summary-response common-lisp:nil
                       ((assessment-summary :initarg :|assessmentSummary| :type
                         (common-lisp:or assessment-summary common-lisp:null)
                         :accessor
                         %get-portfolio-summary-response-assessment-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-portfolio-summary-response
                    'make-get-portfolio-summary-response))
 (common-lisp:defun make-get-portfolio-summary-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-summary)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portfolio-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-summary))
      (common-lisp:list
       (common-lisp:cons "assessmentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portfolio-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendation-report-details-request
                       common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or recommendation-task-id
                                         common-lisp:null)
                         :accessor
                         %get-recommendation-report-details-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-report-details-request
                    'make-get-recommendation-report-details-request))
 (common-lisp:defun make-get-recommendation-report-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-recommendation-report-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendation-report-details-response
                       common-lisp:nil
                       ((recommendation-report-details :initarg
                         :|recommendationReportDetails| :type
                         (common-lisp:or recommendation-report-details
                                         common-lisp:null)
                         :accessor
                         %get-recommendation-report-details-response-recommendation-report-details
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or recommendation-task-id
                                         common-lisp:null)
                         :accessor
                         %get-recommendation-report-details-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-report-details-response
                    'make-get-recommendation-report-details-response))
 (common-lisp:defun make-get-recommendation-report-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendation-report-details id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-recommendation-report-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-report-details))
      (common-lisp:list
       (common-lisp:cons "recommendationReportDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-report-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-details-request common-lisp:nil
                       ((server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %get-server-details-request-server-id :initform
                         (common-lisp:error ":serverid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-server-details-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-result common-lisp:null) :accessor
                         %get-server-details-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-server-details-request
                    'make-get-server-details-request))
 (common-lisp:defun make-get-server-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'get-server-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-details-response common-lisp:nil
                       ((server-detail :initarg :|serverDetail| :type
                         (common-lisp:or server-detail common-lisp:null)
                         :accessor %get-server-details-response-server-detail
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-server-details-response-next-token :initform
                         common-lisp:nil)
                        (associated-applications :initarg
                         :|associatedApplications| :type
                         (common-lisp:or associated-applications
                                         common-lisp:null)
                         :accessor
                         %get-server-details-response-associated-applications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-server-details-response
                    'make-get-server-details-response))
 (common-lisp:defun make-get-server-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-detail next-token
                     associated-applications)
   (common-lisp:apply #'common-lisp:make-instance 'get-server-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-applications))
      (common-lisp:list
       (common-lisp:cons "associatedApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-detail))
      (common-lisp:list
       (common-lisp:cons "serverDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-strategies-request common-lisp:nil
                       ((server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %get-server-strategies-request-server-id :initform
                         (common-lisp:error ":serverid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-server-strategies-request
                    'make-get-server-strategies-request))
 (common-lisp:defun make-get-server-strategies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-server-strategies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-strategies-response common-lisp:nil
                       ((server-strategies :initarg :|serverStrategies| :type
                         (common-lisp:or server-strategies common-lisp:null)
                         :accessor
                         %get-server-strategies-response-server-strategies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-server-strategies-response
                    'make-get-server-strategies-response))
 (common-lisp:defun make-get-server-strategies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-strategies)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-server-strategies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-strategies))
      (common-lisp:list
       (common-lisp:cons "serverStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-strategies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %group-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %group-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defun make-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-ids () '(trivial-types:proper-list group))
 (common-lisp:defun |make-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass heterogeneous common-lisp:nil
                       ((target-database-engine :initarg
                         :|targetDatabaseEngine| :type
                         (common-lisp:or heterogeneous-target-database-engines
                                         common-lisp:null)
                         :accessor %heterogeneous-target-database-engine
                         :initform
                         (common-lisp:error
                          ":targetdatabaseengine is required"))))
 (common-lisp:export (common-lisp:list 'heterogeneous 'make-heterogeneous))
 (common-lisp:defun make-heterogeneous
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-database-engine)
   (common-lisp:apply #'common-lisp:make-instance 'heterogeneous
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heterogeneous))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heterogeneous))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heterogeneous))
   common-lisp:nil))
(common-lisp:deftype heterogeneous-target-database-engine ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype heterogeneous-target-database-engines ()
   '(trivial-types:proper-list heterogeneous-target-database-engine))
 (common-lisp:defun |make-heterogeneous-target-database-engines|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            heterogeneous-target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass homogeneous common-lisp:nil
                       ((target-database-engine :initarg
                         :|targetDatabaseEngine| :type
                         (common-lisp:or homogeneous-target-database-engines
                                         common-lisp:null)
                         :accessor %homogeneous-target-database-engine
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'homogeneous 'make-homogeneous))
 (common-lisp:defun make-homogeneous
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-database-engine)
   (common-lisp:apply #'common-lisp:make-instance 'homogeneous
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input homogeneous))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input homogeneous))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input homogeneous))
   common-lisp:nil))
(common-lisp:deftype homogeneous-target-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype homogeneous-target-database-engines ()
   '(trivial-types:proper-list homogeneous-target-database-engine))
 (common-lisp:defun |make-homogeneous-target-database-engines|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            homogeneous-target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ipaddress-based-remote-info common-lisp:nil
                       ((os-type :initarg :|osType| :type
                         (common-lisp:or ostype common-lisp:null) :accessor
                         %ipaddress-based-remote-info-os-type :initform
                         common-lisp:nil)
                        (ip-address-configuration-time-stamp :initarg
                         :|ipAddressConfigurationTimeStamp| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ipaddress-based-remote-info-ip-address-configuration-time-stamp
                         :initform common-lisp:nil)
                        (auth-type :initarg :|authType| :type
                         (common-lisp:or auth-type common-lisp:null) :accessor
                         %ipaddress-based-remote-info-auth-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ipaddress-based-remote-info
                    'make-ipaddress-based-remote-info))
 (common-lisp:defun make-ipaddress-based-remote-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key os-type
                     ip-address-configuration-time-stamp auth-type)
   (common-lisp:apply #'common-lisp:make-instance 'ipaddress-based-remote-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "authType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-address-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "ipAddressConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "osType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipaddress-based-remote-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipaddress-based-remote-info-list ()
   '(trivial-types:proper-list ipaddress-based-remote-info))
 (common-lisp:defun |make-ipaddress-based-remote-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ipaddress-based-remote-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-file-task-information common-lisp:nil
                       ((status-report-s3key :initarg :|statusReportS3Key|
                         :type (common-lisp:or |importS3Key| common-lisp:null)
                         :accessor
                         %import-file-task-information-status-report-s3key
                         :initform common-lisp:nil)
                        (status-report-s3bucket :initarg
                         :|statusReportS3Bucket| :type
                         (common-lisp:or |importS3Bucket| common-lisp:null)
                         :accessor
                         %import-file-task-information-status-report-s3bucket
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or import-file-task-status
                                         common-lisp:null)
                         :accessor %import-file-task-information-status
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %import-file-task-information-start-time :initform
                         common-lisp:nil)
                        (number-of-records-success :initarg
                         :|numberOfRecordsSuccess| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %import-file-task-information-number-of-records-success
                         :initform common-lisp:nil)
                        (number-of-records-failed :initarg
                         :|numberOfRecordsFailed| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %import-file-task-information-number-of-records-failed
                         :initform common-lisp:nil)
                        (input-s3key :initarg :|inputS3Key| :type
                         (common-lisp:or |importS3Key| common-lisp:null)
                         :accessor %import-file-task-information-input-s3key
                         :initform common-lisp:nil)
                        (input-s3bucket :initarg :|inputS3Bucket| :type
                         (common-lisp:or |importS3Bucket| common-lisp:null)
                         :accessor %import-file-task-information-input-s3bucket
                         :initform common-lisp:nil)
                        (import-name :initarg :|importName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %import-file-task-information-import-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %import-file-task-information-id :initform
                         common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %import-file-task-information-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-file-task-information
                    'make-import-file-task-information))
 (common-lisp:defun make-import-file-task-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-report-s3key
                     status-report-s3bucket status start-time
                     number-of-records-success number-of-records-failed
                     input-s3key input-s3bucket import-name id completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'import-file-task-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-name))
      (common-lisp:list
       (common-lisp:cons "importName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3bucket))
      (common-lisp:list
       (common-lisp:cons "inputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3key))
      (common-lisp:list
       (common-lisp:cons "inputS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-failed))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-success))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-report-s3bucket))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-report-s3key))
      (common-lisp:list
       (common-lisp:cons "statusReportS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-file-task-information))
   common-lisp:nil))
(common-lisp:deftype import-file-task-status () 'common-lisp:string)
(common-lisp:deftype inclusion-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype list-antipattern-severity-summary ()
   '(trivial-types:proper-list antipattern-severity-summary))
 (common-lisp:defun |make-list-antipattern-severity-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            antipattern-severity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-application-component-status-summary ()
   '(trivial-types:proper-list application-component-status-summary))
 (common-lisp:defun |make-list-application-component-status-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-application-component-summary ()
   '(trivial-types:proper-list application-component-summary))
 (common-lisp:defun |make-list-application-component-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-application-components-request common-lisp:nil
                       ((sort :initarg :|sort| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-application-components-request-sort :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-components-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-result common-lisp:null) :accessor
                         %list-application-components-request-max-results
                         :initform common-lisp:nil)
                        (group-id-filter :initarg :|groupIdFilter| :type
                         (common-lisp:or group-ids common-lisp:null) :accessor
                         %list-application-components-request-group-id-filter
                         :initform common-lisp:nil)
                        (filter-value :initarg :|filterValue| :type
                         (common-lisp:or
                          list-application-components-request-filter-value-string
                          common-lisp:null)
                         :accessor
                         %list-application-components-request-filter-value
                         :initform common-lisp:nil)
                        (application-component-criteria :initarg
                         :|applicationComponentCriteria| :type
                         (common-lisp:or application-component-criteria
                                         common-lisp:null)
                         :accessor
                         %list-application-components-request-application-component-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-components-request
                    'make-list-application-components-request))
 (common-lisp:defun make-list-application-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort next-token max-results
                     group-id-filter filter-value
                     application-component-criteria)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-criteria))
      (common-lisp:list
       (common-lisp:cons "applicationComponentCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-value))
      (common-lisp:list
       (common-lisp:cons "filterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-request))
   common-lisp:nil))
(common-lisp:deftype list-application-components-request-filter-value-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-application-components-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-components-response-next-token
                         :initform common-lisp:nil)
                        (application-component-infos :initarg
                         :|applicationComponentInfos| :type
                         (common-lisp:or application-component-details
                                         common-lisp:null)
                         :accessor
                         %list-application-components-response-application-component-infos
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-components-response
                    'make-list-application-components-response))
 (common-lisp:defun make-list-application-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-component-infos)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-infos))
      (common-lisp:list
       (common-lisp:cons "applicationComponentInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collectors-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-collectors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-result common-lisp:null) :accessor
                         %list-collectors-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-collectors-request 'make-list-collectors-request))
 (common-lisp:defun make-list-collectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-collectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collectors-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-collectors-response-next-token :initform
                         common-lisp:nil)
                        (collectors :initarg :collectors :type
                         (common-lisp:or collectors common-lisp:null) :accessor
                         %list-collectors-response-collectors :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-collectors-response 'make-list-collectors-response))
 (common-lisp:defun make-list-collectors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token collectors)
   (common-lisp:apply #'common-lisp:make-instance 'list-collectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collectors))
      (common-lisp:list
       (common-lisp:cons "Collectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-import-file-task-information ()
   '(trivial-types:proper-list import-file-task-information))
 (common-lisp:defun |make-list-import-file-task-information|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-file-task-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-import-file-task-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-import-file-task-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-import-file-task-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-import-file-task-request
                    'make-list-import-file-task-request))
 (common-lisp:defun make-list-import-file-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-import-file-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-import-file-task-response common-lisp:nil
                       ((task-infos :initarg :|taskInfos| :type
                         (common-lisp:or list-import-file-task-information
                                         common-lisp:null)
                         :accessor %list-import-file-task-response-task-infos
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-import-file-task-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-import-file-task-response
                    'make-list-import-file-task-response))
 (common-lisp:defun make-list-import-file-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-infos next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-import-file-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-infos))
      (common-lisp:list
       (common-lisp:cons "taskInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-server-status-summary ()
   '(trivial-types:proper-list server-status-summary))
 (common-lisp:defun |make-list-server-status-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-server-summary ()
   '(trivial-types:proper-list server-summary))
 (common-lisp:defun |make-list-server-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-servers-request common-lisp:nil
                       ((sort :initarg :|sort| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-servers-request-sort :initform common-lisp:nil)
                        (server-criteria :initarg :|serverCriteria| :type
                         (common-lisp:or server-criteria common-lisp:null)
                         :accessor %list-servers-request-server-criteria
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-servers-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-result common-lisp:null) :accessor
                         %list-servers-request-max-results :initform
                         common-lisp:nil)
                        (group-id-filter :initarg :|groupIdFilter| :type
                         (common-lisp:or group-ids common-lisp:null) :accessor
                         %list-servers-request-group-id-filter :initform
                         common-lisp:nil)
                        (filter-value :initarg :|filterValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-servers-request-filter-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-servers-request 'make-list-servers-request))
 (common-lisp:defun make-list-servers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort server-criteria next-token
                     max-results group-id-filter filter-value)
   (common-lisp:apply #'common-lisp:make-instance 'list-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-value))
      (common-lisp:list
       (common-lisp:cons "filterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-criteria))
      (common-lisp:list
       (common-lisp:cons "serverCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-servers-response common-lisp:nil
                       ((server-infos :initarg :|serverInfos| :type
                         (common-lisp:or server-details common-lisp:null)
                         :accessor %list-servers-response-server-infos
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-servers-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-servers-response 'make-list-servers-response))
 (common-lisp:defun make-list-servers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-infos next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-infos))
      (common-lisp:list
       (common-lisp:cons "serverInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-strategy-summary ()
   '(trivial-types:proper-list strategy-summary))
 (common-lisp:defun |make-list-strategy-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list strategy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass management-preference common-lisp:nil
                       ((self-manage-resources :initarg :|selfManageResources|
                         :type
                         (common-lisp:or self-manage-resources
                                         common-lisp:null)
                         :accessor %management-preference-self-manage-resources
                         :initform common-lisp:nil)
                        (no-preference :initarg :|noPreference| :type
                         (common-lisp:or no-management-preference
                                         common-lisp:null)
                         :accessor %management-preference-no-preference
                         :initform common-lisp:nil)
                        (aws-managed-resources :initarg :|awsManagedResources|
                         :type
                         (common-lisp:or aws-managed-resources
                                         common-lisp:null)
                         :accessor %management-preference-aws-managed-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'management-preference 'make-management-preference))
 (common-lisp:defun make-management-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key self-manage-resources no-preference
                     aws-managed-resources)
   (common-lisp:apply #'common-lisp:make-instance 'management-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-managed-resources))
      (common-lisp:list
       (common-lisp:cons "awsManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-preference))
      (common-lisp:list
       (common-lisp:cons "noPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-manage-resources))
      (common-lisp:list
       (common-lisp:cons "selfManageResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          management-preference))
   common-lisp:nil))
(common-lisp:deftype max-result () 'common-lisp:integer)
(common-lisp:deftype net-mask () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-info common-lisp:nil
                       ((net-mask :initarg :|netMask| :type
                         (common-lisp:or net-mask common-lisp:null) :accessor
                         %network-info-net-mask :initform
                         (common-lisp:error ":netmask is required"))
                        (mac-address :initarg :|macAddress| :type
                         (common-lisp:or mac-address common-lisp:null)
                         :accessor %network-info-mac-address :initform
                         (common-lisp:error ":macaddress is required"))
                        (ip-address :initarg :|ipAddress| :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         %network-info-ip-address :initform
                         (common-lisp:error ":ipaddress is required"))
                        (interface-name :initarg :|interfaceName| :type
                         (common-lisp:or interface-name common-lisp:null)
                         :accessor %network-info-interface-name :initform
                         (common-lisp:error ":interfacename is required"))))
 (common-lisp:export (common-lisp:list 'network-info 'make-network-info))
 (common-lisp:defun make-network-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key net-mask mac-address ip-address
                     interface-name)
   (common-lisp:apply #'common-lisp:make-instance 'network-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-name))
      (common-lisp:list
       (common-lisp:cons "interfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-mask))
      (common-lisp:list
       (common-lisp:cons "netMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-info-list ()
   '(trivial-types:proper-list network-info))
 (common-lisp:defun |make-network-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass no-database-migration-preference common-lisp:nil
                       ((target-database-engine :initarg
                         :|targetDatabaseEngine| :type
                         (common-lisp:or target-database-engines
                                         common-lisp:null)
                         :accessor
                         %no-database-migration-preference-target-database-engine
                         :initform
                         (common-lisp:error
                          ":targetdatabaseengine is required"))))
 (common-lisp:export
  (common-lisp:list 'no-database-migration-preference
                    'make-no-database-migration-preference))
 (common-lisp:defun make-no-database-migration-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-database-engine)
   (common-lisp:apply #'common-lisp:make-instance
                      'no-database-migration-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-engine))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          no-database-migration-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass no-management-preference common-lisp:nil
                       ((target-destination :initarg :|targetDestination| :type
                         (common-lisp:or no-preference-target-destinations
                                         common-lisp:null)
                         :accessor %no-management-preference-target-destination
                         :initform
                         (common-lisp:error
                          ":targetdestination is required"))))
 (common-lisp:export
  (common-lisp:list 'no-management-preference 'make-no-management-preference))
 (common-lisp:defun make-no-management-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-destination)
   (common-lisp:apply #'common-lisp:make-instance 'no-management-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          no-management-preference))
   common-lisp:nil))
(common-lisp:deftype no-preference-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype no-preference-target-destinations ()
   '(trivial-types:proper-list no-preference-target-destination))
 (common-lisp:defun |make-no-preference-target-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            no-preference-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass osinfo common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or osversion common-lisp:null) :accessor
                         %osinfo-version :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or ostype common-lisp:null) :accessor
                         %osinfo-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'osinfo 'make-osinfo))
 (common-lisp:defun make-osinfo
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version type)
   (common-lisp:apply #'common-lisp:make-instance 'osinfo
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input osinfo))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input osinfo))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input osinfo))
   common-lisp:nil))
(common-lisp:deftype ostype () 'common-lisp:string)
(common-lisp:deftype osversion () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-info common-lisp:nil
                       ((pipeline-type :initarg :|pipelineType| :type
                         (common-lisp:or pipeline-type common-lisp:null)
                         :accessor %pipeline-info-pipeline-type :initform
                         common-lisp:nil)
                        (pipeline-configuration-time-stamp :initarg
                         :|pipelineConfigurationTimeStamp| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipeline-info-pipeline-configuration-time-stamp
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pipeline-info 'make-pipeline-info))
 (common-lisp:defun make-pipeline-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-type
                     pipeline-configuration-time-stamp)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "pipelineConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-type))
      (common-lisp:list
       (common-lisp:cons "pipelineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-info-list ()
   '(trivial-types:proper-list pipeline-info))
 (common-lisp:defun |make-pipeline-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prioritize-business-goals common-lisp:nil
                       ((business-goals :initarg :|businessGoals| :type
                         (common-lisp:or business-goals common-lisp:null)
                         :accessor %prioritize-business-goals-business-goals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prioritize-business-goals
                    'make-prioritize-business-goals))
 (common-lisp:defun make-prioritize-business-goals
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key business-goals)
   (common-lisp:apply #'common-lisp:make-instance 'prioritize-business-goals
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-goals))
      (common-lisp:list
       (common-lisp:cons "businessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prioritize-business-goals))
   common-lisp:nil))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-portfolio-preferences-request common-lisp:nil
                       ((prioritize-business-goals :initarg
                         :|prioritizeBusinessGoals| :type
                         (common-lisp:or prioritize-business-goals
                                         common-lisp:null)
                         :accessor
                         %put-portfolio-preferences-request-prioritize-business-goals
                         :initform common-lisp:nil)
                        (database-preferences :initarg :|databasePreferences|
                         :type
                         (common-lisp:or database-preferences common-lisp:null)
                         :accessor
                         %put-portfolio-preferences-request-database-preferences
                         :initform common-lisp:nil)
                        (application-preferences :initarg
                         :|applicationPreferences| :type
                         (common-lisp:or application-preferences
                                         common-lisp:null)
                         :accessor
                         %put-portfolio-preferences-request-application-preferences
                         :initform common-lisp:nil)
                        (application-mode :initarg :|applicationMode| :type
                         (common-lisp:or application-mode common-lisp:null)
                         :accessor
                         %put-portfolio-preferences-request-application-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-portfolio-preferences-request
                    'make-put-portfolio-preferences-request))
 (common-lisp:defun make-put-portfolio-preferences-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prioritize-business-goals
                     database-preferences application-preferences
                     application-mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-portfolio-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "applicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-preferences))
      (common-lisp:list
       (common-lisp:cons "applicationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-preferences))
      (common-lisp:list
       (common-lisp:cons "databasePreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritize-business-goals))
      (common-lisp:list
       (common-lisp:cons "prioritizeBusinessGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-portfolio-preferences-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-portfolio-preferences-response
                    'make-put-portfolio-preferences-response))
 (common-lisp:defun make-put-portfolio-preferences-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-portfolio-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-portfolio-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation-report-details common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or recommendation-report-status-message
                                         common-lisp:null)
                         :accessor
                         %recommendation-report-details-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or recommendation-report-status
                                         common-lisp:null)
                         :accessor %recommendation-report-details-status
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or recommendation-report-time-stamp
                                         common-lisp:null)
                         :accessor %recommendation-report-details-start-time
                         :initform common-lisp:nil)
                        (s3keys :initarg :|s3Keys| :type
                         (common-lisp:or s3keys common-lisp:null) :accessor
                         %recommendation-report-details-s3keys :initform
                         common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %recommendation-report-details-s3bucket :initform
                         common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or recommendation-report-time-stamp
                                         common-lisp:null)
                         :accessor
                         %recommendation-report-details-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommendation-report-details
                    'make-recommendation-report-details))
 (common-lisp:defun make-recommendation-report-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status start-time s3keys
                     s3bucket completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'recommendation-report-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3keys))
      (common-lisp:list
       (common-lisp:cons "s3Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-report-details))
   common-lisp:nil))
(common-lisp:deftype recommendation-report-status () 'common-lisp:string)
(common-lisp:deftype recommendation-report-status-message ()
  'common-lisp:string)
(common-lisp:deftype recommendation-report-time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation-set common-lisp:nil
                       ((transformation-tool :initarg :|transformationTool|
                         :type
                         (common-lisp:or transformation-tool common-lisp:null)
                         :accessor %recommendation-set-transformation-tool
                         :initform common-lisp:nil)
                        (target-destination :initarg :|targetDestination| :type
                         (common-lisp:or target-destination common-lisp:null)
                         :accessor %recommendation-set-target-destination
                         :initform common-lisp:nil)
                        (strategy :initarg :|strategy| :type
                         (common-lisp:or strategy common-lisp:null) :accessor
                         %recommendation-set-strategy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommendation-set 'make-recommendation-set))
 (common-lisp:defun make-recommendation-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transformation-tool target-destination
                     strategy)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformation-tool))
      (common-lisp:list
       (common-lisp:cons "transformationTool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-set))
   common-lisp:nil))
(common-lisp:deftype recommendation-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remote-source-code-analysis-server-info common-lisp:nil
                       ((remote-source-code-analysis-server-configuration-timestamp
                         :initarg
                         :|remoteSourceCodeAnalysisServerConfigurationTimestamp|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %remote-source-code-analysis-server-info-remote-source-code-analysis-server-configuration-timestamp
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remote-source-code-analysis-server-info
                    'make-remote-source-code-analysis-server-info))
 (common-lisp:defun make-remote-source-code-analysis-server-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     remote-source-code-analysis-server-configuration-timestamp)
   (common-lisp:apply #'common-lisp:make-instance
                      'remote-source-code-analysis-server-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-source-code-analysis-server-configuration-timestamp))
      (common-lisp:list
       (common-lisp:cons "remoteSourceCodeAnalysisServerConfigurationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remote-source-code-analysis-server-info))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-sub-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass result common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %result-status-message :initform
                         common-lisp:nil)
                        (antipattern-report-result-list :initarg
                         :|antipatternReportResultList| :type
                         (common-lisp:or antipattern-report-result-list
                                         common-lisp:null)
                         :accessor %result-antipattern-report-result-list
                         :initform common-lisp:nil)
                        (analysis-type :initarg :|analysisType| :type
                         (common-lisp:or analysis-type common-lisp:null)
                         :accessor %result-analysis-type :initform
                         common-lisp:nil)
                        (analysis-status :initarg :|analysisStatus| :type
                         (common-lisp:or analysis-status-union
                                         common-lisp:null)
                         :accessor %result-analysis-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defun make-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message
                     antipattern-report-result-list analysis-type
                     analysis-status)
   (common-lisp:apply #'common-lisp:make-instance 'result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-status))
      (common-lisp:list
       (common-lisp:cons "analysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-type))
      (common-lisp:list
       (common-lisp:cons "analysisType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-result-list))
      (common-lisp:list
       (common-lisp:cons "antipatternReportResultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun |make-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype run-time-analyzer-name () 'common-lisp:string)
(common-lisp:deftype run-time-assessment-status () 'common-lisp:string)
(common-lisp:deftype runtime-analysis-status () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-s3keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3object common-lisp:nil
                       ((s3key :initarg :|s3key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3object-s3key :initform common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3object-s3bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defun make-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass self-manage-resources common-lisp:nil
                       ((target-destination :initarg :|targetDestination| :type
                         (common-lisp:or self-manage-target-destinations
                                         common-lisp:null)
                         :accessor %self-manage-resources-target-destination
                         :initform
                         (common-lisp:error
                          ":targetdestination is required"))))
 (common-lisp:export
  (common-lisp:list 'self-manage-resources 'make-self-manage-resources))
 (common-lisp:defun make-self-manage-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-destination)
   (common-lisp:apply #'common-lisp:make-instance 'self-manage-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-manage-resources))
   common-lisp:nil))
(common-lisp:deftype self-manage-target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype self-manage-target-destinations ()
   '(trivial-types:proper-list self-manage-target-destination))
 (common-lisp:defun |make-self-manage-target-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            self-manage-target-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-criteria () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-detail common-lisp:nil
                       ((system-info :initarg :|systemInfo| :type
                         (common-lisp:or system-info common-lisp:null)
                         :accessor %server-detail-system-info :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %server-detail-status-message :initform
                         common-lisp:nil)
                        (server-type :initarg :|serverType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %server-detail-server-type :initform common-lisp:nil)
                        (server-error :initarg :|serverError| :type
                         (common-lisp:or server-error common-lisp:null)
                         :accessor %server-detail-server-error :initform
                         common-lisp:nil)
                        (recommendation-set :initarg :|recommendationSet| :type
                         (common-lisp:or recommendation-set common-lisp:null)
                         :accessor %server-detail-recommendation-set :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %server-detail-name :initform
                         common-lisp:nil)
                        (list-antipattern-severity-summary :initarg
                         :|listAntipatternSeveritySummary| :type
                         (common-lisp:or list-antipattern-severity-summary
                                         common-lisp:null)
                         :accessor
                         %server-detail-list-antipattern-severity-summary
                         :initform common-lisp:nil)
                        (last-analyzed-timestamp :initarg
                         :|lastAnalyzedTimestamp| :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %server-detail-last-analyzed-timestamp :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %server-detail-id :initform common-lisp:nil)
                        (data-collection-status :initarg
                         :|dataCollectionStatus| :type
                         (common-lisp:or run-time-assessment-status
                                         common-lisp:null)
                         :accessor %server-detail-data-collection-status
                         :initform common-lisp:nil)
                        (application-component-strategy-summary :initarg
                         :|applicationComponentStrategySummary| :type
                         (common-lisp:or list-strategy-summary
                                         common-lisp:null)
                         :accessor
                         %server-detail-application-component-strategy-summary
                         :initform common-lisp:nil)
                        (antipattern-report-status-message :initarg
                         :|antipatternReportStatusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %server-detail-antipattern-report-status-message
                         :initform common-lisp:nil)
                        (antipattern-report-status :initarg
                         :|antipatternReportStatus| :type
                         (common-lisp:or antipattern-report-status
                                         common-lisp:null)
                         :accessor %server-detail-antipattern-report-status
                         :initform common-lisp:nil)
                        (antipattern-report-s3object :initarg
                         :|antipatternReportS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %server-detail-antipattern-report-s3object :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server-detail 'make-server-detail))
 (common-lisp:defun make-server-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key system-info status-message server-type
                     server-error recommendation-set name
                     list-antipattern-severity-summary last-analyzed-timestamp
                     id data-collection-status
                     application-component-strategy-summary
                     antipattern-report-status-message
                     antipattern-report-status antipattern-report-s3object)
   (common-lisp:apply #'common-lisp:make-instance 'server-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-s3object))
      (common-lisp:list
       (common-lisp:cons "antipatternReportS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antipattern-report-status-message))
      (common-lisp:list
       (common-lisp:cons "antipatternReportStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-strategy-summary))
      (common-lisp:list
       (common-lisp:cons "applicationComponentStrategySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-collection-status))
      (common-lisp:list
       (common-lisp:cons "dataCollectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-analyzed-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastAnalyzedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-antipattern-severity-summary))
      (common-lisp:list
       (common-lisp:cons "listAntipatternSeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-set))
      (common-lisp:list
       (common-lisp:cons "recommendationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-error))
      (common-lisp:list
       (common-lisp:cons "serverError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-info))
      (common-lisp:list
       (common-lisp:cons "systemInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-details ()
   '(trivial-types:proper-list server-detail))
 (common-lisp:defun |make-server-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-error common-lisp:nil
                       ((server-error-category :initarg :|serverErrorCategory|
                         :type
                         (common-lisp:or server-error-category
                                         common-lisp:null)
                         :accessor %server-error-server-error-category
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server-error 'make-server-error))
 (common-lisp:defun make-server-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-error-category)
   (common-lisp:apply #'common-lisp:make-instance 'server-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-error-category))
      (common-lisp:list
       (common-lisp:cons "serverErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-error))
   common-lisp:nil))
(common-lisp:deftype server-error-category () 'common-lisp:string)
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:deftype server-os-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-status-summary common-lisp:nil
                       ((run-time-assessment-status :initarg
                         :|runTimeAssessmentStatus| :type
                         (common-lisp:or run-time-assessment-status
                                         common-lisp:null)
                         :accessor
                         %server-status-summary-run-time-assessment-status
                         :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %server-status-summary-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-status-summary 'make-server-status-summary))
 (common-lisp:defun make-server-status-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key run-time-assessment-status count)
   (common-lisp:apply #'common-lisp:make-instance 'server-status-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-time-assessment-status))
      (common-lisp:list
       (common-lisp:cons "runTimeAssessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-strategies ()
   '(trivial-types:proper-list server-strategy))
 (common-lisp:defun |make-server-strategies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-strategy common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or strategy-recommendation
                                         common-lisp:null)
                         :accessor %server-strategy-status :initform
                         common-lisp:nil)
                        (recommendation :initarg :|recommendation| :type
                         (common-lisp:or recommendation-set common-lisp:null)
                         :accessor %server-strategy-recommendation :initform
                         common-lisp:nil)
                        (number-of-application-components :initarg
                         :|numberOfApplicationComponents| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %server-strategy-number-of-application-components
                         :initform common-lisp:nil)
                        (is-preferred :initarg :|isPreferred| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %server-strategy-is-preferred :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server-strategy 'make-server-strategy))
 (common-lisp:defun make-server-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status recommendation
                     number-of-application-components is-preferred)
   (common-lisp:apply #'common-lisp:make-instance 'server-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-application-components))
      (common-lisp:list
       (common-lisp:cons "numberOfApplicationComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-strategy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-summary common-lisp:nil
                       ((count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %server-summary-count :initform common-lisp:nil)
                        (server-os-type :initarg :server-os-type :type
                         (common-lisp:or server-os-type common-lisp:null)
                         :accessor %server-summary-server-os-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server-summary 'make-server-summary))
 (common-lisp:defun make-server-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count server-os-type)
   (common-lisp:apply #'common-lisp:make-instance 'server-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-os-type))
      (common-lisp:list
       (common-lisp:cons "ServerOsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-lock-client-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-linked-role-lock-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-linked-role-lock-client-exception
                    'service-linked-role-lock-client-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-code common-lisp:nil
                       ((version-control :initarg :|versionControl| :type
                         (common-lisp:or version-control common-lisp:null)
                         :accessor %source-code-version-control :initform
                         common-lisp:nil)
                        (source-version :initarg :|sourceVersion| :type
                         (common-lisp:or source-version common-lisp:null)
                         :accessor %source-code-source-version :initform
                         common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %source-code-project-name :initform
                         common-lisp:nil)
                        (location :initarg :|location| :type
                         (common-lisp:or location common-lisp:null) :accessor
                         %source-code-location :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source-code 'make-source-code))
 (common-lisp:defun make-source-code
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-control source-version
                     project-name location)
   (common-lisp:apply #'common-lisp:make-instance 'source-code
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-control))
      (common-lisp:list
       (common-lisp:cons "versionControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code))
   common-lisp:nil))
(common-lisp:deftype source-code-analyzer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-code-list ()
   '(trivial-types:proper-list source-code))
 (common-lisp:defun |make-source-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-code-repositories ()
   '(trivial-types:proper-list source-code-repository))
 (common-lisp:defun |make-source-code-repositories|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-code-repository))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-code-repository common-lisp:nil
                       ((version-control-type :initarg :|versionControlType|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %source-code-repository-version-control-type
                         :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-code-repository-repository :initform
                         common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-code-repository-project-name :initform
                         common-lisp:nil)
                        (branch :initarg :|branch| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-code-repository-branch :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-code-repository 'make-source-code-repository))
 (common-lisp:defun make-source-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-control-type repository
                     project-name branch)
   (common-lisp:apply #'common-lisp:make-instance 'source-code-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-type))
      (common-lisp:list
       (common-lisp:cons "versionControlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-code-repository))
   common-lisp:nil))
(common-lisp:deftype source-version () 'common-lisp:string)
(common-lisp:deftype src-code-or-db-analysis-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-assessment-request common-lisp:nil
                       ((s3bucket-for-report-data :initarg
                         :|s3bucketForReportData| :type
                         (common-lisp:or
                          start-assessment-request-s3bucket-for-report-data-string
                          common-lisp:null)
                         :accessor
                         %start-assessment-request-s3bucket-for-report-data
                         :initform common-lisp:nil)
                        (s3bucket-for-analysis-data :initarg
                         :|s3bucketForAnalysisData| :type
                         (common-lisp:or
                          start-assessment-request-s3bucket-for-analysis-data-string
                          common-lisp:null)
                         :accessor
                         %start-assessment-request-s3bucket-for-analysis-data
                         :initform common-lisp:nil)
                        (assessment-targets :initarg :|assessmentTargets| :type
                         (common-lisp:or assessment-targets common-lisp:null)
                         :accessor %start-assessment-request-assessment-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-request 'make-start-assessment-request))
 (common-lisp:defun make-start-assessment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-for-report-data
                     s3bucket-for-analysis-data assessment-targets)
   (common-lisp:apply #'common-lisp:make-instance 'start-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-analysis-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForAnalysisData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-report-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForReportData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-request))
   common-lisp:nil))
(common-lisp:deftype start-assessment-request-s3bucket-for-analysis-data-string
                     ()
  'common-lisp:string)
(common-lisp:deftype start-assessment-request-s3bucket-for-report-data-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-assessment-response common-lisp:nil
                       ((assessment-id :initarg :|assessmentId| :type
                         (common-lisp:or async-task-id common-lisp:null)
                         :accessor %start-assessment-response-assessment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-response
                    'make-start-assessment-response))
 (common-lisp:defun make-start-assessment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-file-task-request common-lisp:nil
                       ((s3key :initarg :|s3key| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-import-file-task-request-s3key :initform
                         (common-lisp:error ":s3key is required"))
                        (s3bucket-for-report-data :initarg
                         :|s3bucketForReportData| :type
                         (common-lisp:or
                          start-import-file-task-request-s3bucket-for-report-data-string
                          common-lisp:null)
                         :accessor
                         %start-import-file-task-request-s3bucket-for-report-data
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or
                          start-import-file-task-request-name-string
                          common-lisp:null)
                         :accessor %start-import-file-task-request-name
                         :initform (common-lisp:error ":name is required"))
                        (group-id :initarg :|groupId| :type
                         (common-lisp:or group-ids common-lisp:null) :accessor
                         %start-import-file-task-request-group-id :initform
                         common-lisp:nil)
                        (data-source-type :initarg :|dataSourceType| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor
                         %start-import-file-task-request-data-source-type
                         :initform common-lisp:nil)
                        (s3bucket :initarg :s3bucket :type
                         (common-lisp:or |importS3Bucket| common-lisp:null)
                         :accessor %start-import-file-task-request-s3bucket
                         :initform
                         (common-lisp:error ":s3bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'start-import-file-task-request
                    'make-start-import-file-task-request))
 (common-lisp:defun make-start-import-file-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket-for-report-data name
                     group-id data-source-type s3bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-import-file-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-type))
      (common-lisp:list
       (common-lisp:cons "dataSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-for-report-data))
      (common-lisp:list
       (common-lisp:cons "s3bucketForReportData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-request))
   common-lisp:nil))
(common-lisp:deftype start-import-file-task-request-name-string ()
  'common-lisp:string)
(common-lisp:deftype start-import-file-task-request-s3bucket-for-report-data-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-import-file-task-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-import-file-task-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-import-file-task-response
                    'make-start-import-file-task-response))
 (common-lisp:defun make-start-import-file-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-import-file-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-file-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-recommendation-report-generation-request
                       common-lisp:nil
                       ((output-format :initarg :|outputFormat| :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         %start-recommendation-report-generation-request-output-format
                         :initform common-lisp:nil)
                        (group-id-filter :initarg :|groupIdFilter| :type
                         (common-lisp:or group-ids common-lisp:null) :accessor
                         %start-recommendation-report-generation-request-group-id-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-recommendation-report-generation-request
                    'make-start-recommendation-report-generation-request))
 (common-lisp:defun make-start-recommendation-report-generation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-format group-id-filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-recommendation-report-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id-filter))
      (common-lisp:list
       (common-lisp:cons "groupIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "outputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-recommendation-report-generation-response
                       common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or recommendation-task-id
                                         common-lisp:null)
                         :accessor
                         %start-recommendation-report-generation-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-recommendation-report-generation-response
                    'make-start-recommendation-report-generation-response))
 (common-lisp:defun make-start-recommendation-report-generation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-recommendation-report-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendation-report-generation-response))
   common-lisp:nil))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-assessment-request common-lisp:nil
                       ((assessment-id :initarg :|assessmentId| :type
                         (common-lisp:or async-task-id common-lisp:null)
                         :accessor %stop-assessment-request-assessment-id
                         :initform
                         (common-lisp:error ":assessmentid is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-assessment-request 'make-stop-assessment-request))
 (common-lisp:defun make-stop-assessment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-assessment-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-assessment-response 'make-stop-assessment-response))
 (common-lisp:defun make-stop-assessment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-response))
   common-lisp:nil))
(common-lisp:deftype strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass strategy-option common-lisp:nil
                       ((tool-name :initarg :|toolName| :type
                         (common-lisp:or transformation-tool-name
                                         common-lisp:null)
                         :accessor %strategy-option-tool-name :initform
                         common-lisp:nil)
                        (target-destination :initarg :|targetDestination| :type
                         (common-lisp:or target-destination common-lisp:null)
                         :accessor %strategy-option-target-destination
                         :initform common-lisp:nil)
                        (strategy :initarg :|strategy| :type
                         (common-lisp:or strategy common-lisp:null) :accessor
                         %strategy-option-strategy :initform common-lisp:nil)
                        (is-preferred :initarg :|isPreferred| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %strategy-option-is-preferred :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'strategy-option 'make-strategy-option))
 (common-lisp:defun make-strategy-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tool-name target-destination strategy
                     is-preferred)
   (common-lisp:apply #'common-lisp:make-instance 'strategy-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input strategy-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input strategy-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-preferred))
      (common-lisp:list
       (common-lisp:cons "isPreferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "targetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tool-name))
      (common-lisp:list
       (common-lisp:cons "toolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input strategy-option))
   common-lisp:nil))
(common-lisp:deftype strategy-recommendation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass strategy-summary common-lisp:nil
                       ((strategy :initarg :|strategy| :type
                         (common-lisp:or strategy common-lisp:null) :accessor
                         %strategy-summary-strategy :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %strategy-summary-count :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'strategy-summary 'make-strategy-summary))
 (common-lisp:defun make-strategy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strategy count)
   (common-lisp:apply #'common-lisp:make-instance 'strategy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input strategy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input strategy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input strategy-summary))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass system-info common-lisp:nil
                       ((os-info :initarg :|osInfo| :type
                         (common-lisp:or osinfo common-lisp:null) :accessor
                         %system-info-os-info :initform common-lisp:nil)
                        (network-info-list :initarg :|networkInfoList| :type
                         (common-lisp:or network-info-list common-lisp:null)
                         :accessor %system-info-network-info-list :initform
                         common-lisp:nil)
                        (file-system-type :initarg :|fileSystemType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %system-info-file-system-type :initform
                         common-lisp:nil)
                        (cpu-architecture :initarg :|cpuArchitecture| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %system-info-cpu-architecture :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'system-info 'make-system-info))
 (common-lisp:defun make-system-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key os-info network-info-list
                     file-system-type cpu-architecture)
   (common-lisp:apply #'common-lisp:make-instance 'system-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-architecture))
      (common-lisp:list
       (common-lisp:cons "cpuArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "fileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-info-list))
      (common-lisp:list
       (common-lisp:cons "networkInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-info))
      (common-lisp:list
       (common-lisp:cons "osInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-info))
   common-lisp:nil))
(common-lisp:deftype target-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-database-engines ()
   '(trivial-types:proper-list target-database-engine))
 (common-lisp:defun |make-target-database-engines|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-database-engine))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype tranformation-tool-description () 'common-lisp:string)
(common-lisp:deftype tranformation-tool-installation-link ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transformation-tool common-lisp:nil
                       ((tranformation-tool-installation-link :initarg
                         :|tranformationToolInstallationLink| :type
                         (common-lisp:or tranformation-tool-installation-link
                                         common-lisp:null)
                         :accessor
                         %transformation-tool-tranformation-tool-installation-link
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or transformation-tool-name
                                         common-lisp:null)
                         :accessor %transformation-tool-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or tranformation-tool-description
                                         common-lisp:null)
                         :accessor %transformation-tool-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transformation-tool 'make-transformation-tool))
 (common-lisp:defun make-transformation-tool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tranformation-tool-installation-link name
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'transformation-tool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transformation-tool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transformation-tool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tranformation-tool-installation-link))
      (common-lisp:list
       (common-lisp:cons "tranformationToolInstallationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transformation-tool))
   common-lisp:nil))
(common-lisp:deftype transformation-tool-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-application-component-config-request
                       common-lisp:nil
                       ((strategy-option :initarg :|strategyOption| :type
                         (common-lisp:or strategy-option common-lisp:null)
                         :accessor
                         %update-application-component-config-request-strategy-option
                         :initform common-lisp:nil)
                        (source-code-list :initarg :|sourceCodeList| :type
                         (common-lisp:or source-code-list common-lisp:null)
                         :accessor
                         %update-application-component-config-request-source-code-list
                         :initform common-lisp:nil)
                        (secrets-manager-key :initarg :|secretsManagerKey|
                         :type
                         (common-lisp:or secrets-manager-key common-lisp:null)
                         :accessor
                         %update-application-component-config-request-secrets-manager-key
                         :initform common-lisp:nil)
                        (inclusion-status :initarg :|inclusionStatus| :type
                         (common-lisp:or inclusion-status common-lisp:null)
                         :accessor
                         %update-application-component-config-request-inclusion-status
                         :initform common-lisp:nil)
                        (configure-only :initarg :|configureOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-application-component-config-request-configure-only
                         :initform common-lisp:nil)
                        (application-component-id :initarg
                         :|applicationComponentId| :type
                         (common-lisp:or application-component-id
                                         common-lisp:null)
                         :accessor
                         %update-application-component-config-request-application-component-id
                         :initform
                         (common-lisp:error
                          ":applicationcomponentid is required"))
                        (app-type :initarg :|appType| :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         %update-application-component-config-request-app-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-application-component-config-request
                    'make-update-application-component-config-request))
 (common-lisp:defun make-update-application-component-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strategy-option source-code-list
                     secrets-manager-key inclusion-status configure-only
                     application-component-id app-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-application-component-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "appType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-id))
      (common-lisp:list
       (common-lisp:cons "applicationComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configure-only))
      (common-lisp:list
       (common-lisp:cons "configureOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-status))
      (common-lisp:list
       (common-lisp:cons "inclusionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets-manager-key))
      (common-lisp:list
       (common-lisp:cons "secretsManagerKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-list))
      (common-lisp:list
       (common-lisp:cons "sourceCodeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy-option))
      (common-lisp:list
       (common-lisp:cons "strategyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-component-config-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-application-component-config-response
                    'make-update-application-component-config-response))
 (common-lisp:defun make-update-application-component-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-application-component-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-component-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-server-config-request common-lisp:nil
                       ((strategy-option :initarg :|strategyOption| :type
                         (common-lisp:or strategy-option common-lisp:null)
                         :accessor
                         %update-server-config-request-strategy-option
                         :initform common-lisp:nil)
                        (server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-server-config-request-server-id :initform
                         (common-lisp:error ":serverid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-server-config-request
                    'make-update-server-config-request))
 (common-lisp:defun make-update-server-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strategy-option server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-server-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy-option))
      (common-lisp:list
       (common-lisp:cons "strategyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-server-config-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-server-config-response
                    'make-update-server-config-response))
 (common-lisp:defun make-update-server-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-server-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (migrationhubstrategy-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass vcenter-based-remote-info common-lisp:nil
                       ((vcenter-configuration-time-stamp :initarg
                         :|vcenterConfigurationTimeStamp| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vcenter-based-remote-info-vcenter-configuration-time-stamp
                         :initform common-lisp:nil)
                        (os-type :initarg :|osType| :type
                         (common-lisp:or ostype common-lisp:null) :accessor
                         %vcenter-based-remote-info-os-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vcenter-based-remote-info
                    'make-vcenter-based-remote-info))
 (common-lisp:defun make-vcenter-based-remote-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vcenter-configuration-time-stamp os-type)
   (common-lisp:apply #'common-lisp:make-instance 'vcenter-based-remote-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "osType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vcenter-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "vcenterConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vcenter-based-remote-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vcenter-based-remote-info-list ()
   '(trivial-types:proper-list vcenter-based-remote-info))
 (common-lisp:defun |make-vcenter-based-remote-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vcenter-based-remote-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass version-control-info common-lisp:nil
                       ((version-control-type :initarg :|versionControlType|
                         :type
                         (common-lisp:or version-control-type common-lisp:null)
                         :accessor %version-control-info-version-control-type
                         :initform common-lisp:nil)
                        (version-control-configuration-time-stamp :initarg
                         :|versionControlConfigurationTimeStamp| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %version-control-info-version-control-configuration-time-stamp
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'version-control-info 'make-version-control-info))
 (common-lisp:defun make-version-control-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-control-type
                     version-control-configuration-time-stamp)
   (common-lisp:apply #'common-lisp:make-instance 'version-control-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-control-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-control-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-configuration-time-stamp))
      (common-lisp:list
       (common-lisp:cons "versionControlConfigurationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-control-type))
      (common-lisp:list
       (common-lisp:cons "versionControlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-control-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype version-control-info-list ()
   '(trivial-types:proper-list version-control-info))
 (common-lisp:defun |make-version-control-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-control-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-control-type () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |importS3Bucket| () 'common-lisp:string)
(common-lisp:deftype |importS3Key| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun get-application-component-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-id)
   (common-lisp:declare (common-lisp:ignorable application-component-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-application-component-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-applicationcomponent-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'application-component-id))))
        "GetApplicationComponentDetails" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-component-details))
(common-lisp:progn
 (common-lisp:defun get-application-component-strategies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-id)
   (common-lisp:declare (common-lisp:ignorable application-component-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-application-component-strategies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-applicationcomponent-strategies/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'application-component-id))))
        "GetApplicationComponentStrategies" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-component-strategies))
(common-lisp:progn
 (common-lisp:defun get-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-assessment/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetAssessment" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment))
(common-lisp:progn
 (common-lisp:defun get-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-import-file-task/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetImportFileTask" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import-file-task))
(common-lisp:progn
 (common-lisp:defun get-latest-assessment-id ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-latest-assessment-id" :protocol
                                :rest-json :operation "GetLatestAssessmentId"
                                :params
                                `(("Action" ,@"GetLatestAssessmentId")
                                  ("Version" ,@"2020-02-19"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-latest-assessment-id))
(common-lisp:progn
 (common-lisp:defun get-portfolio-preferences ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-portfolio-preferences" :protocol
                                :rest-json :operation "GetPortfolioPreferences"
                                :params
                                `(("Action" ,@"GetPortfolioPreferences")
                                  ("Version" ,@"2020-02-19"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-portfolio-preferences))
(common-lisp:progn
 (common-lisp:defun get-portfolio-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'migrationhubstrategy-request :method "GET"
                                :path "/get-portfolio-summary" :protocol
                                :rest-json :operation "GetPortfolioSummary"
                                :params
                                `(("Action" ,@"GetPortfolioSummary")
                                  ("Version" ,@"2020-02-19"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-portfolio-summary))
(common-lisp:progn
 (common-lisp:defun get-recommendation-report-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-recommendation-report-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/get-recommendation-report-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetRecommendationReportDetails" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommendation-report-details))
(common-lisp:progn
 (common-lisp:defun get-server-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-server-details/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'server-id))))
        "GetServerDetails" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-server-details))
(common-lisp:progn
 (common-lisp:defun get-server-strategies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-strategies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/get-server-strategies/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'server-id))))
        "GetServerStrategies" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-server-strategies))
(common-lisp:progn
 (common-lisp:defun list-application-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-component-criteria
                     filter-value group-id-filter max-results next-token sort)
   (common-lisp:declare
    (common-lisp:ignorable application-component-criteria filter-value
     group-id-filter max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-components-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/list-applicationcomponents" "ListApplicationComponents"
        "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-components))
(common-lisp:progn
 (common-lisp:defun list-collectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json "/list-collectors" "ListCollectors" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-collectors))
(common-lisp:progn
 (common-lisp:defun list-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "GET"
        :rest-json "/list-import-file-task" "ListImportFileTask" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-import-file-task))
(common-lisp:progn
 (common-lisp:defun list-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-value group-id-filter max-results
                     next-token server-criteria sort)
   (common-lisp:declare
    (common-lisp:ignorable filter-value group-id-filter max-results next-token
     server-criteria sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/list-servers" "ListServers" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-servers))
(common-lisp:progn
 (common-lisp:defun put-portfolio-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-mode application-preferences
                     database-preferences prioritize-business-goals)
   (common-lisp:declare
    (common-lisp:ignorable application-mode application-preferences
     database-preferences prioritize-business-goals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-portfolio-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/put-portfolio-preferences" "PutPortfolioPreferences"
        "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-portfolio-preferences))
(common-lisp:progn
 (common-lisp:defun start-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-targets
                     s3bucket-for-analysis-data s3bucket-for-report-data)
   (common-lisp:declare
    (common-lisp:ignorable assessment-targets s3bucket-for-analysis-data
     s3bucket-for-report-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/start-assessment" "StartAssessment" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-assessment))
(common-lisp:progn
 (common-lisp:defun start-import-file-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3bucket data-source-type group-id name
                     s3bucket-for-report-data s3key)
   (common-lisp:declare
    (common-lisp:ignorable s3bucket data-source-type group-id name
     s3bucket-for-report-data s3key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-file-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/start-import-file-task" "StartImportFileTask"
        "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import-file-task))
(common-lisp:progn
 (common-lisp:defun start-recommendation-report-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id-filter output-format)
   (common-lisp:declare (common-lisp:ignorable group-id-filter output-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-recommendation-report-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/start-recommendation-report-generation"
        "StartRecommendationReportGeneration" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-recommendation-report-generation))
(common-lisp:progn
 (common-lisp:defun stop-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/stop-assessment" "StopAssessment" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-assessment))
(common-lisp:progn
 (common-lisp:defun update-application-component-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-type application-component-id
                     configure-only inclusion-status secrets-manager-key
                     source-code-list strategy-option)
   (common-lisp:declare
    (common-lisp:ignorable app-type application-component-id configure-only
     inclusion-status secrets-manager-key source-code-list strategy-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-component-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/update-applicationcomponent-config/"
        "UpdateApplicationComponentConfig" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application-component-config))
(common-lisp:progn
 (common-lisp:defun update-server-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id strategy-option)
   (common-lisp:declare (common-lisp:ignorable server-id strategy-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-server-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhubstrategy-request aws-sdk/generator/operation::input "POST"
        :rest-json "/update-server-config/" "UpdateServerConfig" "2020-02-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-server-config))
