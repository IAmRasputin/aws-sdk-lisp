;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lakeformation/api
  (:use)
  (:nicknames #:aws/lakeformation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lakeformation/api)
(common-lisp:progn
 (common-lisp:define-condition lakeformation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lakeformation-error))
(common-lisp:progn
 (common-lisp:defclass lakeformation-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "lakeformation" :api-version
                        "2017-03-31" :host-prefix "lakeformation" :signing-name
                        "lakeformation" :global-host common-lisp:nil))
 (common-lisp:export 'lakeformation-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AlreadyExistsException" . already-exists-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("ExpiredException" . expired-exception)
    ("GlueEncryptionException" . glue-encryption-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("OperationTimeoutException" . operation-timeout-exception)
    ("PermissionTypeMismatchException" . permission-type-mismatch-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ResourceNumberLimitExceededException"
     . resource-number-limit-exceeded-exception)
    ("StatisticsNotReadyYetException" . statistics-not-ready-yet-exception)
    ("ThrottledException" . throttled-exception)
    ("TransactionCanceledException" . transaction-canceled-exception)
    ("TransactionCommitInProgressException"
     . transaction-commit-in-progress-exception)
    ("TransactionCommittedException" . transaction-committed-exception)
    ("WorkUnitsNotReadyYetException" . work-units-not-ready-yet-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-key-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-lftags-to-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-lftags-to-resource-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (lftags (common-lisp:error ":lftags is required") :type
    (common-lisp:or lftags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-lftags-to-resource-request
                    'make-add-lftags-to-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-lftags-to-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-lftags-to-resource-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or lftag-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-lftags-to-resource-response
                    'make-add-lftags-to-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-object-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-object-input-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or uri common-lisp:null))
   (etag (common-lisp:error ":etag is required") :type
    (common-lisp:or etag-string common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or object-size common-lisp:null))
   (partition-values common-lisp:nil :type
    (common-lisp:or partition-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-object-input 'make-add-object-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-object-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-object-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-object-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (all-rows-wildcard (:copier common-lisp:nil)
      (:conc-name "struct-shape-all-rows-wildcard-")))
 (common-lisp:export
  (common-lisp:list 'all-rows-wildcard 'make-all-rows-wildcard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assume-decorated-role-with-samlrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-decorated-role-with-samlrequest-"))
   (samlassertion (common-lisp:error ":samlassertion is required") :type
    (common-lisp:or samlassertion-string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (principal-arn (common-lisp:error ":principal-arn is required") :type
    (common-lisp:or iamsamlprovider-arn common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or credential-timeout-duration-second-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-decorated-role-with-samlrequest
                    'make-assume-decorated-role-with-samlrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlassertion))
      (common-lisp:list
       (common-lisp:cons "SAMLAssertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-decorated-role-with-samlresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-decorated-role-with-samlresponse-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or access-key-id-string common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or secret-access-key-string common-lisp:null))
   (session-token common-lisp:nil :type
    (common-lisp:or session-token-string common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-decorated-role-with-samlresponse
                    'make-assume-decorated-role-with-samlresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-context-"))
   (additional-audit-context common-lisp:nil :type
    (common-lisp:or audit-context-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audit-context 'make-audit-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-audit-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-context))
   common-lisp:nil))
(common-lisp:deftype audit-context-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authorized-session-tag-value-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-authorized-session-tag-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-grant-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-grant-permissions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-permissions-request-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-grant-permissions-request
                    'make-batch-grant-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-grant-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-grant-permissions-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or batch-permissions-failure-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-grant-permissions-response
                    'make-batch-grant-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-permissions-failure-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-permissions-failure-entry-"))
   (request-entry common-lisp:nil :type
    (common-lisp:or batch-permissions-request-entry common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-permissions-failure-entry
                    'make-batch-permissions-failure-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-entry))
      (common-lisp:list
       (common-lisp:cons "RequestEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-permissions-failure-list ()
   '(trivial-types:proper-list batch-permissions-failure-entry))
 (common-lisp:defun make-batch-permissions-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-permissions-failure-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-permissions-request-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-permissions-request-entry-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or identifier common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or resource common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null))
   (permissions-with-grant-option common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-permissions-request-entry
                    'make-batch-permissions-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-permissions-request-entry-list ()
   '(trivial-types:proper-list batch-permissions-request-entry))
 (common-lisp:defun make-batch-permissions-request-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-permissions-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-revoke-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-revoke-permissions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-permissions-request-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-revoke-permissions-request
                    'make-batch-revoke-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-revoke-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-revoke-permissions-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or batch-permissions-failure-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-revoke-permissions-response
                    'make-batch-revoke-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   common-lisp:nil))
(common-lisp:deftype boolean-nullable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-transaction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-transaction-request-"))
   (transaction-id (common-lisp:error ":transaction-id is required") :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-transaction-request
                    'make-cancel-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-transaction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-transaction-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-transaction-response
                    'make-cancel-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   common-lisp:nil))
(common-lisp:deftype catalog-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-resource-")))
 (common-lisp:export
  (common-lisp:list 'catalog-resource 'make-catalog-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-lftag (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-lftag-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (lftags common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-lftag 'make-column-lftag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-lftag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-lftag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-lftag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-lftags-list ()
   '(trivial-types:proper-list column-lftag))
 (common-lisp:defun make-column-lftags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-lftag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-names () '(trivial-types:proper-list name-string))
 (common-lisp:defun make-column-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-wildcard (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-wildcard-"))
   (excluded-column-names common-lisp:nil :type
    (common-lisp:or column-names common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-wildcard 'make-column-wildcard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-wildcard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-column-names))
      (common-lisp:list
       (common-lisp:cons "ExcludedColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (commit-transaction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-commit-transaction-request-"))
   (transaction-id (common-lisp:error ":transaction-id is required") :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (commit-transaction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-commit-transaction-response-"))
   (transaction-status common-lisp:nil :type
    (common-lisp:or transaction-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-response
                    'make-commit-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "TransactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype context-key () 'common-lisp:string)
(common-lisp:deftype context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-cells-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-cells-filter-request-"))
   (table-data (common-lisp:error ":table-data is required") :type
    (common-lisp:or data-cells-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-cells-filter-request
                    'make-create-data-cells-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-data))
      (common-lisp:list
       (common-lisp:cons "TableData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-cells-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-cells-filter-response-")))
 (common-lisp:export
  (common-lisp:list 'create-data-cells-filter-response
                    'make-create-data-cells-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lftag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lftag-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lftag-request 'make-create-lftag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lftag-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lftag-response-")))
 (common-lisp:export
  (common-lisp:list 'create-lftag-response 'make-create-lftag-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lake-formation-identity-center-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-lake-formation-identity-center-configuration-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (instance-arn common-lisp:nil :type
    (common-lisp:or identity-center-instance-arn common-lisp:null))
   (external-filtering common-lisp:nil :type
    (common-lisp:or external-filtering-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'create-lake-formation-identity-center-configuration-request
   'make-create-lake-formation-identity-center-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-filtering))
      (common-lisp:list
       (common-lisp:cons "ExternalFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lake-formation-identity-center-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-lake-formation-identity-center-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or application-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'create-lake-formation-identity-center-configuration-response
   'make-create-lake-formation-identity-center-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-identity-center-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lake-formation-opt-in-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lake-formation-opt-in-request-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lake-formation-opt-in-request
                    'make-create-lake-formation-opt-in-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lake-formation-opt-in-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lake-formation-opt-in-response-")))
 (common-lisp:export
  (common-lisp:list 'create-lake-formation-opt-in-response
                    'make-create-lake-formation-opt-in-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lake-formation-opt-in-response))
   common-lisp:nil))
(common-lisp:deftype credential-timeout-duration-second-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (data-cells-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-cells-filter-"))
   (table-catalog-id (common-lisp:error ":table-catalog-id is required") :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (row-filter common-lisp:nil :type
    (common-lisp:or row-filter common-lisp:null))
   (column-names common-lisp:nil :type
    (common-lisp:or column-names common-lisp:null))
   (column-wildcard common-lisp:nil :type
    (common-lisp:or column-wildcard common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-cells-filter 'make-data-cells-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-cells-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-cells-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-filter))
      (common-lisp:list
       (common-lisp:cons "RowFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-wildcard))
      (common-lisp:list
       (common-lisp:cons "ColumnWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-cells-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-cells-filter-list ()
   '(trivial-types:proper-list data-cells-filter))
 (common-lisp:defun make-data-cells-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-cells-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-cells-filter-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-cells-filter-resource-"))
   (table-catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-cells-filter-resource
                    'make-data-cells-filter-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-lake-principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-lake-principal-"))
   (data-lake-principal-identifier common-lisp:nil :type
    (common-lisp:or data-lake-principal-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-lake-principal 'make-data-lake-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-lake-principal-identifier))
      (common-lisp:list
       (common-lisp:cons "DataLakePrincipalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-principal-list ()
   '(trivial-types:proper-list data-lake-principal))
 (common-lisp:defun make-data-lake-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-lake-principal-string () 'common-lisp:string)
(common-lisp:deftype data-lake-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-lake-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-lake-settings-"))
   (data-lake-admins common-lisp:nil :type
    (common-lisp:or data-lake-principal-list common-lisp:null))
   (read-only-admins common-lisp:nil :type
    (common-lisp:or data-lake-principal-list common-lisp:null))
   (create-database-default-permissions common-lisp:nil :type
    (common-lisp:or principal-permissions-list common-lisp:null))
   (create-table-default-permissions common-lisp:nil :type
    (common-lisp:or principal-permissions-list common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (trusted-resource-owners common-lisp:nil :type
    (common-lisp:or trusted-resource-owners common-lisp:null))
   (allow-external-data-filtering common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (allow-full-table-external-data-access common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (external-data-filtering-allow-list common-lisp:nil :type
    (common-lisp:or data-lake-principal-list common-lisp:null))
   (authorized-session-tag-value-list common-lisp:nil :type
    (common-lisp:or authorized-session-tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-lake-settings 'make-data-lake-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-admins))
      (common-lisp:list
       (common-lisp:cons "DataLakeAdmins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only-admins))
      (common-lisp:list
       (common-lisp:cons "ReadOnlyAdmins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-database-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateDatabaseDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-resource-owners))
      (common-lisp:list
       (common-lisp:cons "TrustedResourceOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-external-data-filtering))
      (common-lisp:list
       (common-lisp:cons "AllowExternalDataFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-full-table-external-data-access))
      (common-lisp:list
       (common-lisp:cons "AllowFullTableExternalDataAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-data-filtering-allow-list))
      (common-lisp:list
       (common-lisp:cons "ExternalDataFilteringAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-session-tag-value-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedSessionTagValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-location-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-location-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-location-resource 'make-data-location-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-lftags-list ()
   '(trivial-types:proper-list tagged-database))
 (common-lisp:defun make-database-lftags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-database))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (database-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-resource 'make-database-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-resource))
   common-lisp:nil))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-cells-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-cells-filter-request-"))
   (table-catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-cells-filter-request
                    'make-delete-data-cells-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-cells-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-cells-filter-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-data-cells-filter-response
                    'make-delete-data-cells-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lftag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lftag-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lftag-request 'make-delete-lftag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lftag-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lftag-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-lftag-response 'make-delete-lftag-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lake-formation-identity-center-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-lake-formation-identity-center-configuration-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'delete-lake-formation-identity-center-configuration-request
   'make-delete-lake-formation-identity-center-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lake-formation-identity-center-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-lake-formation-identity-center-configuration-response-")))
 (common-lisp:export
  (common-lisp:list
   'delete-lake-formation-identity-center-configuration-response
   'make-delete-lake-formation-identity-center-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-identity-center-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lake-formation-opt-in-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lake-formation-opt-in-request-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lake-formation-opt-in-request
                    'make-delete-lake-formation-opt-in-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lake-formation-opt-in-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lake-formation-opt-in-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-lake-formation-opt-in-response
                    'make-delete-lake-formation-opt-in-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lake-formation-opt-in-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-input-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or uri common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag-string common-lisp:null))
   (partition-values common-lisp:nil :type
    (common-lisp:or partition-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-input 'make-delete-object-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-object-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-object-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-object-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-objects-on-cancel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-objects-on-cancel-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (transaction-id (common-lisp:error ":transaction-id is required") :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (objects (common-lisp:error ":objects is required") :type
    (common-lisp:or virtual-object-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-objects-on-cancel-request
                    'make-delete-objects-on-cancel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-objects-on-cancel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-objects-on-cancel-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-objects-on-cancel-response
                    'make-delete-objects-on-cancel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-resource-request
                    'make-deregister-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-resource-response
                    'make-deregister-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lake-formation-identity-center-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-lake-formation-identity-center-configuration-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'describe-lake-formation-identity-center-configuration-request
   'make-describe-lake-formation-identity-center-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lake-formation-identity-center-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-lake-formation-identity-center-configuration-response-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (instance-arn common-lisp:nil :type
    (common-lisp:or identity-center-instance-arn common-lisp:null))
   (application-arn common-lisp:nil :type
    (common-lisp:or application-arn common-lisp:null))
   (external-filtering common-lisp:nil :type
    (common-lisp:or external-filtering-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'describe-lake-formation-identity-center-configuration-response
   'make-describe-lake-formation-identity-center-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-filtering))
      (common-lisp:list
       (common-lisp:cons "ExternalFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lake-formation-identity-center-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-request
                    'make-describe-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-response-"))
   (resource-info common-lisp:nil :type
    (common-lisp:or resource-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-response
                    'make-describe-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-info))
      (common-lisp:list
       (common-lisp:cons "ResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-transaction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-transaction-request-"))
   (transaction-id (common-lisp:error ":transaction-id is required") :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-transaction-request
                    'make-describe-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-transaction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-transaction-response-"))
   (transaction-description common-lisp:nil :type
    (common-lisp:or transaction-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-transaction-response
                    'make-describe-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-description))
      (common-lisp:list
       (common-lisp:cons "TransactionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (details-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-details-map-"))
   (resource-share common-lisp:nil :type
    (common-lisp:or resource-share-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'details-map 'make-details-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input details-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input details-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share))
      (common-lisp:list
       (common-lisp:cons "ResourceShare"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input details-map))
   common-lisp:nil))
(common-lisp:deftype etag-string () 'common-lisp:string)
(common-lisp:deftype enable-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-statistics-"))
   (average-execution-time-millis common-lisp:nil :type
    (common-lisp:or number-of-milliseconds common-lisp:null))
   (data-scanned-bytes common-lisp:nil :type
    (common-lisp:or number-of-bytes common-lisp:null))
   (work-units-executed-count common-lisp:nil :type
    (common-lisp:or number-of-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-statistics 'make-execution-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-execution-time-millis))
      (common-lisp:list
       (common-lisp:cons "AverageExecutionTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-scanned-bytes))
      (common-lisp:list
       (common-lisp:cons "DataScannedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-units-executed-count))
      (common-lisp:list
       (common-lisp:cons "WorkUnitsExecutedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-statistics))
   common-lisp:nil))
(common-lisp:deftype expiration-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-exception 'expired-exception-message)))
(common-lisp:progn
 (common-lisp:deftype expression () '(trivial-types:proper-list lftag))
 (common-lisp:defun make-expression
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (extend-transaction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-extend-transaction-request-"))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'extend-transaction-request
                    'make-extend-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extend-transaction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-extend-transaction-response-")))
 (common-lisp:export
  (common-lisp:list 'extend-transaction-response
                    'make-extend-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (external-filtering-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-filtering-configuration-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or enable-status common-lisp:null))
   (authorized-targets (common-lisp:error ":authorized-targets is required")
    :type (common-lisp:or scope-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-filtering-configuration
                    'make-external-filtering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-filtering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-filtering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-targets))
      (common-lisp:list
       (common-lisp:cons "AuthorizedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-filtering-configuration))
   common-lisp:nil))
(common-lisp:deftype field-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-condition-"))
   (field common-lisp:nil :type
    (common-lisp:or field-name-string common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null))
   (string-value-list common-lisp:nil :type
    (common-lisp:or string-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value-list))
      (common-lisp:list
       (common-lisp:cons "StringValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-condition-list ()
   '(trivial-types:proper-list filter-condition))
 (common-lisp:defun make-filter-condition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-cells-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-cells-filter-request-"))
   (table-catalog-id (common-lisp:error ":table-catalog-id is required") :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-cells-filter-request
                    'make-get-data-cells-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-cells-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-cells-filter-response-"))
   (data-cells-filter common-lisp:nil :type
    (common-lisp:or data-cells-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-cells-filter-response
                    'make-get-data-cells-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filter))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-lake-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-lake-settings-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-settings-request
                    'make-get-data-lake-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-lake-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-lake-settings-response-"))
   (data-lake-settings common-lisp:nil :type
    (common-lisp:or data-lake-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-settings-response
                    'make-get-data-lake-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-settings))
      (common-lisp:list
       (common-lisp:cons "DataLakeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-effective-permissions-for-path-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-effective-permissions-for-path-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-effective-permissions-for-path-request
                    'make-get-effective-permissions-for-path-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-effective-permissions-for-path-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-effective-permissions-for-path-response-"))
   (permissions common-lisp:nil :type
    (common-lisp:or principal-resource-permissions-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-effective-permissions-for-path-response
                    'make-get-effective-permissions-for-path-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lftag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lftag-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lftag-request 'make-get-lftag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lftag-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lftag-response-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key common-lisp:nil :type (common-lisp:or lftag-key common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lftag-response 'make-get-lftag-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lftag-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-state-request-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or get-query-state-request-query-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-state-request 'make-get-query-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   common-lisp:nil))
(common-lisp:deftype get-query-state-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-state-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-state-response-"))
   (error common-lisp:nil :type
    (common-lisp:or error-message-string common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or query-state-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-state-response 'make-get-query-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-statistics-request-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or get-query-statistics-request-query-id-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-statistics-request
                    'make-get-query-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   common-lisp:nil))
(common-lisp:deftype get-query-statistics-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-statistics-response-"))
   (execution-statistics common-lisp:nil :type
    (common-lisp:or execution-statistics common-lisp:null))
   (planning-statistics common-lisp:nil :type
    (common-lisp:or planning-statistics common-lisp:null))
   (query-submission-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-statistics-response
                    'make-get-query-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-statistics))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planning-statistics))
      (common-lisp:list
       (common-lisp:cons "PlanningStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-submission-time))
      (common-lisp:list
       (common-lisp:cons "QuerySubmissionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-lftags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-lftags-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (show-assigned-lftags common-lisp:nil :type
    (common-lisp:or boolean-nullable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-lftags-request
                    'make-get-resource-lftags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-assigned-lftags))
      (common-lisp:list
       (common-lisp:cons "ShowAssignedLFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-lftags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-lftags-response-"))
   (lftag-on-database common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null))
   (lftags-on-table common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null))
   (lftags-on-columns common-lisp:nil :type
    (common-lisp:or column-lftags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-lftags-response
                    'make-get-resource-lftags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-on-database))
      (common-lisp:list
       (common-lisp:cons "LFTagOnDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-table))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-columns))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-objects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-objects-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (query-as-of-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (partition-predicate common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-objects-request
                    'make-get-table-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-objects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-objects-response-"))
   (objects common-lisp:nil :type
    (common-lisp:or partitioned-table-objects-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-objects-response
                    'make-get-table-objects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-temporary-glue-partition-credentials-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-temporary-glue-partition-credentials-request-"))
   (table-arn (common-lisp:error ":table-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (partition (common-lisp:error ":partition is required") :type
    (common-lisp:or partition-value-list common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or credential-timeout-duration-second-integer
                    common-lisp:null))
   (audit-context common-lisp:nil :type
    (common-lisp:or audit-context common-lisp:null))
   (supported-permission-types common-lisp:nil :type
    (common-lisp:or permission-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-partition-credentials-request
                    'make-get-temporary-glue-partition-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "TableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-temporary-glue-partition-credentials-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-temporary-glue-partition-credentials-response-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or access-key-id-string common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or secret-access-key-string common-lisp:null))
   (session-token common-lisp:nil :type
    (common-lisp:or session-token-string common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-partition-credentials-response
                    'make-get-temporary-glue-partition-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-temporary-glue-table-credentials-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-temporary-glue-table-credentials-request-"))
   (table-arn (common-lisp:error ":table-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or credential-timeout-duration-second-integer
                    common-lisp:null))
   (audit-context common-lisp:nil :type
    (common-lisp:or audit-context common-lisp:null))
   (supported-permission-types common-lisp:nil :type
    (common-lisp:or permission-type-list common-lisp:null))
   (s3path common-lisp:nil :type (common-lisp:or path-string common-lisp:null))
   (query-session-context common-lisp:nil :type
    (common-lisp:or query-session-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-table-credentials-request
                    'make-get-temporary-glue-table-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "TableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-session-context))
      (common-lisp:list
       (common-lisp:cons "QuerySessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-temporary-glue-table-credentials-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-temporary-glue-table-credentials-response-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or access-key-id-string common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or secret-access-key-string common-lisp:null))
   (session-token common-lisp:nil :type
    (common-lisp:or session-token-string common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration-timestamp common-lisp:null))
   (vended-s3path common-lisp:nil :type
    (common-lisp:or path-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-table-credentials-response
                    'make-get-temporary-glue-table-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vended-s3path))
      (common-lisp:list
       (common-lisp:cons "VendedS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-work-unit-results-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-work-unit-results-request-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or get-work-unit-results-request-query-id-string
                    common-lisp:null))
   (work-unit-id (common-lisp:error ":work-unit-id is required") :type
    (common-lisp:or get-work-unit-results-request-work-unit-id-long
                    common-lisp:null))
   (work-unit-token (common-lisp:error ":work-unit-token is required") :type
    (common-lisp:or
     synthetic-get-work-unit-results-request-work-unit-token-string
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-work-unit-results-request
                    'make-get-work-unit-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id))
      (common-lisp:list
       (common-lisp:cons "WorkUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-token))
      (common-lisp:list
       (common-lisp:cons "WorkUnitToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   common-lisp:nil))
(common-lisp:deftype get-work-unit-results-request-query-id-string ()
  'common-lisp:string)
(common-lisp:deftype get-work-unit-results-request-work-unit-id-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-work-unit-results-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-work-unit-results-response-"))
   (result-stream common-lisp:nil :type
    (common-lisp:or result-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-work-unit-results-response
                    'make-get-work-unit-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-stream))
      (common-lisp:list
       (common-lisp:cons "ResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'result-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-work-units-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-work-units-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (page-size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or get-work-units-request-query-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-work-units-request 'make-get-work-units-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   common-lisp:nil))
(common-lisp:deftype get-work-units-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-work-units-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-work-units-response-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or query-id-string common-lisp:null))
   (work-unit-ranges (common-lisp:error ":work-unit-ranges is required") :type
    (common-lisp:or work-unit-range-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-work-units-response 'make-get-work-units-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-ranges))
      (common-lisp:list
       (common-lisp:cons "WorkUnitRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition glue-encryption-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       glue-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'glue-encryption-exception
                    'glue-encryption-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (grant-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-grant-permissions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (permissions (common-lisp:error ":permissions is required") :type
    (common-lisp:or permission-list common-lisp:null))
   (permissions-with-grant-option common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grant-permissions-request
                    'make-grant-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grant-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-grant-permissions-response-")))
 (common-lisp:export
  (common-lisp:list 'grant-permissions-response
                    'make-grant-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   common-lisp:nil))
(common-lisp:deftype hash-string () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:deftype iamsamlprovider-arn () 'common-lisp:string)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype identity-center-instance-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lftag (:copier common-lisp:nil) (:conc-name "struct-shape-lftag-"))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lftag 'make-lftag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lftag-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-lftag-error-"))
   (lftag common-lisp:nil :type (common-lisp:or lftag-pair common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lftag-error 'make-lftag-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag))
      (common-lisp:list
       (common-lisp:cons "LFTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lftag-errors () '(trivial-types:proper-list lftag-error))
 (common-lisp:defun make-lftag-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lftag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lftag-key-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-lftag-key-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or name-string common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lftag-key-resource 'make-lftag-key-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lftag-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-lftag-pair-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lftag-pair 'make-lftag-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lftag-policy-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-lftag-policy-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lftag-policy-resource 'make-lftag-policy-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   common-lisp:nil))
(common-lisp:deftype lftag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lftags-list () '(trivial-types:proper-list lftag-pair))
 (common-lisp:defun make-lftags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lake-formation-opt-ins-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-lake-formation-opt-ins-info-"))
   (resource common-lisp:nil :type (common-lisp:or resource common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified-timestamp common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lake-formation-opt-ins-info
                    'make-lake-formation-opt-ins-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-opt-ins-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-opt-ins-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-opt-ins-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-formation-opt-ins-info-list ()
   '(trivial-types:proper-list lake-formation-opt-ins-info))
 (common-lisp:defun make-lake-formation-opt-ins-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lake-formation-opt-ins-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-modified-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-cells-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-cells-filter-request-"))
   (table common-lisp:nil :type
    (common-lisp:or table-resource common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-cells-filter-request
                    'make-list-data-cells-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-cells-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-cells-filter-response-"))
   (data-cells-filters common-lisp:nil :type
    (common-lisp:or data-cells-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-cells-filter-response
                    'make-list-data-cells-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filters))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lftags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lftags-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource-share-type common-lisp:nil :type
    (common-lisp:or resource-share-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lftags-request 'make-list-lftags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lftags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lftags-response-"))
   (lftags common-lisp:nil :type (common-lisp:or lftags-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lftags-response 'make-list-lftags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lftags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lake-formation-opt-ins-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lake-formation-opt-ins-request-"))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or resource common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lake-formation-opt-ins-request
                    'make-list-lake-formation-opt-ins-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lake-formation-opt-ins-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lake-formation-opt-ins-response-"))
   (lake-formation-opt-ins-info-list common-lisp:nil :type
    (common-lisp:or lake-formation-opt-ins-info-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lake-formation-opt-ins-response
                    'make-list-lake-formation-opt-ins-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-opt-ins-info-list))
      (common-lisp:list
       (common-lisp:cons "LakeFormationOptInsInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lake-formation-opt-ins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permissions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or data-lake-resource-type common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or resource common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (include-related common-lisp:nil :type
    (common-lisp:or true-false-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permissions-request 'make-list-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-related))
      (common-lisp:list
       (common-lisp:cons "IncludeRelated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permissions-response-"))
   (principal-resource-permissions common-lisp:nil :type
    (common-lisp:or principal-resource-permissions-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permissions-response
                    'make-list-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-resource-permissions))
      (common-lisp:list
       (common-lisp:cons "PrincipalResourcePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-request-"))
   (filter-condition-list common-lisp:nil :type
    (common-lisp:or filter-condition-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-request 'make-list-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-condition-list))
      (common-lisp:list
       (common-lisp:cons "FilterConditionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-response-"))
   (resource-info-list common-lisp:nil :type
    (common-lisp:or resource-info-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-response 'make-list-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-info-list))
      (common-lisp:list
       (common-lisp:cons "ResourceInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-storage-optimizers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-storage-optimizers-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (storage-optimizer-type common-lisp:nil :type
    (common-lisp:or optimizer-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-storage-optimizers-request
                    'make-list-table-storage-optimizers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-type))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-storage-optimizers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-storage-optimizers-response-"))
   (storage-optimizer-list common-lisp:nil :type
    (common-lisp:or storage-optimizer-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-storage-optimizers-response
                    'make-list-table-storage-optimizers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-list))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transactions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transactions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (status-filter common-lisp:nil :type
    (common-lisp:or transaction-status-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-request
                    'make-list-transactions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transactions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transactions-response-"))
   (transactions common-lisp:nil :type
    (common-lisp:or transaction-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-response
                    'make-list-transactions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transactions))
      (common-lisp:list
       (common-lisp:cons "Transactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   common-lisp:nil))
(common-lisp:deftype message-string () 'common-lisp:string)
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-string () 'common-lisp:string)
(common-lisp:deftype number-of-bytes () 'common-lisp:integer)
(common-lisp:deftype number-of-items () 'common-lisp:integer)
(common-lisp:deftype number-of-milliseconds () 'common-lisp:integer)
(common-lisp:deftype object-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition operation-timeout-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-timeout-exception
                    'operation-timeout-exception-message)))
(common-lisp:deftype optimizer-type () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (partition-objects (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-objects-"))
   (partition-values common-lisp:nil :type
    (common-lisp:or partition-values-list common-lisp:null))
   (objects common-lisp:nil :type
    (common-lisp:or table-object-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partition-objects 'make-partition-objects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-objects))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (partition-value-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-value-list-"))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partition-value-list 'make-partition-value-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-value-list))
   common-lisp:nil))
(common-lisp:deftype partition-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partition-values-list ()
   '(trivial-types:proper-list partition-value-string))
 (common-lisp:defun make-partition-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partitioned-table-objects-list ()
   '(trivial-types:proper-list partition-objects))
 (common-lisp:defun make-partitioned-table-objects-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-objects))
   aws-sdk/generator/shape::members))
(common-lisp:deftype path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-string-list ()
   '(trivial-types:proper-list path-string))
 (common-lisp:defun make-path-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-list ()
   '(trivial-types:proper-list permission))
 (common-lisp:defun make-permission-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-type-list ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun make-permission-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition permission-type-mismatch-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       permission-type-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'permission-type-mismatch-exception
                    'permission-type-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (planning-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-planning-statistics-"))
   (estimated-data-to-scan-bytes common-lisp:nil :type
    (common-lisp:or number-of-bytes common-lisp:null))
   (planning-time-millis common-lisp:nil :type
    (common-lisp:or number-of-milliseconds common-lisp:null))
   (queue-time-millis common-lisp:nil :type
    (common-lisp:or number-of-milliseconds common-lisp:null))
   (work-units-generated-count common-lisp:nil :type
    (common-lisp:or number-of-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'planning-statistics 'make-planning-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input planning-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input planning-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-data-to-scan-bytes))
      (common-lisp:list
       (common-lisp:cons "EstimatedDataToScanBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'planning-time-millis))
      (common-lisp:list
       (common-lisp:cons "PlanningTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-time-millis))
      (common-lisp:list
       (common-lisp:cons "QueueTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-units-generated-count))
      (common-lisp:list
       (common-lisp:cons "WorkUnitsGeneratedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input planning-statistics))
   common-lisp:nil))
(common-lisp:deftype predicate-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (principal-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-permissions-"))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'principal-permissions 'make-principal-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-permissions-list ()
   '(trivial-types:proper-list principal-permissions))
 (common-lisp:defun make-principal-permissions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (principal-resource-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-resource-permissions-"))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or resource common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null))
   (permissions-with-grant-option common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null))
   (additional-details common-lisp:nil :type
    (common-lisp:or details-map common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or last-modified-timestamp common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'principal-resource-permissions
                    'make-principal-resource-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-details))
      (common-lisp:list
       (common-lisp:cons "AdditionalDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-resource-permissions-list ()
   '(trivial-types:proper-list principal-resource-permissions))
 (common-lisp:defun make-principal-resource-permissions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            principal-resource-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-data-lake-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-data-lake-settings-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (data-lake-settings (common-lisp:error ":data-lake-settings is required")
    :type (common-lisp:or data-lake-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-data-lake-settings-request
                    'make-put-data-lake-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-settings))
      (common-lisp:list
       (common-lisp:cons "DataLakeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-data-lake-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-data-lake-settings-response-")))
 (common-lisp:export
  (common-lisp:list 'put-data-lake-settings-response
                    'make-put-data-lake-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   common-lisp:nil))
(common-lisp:deftype query-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-query-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (query-planning-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-planning-context-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or query-planning-context-database-name-string
                    common-lisp:null))
   (query-as-of-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or query-parameter-map common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-planning-context 'make-query-planning-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   common-lisp:nil))
(common-lisp:deftype query-planning-context-database-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-session-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-session-context-"))
   (query-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (query-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (cluster-id common-lisp:nil :type
    (common-lisp:or nullable-string common-lisp:null))
   (query-authorization-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (additional-context common-lisp:nil :type
    (common-lisp:or additional-context-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-session-context 'make-query-session-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-start-time))
      (common-lisp:list
       (common-lisp:cons "QueryStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-authorization-id))
      (common-lisp:list
       (common-lisp:cons "QueryAuthorizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   common-lisp:nil))
(common-lisp:deftype query-state-string () 'common-lisp:string)
(common-lisp:deftype ramresource-share-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (use-service-linked-role common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (with-federation common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (hybrid-access-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-resource-request
                    'make-register-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-service-linked-role))
      (common-lisp:list
       (common-lisp:cons "UseServiceLinkedRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hybrid-access-enabled))
      (common-lisp:list
       (common-lisp:cons "HybridAccessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'register-resource-response
                    'make-register-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-lftags-from-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-lftags-from-resource-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (lftags (common-lisp:error ":lftags is required") :type
    (common-lisp:or lftags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-lftags-from-resource-request
                    'make-remove-lftags-from-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-lftags-from-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-lftags-from-resource-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or lftag-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-lftags-from-resource-response
                    'make-remove-lftags-from-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (catalog common-lisp:nil :type
    (common-lisp:or catalog-resource common-lisp:null))
   (database common-lisp:nil :type
    (common-lisp:or database-resource common-lisp:null))
   (table common-lisp:nil :type
    (common-lisp:or table-resource common-lisp:null))
   (table-with-columns common-lisp:nil :type
    (common-lisp:or table-with-columns-resource common-lisp:null))
   (data-location common-lisp:nil :type
    (common-lisp:or data-location-resource common-lisp:null))
   (data-cells-filter common-lisp:nil :type
    (common-lisp:or data-cells-filter-resource common-lisp:null))
   (lftag common-lisp:nil :type
    (common-lisp:or lftag-key-resource common-lisp:null))
   (lftag-policy common-lisp:nil :type
    (common-lisp:or lftag-policy-resource common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-with-columns))
      (common-lisp:list
       (common-lisp:cons "TableWithColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "DataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filter))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag))
      (common-lisp:list
       (common-lisp:cons "LFTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-policy))
      (common-lisp:list
       (common-lisp:cons "LFTagPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-info-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified-timestamp common-lisp:null))
   (with-federation common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (hybrid-access-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-info 'make-resource-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hybrid-access-enabled))
      (common-lisp:list
       (common-lisp:cons "HybridAccessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-info-list ()
   '(trivial-types:proper-list resource-info))
 (common-lisp:defun make-resource-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-number-limit-exceeded-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-number-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-number-limit-exceeded-exception
                    'resource-number-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resource-share-list ()
   '(trivial-types:proper-list ramresource-share-arn))
 (common-lisp:defun make-resource-share-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ramresource-share-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-share-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result () 'common-lisp:string)
(common-lisp:deftype result-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-permissions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (permissions (common-lisp:error ":permissions is required") :type
    (common-lisp:or permission-list common-lisp:null))
   (permissions-with-grant-option common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-permissions-request
                    'make-revoke-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-permissions-response-")))
 (common-lisp:export
  (common-lisp:list 'revoke-permissions-response
                    'make-revoke-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (row-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-row-filter-"))
   (filter-expression common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null))
   (all-rows-wildcard common-lisp:nil :type
    (common-lisp:or all-rows-wildcard common-lisp:null)))
 (common-lisp:export (common-lisp:list 'row-filter 'make-row-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-rows-wildcard))
      (common-lisp:list
       (common-lisp:cons "AllRowsWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row-filter))
   common-lisp:nil))
(common-lisp:deftype samlassertion-string () 'common-lisp:string)
(common-lisp:deftype scope-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scope-targets ()
   '(trivial-types:proper-list scope-target))
 (common-lisp:defun make-scope-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scope-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-databases-by-lftags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-databases-by-lftags-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-page-size common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-databases-by-lftags-request
                    'make-search-databases-by-lftags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-databases-by-lftags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-databases-by-lftags-response-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (database-list common-lisp:nil :type
    (common-lisp:or database-lftags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-databases-by-lftags-response
                    'make-search-databases-by-lftags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   common-lisp:nil))
(common-lisp:deftype search-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-tables-by-lftags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-tables-by-lftags-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-page-size common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-tables-by-lftags-request
                    'make-search-tables-by-lftags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-tables-by-lftags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-tables-by-lftags-response-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (table-list common-lisp:nil :type
    (common-lisp:or table-lftags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-tables-by-lftags-response
                    'make-search-tables-by-lftags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   common-lisp:nil))
(common-lisp:deftype secret-access-key-string () 'common-lisp:string)
(common-lisp:deftype session-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-planning-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-planning-request-"))
   (query-planning-context
    (common-lisp:error ":query-planning-context is required") :type
    (common-lisp:or query-planning-context common-lisp:null))
   (query-string (common-lisp:error ":query-string is required") :type
    (common-lisp:or synthetic-start-query-planning-request-query-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-planning-request
                    'make-start-query-planning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-context))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-planning-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-planning-response-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or query-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-planning-response
                    'make-start-query-planning-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transaction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transaction-request-"))
   (transaction-type common-lisp:nil :type
    (common-lisp:or transaction-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transaction-request
                    'make-start-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-type))
      (common-lisp:list
       (common-lisp:cons "TransactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transaction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transaction-response-"))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transaction-response
                    'make-start-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition statistics-not-ready-yet-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       statistics-not-ready-yet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'statistics-not-ready-yet-exception
                    'statistics-not-ready-yet-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-optimizer (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-optimizer-"))
   (storage-optimizer-type common-lisp:nil :type
    (common-lisp:or optimizer-type common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or storage-optimizer-config common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null))
   (warnings common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null))
   (last-run-details common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-optimizer 'make-storage-optimizer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-optimizer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-optimizer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-type))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-details))
      (common-lisp:list
       (common-lisp:cons "LastRunDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-optimizer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-config () 'common-lisp:hash-table)
 (common-lisp:defun make-storage-optimizer-config
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype storage-optimizer-config-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-config-map () 'common-lisp:hash-table)
 (common-lisp:defun make-storage-optimizer-config-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype storage-optimizer-config-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-list ()
   '(trivial-types:proper-list storage-optimizer))
 (common-lisp:defun make-storage-optimizer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-optimizer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-value-list ()
   '(trivial-types:proper-list string-value))
 (common-lisp:defun make-string-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-get-work-unit-results-request-work-unit-token-string
                     ()
  'common-lisp:string)
(common-lisp:deftype synthetic-start-query-planning-request-query-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-lftags-list ()
   '(trivial-types:proper-list tagged-table))
 (common-lisp:defun make-table-lftags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-table))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-object-"))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag-string common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or object-size common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-object 'make-table-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-object-list ()
   '(trivial-types:proper-list table-object))
 (common-lisp:defun make-table-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (table-wildcard common-lisp:nil :type
    (common-lisp:or table-wildcard common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-resource 'make-table-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-wildcard))
      (common-lisp:list
       (common-lisp:cons "TableWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-wildcard (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-wildcard-")))
 (common-lisp:export (common-lisp:list 'table-wildcard 'make-table-wildcard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-with-columns-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-with-columns-resource-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (column-names common-lisp:nil :type
    (common-lisp:or column-names common-lisp:null))
   (column-wildcard common-lisp:nil :type
    (common-lisp:or column-wildcard common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-with-columns-resource
                    'make-table-with-columns-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-wildcard))
      (common-lisp:list
       (common-lisp:cons "ColumnWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-value-list ()
   '(trivial-types:proper-list lftag-value))
 (common-lisp:defun make-tag-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tagged-database (:copier common-lisp:nil)
      (:conc-name "struct-shape-tagged-database-"))
   (database common-lisp:nil :type
    (common-lisp:or database-resource common-lisp:null))
   (lftags common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tagged-database 'make-tagged-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tagged-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-tagged-table-"))
   (table common-lisp:nil :type
    (common-lisp:or table-resource common-lisp:null))
   (lftag-on-database common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null))
   (lftags-on-table common-lisp:nil :type
    (common-lisp:or lftags-list common-lisp:null))
   (lftags-on-columns common-lisp:nil :type
    (common-lisp:or column-lftags-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tagged-table 'make-tagged-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-on-database))
      (common-lisp:list
       (common-lisp:cons "LFTagOnDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-table))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-columns))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttled-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttled-exception 'throttled-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition transaction-canceled-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-canceled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-canceled-exception
                    'transaction-canceled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition transaction-commit-in-progress-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-commit-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-commit-in-progress-exception
                    'transaction-commit-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition transaction-committed-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-committed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-committed-exception
                    'transaction-committed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transaction-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-transaction-description-"))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (transaction-status common-lisp:nil :type
    (common-lisp:or transaction-status common-lisp:null))
   (transaction-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (transaction-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transaction-description 'make-transaction-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "TransactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-start-time))
      (common-lisp:list
       (common-lisp:cons "TransactionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-end-time))
      (common-lisp:list
       (common-lisp:cons "TransactionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transaction-description-list ()
   '(trivial-types:proper-list transaction-description))
 (common-lisp:defun make-transaction-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transaction-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transaction-id-string () 'common-lisp:string)
(common-lisp:deftype transaction-status () 'common-lisp:string)
(common-lisp:deftype transaction-status-filter () 'common-lisp:string)
(common-lisp:deftype transaction-type () 'common-lisp:string)
(common-lisp:deftype true-false-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trusted-resource-owners ()
   '(trivial-types:proper-list catalog-id-string))
 (common-lisp:defun make-trusted-resource-owners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-cells-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-cells-filter-request-"))
   (table-data (common-lisp:error ":table-data is required") :type
    (common-lisp:or data-cells-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-cells-filter-request
                    'make-update-data-cells-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-data))
      (common-lisp:list
       (common-lisp:cons "TableData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-cells-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-cells-filter-response-")))
 (common-lisp:export
  (common-lisp:list 'update-data-cells-filter-response
                    'make-update-data-cells-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lftag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lftag-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or lftag-key common-lisp:null))
   (tag-values-to-delete common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null))
   (tag-values-to-add common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lftag-request 'make-update-lftag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-values-to-delete))
      (common-lisp:list
       (common-lisp:cons "TagValuesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values-to-add))
      (common-lisp:list
       (common-lisp:cons "TagValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lftag-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lftag-response-")))
 (common-lisp:export
  (common-lisp:list 'update-lftag-response 'make-update-lftag-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lake-formation-identity-center-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-lake-formation-identity-center-configuration-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (application-status common-lisp:nil :type
    (common-lisp:or application-status common-lisp:null))
   (external-filtering common-lisp:nil :type
    (common-lisp:or external-filtering-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'update-lake-formation-identity-center-configuration-request
   'make-update-lake-formation-identity-center-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-filtering))
      (common-lisp:list
       (common-lisp:cons "ExternalFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lake-formation-identity-center-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-lake-formation-identity-center-configuration-response-")))
 (common-lisp:export
  (common-lisp:list
   'update-lake-formation-identity-center-configuration-response
   'make-update-lake-formation-identity-center-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lake-formation-identity-center-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-request-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (with-federation common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (hybrid-access-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-request 'make-update-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hybrid-access-enabled))
      (common-lisp:list
       (common-lisp:cons "HybridAccessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'update-resource-response 'make-update-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-objects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-objects-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (write-operations (common-lisp:error ":write-operations is required") :type
    (common-lisp:or write-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-objects-request
                    'make-update-table-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-operations))
      (common-lisp:list
       (common-lisp:cons "WriteOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-objects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-objects-response-")))
 (common-lisp:export
  (common-lisp:list 'update-table-objects-response
                    'make-update-table-objects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-storage-optimizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-storage-optimizer-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (storage-optimizer-config
    (common-lisp:error ":storage-optimizer-config is required") :type
    (common-lisp:or storage-optimizer-config-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-storage-optimizer-request
                    'make-update-table-storage-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-config))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-storage-optimizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-storage-optimizer-response-"))
   (result common-lisp:nil :type (common-lisp:or result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-storage-optimizer-response
                    'make-update-table-storage-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   common-lisp:nil))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun make-value-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-object-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or uri common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'virtual-object 'make-virtual-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-object-list ()
   '(trivial-types:proper-list virtual-object))
 (common-lisp:defun make-virtual-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-unit-id-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (work-unit-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-work-unit-range-"))
   (work-unit-id-max (common-lisp:error ":work-unit-id-max is required") :type
    (common-lisp:or work-unit-id-long common-lisp:null))
   (work-unit-id-min (common-lisp:error ":work-unit-id-min is required") :type
    (common-lisp:or work-unit-id-long common-lisp:null))
   (work-unit-token (common-lisp:error ":work-unit-token is required") :type
    (common-lisp:or work-unit-token-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'work-unit-range 'make-work-unit-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-unit-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-unit-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id-max))
      (common-lisp:list
       (common-lisp:cons "WorkUnitIdMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id-min))
      (common-lisp:list
       (common-lisp:cons "WorkUnitIdMin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-token))
      (common-lisp:list
       (common-lisp:cons "WorkUnitToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-unit-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype work-unit-range-list ()
   '(trivial-types:proper-list work-unit-range))
 (common-lisp:defun make-work-unit-range-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-unit-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-unit-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition work-units-not-ready-yet-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       work-units-not-ready-yet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'work-units-not-ready-yet-exception
                    'work-units-not-ready-yet-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (write-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-operation-"))
   (add-object common-lisp:nil :type
    (common-lisp:or add-object-input common-lisp:null))
   (delete-object common-lisp:nil :type
    (common-lisp:or delete-object-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'write-operation 'make-write-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input write-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input write-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-object))
      (common-lisp:list
       (common-lisp:cons "AddObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-object))
      (common-lisp:list
       (common-lisp:cons "DeleteObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input write-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype write-operation-list ()
   '(trivial-types:proper-list write-operation))
 (common-lisp:defun make-write-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list write-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-lftags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource lftags)
   (common-lisp:declare (common-lisp:ignorable catalog-id resource lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-lftags-to-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/AddLFTagsToResource"
                                                        "AddLFTagsToResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-lftags-to-resource))
(common-lisp:progn
 (common-lisp:defun assume-decorated-role-with-saml
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlassertion role-arn principal-arn
                     duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable samlassertion role-arn principal-arn
     duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-decorated-role-with-samlrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/AssumeDecoratedRoleWithSAML"
                                                        "AssumeDecoratedRoleWithSAML"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'assume-decorated-role-with-saml))
(common-lisp:progn
 (common-lisp:defun batch-grant-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id entries)
   (common-lisp:declare (common-lisp:ignorable catalog-id entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-grant-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/BatchGrantPermissions"
                                                        "BatchGrantPermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-grant-permissions))
(common-lisp:progn
 (common-lisp:defun batch-revoke-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id entries)
   (common-lisp:declare (common-lisp:ignorable catalog-id entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-revoke-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/BatchRevokePermissions"
                                                        "BatchRevokePermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-revoke-permissions))
(common-lisp:progn
 (common-lisp:defun cancel-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CancelTransaction"
                                                        "CancelTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-transaction))
(common-lisp:progn
 (common-lisp:defun commit-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-commit-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CommitTransaction"
                                                        "CommitTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'commit-transaction))
(common-lisp:progn
 (common-lisp:defun create-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-data)
   (common-lisp:declare (common-lisp:ignorable table-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateDataCellsFilter"
                                                        "CreateDataCellsFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun create-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key tag-values)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/CreateLFTag"
                                                        "CreateLFTag"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lftag))
(common-lisp:progn
 (common-lisp:defun create-lake-formation-identity-center-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id instance-arn
                     external-filtering)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id instance-arn external-filtering))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-lake-formation-identity-center-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateLakeFormationIdentityCenterConfiguration"
                                                        "CreateLakeFormationIdentityCenterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lake-formation-identity-center-configuration))
(common-lisp:progn
 (common-lisp:defun create-lake-formation-opt-in
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal resource)
   (common-lisp:declare (common-lisp:ignorable principal resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-lake-formation-opt-in-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateLakeFormationOptIn"
                                                        "CreateLakeFormationOptIn"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lake-formation-opt-in))
(common-lisp:progn
 (common-lisp:defun delete-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-catalog-id database-name table-name
                     name)
   (common-lisp:declare
    (common-lisp:ignorable table-catalog-id database-name table-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteDataCellsFilter"
                                                        "DeleteDataCellsFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun delete-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DeleteLFTag"
                                                        "DeleteLFTag"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lftag))
(common-lisp:progn
 (common-lisp:defun delete-lake-formation-identity-center-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-lake-formation-identity-center-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteLakeFormationIdentityCenterConfiguration"
                                                        "DeleteLakeFormationIdentityCenterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lake-formation-identity-center-configuration))
(common-lisp:progn
 (common-lisp:defun delete-lake-formation-opt-in
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal resource)
   (common-lisp:declare (common-lisp:ignorable principal resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-lake-formation-opt-in-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteLakeFormationOptIn"
                                                        "DeleteLakeFormationOptIn"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lake-formation-opt-in))
(common-lisp:progn
 (common-lisp:defun delete-objects-on-cancel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id objects)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     objects))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-objects-on-cancel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteObjectsOnCancel"
                                                        "DeleteObjectsOnCancel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-objects-on-cancel))
(common-lisp:progn
 (common-lisp:defun deregister-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeregisterResource"
                                                        "DeregisterResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-resource))
(common-lisp:progn
 (common-lisp:defun describe-lake-formation-identity-center-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-lake-formation-identity-center-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeLakeFormationIdentityCenterConfiguration"
                                                        "DescribeLakeFormationIdentityCenterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-lake-formation-identity-center-configuration))
(common-lisp:progn
 (common-lisp:defun describe-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeResource"
                                                        "DescribeResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource))
(common-lisp:progn
 (common-lisp:defun describe-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeTransaction"
                                                        "DescribeTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-transaction))
(common-lisp:progn
 (common-lisp:defun extend-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-extend-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ExtendTransaction"
                                                        "ExtendTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'extend-transaction))
(common-lisp:progn
 (common-lisp:defun get-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-catalog-id database-name table-name
                     name)
   (common-lisp:declare
    (common-lisp:ignorable table-catalog-id database-name table-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetDataCellsFilter"
                                                        "GetDataCellsFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun get-data-lake-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-lake-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetDataLakeSettings"
                                                        "GetDataLakeSettings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-lake-settings))
(common-lisp:progn
 (common-lisp:defun get-effective-permissions-for-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-effective-permissions-for-path-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetEffectivePermissionsForPath"
                                                        "GetEffectivePermissionsForPath"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-effective-permissions-for-path))
(common-lisp:progn
 (common-lisp:defun get-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/GetLFTag"
                                                        "GetLFTag"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lftag))
(common-lisp:progn
 (common-lisp:defun get-query-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/GetQueryState"
                                                        "GetQueryState"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-state))
(common-lisp:progn
 (common-lisp:defun get-query-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetQueryStatistics"
                                                        "GetQueryStatistics"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-statistics))
(common-lisp:progn
 (common-lisp:defun get-resource-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource show-assigned-lftags)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource show-assigned-lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetResourceLFTags"
                                                        "GetResourceLFTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-lftags))
(common-lisp:progn
 (common-lisp:defun get-table-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id query-as-of-time partition-predicate
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     query-as-of-time partition-predicate max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetTableObjects"
                                                        "GetTableObjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-objects))
(common-lisp:progn
 (common-lisp:defun get-temporary-glue-partition-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-arn partition permissions
                     duration-seconds audit-context supported-permission-types)
   (common-lisp:declare
    (common-lisp:ignorable table-arn partition permissions duration-seconds
     audit-context supported-permission-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-temporary-glue-partition-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetTemporaryGluePartitionCredentials"
                                                        "GetTemporaryGluePartitionCredentials"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-temporary-glue-partition-credentials))
(common-lisp:progn
 (common-lisp:defun get-temporary-glue-table-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-arn permissions duration-seconds
                     audit-context supported-permission-types s3path
                     query-session-context)
   (common-lisp:declare
    (common-lisp:ignorable table-arn permissions duration-seconds audit-context
     supported-permission-types s3path query-session-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-temporary-glue-table-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetTemporaryGlueTableCredentials"
                                                        "GetTemporaryGlueTableCredentials"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-temporary-glue-table-credentials))
(common-lisp:progn
 (common-lisp:defun get-work-unit-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id work-unit-id work-unit-token)
   (common-lisp:declare
    (common-lisp:ignorable query-id work-unit-id work-unit-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-unit-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetWorkUnitResults"
                                                        "GetWorkUnitResults")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-work-unit-results))
(common-lisp:progn
 (common-lisp:defun get-work-units
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token page-size query-id)
   (common-lisp:declare (common-lisp:ignorable next-token page-size query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-units-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/GetWorkUnits"
                                                        "GetWorkUnits"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-work-units))
(common-lisp:progn
 (common-lisp:defun grant-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource permissions
                     permissions-with-grant-option)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource permissions
     permissions-with-grant-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-grant-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GrantPermissions"
                                                        "GrantPermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'grant-permissions))
(common-lisp:progn
 (common-lisp:defun list-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table next-token max-results)
   (common-lisp:declare (common-lisp:ignorable table next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListDataCellsFilter"
                                                        "ListDataCellsFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun list-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource-share-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource-share-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListLFTags"
                                                        "ListLFTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lftags))
(common-lisp:progn
 (common-lisp:defun list-lake-formation-opt-ins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal resource max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable principal resource max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-lake-formation-opt-ins-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListLakeFormationOptIns"
                                                        "ListLakeFormationOptIns"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lake-formation-opt-ins))
(common-lisp:progn
 (common-lisp:defun list-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource-type
                     resource next-token max-results include-related)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource-type resource
     next-token max-results include-related))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListPermissions"
                                                        "ListPermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-permissions))
(common-lisp:progn
 (common-lisp:defun list-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-condition-list max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-condition-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListResources"
                                                        "ListResources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resources))
(common-lisp:progn
 (common-lisp:defun list-table-storage-optimizers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     storage-optimizer-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     storage-optimizer-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-table-storage-optimizers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListTableStorageOptimizers"
                                                        "ListTableStorageOptimizers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-storage-optimizers))
(common-lisp:progn
 (common-lisp:defun list-transactions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id status-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id status-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transactions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListTransactions"
                                                        "ListTransactions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transactions))
(common-lisp:progn
 (common-lisp:defun put-data-lake-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id data-lake-settings)
   (common-lisp:declare (common-lisp:ignorable catalog-id data-lake-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-data-lake-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutDataLakeSettings"
                                                        "PutDataLakeSettings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-data-lake-settings))
(common-lisp:progn
 (common-lisp:defun register-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn use-service-linked-role
                     role-arn with-federation hybrid-access-enabled)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn use-service-linked-role role-arn
     with-federation hybrid-access-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RegisterResource"
                                                        "RegisterResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-resource))
(common-lisp:progn
 (common-lisp:defun remove-lftags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource lftags)
   (common-lisp:declare (common-lisp:ignorable catalog-id resource lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-lftags-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RemoveLFTagsFromResource"
                                                        "RemoveLFTagsFromResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-lftags-from-resource))
(common-lisp:progn
 (common-lisp:defun revoke-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource permissions
                     permissions-with-grant-option)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource permissions
     permissions-with-grant-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RevokePermissions"
                                                        "RevokePermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-permissions))
(common-lisp:progn
 (common-lisp:defun search-databases-by-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results catalog-id
                     expression)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results catalog-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-databases-by-lftags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/SearchDatabasesByLFTags"
                                                        "SearchDatabasesByLFTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-databases-by-lftags))
(common-lisp:progn
 (common-lisp:defun search-tables-by-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results catalog-id
                     expression)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results catalog-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-tables-by-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/SearchTablesByLFTags"
                                                        "SearchTablesByLFTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-tables-by-lftags))
(common-lisp:progn
 (common-lisp:defun start-query-planning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-planning-context query-string)
   (common-lisp:declare
    (common-lisp:ignorable query-planning-context query-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-planning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartQueryPlanning"
                                                        "StartQueryPlanning"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-query-planning))
(common-lisp:progn
 (common-lisp:defun start-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-type)
   (common-lisp:declare (common-lisp:ignorable transaction-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartTransaction"
                                                        "StartTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-transaction))
(common-lisp:progn
 (common-lisp:defun update-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-data)
   (common-lisp:declare (common-lisp:ignorable table-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateDataCellsFilter"
                                                        "UpdateDataCellsFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun update-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key tag-values-to-delete
                     tag-values-to-add)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id tag-key tag-values-to-delete
     tag-values-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/UpdateLFTag"
                                                        "UpdateLFTag"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lftag))
(common-lisp:progn
 (common-lisp:defun update-lake-formation-identity-center-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id application-status
                     external-filtering)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id application-status external-filtering))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-lake-formation-identity-center-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateLakeFormationIdentityCenterConfiguration"
                                                        "UpdateLakeFormationIdentityCenterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lake-formation-identity-center-configuration))
(common-lisp:progn
 (common-lisp:defun update-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn resource-arn with-federation
                     hybrid-access-enabled)
   (common-lisp:declare
    (common-lisp:ignorable role-arn resource-arn with-federation
     hybrid-access-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateResource"
                                                        "UpdateResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource))
(common-lisp:progn
 (common-lisp:defun update-table-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id write-operations)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     write-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateTableObjects"
                                                        "UpdateTableObjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-table-objects))
(common-lisp:progn
 (common-lisp:defun update-table-storage-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     storage-optimizer-config)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     storage-optimizer-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-table-storage-optimizer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateTableStorageOptimizer"
                                                        "UpdateTableStorageOptimizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-table-storage-optimizer))
