;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lakeformation/api
  (:use)
  (:nicknames #:aws/lakeformation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lakeformation/api)
(common-lisp:progn
 (common-lisp:defclass lakeformation-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lakeformation" :protocol
                        :rest-json))
 (common-lisp:export 'lakeformation-request))
(common-lisp:progn
 (common-lisp:define-condition lakeformation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lakeformation-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AlreadyExistsException" . already-exists-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("ExpiredException" . expired-exception)
    ("GlueEncryptionException" . glue-encryption-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("OperationTimeoutException" . operation-timeout-exception)
    ("PermissionTypeMismatchException" . permission-type-mismatch-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ResourceNumberLimitExceededException"
     . resource-number-limit-exceeded-exception)
    ("StatisticsNotReadyYetException" . statistics-not-ready-yet-exception)
    ("ThrottledException" . throttled-exception)
    ("TransactionCanceledException" . transaction-canceled-exception)
    ("TransactionCommitInProgressException"
     . transaction-commit-in-progress-exception)
    ("TransactionCommittedException" . transaction-committed-exception)
    ("WorkUnitsNotReadyYetException" . work-units-not-ready-yet-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-key-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-lftags-to-resource-request common-lisp:nil
                       ((lftags :initarg :lftags :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %add-lftags-to-resource-request-lftags
                         :initform (common-lisp:error ":lftags is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %add-lftags-to-resource-request-resource :initform
                         (common-lisp:error ":resource is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %add-lftags-to-resource-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-lftags-to-resource-request
                    'make-add-lftags-to-resource-request))
 (common-lisp:defun make-add-lftags-to-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags resource catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-lftags-to-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-lftags-to-resource-response common-lisp:nil
                       ((failures :initarg :failures :type
                         (common-lisp:or lftag-errors common-lisp:null)
                         :accessor %add-lftags-to-resource-response-failures
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-lftags-to-resource-response
                    'make-add-lftags-to-resource-response))
 (common-lisp:defun make-add-lftags-to-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-lftags-to-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-lftags-to-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-object-input common-lisp:nil
                       ((partition-values :initarg :partition-values :type
                         (common-lisp:or partition-values-list
                                         common-lisp:null)
                         :accessor %add-object-input-partition-values :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or object-size common-lisp:null)
                         :accessor %add-object-input-size :initform
                         (common-lisp:error ":size is required"))
                        (etag :initarg :etag :type
                         (common-lisp:or etag-string common-lisp:null)
                         :accessor %add-object-input-etag :initform
                         (common-lisp:error ":etag is required"))
                        (uri :initarg :uri :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %add-object-input-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export
  (common-lisp:list 'add-object-input 'make-add-object-input))
 (common-lisp:defun make-add-object-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partition-values size etag uri)
   (common-lisp:apply #'common-lisp:make-instance 'add-object-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-object-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-object-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-object-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass all-rows-wildcard common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'all-rows-wildcard 'make-all-rows-wildcard))
 (common-lisp:defun make-all-rows-wildcard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'all-rows-wildcard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input all-rows-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass assume-decorated-role-with-samlrequest common-lisp:nil
                       ((duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or
                          credential-timeout-duration-second-integer
                          common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlrequest-duration-seconds
                         :initform common-lisp:nil)
                        (principal-arn :initarg :principal-arn :type
                         (common-lisp:or iamsamlprovider-arn common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlrequest-principal-arn
                         :initform
                         (common-lisp:error ":principal-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlrequest-role-arn
                         :initform (common-lisp:error ":role-arn is required"))
                        (samlassertion :initarg :samlassertion :type
                         (common-lisp:or samlassertion-string common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlrequest-samlassertion
                         :initform
                         (common-lisp:error ":samlassertion is required"))))
 (common-lisp:export
  (common-lisp:list 'assume-decorated-role-with-samlrequest
                    'make-assume-decorated-role-with-samlrequest))
 (common-lisp:defun make-assume-decorated-role-with-samlrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-seconds principal-arn role-arn
                     samlassertion)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-decorated-role-with-samlrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlassertion))
      (common-lisp:list
       (common-lisp:cons "SAMLAssertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-decorated-role-with-samlresponse common-lisp:nil
                       ((expiration :initarg :expiration :type
                         (common-lisp:or expiration-timestamp common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlresponse-expiration
                         :initform common-lisp:nil)
                        (session-token :initarg :session-token :type
                         (common-lisp:or session-token-string common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlresponse-session-token
                         :initform common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key :type
                         (common-lisp:or secret-access-key-string
                                         common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlresponse-secret-access-key
                         :initform common-lisp:nil)
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or access-key-id-string common-lisp:null)
                         :accessor
                         %assume-decorated-role-with-samlresponse-access-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assume-decorated-role-with-samlresponse
                    'make-assume-decorated-role-with-samlresponse))
 (common-lisp:defun make-assume-decorated-role-with-samlresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration session-token
                     secret-access-key access-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-decorated-role-with-samlresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-decorated-role-with-samlresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audit-context common-lisp:nil
                       ((additional-audit-context :initarg
                         :additional-audit-context :type
                         (common-lisp:or audit-context-string common-lisp:null)
                         :accessor %audit-context-additional-audit-context
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'audit-context 'make-audit-context))
 (common-lisp:defun make-audit-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-audit-context)
   (common-lisp:apply #'common-lisp:make-instance 'audit-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-audit-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-context))
   common-lisp:nil))
(common-lisp:deftype audit-context-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authorized-session-tag-value-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-authorized-session-tag-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-grant-permissions-request common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or batch-permissions-request-entry-list
                                         common-lisp:null)
                         :accessor %batch-grant-permissions-request-entries
                         :initform (common-lisp:error ":entries is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %batch-grant-permissions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-grant-permissions-request
                    'make-batch-grant-permissions-request))
 (common-lisp:defun make-batch-grant-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-grant-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-grant-permissions-response common-lisp:nil
                       ((failures :initarg :failures :type
                         (common-lisp:or batch-permissions-failure-list
                                         common-lisp:null)
                         :accessor %batch-grant-permissions-response-failures
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-grant-permissions-response
                    'make-batch-grant-permissions-response))
 (common-lisp:defun make-batch-grant-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-grant-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-grant-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-permissions-failure-entry common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor %batch-permissions-failure-entry-error
                         :initform common-lisp:nil)
                        (request-entry :initarg :request-entry :type
                         (common-lisp:or batch-permissions-request-entry
                                         common-lisp:null)
                         :accessor
                         %batch-permissions-failure-entry-request-entry
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-permissions-failure-entry
                    'make-batch-permissions-failure-entry))
 (common-lisp:defun make-batch-permissions-failure-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error request-entry)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-permissions-failure-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-entry))
      (common-lisp:list
       (common-lisp:cons "RequestEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-failure-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-permissions-failure-list ()
   '(trivial-types:proper-list batch-permissions-failure-entry))
 (common-lisp:defun |make-batch-permissions-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-permissions-failure-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-permissions-request-entry common-lisp:nil
                       ((permissions-with-grant-option :initarg
                         :permissions-with-grant-option :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %batch-permissions-request-entry-permissions-with-grant-option
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor %batch-permissions-request-entry-permissions
                         :initform common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %batch-permissions-request-entry-resource :initform
                         common-lisp:nil)
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %batch-permissions-request-entry-principal
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %batch-permissions-request-entry-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-permissions-request-entry
                    'make-batch-permissions-request-entry))
 (common-lisp:defun make-batch-permissions-request-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions-with-grant-option permissions
                     resource principal id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-permissions-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-permissions-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-permissions-request-entry-list ()
   '(trivial-types:proper-list batch-permissions-request-entry))
 (common-lisp:defun |make-batch-permissions-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-permissions-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-revoke-permissions-request common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or batch-permissions-request-entry-list
                                         common-lisp:null)
                         :accessor %batch-revoke-permissions-request-entries
                         :initform (common-lisp:error ":entries is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %batch-revoke-permissions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-revoke-permissions-request
                    'make-batch-revoke-permissions-request))
 (common-lisp:defun make-batch-revoke-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-revoke-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-revoke-permissions-response common-lisp:nil
                       ((failures :initarg :failures :type
                         (common-lisp:or batch-permissions-failure-list
                                         common-lisp:null)
                         :accessor %batch-revoke-permissions-response-failures
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-revoke-permissions-response
                    'make-batch-revoke-permissions-response))
 (common-lisp:defun make-batch-revoke-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-revoke-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-revoke-permissions-response))
   common-lisp:nil))
(common-lisp:deftype boolean-nullable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-transaction-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %cancel-transaction-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-transaction-request
                    'make-cancel-transaction-request))
 (common-lisp:defun make-cancel-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-transaction-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-transaction-response
                    'make-cancel-transaction-response))
 (common-lisp:defun make-cancel-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-transaction-response))
   common-lisp:nil))
(common-lisp:deftype catalog-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass catalog-resource common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'catalog-resource 'make-catalog-resource))
 (common-lisp:defun make-catalog-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-lftag common-lisp:nil
                       ((lftags :initarg :lftags :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %column-lftag-lftags :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %column-lftag-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-lftag 'make-column-lftag))
 (common-lisp:defun make-column-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags name)
   (common-lisp:apply #'common-lisp:make-instance 'column-lftag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-lftag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-lftag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-lftag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-lftags-list ()
   '(trivial-types:proper-list column-lftag))
 (common-lisp:defun |make-column-lftags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-lftag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-names () '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-column-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-wildcard common-lisp:nil
                       ((excluded-column-names :initarg :excluded-column-names
                         :type (common-lisp:or column-names common-lisp:null)
                         :accessor %column-wildcard-excluded-column-names
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-wildcard 'make-column-wildcard))
 (common-lisp:defun make-column-wildcard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key excluded-column-names)
   (common-lisp:apply #'common-lisp:make-instance 'column-wildcard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-wildcard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-column-names))
      (common-lisp:list
       (common-lisp:cons "ExcludedColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %commit-transaction-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defun make-commit-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-response common-lisp:nil
                       ((transaction-status :initarg :transaction-status :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor
                         %commit-transaction-response-transaction-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-response
                    'make-commit-transaction-response))
 (common-lisp:defun make-commit-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-status)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "TransactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-data-cells-filter-request common-lisp:nil
                       ((table-data :initarg :table-data :type
                         (common-lisp:or data-cells-filter common-lisp:null)
                         :accessor %create-data-cells-filter-request-table-data
                         :initform
                         (common-lisp:error ":table-data is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-cells-filter-request
                    'make-create-data-cells-filter-request))
 (common-lisp:defun make-create-data-cells-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-data)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-cells-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-data))
      (common-lisp:list
       (common-lisp:cons "TableData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-cells-filter-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-data-cells-filter-response
                    'make-create-data-cells-filter-response))
 (common-lisp:defun make-create-data-cells-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-cells-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lftag-request common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %create-lftag-request-tag-values :initform
                         (common-lisp:error ":tag-values is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %create-lftag-request-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %create-lftag-request-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-lftag-request 'make-create-lftag-request))
 (common-lisp:defun make-create-lftag-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-lftag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lftag-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-lftag-response 'make-create-lftag-response))
 (common-lisp:defun make-create-lftag-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-lftag-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lftag-response))
   common-lisp:nil))
(common-lisp:deftype credential-timeout-duration-second-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass data-cells-filter common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %data-cells-filter-version-id :initform
                         common-lisp:nil)
                        (column-wildcard :initarg :column-wildcard :type
                         (common-lisp:or column-wildcard common-lisp:null)
                         :accessor %data-cells-filter-column-wildcard :initform
                         common-lisp:nil)
                        (column-names :initarg :column-names :type
                         (common-lisp:or column-names common-lisp:null)
                         :accessor %data-cells-filter-column-names :initform
                         common-lisp:nil)
                        (row-filter :initarg :row-filter :type
                         (common-lisp:or row-filter common-lisp:null) :accessor
                         %data-cells-filter-row-filter :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-name :initform
                         (common-lisp:error ":name is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-table-name :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-database-name :initform
                         (common-lisp:error ":database-name is required"))
                        (table-catalog-id :initarg :table-catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %data-cells-filter-table-catalog-id
                         :initform
                         (common-lisp:error ":table-catalog-id is required"))))
 (common-lisp:export
  (common-lisp:list 'data-cells-filter 'make-data-cells-filter))
 (common-lisp:defun make-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id column-wildcard column-names
                     row-filter name table-name database-name table-catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-cells-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-cells-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-cells-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-filter))
      (common-lisp:list
       (common-lisp:cons "RowFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-wildcard))
      (common-lisp:list
       (common-lisp:cons "ColumnWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-cells-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-cells-filter-list ()
   '(trivial-types:proper-list data-cells-filter))
 (common-lisp:defun |make-data-cells-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-cells-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-cells-filter-resource common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-resource-name :initform
                         common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-resource-table-name
                         :initform common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %data-cells-filter-resource-database-name
                         :initform common-lisp:nil)
                        (table-catalog-id :initarg :table-catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %data-cells-filter-resource-table-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-cells-filter-resource
                    'make-data-cells-filter-resource))
 (common-lisp:defun make-data-cells-filter-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name table-name database-name
                     table-catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-cells-filter-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-cells-filter-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-lake-principal common-lisp:nil
                       ((data-lake-principal-identifier :initarg
                         :data-lake-principal-identifier :type
                         (common-lisp:or data-lake-principal-string
                                         common-lisp:null)
                         :accessor
                         %data-lake-principal-data-lake-principal-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-lake-principal 'make-data-lake-principal))
 (common-lisp:defun make-data-lake-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-lake-principal-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-lake-principal-identifier))
      (common-lisp:list
       (common-lisp:cons "DataLakePrincipalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-principal-list ()
   '(trivial-types:proper-list data-lake-principal))
 (common-lisp:defun |make-data-lake-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-lake-principal-string () 'common-lisp:string)
(common-lisp:deftype data-lake-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-lake-settings common-lisp:nil
                       ((authorized-session-tag-value-list :initarg
                         :authorized-session-tag-value-list :type
                         (common-lisp:or authorized-session-tag-value-list
                                         common-lisp:null)
                         :accessor
                         %data-lake-settings-authorized-session-tag-value-list
                         :initform common-lisp:nil)
                        (external-data-filtering-allow-list :initarg
                         :external-data-filtering-allow-list :type
                         (common-lisp:or data-lake-principal-list
                                         common-lisp:null)
                         :accessor
                         %data-lake-settings-external-data-filtering-allow-list
                         :initform common-lisp:nil)
                        (allow-external-data-filtering :initarg
                         :allow-external-data-filtering :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %data-lake-settings-allow-external-data-filtering
                         :initform common-lisp:nil)
                        (trusted-resource-owners :initarg
                         :trusted-resource-owners :type
                         (common-lisp:or trusted-resource-owners
                                         common-lisp:null)
                         :accessor %data-lake-settings-trusted-resource-owners
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %data-lake-settings-parameters :initform
                         common-lisp:nil)
                        (create-table-default-permissions :initarg
                         :create-table-default-permissions :type
                         (common-lisp:or principal-permissions-list
                                         common-lisp:null)
                         :accessor
                         %data-lake-settings-create-table-default-permissions
                         :initform common-lisp:nil)
                        (create-database-default-permissions :initarg
                         :create-database-default-permissions :type
                         (common-lisp:or principal-permissions-list
                                         common-lisp:null)
                         :accessor
                         %data-lake-settings-create-database-default-permissions
                         :initform common-lisp:nil)
                        (data-lake-admins :initarg :data-lake-admins :type
                         (common-lisp:or data-lake-principal-list
                                         common-lisp:null)
                         :accessor %data-lake-settings-data-lake-admins
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-lake-settings 'make-data-lake-settings))
 (common-lisp:defun make-data-lake-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authorized-session-tag-value-list
                     external-data-filtering-allow-list
                     allow-external-data-filtering trusted-resource-owners
                     parameters create-table-default-permissions
                     create-database-default-permissions data-lake-admins)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-admins))
      (common-lisp:list
       (common-lisp:cons "DataLakeAdmins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-database-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateDatabaseDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-resource-owners))
      (common-lisp:list
       (common-lisp:cons "TrustedResourceOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-external-data-filtering))
      (common-lisp:list
       (common-lisp:cons "AllowExternalDataFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-data-filtering-allow-list))
      (common-lisp:list
       (common-lisp:cons "ExternalDataFilteringAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-session-tag-value-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedSessionTagValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-location-resource common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %data-location-resource-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %data-location-resource-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-location-resource 'make-data-location-resource))
 (common-lisp:defun make-data-location-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-location-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-location-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-lftags-list ()
   '(trivial-types:proper-list tagged-database))
 (common-lisp:defun |make-database-lftags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-database))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass database-resource common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %database-resource-name :initform
                         (common-lisp:error ":name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %database-resource-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'database-resource 'make-database-resource))
 (common-lisp:defun make-database-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'database-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-resource))
   common-lisp:nil))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-data-cells-filter-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-data-cells-filter-request-name
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-data-cells-filter-request-table-name
                         :initform common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %delete-data-cells-filter-request-database-name
                         :initform common-lisp:nil)
                        (table-catalog-id :initarg :table-catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %delete-data-cells-filter-request-table-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-cells-filter-request
                    'make-delete-data-cells-filter-request))
 (common-lisp:defun make-delete-data-cells-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name table-name database-name
                     table-catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-cells-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-cells-filter-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-data-cells-filter-response
                    'make-delete-data-cells-filter-response))
 (common-lisp:defun make-delete-data-cells-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-cells-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lftag-request common-lisp:nil
                       ((tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %delete-lftag-request-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %delete-lftag-request-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-lftag-request 'make-delete-lftag-request))
 (common-lisp:defun make-delete-lftag-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lftag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lftag-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-lftag-response 'make-delete-lftag-response))
 (common-lisp:defun make-delete-lftag-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lftag-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-input common-lisp:nil
                       ((partition-values :initarg :partition-values :type
                         (common-lisp:or partition-values-list
                                         common-lisp:null)
                         :accessor %delete-object-input-partition-values
                         :initform common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag-string common-lisp:null)
                         :accessor %delete-object-input-etag :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %delete-object-input-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-object-input 'make-delete-object-input))
 (common-lisp:defun make-delete-object-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partition-values etag uri)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-object-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-object-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-object-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-on-cancel-request common-lisp:nil
                       ((objects :initarg :objects :type
                         (common-lisp:or virtual-object-list common-lisp:null)
                         :accessor %delete-objects-on-cancel-request-objects
                         :initform (common-lisp:error ":objects is required"))
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         %delete-objects-on-cancel-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-objects-on-cancel-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %delete-objects-on-cancel-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %delete-objects-on-cancel-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-objects-on-cancel-request
                    'make-delete-objects-on-cancel-request))
 (common-lisp:defun make-delete-objects-on-cancel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key objects transaction-id table-name
                     database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-objects-on-cancel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-on-cancel-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-objects-on-cancel-response
                    'make-delete-objects-on-cancel-response))
 (common-lisp:defun make-delete-objects-on-cancel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-objects-on-cancel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-on-cancel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %deregister-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-resource-request
                    'make-deregister-resource-request))
 (common-lisp:defun make-deregister-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-resource-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-resource-response
                    'make-deregister-resource-response))
 (common-lisp:defun make-deregister-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %describe-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-resource-request
                    'make-describe-resource-request))
 (common-lisp:defun make-describe-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-response common-lisp:nil
                       ((resource-info :initarg :resource-info :type
                         (common-lisp:or resource-info common-lisp:null)
                         :accessor %describe-resource-response-resource-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-response
                    'make-describe-resource-response))
 (common-lisp:defun make-describe-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-info)
   (common-lisp:apply #'common-lisp:make-instance 'describe-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-info))
      (common-lisp:list
       (common-lisp:cons "ResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-transaction-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %describe-transaction-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-transaction-request
                    'make-describe-transaction-request))
 (common-lisp:defun make-describe-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-transaction-response common-lisp:nil
                       ((transaction-description :initarg
                         :transaction-description :type
                         (common-lisp:or transaction-description
                                         common-lisp:null)
                         :accessor
                         %describe-transaction-response-transaction-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-transaction-response
                    'make-describe-transaction-response))
 (common-lisp:defun make-describe-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-description))
      (common-lisp:list
       (common-lisp:cons "TransactionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transaction-response))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass details-map common-lisp:nil
                       ((resource-share :initarg :resource-share :type
                         (common-lisp:or resource-share-list common-lisp:null)
                         :accessor %details-map-resource-share :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'details-map 'make-details-map))
 (common-lisp:defun make-details-map
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-share)
   (common-lisp:apply #'common-lisp:make-instance 'details-map
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input details-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input details-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share))
      (common-lisp:list
       (common-lisp:cons "ResourceShare"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input details-map))
   common-lisp:nil))
(common-lisp:deftype etag-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %error-detail-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %error-detail-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defun make-error-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-statistics common-lisp:nil
                       ((work-units-executed-count :initarg
                         :work-units-executed-count :type
                         (common-lisp:or number-of-items common-lisp:null)
                         :accessor
                         %execution-statistics-work-units-executed-count
                         :initform common-lisp:nil)
                        (data-scanned-bytes :initarg :data-scanned-bytes :type
                         (common-lisp:or number-of-bytes common-lisp:null)
                         :accessor %execution-statistics-data-scanned-bytes
                         :initform common-lisp:nil)
                        (average-execution-time-millis :initarg
                         :average-execution-time-millis :type
                         (common-lisp:or number-of-milliseconds
                                         common-lisp:null)
                         :accessor
                         %execution-statistics-average-execution-time-millis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execution-statistics 'make-execution-statistics))
 (common-lisp:defun make-execution-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-units-executed-count
                     data-scanned-bytes average-execution-time-millis)
   (common-lisp:apply #'common-lisp:make-instance 'execution-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-execution-time-millis))
      (common-lisp:list
       (common-lisp:cons "AverageExecutionTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-scanned-bytes))
      (common-lisp:list
       (common-lisp:cons "DataScannedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-units-executed-count))
      (common-lisp:list
       (common-lisp:cons "WorkUnitsExecutedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-statistics))
   common-lisp:nil))
(common-lisp:deftype expiration-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-exception 'expired-exception-message)))
(common-lisp:progn
 (common-lisp:deftype expression () '(trivial-types:proper-list lftag))
 (common-lisp:defun |make-expression|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass extend-transaction-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %extend-transaction-request-transaction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'extend-transaction-request
                    'make-extend-transaction-request))
 (common-lisp:defun make-extend-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'extend-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extend-transaction-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'extend-transaction-response
                    'make-extend-transaction-response))
 (common-lisp:defun make-extend-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'extend-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-transaction-response))
   common-lisp:nil))
(common-lisp:deftype field-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-condition common-lisp:nil
                       ((string-value-list :initarg :string-value-list :type
                         (common-lisp:or string-value-list common-lisp:null)
                         :accessor %filter-condition-string-value-list
                         :initform common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor %filter-condition-comparison-operator
                         :initform common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or field-name-string common-lisp:null)
                         :accessor %filter-condition-field :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defun make-filter-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-value-list comparison-operator
                     field)
   (common-lisp:apply #'common-lisp:make-instance 'filter-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value-list))
      (common-lisp:list
       (common-lisp:cons "StringValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-condition-list ()
   '(trivial-types:proper-list filter-condition))
 (common-lisp:defun |make-filter-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-data-cells-filter-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-data-cells-filter-request-name
                         :initform (common-lisp:error ":name is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-data-cells-filter-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-data-cells-filter-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (table-catalog-id :initarg :table-catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %get-data-cells-filter-request-table-catalog-id
                         :initform
                         (common-lisp:error ":table-catalog-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-cells-filter-request
                    'make-get-data-cells-filter-request))
 (common-lisp:defun make-get-data-cells-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name table-name database-name
                     table-catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-cells-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-catalog-id))
      (common-lisp:list
       (common-lisp:cons "TableCatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-cells-filter-response common-lisp:nil
                       ((data-cells-filter :initarg :data-cells-filter :type
                         (common-lisp:or data-cells-filter common-lisp:null)
                         :accessor
                         %get-data-cells-filter-response-data-cells-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-cells-filter-response
                    'make-get-data-cells-filter-response))
 (common-lisp:defun make-get-data-cells-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-cells-filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-cells-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filter))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-settings-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %get-data-lake-settings-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-settings-request
                    'make-get-data-lake-settings-request))
 (common-lisp:defun make-get-data-lake-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-settings-response common-lisp:nil
                       ((data-lake-settings :initarg :data-lake-settings :type
                         (common-lisp:or data-lake-settings common-lisp:null)
                         :accessor
                         %get-data-lake-settings-response-data-lake-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-settings-response
                    'make-get-data-lake-settings-response))
 (common-lisp:defun make-get-data-lake-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-lake-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-settings))
      (common-lisp:list
       (common-lisp:cons "DataLakeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-effective-permissions-for-path-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %get-effective-permissions-for-path-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-effective-permissions-for-path-request-next-token
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor
                         %get-effective-permissions-for-path-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %get-effective-permissions-for-path-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-effective-permissions-for-path-request
                    'make-get-effective-permissions-for-path-request))
 (common-lisp:defun make-get-effective-permissions-for-path-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn
                     catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-effective-permissions-for-path-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-effective-permissions-for-path-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-effective-permissions-for-path-response-next-token
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or principal-resource-permissions-list
                                         common-lisp:null)
                         :accessor
                         %get-effective-permissions-for-path-response-permissions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-effective-permissions-for-path-response
                    'make-get-effective-permissions-for-path-response))
 (common-lisp:defun make-get-effective-permissions-for-path-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token permissions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-effective-permissions-for-path-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-permissions-for-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lftag-request common-lisp:nil
                       ((tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %get-lftag-request-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %get-lftag-request-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lftag-request 'make-get-lftag-request))
 (common-lisp:defun make-get-lftag-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-lftag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lftag-response common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %get-lftag-response-tag-values :initform
                         common-lisp:nil)
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %get-lftag-response-tag-key :initform common-lisp:nil)
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %get-lftag-response-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lftag-response 'make-get-lftag-response))
 (common-lisp:defun make-get-lftag-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-lftag-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lftag-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-state-request common-lisp:nil
                       ((query-id :initarg :query-id :type
                         (common-lisp:or
                          get-query-state-request-query-id-string
                          common-lisp:null)
                         :accessor %get-query-state-request-query-id :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-query-state-request 'make-get-query-state-request))
 (common-lisp:defun make-get-query-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-request))
   common-lisp:nil))
(common-lisp:deftype get-query-state-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-query-state-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or query-state-string common-lisp:null)
                         :accessor %get-query-state-response-state :initform
                         (common-lisp:error ":state is required"))
                        (error :initarg :error :type
                         (common-lisp:or error-message-string common-lisp:null)
                         :accessor %get-query-state-response-error :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-query-state-response 'make-get-query-state-response))
 (common-lisp:defun make-get-query-state-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state error)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-statistics-request common-lisp:nil
                       ((query-id :initarg :query-id :type
                         (common-lisp:or
                          get-query-statistics-request-query-id-string
                          common-lisp:null)
                         :accessor %get-query-statistics-request-query-id
                         :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-query-statistics-request
                    'make-get-query-statistics-request))
 (common-lisp:defun make-get-query-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-request))
   common-lisp:nil))
(common-lisp:deftype get-query-statistics-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-query-statistics-response common-lisp:nil
                       ((query-submission-time :initarg :query-submission-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %get-query-statistics-response-query-submission-time
                         :initform common-lisp:nil)
                        (planning-statistics :initarg :planning-statistics
                         :type
                         (common-lisp:or planning-statistics common-lisp:null)
                         :accessor
                         %get-query-statistics-response-planning-statistics
                         :initform common-lisp:nil)
                        (execution-statistics :initarg :execution-statistics
                         :type
                         (common-lisp:or execution-statistics common-lisp:null)
                         :accessor
                         %get-query-statistics-response-execution-statistics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-query-statistics-response
                    'make-get-query-statistics-response))
 (common-lisp:defun make-get-query-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-submission-time planning-statistics
                     execution-statistics)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-query-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-statistics))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planning-statistics))
      (common-lisp:list
       (common-lisp:cons "PlanningStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-submission-time))
      (common-lisp:list
       (common-lisp:cons "QuerySubmissionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-lftags-request common-lisp:nil
                       ((show-assigned-lftags :initarg :show-assigned-lftags
                         :type
                         (common-lisp:or boolean-nullable common-lisp:null)
                         :accessor
                         %get-resource-lftags-request-show-assigned-lftags
                         :initform common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %get-resource-lftags-request-resource :initform
                         (common-lisp:error ":resource is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %get-resource-lftags-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-lftags-request
                    'make-get-resource-lftags-request))
 (common-lisp:defun make-get-resource-lftags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show-assigned-lftags resource catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-lftags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-assigned-lftags))
      (common-lisp:list
       (common-lisp:cons "ShowAssignedLFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-lftags-response common-lisp:nil
                       ((lftags-on-columns :initarg :lftags-on-columns :type
                         (common-lisp:or column-lftags-list common-lisp:null)
                         :accessor
                         %get-resource-lftags-response-lftags-on-columns
                         :initform common-lisp:nil)
                        (lftags-on-table :initarg :lftags-on-table :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor
                         %get-resource-lftags-response-lftags-on-table
                         :initform common-lisp:nil)
                        (lftag-on-database :initarg :lftag-on-database :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor
                         %get-resource-lftags-response-lftag-on-database
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-lftags-response
                    'make-get-resource-lftags-response))
 (common-lisp:defun make-get-resource-lftags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags-on-columns lftags-on-table
                     lftag-on-database)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-lftags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-on-database))
      (common-lisp:list
       (common-lisp:cons "LFTagOnDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-table))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-columns))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-lftags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-objects-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %get-table-objects-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %get-table-objects-request-max-results :initform
                         common-lisp:nil)
                        (partition-predicate :initarg :partition-predicate
                         :type
                         (common-lisp:or predicate-string common-lisp:null)
                         :accessor
                         %get-table-objects-request-partition-predicate
                         :initform common-lisp:nil)
                        (query-as-of-time :initarg :query-as-of-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-table-objects-request-query-as-of-time :initform
                         common-lisp:nil)
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %get-table-objects-request-transaction-id
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-table-objects-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-table-objects-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %get-table-objects-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-table-objects-request
                    'make-get-table-objects-request))
 (common-lisp:defun make-get-table-objects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     partition-predicate query-as-of-time transaction-id
                     table-name database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-objects-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %get-table-objects-response-next-token
                         :initform common-lisp:nil)
                        (objects :initarg :objects :type
                         (common-lisp:or partitioned-table-objects-list
                                         common-lisp:null)
                         :accessor %get-table-objects-response-objects
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-table-objects-response
                    'make-get-table-objects-response))
 (common-lisp:defun make-get-table-objects-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token objects)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-objects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-temporary-glue-partition-credentials-request
                       common-lisp:nil
                       ((supported-permission-types :initarg
                         :supported-permission-types :type
                         (common-lisp:or permission-type-list common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-supported-permission-types
                         :initform
                         (common-lisp:error
                          ":supported-permission-types is required"))
                        (audit-context :initarg :audit-context :type
                         (common-lisp:or audit-context common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-audit-context
                         :initform common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or
                          credential-timeout-duration-second-integer
                          common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-duration-seconds
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-permissions
                         :initform common-lisp:nil)
                        (partition :initarg :partition :type
                         (common-lisp:or partition-value-list common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-partition
                         :initform
                         (common-lisp:error ":partition is required"))
                        (table-arn :initarg :table-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-request-table-arn
                         :initform
                         (common-lisp:error ":table-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-partition-credentials-request
                    'make-get-temporary-glue-partition-credentials-request))
 (common-lisp:defun make-get-temporary-glue-partition-credentials-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-permission-types audit-context
                     duration-seconds permissions partition table-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-temporary-glue-partition-credentials-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "TableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-temporary-glue-partition-credentials-response
                       common-lisp:nil
                       ((expiration :initarg :expiration :type
                         (common-lisp:or expiration-timestamp common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-response-expiration
                         :initform common-lisp:nil)
                        (session-token :initarg :session-token :type
                         (common-lisp:or session-token-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-response-session-token
                         :initform common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key :type
                         (common-lisp:or secret-access-key-string
                                         common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-response-secret-access-key
                         :initform common-lisp:nil)
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or access-key-id-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-partition-credentials-response-access-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-partition-credentials-response
                    'make-get-temporary-glue-partition-credentials-response))
 (common-lisp:defun make-get-temporary-glue-partition-credentials-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration session-token
                     secret-access-key access-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-temporary-glue-partition-credentials-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-partition-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-temporary-glue-table-credentials-request
                       common-lisp:nil
                       ((supported-permission-types :initarg
                         :supported-permission-types :type
                         (common-lisp:or permission-type-list common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-request-supported-permission-types
                         :initform
                         (common-lisp:error
                          ":supported-permission-types is required"))
                        (audit-context :initarg :audit-context :type
                         (common-lisp:or audit-context common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-request-audit-context
                         :initform common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or
                          credential-timeout-duration-second-integer
                          common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-request-duration-seconds
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-request-permissions
                         :initform common-lisp:nil)
                        (table-arn :initarg :table-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-request-table-arn
                         :initform
                         (common-lisp:error ":table-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-table-credentials-request
                    'make-get-temporary-glue-table-credentials-request))
 (common-lisp:defun make-get-temporary-glue-table-credentials-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-permission-types audit-context
                     duration-seconds permissions table-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-temporary-glue-table-credentials-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "TableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-temporary-glue-table-credentials-response
                       common-lisp:nil
                       ((expiration :initarg :expiration :type
                         (common-lisp:or expiration-timestamp common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-response-expiration
                         :initform common-lisp:nil)
                        (session-token :initarg :session-token :type
                         (common-lisp:or session-token-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-response-session-token
                         :initform common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key :type
                         (common-lisp:or secret-access-key-string
                                         common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-response-secret-access-key
                         :initform common-lisp:nil)
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or access-key-id-string common-lisp:null)
                         :accessor
                         %get-temporary-glue-table-credentials-response-access-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-temporary-glue-table-credentials-response
                    'make-get-temporary-glue-table-credentials-response))
 (common-lisp:defun make-get-temporary-glue-table-credentials-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration session-token
                     secret-access-key access-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-temporary-glue-table-credentials-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-temporary-glue-table-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-work-unit-results-request common-lisp:nil
                       ((work-unit-token :initarg :work-unit-token :type
                         (common-lisp:or
                          synthetic-get-work-unit-results-request-work-unit-token-string
                          common-lisp:null)
                         :accessor
                         %get-work-unit-results-request-work-unit-token
                         :initform
                         (common-lisp:error ":work-unit-token is required"))
                        (work-unit-id :initarg :work-unit-id :type
                         (common-lisp:or
                          get-work-unit-results-request-work-unit-id-long
                          common-lisp:null)
                         :accessor %get-work-unit-results-request-work-unit-id
                         :initform
                         (common-lisp:error ":work-unit-id is required"))
                        (query-id :initarg :query-id :type
                         (common-lisp:or
                          get-work-unit-results-request-query-id-string
                          common-lisp:null)
                         :accessor %get-work-unit-results-request-query-id
                         :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-work-unit-results-request
                    'make-get-work-unit-results-request))
 (common-lisp:defun make-get-work-unit-results-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-unit-token work-unit-id query-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-work-unit-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id))
      (common-lisp:list
       (common-lisp:cons "WorkUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-token))
      (common-lisp:list
       (common-lisp:cons "WorkUnitToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-request))
   common-lisp:nil))
(common-lisp:deftype get-work-unit-results-request-query-id-string ()
  'common-lisp:string)
(common-lisp:deftype get-work-unit-results-request-work-unit-id-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-work-unit-results-response common-lisp:nil
                       ((result-stream :initarg :result-stream :type
                         (common-lisp:or result-stream common-lisp:null)
                         :accessor
                         %get-work-unit-results-response-result-stream
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-work-unit-results-response
                    'make-get-work-unit-results-response))
 (common-lisp:defun make-get-work-unit-results-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-stream)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-work-unit-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-stream))
      (common-lisp:list
       (common-lisp:cons "ResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-unit-results-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'result-stream))))
(common-lisp:progn
 (common-lisp:defclass get-work-units-request common-lisp:nil
                       ((query-id :initarg :query-id :type
                         (common-lisp:or get-work-units-request-query-id-string
                                         common-lisp:null)
                         :accessor %get-work-units-request-query-id :initform
                         (common-lisp:error ":query-id is required"))
                        (page-size :initarg :page-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-work-units-request-page-size :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-work-units-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-work-units-request 'make-get-work-units-request))
 (common-lisp:defun make-get-work-units-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-id page-size next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-units-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-request))
   common-lisp:nil))
(common-lisp:deftype get-work-units-request-query-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-work-units-response common-lisp:nil
                       ((work-unit-ranges :initarg :work-unit-ranges :type
                         (common-lisp:or work-unit-range-list common-lisp:null)
                         :accessor %get-work-units-response-work-unit-ranges
                         :initform
                         (common-lisp:error ":work-unit-ranges is required"))
                        (query-id :initarg :query-id :type
                         (common-lisp:or query-id-string common-lisp:null)
                         :accessor %get-work-units-response-query-id :initform
                         (common-lisp:error ":query-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-work-units-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-work-units-response 'make-get-work-units-response))
 (common-lisp:defun make-get-work-units-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-unit-ranges query-id next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-units-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-ranges))
      (common-lisp:list
       (common-lisp:cons "WorkUnitRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-units-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition glue-encryption-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       glue-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'glue-encryption-exception
                    'glue-encryption-exception-message)))
(common-lisp:progn
 (common-lisp:defclass grant-permissions-request common-lisp:nil
                       ((permissions-with-grant-option :initarg
                         :permissions-with-grant-option :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %grant-permissions-request-permissions-with-grant-option
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor %grant-permissions-request-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %grant-permissions-request-resource :initform
                         (common-lisp:error ":resource is required"))
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %grant-permissions-request-principal
                         :initform
                         (common-lisp:error ":principal is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %grant-permissions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grant-permissions-request
                    'make-grant-permissions-request))
 (common-lisp:defun make-grant-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions-with-grant-option permissions
                     resource principal catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'grant-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-permissions-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'grant-permissions-response
                    'make-grant-permissions-response))
 (common-lisp:defun make-grant-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'grant-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-permissions-response))
   common-lisp:nil))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:deftype iamsamlprovider-arn () 'common-lisp:string)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lftag common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %lftag-tag-values :initform
                         (common-lisp:error ":tag-values is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %lftag-tag-key :initform
                         (common-lisp:error ":tag-key is required"))))
 (common-lisp:export (common-lisp:list 'lftag 'make-lftag))
 (common-lisp:defun make-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key)
   (common-lisp:apply #'common-lisp:make-instance 'lftag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lftag-error common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor %lftag-error-error :initform
                         common-lisp:nil)
                        (lftag :initarg :lftag :type
                         (common-lisp:or lftag-pair common-lisp:null) :accessor
                         %lftag-error-lftag :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lftag-error 'make-lftag-error))
 (common-lisp:defun make-lftag-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error lftag)
   (common-lisp:apply #'common-lisp:make-instance 'lftag-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag))
      (common-lisp:list
       (common-lisp:cons "LFTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lftag-errors () '(trivial-types:proper-list lftag-error))
 (common-lisp:defun |make-lftag-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lftag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lftag-key-resource common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %lftag-key-resource-tag-values :initform
                         (common-lisp:error ":tag-values is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %lftag-key-resource-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %lftag-key-resource-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lftag-key-resource 'make-lftag-key-resource))
 (common-lisp:defun make-lftag-key-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'lftag-key-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-key-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lftag-pair common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %lftag-pair-tag-values :initform
                         (common-lisp:error ":tag-values is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %lftag-pair-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %lftag-pair-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lftag-pair 'make-lftag-pair))
 (common-lisp:defun make-lftag-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'lftag-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lftag-policy-resource common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %lftag-policy-resource-expression :initform
                         (common-lisp:error ":expression is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %lftag-policy-resource-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %lftag-policy-resource-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lftag-policy-resource 'make-lftag-policy-resource))
 (common-lisp:defun make-lftag-policy-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression resource-type catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'lftag-policy-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lftag-policy-resource))
   common-lisp:nil))
(common-lisp:deftype lftag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lftags-list () '(trivial-types:proper-list lftag-pair))
 (common-lisp:defun |make-lftags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-modified-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-data-cells-filter-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-data-cells-filter-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-data-cells-filter-request-next-token :initform
                         common-lisp:nil)
                        (table :initarg :table :type
                         (common-lisp:or table-resource common-lisp:null)
                         :accessor %list-data-cells-filter-request-table
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-cells-filter-request
                    'make-list-data-cells-filter-request))
 (common-lisp:defun make-list-data-cells-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token table)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-cells-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-cells-filter-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-data-cells-filter-response-next-token :initform
                         common-lisp:nil)
                        (data-cells-filters :initarg :data-cells-filters :type
                         (common-lisp:or data-cells-filter-list
                                         common-lisp:null)
                         :accessor
                         %list-data-cells-filter-response-data-cells-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-cells-filter-response
                    'make-list-data-cells-filter-response))
 (common-lisp:defun make-list-data-cells-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data-cells-filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-cells-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filters))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lftags-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-lftags-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-lftags-request-max-results :initform
                         common-lisp:nil)
                        (resource-share-type :initarg :resource-share-type
                         :type
                         (common-lisp:or resource-share-type common-lisp:null)
                         :accessor %list-lftags-request-resource-share-type
                         :initform common-lisp:nil)
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %list-lftags-request-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-lftags-request 'make-list-lftags-request))
 (common-lisp:defun make-list-lftags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     resource-share-type catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-lftags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lftags-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-lftags-response-next-token :initform
                         common-lisp:nil)
                        (lftags :initarg :lftags :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %list-lftags-response-lftags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-lftags-response 'make-list-lftags-response))
 (common-lisp:defun make-list-lftags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token lftags)
   (common-lisp:apply #'common-lisp:make-instance 'list-lftags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lftags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permissions-request common-lisp:nil
                       ((include-related :initarg :include-related :type
                         (common-lisp:or true-false-string common-lisp:null)
                         :accessor %list-permissions-request-include-related
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-permissions-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-permissions-request-next-token :initform
                         common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %list-permissions-request-resource :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or data-lake-resource-type
                                         common-lisp:null)
                         :accessor %list-permissions-request-resource-type
                         :initform common-lisp:nil)
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %list-permissions-request-principal
                         :initform common-lisp:nil)
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %list-permissions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-permissions-request 'make-list-permissions-request))
 (common-lisp:defun make-list-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-related max-results next-token
                     resource resource-type principal catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-related))
      (common-lisp:list
       (common-lisp:cons "IncludeRelated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permissions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-permissions-response-next-token :initform
                         common-lisp:nil)
                        (principal-resource-permissions :initarg
                         :principal-resource-permissions :type
                         (common-lisp:or principal-resource-permissions-list
                                         common-lisp:null)
                         :accessor
                         %list-permissions-response-principal-resource-permissions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-permissions-response
                    'make-list-permissions-response))
 (common-lisp:defun make-list-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     principal-resource-permissions)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-resource-permissions))
      (common-lisp:list
       (common-lisp:cons "PrincipalResourcePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-resources-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-resources-request-max-results :initform
                         common-lisp:nil)
                        (filter-condition-list :initarg :filter-condition-list
                         :type
                         (common-lisp:or filter-condition-list
                                         common-lisp:null)
                         :accessor
                         %list-resources-request-filter-condition-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resources-request 'make-list-resources-request))
 (common-lisp:defun make-list-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     filter-condition-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-condition-list))
      (common-lisp:list
       (common-lisp:cons "FilterConditionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-resources-response-next-token :initform
                         common-lisp:nil)
                        (resource-info-list :initarg :resource-info-list :type
                         (common-lisp:or resource-info-list common-lisp:null)
                         :accessor %list-resources-response-resource-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resources-response 'make-list-resources-response))
 (common-lisp:defun make-list-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-info-list))
      (common-lisp:list
       (common-lisp:cons "ResourceInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-storage-optimizers-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-table-storage-optimizers-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-table-storage-optimizers-request-max-results
                         :initform common-lisp:nil)
                        (storage-optimizer-type :initarg
                         :storage-optimizer-type :type
                         (common-lisp:or optimizer-type common-lisp:null)
                         :accessor
                         %list-table-storage-optimizers-request-storage-optimizer-type
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %list-table-storage-optimizers-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %list-table-storage-optimizers-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %list-table-storage-optimizers-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-table-storage-optimizers-request
                    'make-list-table-storage-optimizers-request))
 (common-lisp:defun make-list-table-storage-optimizers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     storage-optimizer-type table-name database-name
                     catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-table-storage-optimizers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-type))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-storage-optimizers-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-table-storage-optimizers-response-next-token
                         :initform common-lisp:nil)
                        (storage-optimizer-list :initarg
                         :storage-optimizer-list :type
                         (common-lisp:or storage-optimizer-list
                                         common-lisp:null)
                         :accessor
                         %list-table-storage-optimizers-response-storage-optimizer-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-table-storage-optimizers-response
                    'make-list-table-storage-optimizers-response))
 (common-lisp:defun make-list-table-storage-optimizers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token storage-optimizer-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-table-storage-optimizers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-list))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-storage-optimizers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-transactions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %list-transactions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-transactions-request-max-results :initform
                         common-lisp:nil)
                        (status-filter :initarg :status-filter :type
                         (common-lisp:or transaction-status-filter
                                         common-lisp:null)
                         :accessor %list-transactions-request-status-filter
                         :initform common-lisp:nil)
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %list-transactions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-request
                    'make-list-transactions-request))
 (common-lisp:defun make-list-transactions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results status-filter
                     catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-transactions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-transactions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %list-transactions-response-next-token
                         :initform common-lisp:nil)
                        (transactions :initarg :transactions :type
                         (common-lisp:or transaction-description-list
                                         common-lisp:null)
                         :accessor %list-transactions-response-transactions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-response
                    'make-list-transactions-response))
 (common-lisp:defun make-list-transactions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token transactions)
   (common-lisp:apply #'common-lisp:make-instance 'list-transactions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transactions))
      (common-lisp:list
       (common-lisp:cons "Transactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-response))
   common-lisp:nil))
(common-lisp:deftype message-string () 'common-lisp:string)
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype number-of-bytes () 'common-lisp:integer)
(common-lisp:deftype number-of-items () 'common-lisp:integer)
(common-lisp:deftype number-of-milliseconds () 'common-lisp:integer)
(common-lisp:deftype object-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition operation-timeout-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-timeout-exception
                    'operation-timeout-exception-message)))
(common-lisp:deftype optimizer-type () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-parameters-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partition-objects common-lisp:nil
                       ((objects :initarg :objects :type
                         (common-lisp:or table-object-list common-lisp:null)
                         :accessor %partition-objects-objects :initform
                         common-lisp:nil)
                        (partition-values :initarg :partition-values :type
                         (common-lisp:or partition-values-list
                                         common-lisp:null)
                         :accessor %partition-objects-partition-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'partition-objects 'make-partition-objects))
 (common-lisp:defun make-partition-objects
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key objects partition-values)
   (common-lisp:apply #'common-lisp:make-instance 'partition-objects
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-objects))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partition-value-list common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor %partition-value-list-values :initform
                         (common-lisp:error ":values is required"))))
 (common-lisp:export
  (common-lisp:list 'partition-value-list 'make-partition-value-list))
 (common-lisp:defun make-partition-value-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance 'partition-value-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-value-list))
   common-lisp:nil))
(common-lisp:deftype partition-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partition-values-list ()
   '(trivial-types:proper-list partition-value-string))
 (common-lisp:defun |make-partition-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partitioned-table-objects-list ()
   '(trivial-types:proper-list partition-objects))
 (common-lisp:defun |make-partitioned-table-objects-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-objects))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-list ()
   '(trivial-types:proper-list permission))
 (common-lisp:defun |make-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-type-list ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun |make-permission-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition permission-type-mismatch-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       permission-type-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'permission-type-mismatch-exception
                    'permission-type-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defclass planning-statistics common-lisp:nil
                       ((work-units-generated-count :initarg
                         :work-units-generated-count :type
                         (common-lisp:or number-of-items common-lisp:null)
                         :accessor
                         %planning-statistics-work-units-generated-count
                         :initform common-lisp:nil)
                        (queue-time-millis :initarg :queue-time-millis :type
                         (common-lisp:or number-of-milliseconds
                                         common-lisp:null)
                         :accessor %planning-statistics-queue-time-millis
                         :initform common-lisp:nil)
                        (planning-time-millis :initarg :planning-time-millis
                         :type
                         (common-lisp:or number-of-milliseconds
                                         common-lisp:null)
                         :accessor %planning-statistics-planning-time-millis
                         :initform common-lisp:nil)
                        (estimated-data-to-scan-bytes :initarg
                         :estimated-data-to-scan-bytes :type
                         (common-lisp:or number-of-bytes common-lisp:null)
                         :accessor
                         %planning-statistics-estimated-data-to-scan-bytes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'planning-statistics 'make-planning-statistics))
 (common-lisp:defun make-planning-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-units-generated-count
                     queue-time-millis planning-time-millis
                     estimated-data-to-scan-bytes)
   (common-lisp:apply #'common-lisp:make-instance 'planning-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input planning-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input planning-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-data-to-scan-bytes))
      (common-lisp:list
       (common-lisp:cons "EstimatedDataToScanBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'planning-time-millis))
      (common-lisp:list
       (common-lisp:cons "PlanningTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-time-millis))
      (common-lisp:list
       (common-lisp:cons "QueueTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-units-generated-count))
      (common-lisp:list
       (common-lisp:cons "WorkUnitsGeneratedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input planning-statistics))
   common-lisp:nil))
(common-lisp:deftype predicate-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass principal-permissions common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor %principal-permissions-permissions :initform
                         common-lisp:nil)
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %principal-permissions-principal :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'principal-permissions 'make-principal-permissions))
 (common-lisp:defun make-principal-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions principal)
   (common-lisp:apply #'common-lisp:make-instance 'principal-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-permissions-list ()
   '(trivial-types:proper-list principal-permissions))
 (common-lisp:defun |make-principal-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass principal-resource-permissions common-lisp:nil
                       ((additional-details :initarg :additional-details :type
                         (common-lisp:or details-map common-lisp:null)
                         :accessor
                         %principal-resource-permissions-additional-details
                         :initform common-lisp:nil)
                        (permissions-with-grant-option :initarg
                         :permissions-with-grant-option :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %principal-resource-permissions-permissions-with-grant-option
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor %principal-resource-permissions-permissions
                         :initform common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %principal-resource-permissions-resource :initform
                         common-lisp:nil)
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %principal-resource-permissions-principal
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'principal-resource-permissions
                    'make-principal-resource-permissions))
 (common-lisp:defun make-principal-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-details
                     permissions-with-grant-option permissions resource
                     principal)
   (common-lisp:apply #'common-lisp:make-instance
                      'principal-resource-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-details))
      (common-lisp:list
       (common-lisp:cons "AdditionalDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-resource-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-resource-permissions-list ()
   '(trivial-types:proper-list principal-resource-permissions))
 (common-lisp:defun |make-principal-resource-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            principal-resource-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-data-lake-settings-request common-lisp:nil
                       ((data-lake-settings :initarg :data-lake-settings :type
                         (common-lisp:or data-lake-settings common-lisp:null)
                         :accessor
                         %put-data-lake-settings-request-data-lake-settings
                         :initform
                         (common-lisp:error ":data-lake-settings is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %put-data-lake-settings-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-data-lake-settings-request
                    'make-put-data-lake-settings-request))
 (common-lisp:defun make-put-data-lake-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-lake-settings catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-lake-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-settings))
      (common-lisp:list
       (common-lisp:cons "DataLakeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-data-lake-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-data-lake-settings-response
                    'make-put-data-lake-settings-response))
 (common-lisp:defun make-put-data-lake-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-lake-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-lake-settings-response))
   common-lisp:nil))
(common-lisp:deftype query-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass query-planning-context common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %query-planning-context-transaction-id
                         :initform common-lisp:nil)
                        (query-parameters :initarg :query-parameters :type
                         (common-lisp:or query-parameter-map common-lisp:null)
                         :accessor %query-planning-context-query-parameters
                         :initform common-lisp:nil)
                        (query-as-of-time :initarg :query-as-of-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %query-planning-context-query-as-of-time :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or
                          query-planning-context-database-name-string
                          common-lisp:null)
                         :accessor %query-planning-context-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %query-planning-context-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-planning-context 'make-query-planning-context))
 (common-lisp:defun make-query-planning-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id query-parameters
                     query-as-of-time database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'query-planning-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-planning-context))
   common-lisp:nil))
(common-lisp:deftype query-planning-context-database-name-string ()
  'common-lisp:string)
(common-lisp:deftype query-state-string () 'common-lisp:string)
(common-lisp:deftype ramresource-share-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-resource-request common-lisp:nil
                       ((with-federation :initarg :with-federation :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %register-resource-request-with-federation
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %register-resource-request-role-arn
                         :initform common-lisp:nil)
                        (use-service-linked-role :initarg
                         :use-service-linked-role :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %register-resource-request-use-service-linked-role
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %register-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'register-resource-request
                    'make-register-resource-request))
 (common-lisp:defun make-register-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-federation role-arn
                     use-service-linked-role resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'register-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-service-linked-role))
      (common-lisp:list
       (common-lisp:cons "UseServiceLinkedRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-resource-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'register-resource-response
                    'make-register-resource-response))
 (common-lisp:defun make-register-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'register-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-lftags-from-resource-request common-lisp:nil
                       ((lftags :initarg :lftags :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %remove-lftags-from-resource-request-lftags
                         :initform (common-lisp:error ":lftags is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %remove-lftags-from-resource-request-resource
                         :initform (common-lisp:error ":resource is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %remove-lftags-from-resource-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-lftags-from-resource-request
                    'make-remove-lftags-from-resource-request))
 (common-lisp:defun make-remove-lftags-from-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags resource catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-lftags-from-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-lftags-from-resource-response common-lisp:nil
                       ((failures :initarg :failures :type
                         (common-lisp:or lftag-errors common-lisp:null)
                         :accessor
                         %remove-lftags-from-resource-response-failures
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-lftags-from-resource-response
                    'make-remove-lftags-from-resource-response))
 (common-lisp:defun make-remove-lftags-from-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-lftags-from-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-lftags-from-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((lftag-policy :initarg :lftag-policy :type
                         (common-lisp:or lftag-policy-resource
                                         common-lisp:null)
                         :accessor %resource-lftag-policy :initform
                         common-lisp:nil)
                        (lftag :initarg :lftag :type
                         (common-lisp:or lftag-key-resource common-lisp:null)
                         :accessor %resource-lftag :initform common-lisp:nil)
                        (data-cells-filter :initarg :data-cells-filter :type
                         (common-lisp:or data-cells-filter-resource
                                         common-lisp:null)
                         :accessor %resource-data-cells-filter :initform
                         common-lisp:nil)
                        (data-location :initarg :data-location :type
                         (common-lisp:or data-location-resource
                                         common-lisp:null)
                         :accessor %resource-data-location :initform
                         common-lisp:nil)
                        (table-with-columns :initarg :table-with-columns :type
                         (common-lisp:or table-with-columns-resource
                                         common-lisp:null)
                         :accessor %resource-table-with-columns :initform
                         common-lisp:nil)
                        (table :initarg :table :type
                         (common-lisp:or table-resource common-lisp:null)
                         :accessor %resource-table :initform common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database-resource common-lisp:null)
                         :accessor %resource-database :initform
                         common-lisp:nil)
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog-resource common-lisp:null)
                         :accessor %resource-catalog :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defun make-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftag-policy lftag data-cells-filter
                     data-location table-with-columns table database catalog)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-with-columns))
      (common-lisp:list
       (common-lisp:cons "TableWithColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "DataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-cells-filter))
      (common-lisp:list
       (common-lisp:cons "DataCellsFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag))
      (common-lisp:list
       (common-lisp:cons "LFTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-policy))
      (common-lisp:list
       (common-lisp:cons "LFTagPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-info common-lisp:nil
                       ((with-federation :initarg :with-federation :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %resource-info-with-federation :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified-timestamp
                                         common-lisp:null)
                         :accessor %resource-info-last-modified :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %resource-info-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %resource-info-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-info 'make-resource-info))
 (common-lisp:defun make-resource-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-federation last-modified role-arn
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-info-list ()
   '(trivial-types:proper-list resource-info))
 (common-lisp:defun |make-resource-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-number-limit-exceeded-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-number-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-number-limit-exceeded-exception
                    'resource-number-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resource-share-list ()
   '(trivial-types:proper-list ramresource-share-arn))
 (common-lisp:defun |make-resource-share-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ramresource-share-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-share-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result () 'common-lisp:string)
(common-lisp:deftype result-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass revoke-permissions-request common-lisp:nil
                       ((permissions-with-grant-option :initarg
                         :permissions-with-grant-option :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         %revoke-permissions-request-permissions-with-grant-option
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor %revoke-permissions-request-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         %revoke-permissions-request-resource :initform
                         (common-lisp:error ":resource is required"))
                        (principal :initarg :principal :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor %revoke-permissions-request-principal
                         :initform
                         (common-lisp:error ":principal is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %revoke-permissions-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'revoke-permissions-request
                    'make-revoke-permissions-request))
 (common-lisp:defun make-revoke-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions-with-grant-option permissions
                     resource principal catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-with-grant-option))
      (common-lisp:list
       (common-lisp:cons "PermissionsWithGrantOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-permissions-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'revoke-permissions-response
                    'make-revoke-permissions-response))
 (common-lisp:defun make-revoke-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass row-filter common-lisp:nil
                       ((all-rows-wildcard :initarg :all-rows-wildcard :type
                         (common-lisp:or all-rows-wildcard common-lisp:null)
                         :accessor %row-filter-all-rows-wildcard :initform
                         common-lisp:nil)
                        (filter-expression :initarg :filter-expression :type
                         (common-lisp:or predicate-string common-lisp:null)
                         :accessor %row-filter-filter-expression :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'row-filter 'make-row-filter))
 (common-lisp:defun make-row-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-rows-wildcard filter-expression)
   (common-lisp:apply #'common-lisp:make-instance 'row-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-rows-wildcard))
      (common-lisp:list
       (common-lisp:cons "AllRowsWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row-filter))
   common-lisp:nil))
(common-lisp:deftype samlassertion-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-databases-by-lftags-request common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %search-databases-by-lftags-request-expression
                         :initform
                         (common-lisp:error ":expression is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %search-databases-by-lftags-request-catalog-id
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or search-page-size common-lisp:null)
                         :accessor
                         %search-databases-by-lftags-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %search-databases-by-lftags-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-databases-by-lftags-request
                    'make-search-databases-by-lftags-request))
 (common-lisp:defun make-search-databases-by-lftags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression catalog-id max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-databases-by-lftags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-databases-by-lftags-response common-lisp:nil
                       ((database-list :initarg :database-list :type
                         (common-lisp:or database-lftags-list common-lisp:null)
                         :accessor
                         %search-databases-by-lftags-response-database-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %search-databases-by-lftags-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-databases-by-lftags-response
                    'make-search-databases-by-lftags-response))
 (common-lisp:defun make-search-databases-by-lftags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-databases-by-lftags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-databases-by-lftags-response))
   common-lisp:nil))
(common-lisp:deftype search-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-tables-by-lftags-request common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %search-tables-by-lftags-request-expression :initform
                         (common-lisp:error ":expression is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %search-tables-by-lftags-request-catalog-id
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or search-page-size common-lisp:null)
                         :accessor %search-tables-by-lftags-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %search-tables-by-lftags-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-tables-by-lftags-request
                    'make-search-tables-by-lftags-request))
 (common-lisp:defun make-search-tables-by-lftags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression catalog-id max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-tables-by-lftags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-tables-by-lftags-response common-lisp:nil
                       ((table-list :initarg :table-list :type
                         (common-lisp:or table-lftags-list common-lisp:null)
                         :accessor %search-tables-by-lftags-response-table-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %search-tables-by-lftags-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-tables-by-lftags-response
                    'make-search-tables-by-lftags-response))
 (common-lisp:defun make-search-tables-by-lftags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-tables-by-lftags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-by-lftags-response))
   common-lisp:nil))
(common-lisp:deftype secret-access-key-string () 'common-lisp:string)
(common-lisp:deftype session-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-query-planning-request common-lisp:nil
                       ((query-string :initarg :query-string :type
                         (common-lisp:or
                          synthetic-start-query-planning-request-query-string
                          common-lisp:null)
                         :accessor %start-query-planning-request-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))
                        (query-planning-context :initarg
                         :query-planning-context :type
                         (common-lisp:or query-planning-context
                                         common-lisp:null)
                         :accessor
                         %start-query-planning-request-query-planning-context
                         :initform
                         (common-lisp:error
                          ":query-planning-context is required"))))
 (common-lisp:export
  (common-lisp:list 'start-query-planning-request
                    'make-start-query-planning-request))
 (common-lisp:defun make-start-query-planning-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string query-planning-context)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-planning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-context))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-planning-response common-lisp:nil
                       ((query-id :initarg :query-id :type
                         (common-lisp:or query-id-string common-lisp:null)
                         :accessor %start-query-planning-response-query-id
                         :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-query-planning-response
                    'make-start-query-planning-response))
 (common-lisp:defun make-start-query-planning-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-query-planning-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-planning-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-request common-lisp:nil
                       ((transaction-type :initarg :transaction-type :type
                         (common-lisp:or transaction-type common-lisp:null)
                         :accessor %start-transaction-request-transaction-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-transaction-request
                    'make-start-transaction-request))
 (common-lisp:defun make-start-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-type)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-type))
      (common-lisp:list
       (common-lisp:cons "TransactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-response common-lisp:nil
                       ((transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %start-transaction-response-transaction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-transaction-response
                    'make-start-transaction-response))
 (common-lisp:defun make-start-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition statistics-not-ready-yet-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       statistics-not-ready-yet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'statistics-not-ready-yet-exception
                    'statistics-not-ready-yet-exception-message)))
(common-lisp:progn
 (common-lisp:defclass storage-optimizer common-lisp:nil
                       ((last-run-details :initarg :last-run-details :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor %storage-optimizer-last-run-details
                         :initform common-lisp:nil)
                        (warnings :initarg :warnings :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor %storage-optimizer-warnings :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor %storage-optimizer-error-message :initform
                         common-lisp:nil)
                        (config :initarg :config :type
                         (common-lisp:or storage-optimizer-config
                                         common-lisp:null)
                         :accessor %storage-optimizer-config :initform
                         common-lisp:nil)
                        (storage-optimizer-type :initarg
                         :storage-optimizer-type :type
                         (common-lisp:or optimizer-type common-lisp:null)
                         :accessor %storage-optimizer-storage-optimizer-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-optimizer 'make-storage-optimizer))
 (common-lisp:defun make-storage-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-run-details warnings error-message
                     config storage-optimizer-type)
   (common-lisp:apply #'common-lisp:make-instance 'storage-optimizer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-optimizer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-optimizer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-type))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-details))
      (common-lisp:list
       (common-lisp:cons "LastRunDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-optimizer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-config () 'common-lisp:hash-table)
 (common-lisp:defun |make-storage-optimizer-config|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype storage-optimizer-config-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-config-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-storage-optimizer-config-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype storage-optimizer-config-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-optimizer-list ()
   '(trivial-types:proper-list storage-optimizer))
 (common-lisp:defun |make-storage-optimizer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-optimizer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-value-list ()
   '(trivial-types:proper-list string-value))
 (common-lisp:defun |make-string-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-get-work-unit-results-request-work-unit-token-string
                     ()
  'common-lisp:string)
(common-lisp:deftype synthetic-start-query-planning-request-query-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-lftags-list ()
   '(trivial-types:proper-list tagged-table))
 (common-lisp:defun |make-table-lftags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-table))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-object common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or object-size common-lisp:null)
                         :accessor %table-object-size :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag-string common-lisp:null)
                         :accessor %table-object-etag :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %table-object-uri :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'table-object 'make-table-object))
 (common-lisp:defun make-table-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size etag uri)
   (common-lisp:apply #'common-lisp:make-instance 'table-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-object-list ()
   '(trivial-types:proper-list table-object))
 (common-lisp:defun |make-table-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-resource common-lisp:nil
                       ((table-wildcard :initarg :table-wildcard :type
                         (common-lisp:or table-wildcard common-lisp:null)
                         :accessor %table-resource-table-wildcard :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %table-resource-name :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %table-resource-database-name :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %table-resource-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'table-resource 'make-table-resource))
 (common-lisp:defun make-table-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-wildcard name database-name
                     catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'table-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-wildcard))
      (common-lisp:list
       (common-lisp:cons "TableWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-wildcard common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'table-wildcard 'make-table-wildcard))
 (common-lisp:defun make-table-wildcard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'table-wildcard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-wildcard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-wildcard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-with-columns-resource common-lisp:nil
                       ((column-wildcard :initarg :column-wildcard :type
                         (common-lisp:or column-wildcard common-lisp:null)
                         :accessor %table-with-columns-resource-column-wildcard
                         :initform common-lisp:nil)
                        (column-names :initarg :column-names :type
                         (common-lisp:or column-names common-lisp:null)
                         :accessor %table-with-columns-resource-column-names
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %table-with-columns-resource-name :initform
                         (common-lisp:error ":name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %table-with-columns-resource-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %table-with-columns-resource-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-with-columns-resource
                    'make-table-with-columns-resource))
 (common-lisp:defun make-table-with-columns-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-wildcard column-names name
                     database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'table-with-columns-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-wildcard))
      (common-lisp:list
       (common-lisp:cons "ColumnWildcard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-with-columns-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-value-list ()
   '(trivial-types:proper-list lftag-value))
 (common-lisp:defun |make-tag-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tagged-database common-lisp:nil
                       ((lftags :initarg :lftags :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %tagged-database-lftags :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database-resource common-lisp:null)
                         :accessor %tagged-database-database :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tagged-database 'make-tagged-database))
 (common-lisp:defun make-tagged-database
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags database)
   (common-lisp:apply #'common-lisp:make-instance 'tagged-database
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags))
      (common-lisp:list
       (common-lisp:cons "LFTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tagged-table common-lisp:nil
                       ((lftags-on-columns :initarg :lftags-on-columns :type
                         (common-lisp:or column-lftags-list common-lisp:null)
                         :accessor %tagged-table-lftags-on-columns :initform
                         common-lisp:nil)
                        (lftags-on-table :initarg :lftags-on-table :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %tagged-table-lftags-on-table :initform
                         common-lisp:nil)
                        (lftag-on-database :initarg :lftag-on-database :type
                         (common-lisp:or lftags-list common-lisp:null)
                         :accessor %tagged-table-lftag-on-database :initform
                         common-lisp:nil)
                        (table :initarg :table :type
                         (common-lisp:or table-resource common-lisp:null)
                         :accessor %tagged-table-table :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tagged-table 'make-tagged-table))
 (common-lisp:defun make-tagged-table
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftags-on-columns lftags-on-table
                     lftag-on-database table)
   (common-lisp:apply #'common-lisp:make-instance 'tagged-table
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-on-database))
      (common-lisp:list
       (common-lisp:cons "LFTagOnDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-table))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftags-on-columns))
      (common-lisp:list
       (common-lisp:cons "LFTagsOnColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttled-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttled-exception 'throttled-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition transaction-canceled-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-canceled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-canceled-exception
                    'transaction-canceled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition transaction-commit-in-progress-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-commit-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-commit-in-progress-exception
                    'transaction-commit-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition transaction-committed-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-committed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-committed-exception
                    'transaction-committed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transaction-description common-lisp:nil
                       ((transaction-end-time :initarg :transaction-end-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %transaction-description-transaction-end-time
                         :initform common-lisp:nil)
                        (transaction-start-time :initarg
                         :transaction-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %transaction-description-transaction-start-time
                         :initform common-lisp:nil)
                        (transaction-status :initarg :transaction-status :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor %transaction-description-transaction-status
                         :initform common-lisp:nil)
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %transaction-description-transaction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transaction-description 'make-transaction-description))
 (common-lisp:defun make-transaction-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-end-time
                     transaction-start-time transaction-status transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'transaction-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "TransactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-start-time))
      (common-lisp:list
       (common-lisp:cons "TransactionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-end-time))
      (common-lisp:list
       (common-lisp:cons "TransactionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transaction-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transaction-description-list ()
   '(trivial-types:proper-list transaction-description))
 (common-lisp:defun |make-transaction-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transaction-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transaction-id-string () 'common-lisp:string)
(common-lisp:deftype transaction-status () 'common-lisp:string)
(common-lisp:deftype transaction-status-filter () 'common-lisp:string)
(common-lisp:deftype transaction-type () 'common-lisp:string)
(common-lisp:deftype true-false-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trusted-resource-owners ()
   '(trivial-types:proper-list catalog-id-string))
 (common-lisp:defun |make-trusted-resource-owners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-data-cells-filter-request common-lisp:nil
                       ((table-data :initarg :table-data :type
                         (common-lisp:or data-cells-filter common-lisp:null)
                         :accessor %update-data-cells-filter-request-table-data
                         :initform
                         (common-lisp:error ":table-data is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-cells-filter-request
                    'make-update-data-cells-filter-request))
 (common-lisp:defun make-update-data-cells-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-data)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-cells-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-data))
      (common-lisp:list
       (common-lisp:cons "TableData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-cells-filter-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-data-cells-filter-response
                    'make-update-data-cells-filter-response))
 (common-lisp:defun make-update-data-cells-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-cells-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-cells-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lftag-request common-lisp:nil
                       ((tag-values-to-add :initarg :tag-values-to-add :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %update-lftag-request-tag-values-to-add
                         :initform common-lisp:nil)
                        (tag-values-to-delete :initarg :tag-values-to-delete
                         :type (common-lisp:or tag-value-list common-lisp:null)
                         :accessor %update-lftag-request-tag-values-to-delete
                         :initform common-lisp:nil)
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or lftag-key common-lisp:null) :accessor
                         %update-lftag-request-tag-key :initform
                         (common-lisp:error ":tag-key is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %update-lftag-request-catalog-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-lftag-request 'make-update-lftag-request))
 (common-lisp:defun make-update-lftag-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values-to-add tag-values-to-delete
                     tag-key catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-lftag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-lftag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-lftag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-values-to-delete))
      (common-lisp:list
       (common-lisp:cons "TagValuesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values-to-add))
      (common-lisp:list
       (common-lisp:cons "TagValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-lftag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lftag-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-lftag-response 'make-update-lftag-response))
 (common-lisp:defun make-update-lftag-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-lftag-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lftag-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-request common-lisp:nil
                       ((with-federation :initarg :with-federation :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %update-resource-request-with-federation
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %update-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %update-resource-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-request 'make-update-resource-request))
 (common-lisp:defun make-update-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-federation resource-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-federation))
      (common-lisp:list
       (common-lisp:cons "WithFederation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-response 'make-update-resource-response))
 (common-lisp:defun make-update-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-objects-request common-lisp:nil
                       ((write-operations :initarg :write-operations :type
                         (common-lisp:or write-operation-list common-lisp:null)
                         :accessor
                         %update-table-objects-request-write-operations
                         :initform
                         (common-lisp:error ":write-operations is required"))
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor %update-table-objects-request-transaction-id
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-table-objects-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-table-objects-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor %update-table-objects-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-table-objects-request
                    'make-update-table-objects-request))
 (common-lisp:defun make-update-table-objects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-operations transaction-id
                     table-name database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-operations))
      (common-lisp:list
       (common-lisp:cons "WriteOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-objects-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-table-objects-response
                    'make-update-table-objects-response))
 (common-lisp:defun make-update-table-objects-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-table-objects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-storage-optimizer-request common-lisp:nil
                       ((storage-optimizer-config :initarg
                         :storage-optimizer-config :type
                         (common-lisp:or storage-optimizer-config-map
                                         common-lisp:null)
                         :accessor
                         %update-table-storage-optimizer-request-storage-optimizer-config
                         :initform
                         (common-lisp:error
                          ":storage-optimizer-config is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %update-table-storage-optimizer-request-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %update-table-storage-optimizer-request-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         %update-table-storage-optimizer-request-catalog-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-table-storage-optimizer-request
                    'make-update-table-storage-optimizer-request))
 (common-lisp:defun make-update-table-storage-optimizer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-optimizer-config table-name
                     database-name catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-table-storage-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-optimizer-config))
      (common-lisp:list
       (common-lisp:cons "StorageOptimizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-storage-optimizer-response common-lisp:nil
                       ((result :initarg :result :type
                         (common-lisp:or result common-lisp:null) :accessor
                         %update-table-storage-optimizer-response-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-table-storage-optimizer-response
                    'make-update-table-storage-optimizer-response))
 (common-lisp:defun make-update-table-storage-optimizer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-table-storage-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-storage-optimizer-response))
   common-lisp:nil))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun |make-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-object common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or etag-string common-lisp:null)
                         :accessor %virtual-object-etag :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %virtual-object-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export (common-lisp:list 'virtual-object 'make-virtual-object))
 (common-lisp:defun make-virtual-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag uri)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-object-list ()
   '(trivial-types:proper-list virtual-object))
 (common-lisp:defun |make-virtual-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-unit-id-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass work-unit-range common-lisp:nil
                       ((work-unit-token :initarg :work-unit-token :type
                         (common-lisp:or work-unit-token-string
                                         common-lisp:null)
                         :accessor %work-unit-range-work-unit-token :initform
                         (common-lisp:error ":work-unit-token is required"))
                        (work-unit-id-min :initarg :work-unit-id-min :type
                         (common-lisp:or work-unit-id-long common-lisp:null)
                         :accessor %work-unit-range-work-unit-id-min :initform
                         (common-lisp:error ":work-unit-id-min is required"))
                        (work-unit-id-max :initarg :work-unit-id-max :type
                         (common-lisp:or work-unit-id-long common-lisp:null)
                         :accessor %work-unit-range-work-unit-id-max :initform
                         (common-lisp:error ":work-unit-id-max is required"))))
 (common-lisp:export (common-lisp:list 'work-unit-range 'make-work-unit-range))
 (common-lisp:defun make-work-unit-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-unit-token work-unit-id-min
                     work-unit-id-max)
   (common-lisp:apply #'common-lisp:make-instance 'work-unit-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-unit-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-unit-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id-max))
      (common-lisp:list
       (common-lisp:cons "WorkUnitIdMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-id-min))
      (common-lisp:list
       (common-lisp:cons "WorkUnitIdMin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-unit-token))
      (common-lisp:list
       (common-lisp:cons "WorkUnitToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-unit-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype work-unit-range-list ()
   '(trivial-types:proper-list work-unit-range))
 (common-lisp:defun |make-work-unit-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-unit-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-unit-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition work-units-not-ready-yet-exception
     (lakeformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       work-units-not-ready-yet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'work-units-not-ready-yet-exception
                    'work-units-not-ready-yet-exception-message)))
(common-lisp:progn
 (common-lisp:defclass write-operation common-lisp:nil
                       ((delete-object :initarg :delete-object :type
                         (common-lisp:or delete-object-input common-lisp:null)
                         :accessor %write-operation-delete-object :initform
                         common-lisp:nil)
                        (add-object :initarg :add-object :type
                         (common-lisp:or add-object-input common-lisp:null)
                         :accessor %write-operation-add-object :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'write-operation 'make-write-operation))
 (common-lisp:defun make-write-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-object add-object)
   (common-lisp:apply #'common-lisp:make-instance 'write-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input write-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input write-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-object))
      (common-lisp:list
       (common-lisp:cons "AddObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-object))
      (common-lisp:list
       (common-lisp:cons "DeleteObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input write-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype write-operation-list ()
   '(trivial-types:proper-list write-operation))
 (common-lisp:defun |make-write-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list write-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-lftags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource lftags)
   (common-lisp:declare (common-lisp:ignorable catalog-id resource lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-lftags-to-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/AddLFTagsToResource"
                                                        "AddLFTagsToResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-lftags-to-resource))
(common-lisp:progn
 (common-lisp:defun assume-decorated-role-with-saml
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlassertion role-arn principal-arn
                     duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable samlassertion role-arn principal-arn
     duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-decorated-role-with-samlrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/AssumeDecoratedRoleWithSAML"
                                                        "AssumeDecoratedRoleWithSAML"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'assume-decorated-role-with-saml))
(common-lisp:progn
 (common-lisp:defun batch-grant-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id entries)
   (common-lisp:declare (common-lisp:ignorable catalog-id entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-grant-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/BatchGrantPermissions"
                                                        "BatchGrantPermissions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-grant-permissions))
(common-lisp:progn
 (common-lisp:defun batch-revoke-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id entries)
   (common-lisp:declare (common-lisp:ignorable catalog-id entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-revoke-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/BatchRevokePermissions"
                                                        "BatchRevokePermissions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-revoke-permissions))
(common-lisp:progn
 (common-lisp:defun cancel-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CancelTransaction"
                                                        "CancelTransaction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-transaction))
(common-lisp:progn
 (common-lisp:defun commit-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-commit-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CommitTransaction"
                                                        "CommitTransaction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'commit-transaction))
(common-lisp:progn
 (common-lisp:defun create-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-data)
   (common-lisp:declare (common-lisp:ignorable table-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CreateDataCellsFilter"
                                                        "CreateDataCellsFilter"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun create-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key tag-values)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CreateLFTag"
                                                        "CreateLFTag"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lftag))
(common-lisp:progn
 (common-lisp:defun delete-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-catalog-id database-name table-name
                     name)
   (common-lisp:declare
    (common-lisp:ignorable table-catalog-id database-name table-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeleteDataCellsFilter"
                                                        "DeleteDataCellsFilter"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun delete-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeleteLFTag"
                                                        "DeleteLFTag"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lftag))
(common-lisp:progn
 (common-lisp:defun delete-objects-on-cancel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id objects)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     objects))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-objects-on-cancel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeleteObjectsOnCancel"
                                                        "DeleteObjectsOnCancel"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-objects-on-cancel))
(common-lisp:progn
 (common-lisp:defun deregister-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeregisterResource"
                                                        "DeregisterResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-resource))
(common-lisp:progn
 (common-lisp:defun describe-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeResource"
                                                        "DescribeResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource))
(common-lisp:progn
 (common-lisp:defun describe-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeTransaction"
                                                        "DescribeTransaction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-transaction))
(common-lisp:progn
 (common-lisp:defun extend-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-id)
   (common-lisp:declare (common-lisp:ignorable transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-extend-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ExtendTransaction"
                                                        "ExtendTransaction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'extend-transaction))
(common-lisp:progn
 (common-lisp:defun get-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-catalog-id database-name table-name
                     name)
   (common-lisp:declare
    (common-lisp:ignorable table-catalog-id database-name table-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetDataCellsFilter"
                                                        "GetDataCellsFilter"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun get-data-lake-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-lake-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetDataLakeSettings"
                                                        "GetDataLakeSettings"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-lake-settings))
(common-lisp:progn
 (common-lisp:defun get-effective-permissions-for-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-effective-permissions-for-path-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetEffectivePermissionsForPath"
                                                        "GetEffectivePermissionsForPath"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-effective-permissions-for-path))
(common-lisp:progn
 (common-lisp:defun get-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key)
   (common-lisp:declare (common-lisp:ignorable catalog-id tag-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetLFTag" "GetLFTag"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lftag))
(common-lisp:progn
 (common-lisp:defun get-query-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetQueryState"
                                                        "GetQueryState"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-state))
(common-lisp:progn
 (common-lisp:defun get-query-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetQueryStatistics"
                                                        "GetQueryStatistics"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-statistics))
(common-lisp:progn
 (common-lisp:defun get-resource-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource show-assigned-lftags)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource show-assigned-lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetResourceLFTags"
                                                        "GetResourceLFTags"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-lftags))
(common-lisp:progn
 (common-lisp:defun get-table-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id query-as-of-time partition-predicate
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     query-as-of-time partition-predicate max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetTableObjects"
                                                        "GetTableObjects"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-objects))
(common-lisp:progn
 (common-lisp:defun get-temporary-glue-partition-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-arn partition permissions
                     duration-seconds audit-context supported-permission-types)
   (common-lisp:declare
    (common-lisp:ignorable table-arn partition permissions duration-seconds
     audit-context supported-permission-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-temporary-glue-partition-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetTemporaryGluePartitionCredentials"
                                                        "GetTemporaryGluePartitionCredentials"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-temporary-glue-partition-credentials))
(common-lisp:progn
 (common-lisp:defun get-temporary-glue-table-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-arn permissions duration-seconds
                     audit-context supported-permission-types)
   (common-lisp:declare
    (common-lisp:ignorable table-arn permissions duration-seconds audit-context
     supported-permission-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-temporary-glue-table-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetTemporaryGlueTableCredentials"
                                                        "GetTemporaryGlueTableCredentials"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-temporary-glue-table-credentials))
(common-lisp:progn
 (common-lisp:defun get-work-unit-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id work-unit-id work-unit-token)
   (common-lisp:declare
    (common-lisp:ignorable query-id work-unit-id work-unit-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-unit-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetWorkUnitResults"
                                                        "GetWorkUnitResults"
                                                        "2017-03-31")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-work-unit-results))
(common-lisp:progn
 (common-lisp:defun get-work-units
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token page-size query-id)
   (common-lisp:declare (common-lisp:ignorable next-token page-size query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-units-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetWorkUnits"
                                                        "GetWorkUnits"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-work-units))
(common-lisp:progn
 (common-lisp:defun grant-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource permissions
                     permissions-with-grant-option)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource permissions
     permissions-with-grant-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-grant-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GrantPermissions"
                                                        "GrantPermissions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'grant-permissions))
(common-lisp:progn
 (common-lisp:defun list-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table next-token max-results)
   (common-lisp:declare (common-lisp:ignorable table next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListDataCellsFilter"
                                                        "ListDataCellsFilter"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun list-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource-share-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id resource-share-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListLFTags"
                                                        "ListLFTags"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lftags))
(common-lisp:progn
 (common-lisp:defun list-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource-type
                     resource next-token max-results include-related)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource-type resource
     next-token max-results include-related))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListPermissions"
                                                        "ListPermissions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-permissions))
(common-lisp:progn
 (common-lisp:defun list-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-condition-list max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-condition-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListResources"
                                                        "ListResources"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resources))
(common-lisp:progn
 (common-lisp:defun list-table-storage-optimizers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     storage-optimizer-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     storage-optimizer-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-table-storage-optimizers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListTableStorageOptimizers"
                                                        "ListTableStorageOptimizers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-storage-optimizers))
(common-lisp:progn
 (common-lisp:defun list-transactions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id status-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id status-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transactions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListTransactions"
                                                        "ListTransactions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transactions))
(common-lisp:progn
 (common-lisp:defun put-data-lake-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id data-lake-settings)
   (common-lisp:declare (common-lisp:ignorable catalog-id data-lake-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-data-lake-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/PutDataLakeSettings"
                                                        "PutDataLakeSettings"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-data-lake-settings))
(common-lisp:progn
 (common-lisp:defun register-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn use-service-linked-role
                     role-arn with-federation)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn use-service-linked-role role-arn
     with-federation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/RegisterResource"
                                                        "RegisterResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-resource))
(common-lisp:progn
 (common-lisp:defun remove-lftags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id resource lftags)
   (common-lisp:declare (common-lisp:ignorable catalog-id resource lftags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-lftags-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/RemoveLFTagsFromResource"
                                                        "RemoveLFTagsFromResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-lftags-from-resource))
(common-lisp:progn
 (common-lisp:defun revoke-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id principal resource permissions
                     permissions-with-grant-option)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id principal resource permissions
     permissions-with-grant-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/RevokePermissions"
                                                        "RevokePermissions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-permissions))
(common-lisp:progn
 (common-lisp:defun search-databases-by-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results catalog-id
                     expression)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results catalog-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-databases-by-lftags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/SearchDatabasesByLFTags"
                                                        "SearchDatabasesByLFTags"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-databases-by-lftags))
(common-lisp:progn
 (common-lisp:defun search-tables-by-lftags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results catalog-id
                     expression)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results catalog-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-tables-by-lftags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/SearchTablesByLFTags"
                                                        "SearchTablesByLFTags"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-tables-by-lftags))
(common-lisp:progn
 (common-lisp:defun start-query-planning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-planning-context query-string)
   (common-lisp:declare
    (common-lisp:ignorable query-planning-context query-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-planning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/StartQueryPlanning"
                                                        "StartQueryPlanning"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-query-planning))
(common-lisp:progn
 (common-lisp:defun start-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-type)
   (common-lisp:declare (common-lisp:ignorable transaction-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/StartTransaction"
                                                        "StartTransaction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-transaction))
(common-lisp:progn
 (common-lisp:defun update-data-cells-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-data)
   (common-lisp:declare (common-lisp:ignorable table-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-cells-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateDataCellsFilter"
                                                        "UpdateDataCellsFilter"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-cells-filter))
(common-lisp:progn
 (common-lisp:defun update-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id tag-key tag-values-to-delete
                     tag-values-to-add)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id tag-key tag-values-to-delete
     tag-values-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lftag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateLFTag"
                                                        "UpdateLFTag"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lftag))
(common-lisp:progn
 (common-lisp:defun update-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn resource-arn with-federation)
   (common-lisp:declare
    (common-lisp:ignorable role-arn resource-arn with-federation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateResource"
                                                        "UpdateResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource))
(common-lisp:progn
 (common-lisp:defun update-table-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     transaction-id write-operations)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name transaction-id
     write-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateTableObjects"
                                                        "UpdateTableObjects"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-table-objects))
(common-lisp:progn
 (common-lisp:defun update-table-storage-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     storage-optimizer-config)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     storage-optimizer-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-table-storage-optimizer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lakeformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateTableStorageOptimizer"
                                                        "UpdateTableStorageOptimizer"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-table-storage-optimizer))
