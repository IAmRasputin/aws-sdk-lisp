;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/snow-device-management/api
  (:use)
  (:nicknames #:aws/snow-device-management)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/snow-device-management/api)
(common-lisp:progn
 (common-lisp:defclass snow-device-management-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "snow-device-management"
                        :protocol :rest-json))
 (common-lisp:export 'snow-device-management-request))
(common-lisp:progn
 (common-lisp:define-condition snow-device-management-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'snow-device-management-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype attachment-status () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-task-input-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-task-input 'make-cancel-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-task-output-"))
   (task-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-task-output 'make-cancel-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity (:copier common-lisp:nil) (:conc-name "struct-shape-capacity-"))
   (available common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or capacity-name-string common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or capacity-unit-string common-lisp:null))
   (used common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capacity 'make-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available))
      (common-lisp:list
       (common-lisp:cons "available"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype capacity-list () '(trivial-types:proper-list capacity))
 (common-lisp:defun |make-capacity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capacity-name-string () 'common-lisp:string)
(common-lisp:deftype capacity-unit-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (command (:copier common-lisp:nil) (:conc-name "struct-shape-command-"))
   (reboot common-lisp:nil :type (common-lisp:or reboot common-lisp:null))
   (unlock common-lisp:nil :type (common-lisp:or unlock common-lisp:null)))
 (common-lisp:export (common-lisp:list 'command 'make-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot))
      (common-lisp:list
       (common-lisp:cons "reboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlock))
      (common-lisp:list
       (common-lisp:cons "unlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cpu-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-cpu-options-"))
   (core-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (threads-per-core common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cpu-options 'make-cpu-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpu-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpu-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-count))
      (common-lisp:list
       (common-lisp:cons "coreCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threads-per-core))
      (common-lisp:list
       (common-lisp:cons "threadsPerCore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpu-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-task-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (command (common-lisp:error ":command is required") :type
    (common-lisp:or command common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-description-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or target-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-task-input 'make-create-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-task-output-"))
   (task-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-task-output 'make-create-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-ec2input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-ec2input-"))
   (instance-ids (common-lisp:error ":instanceids is required") :type
    (common-lisp:or instance-ids-list common-lisp:null))
   (managed-device-id (common-lisp:error ":manageddeviceid is required") :type
    (common-lisp:or managed-device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-ec2input 'make-describe-device-ec2input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "instanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-ec2output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-ec2output-"))
   (instances common-lisp:nil :type
    (common-lisp:or instance-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-ec2output
                    'make-describe-device-ec2output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-ec2output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-input-"))
   (managed-device-id (common-lisp:error ":manageddeviceid is required") :type
    (common-lisp:or managed-device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-input 'make-describe-device-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-output-"))
   (associated-with-job common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (device-capacities common-lisp:nil :type
    (common-lisp:or capacity-list common-lisp:null))
   (device-state common-lisp:nil :type
    (common-lisp:or unlock-state common-lisp:null))
   (device-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (last-reached-out-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (managed-device-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (managed-device-id common-lisp:nil :type
    (common-lisp:or managed-device-id common-lisp:null))
   (physical-network-interfaces common-lisp:nil :type
    (common-lisp:or physical-network-interface-list common-lisp:null))
   (software common-lisp:nil :type
    (common-lisp:or software-information common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-output 'make-describe-device-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-with-job))
      (common-lisp:list
       (common-lisp:cons "associatedWithJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-capacities))
      (common-lisp:list
       (common-lisp:cons "deviceCapacities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "deviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-reached-out-at))
      (common-lisp:list
       (common-lisp:cons "lastReachedOutAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-arn))
      (common-lisp:list
       (common-lisp:cons "managedDeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-id))
      (common-lisp:list
       (common-lisp:cons "managedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-network-interfaces))
      (common-lisp:list
       (common-lisp:cons "physicalNetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software))
      (common-lisp:list
       (common-lisp:cons "software"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-input-"))
   (managed-device-id (common-lisp:error ":manageddeviceid is required") :type
    (common-lisp:or managed-device-id common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-input 'make-describe-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-output-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (managed-device-id common-lisp:nil :type
    (common-lisp:or managed-device-id common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or execution-state common-lisp:null))
   (task-id common-lisp:nil :type (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-output
                    'make-describe-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-id))
      (common-lisp:list
       (common-lisp:cons "managedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-task-input-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-task-input 'make-describe-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-task-output-"))
   (completed-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-description-string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or task-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (task-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-task-output 'make-describe-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (device-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-summary-"))
   (associated-with-job common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (managed-device-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (managed-device-id common-lisp:nil :type
    (common-lisp:or managed-device-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-summary 'make-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-with-job))
      (common-lisp:list
       (common-lisp:cons "associatedWithJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-arn))
      (common-lisp:list
       (common-lisp:cons "managedDeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-id))
      (common-lisp:list
       (common-lisp:cons "managedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-summary-list ()
   '(trivial-types:proper-list device-summary))
 (common-lisp:defun |make-device-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-instance-block-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-instance-block-device-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-instance-block-device
                    'make-ebs-instance-block-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "attachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "deleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "volumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   common-lisp:nil))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:deftype execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-summary-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (managed-device-id common-lisp:nil :type
    (common-lisp:or managed-device-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or execution-state common-lisp:null))
   (task-id common-lisp:nil :type (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-summary 'make-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-device-id))
      (common-lisp:list
       (common-lisp:cons "managedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype execution-summary-list ()
   '(trivial-types:proper-list execution-summary))
 (common-lisp:defun |make-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (ami-launch-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mapping-list common-lisp:null))
   (cpu-options common-lisp:nil :type
    (common-lisp:or cpu-options common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (root-device-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-identifier-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-launch-index))
      (common-lisp:list
       (common-lisp:cons "amiLaunchIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-options))
      (common-lisp:list
       (common-lisp:cons "cpuOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "publicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-name))
      (common-lisp:list
       (common-lisp:cons "rootDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-block-device-mapping-"))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or ebs-instance-block-device common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-block-device-mapping
                    'make-instance-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-block-device-mapping-list ()
   '(trivial-types:proper-list instance-block-device-mapping))
 (common-lisp:defun |make-instance-block-device-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-instance-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-state-"))
   (code common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or instance-state-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:deftype instance-state-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-summary-"))
   (instance common-lisp:nil :type (common-lisp:or instance common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun |make-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype ip-address-assignment () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-resources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-resources-input-"))
   (managed-device-id (common-lisp:error ":manageddeviceid is required") :type
    (common-lisp:or managed-device-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or list-device-resources-input-type-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-resources-input
                    'make-list-device-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-input))
   common-lisp:nil))
(common-lisp:deftype list-device-resources-input-type-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-resources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-resources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or resource-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-resources-output
                    'make-list-device-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-input-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-input 'make-list-devices-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-output-"))
   (devices common-lisp:nil :type
    (common-lisp:or device-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-output 'make-list-devices-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or execution-state common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-input 'make-list-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-output-"))
   (executions common-lisp:nil :type
    (common-lisp:or execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-output 'make-list-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executions))
      (common-lisp:list
       (common-lisp:cons "executions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tasks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tasks-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or task-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tasks-input 'make-list-tasks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tasks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tasks-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (tasks common-lisp:nil :type
    (common-lisp:or task-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tasks-output 'make-list-tasks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype managed-device-id () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype physical-connector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (physical-network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-physical-network-interface-"))
   (default-gateway common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ip-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-address-assignment common-lisp:nil :type
    (common-lisp:or ip-address-assignment common-lisp:null))
   (mac-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (netmask common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (physical-connector-type common-lisp:nil :type
    (common-lisp:or physical-connector-type common-lisp:null))
   (physical-network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'physical-network-interface
                    'make-physical-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          physical-network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          physical-network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-gateway))
      (common-lisp:list
       (common-lisp:cons "defaultGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-address-assignment))
      (common-lisp:list
       (common-lisp:cons "ipAddressAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'netmask))
      (common-lisp:list
       (common-lisp:cons "netmask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-connector-type))
      (common-lisp:list
       (common-lisp:cons "physicalConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-network-interface-id))
      (common-lisp:list
       (common-lisp:cons "physicalNetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          physical-network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype physical-network-interface-list ()
   '(trivial-types:proper-list physical-network-interface))
 (common-lisp:defun |make-physical-network-interface-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            physical-network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot (:copier common-lisp:nil) (:conc-name "struct-shape-reboot-")))
 (common-lisp:export (common-lisp:list 'reboot 'make-reboot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-summary-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-summary 'make-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-summary-list ()
   '(trivial-types:proper-list resource-summary))
 (common-lisp:defun |make-resource-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-identifier-"))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-identifier
                    'make-security-group-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-identifier-list ()
   '(trivial-types:proper-list security-group-identifier))
 (common-lisp:defun |make-security-group-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (software-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-software-information-"))
   (install-state common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (installed-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (installing-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'software-information 'make-software-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input software-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input software-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'install-state))
      (common-lisp:list
       (common-lisp:cons "installState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installed-version))
      (common-lisp:list
       (common-lisp:cons "installedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installing-version))
      (common-lisp:list
       (common-lisp:cons "installingVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input software-information))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-description-string () 'common-lisp:string)
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:deftype task-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-summary-"))
   (state common-lisp:nil :type (common-lisp:or task-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (task-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task-summary 'make-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-summary-list ()
   '(trivial-types:proper-list task-summary))
 (common-lisp:defun |make-task-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unlock (:copier common-lisp:nil) (:conc-name "struct-shape-unlock-")))
 (common-lisp:export (common-lisp:list 'unlock 'make-unlock))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unlock))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unlock))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unlock))
   common-lisp:nil))
(common-lisp:deftype unlock-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (snow-device-management-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/task/~A/cancel"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'task-id))))
        "CancelTask" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-task))
(common-lisp:progn
 (common-lisp:defun create-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token command description tags
                     targets)
   (common-lisp:declare
    (common-lisp:ignorable client-token command description tags targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json "/task" "CreateTask" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-task))
(common-lisp:progn
 (common-lisp:defun describe-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key managed-device-id)
   (common-lisp:declare (common-lisp:ignorable managed-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/managed-device/~A/describe"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'managed-device-id))))
        "DescribeDevice" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device))
(common-lisp:progn
 (common-lisp:defun describe-device-ec2instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids managed-device-id)
   (common-lisp:declare (common-lisp:ignorable instance-ids managed-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-ec2input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/managed-device/~A/resources/ec2/describe"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'managed-device-id))))
        "DescribeDeviceEc2Instances" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device-ec2instances))
(common-lisp:progn
 (common-lisp:defun describe-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key managed-device-id task-id)
   (common-lisp:declare (common-lisp:ignorable managed-device-id task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/task/~A/execution/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'task-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'managed-device-id))))
        "DescribeExecution" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-execution))
(common-lisp:progn
 (common-lisp:defun describe-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/task/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'task-id))))
        "DescribeTask" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-task))
(common-lisp:progn
 (common-lisp:defun list-device-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key managed-device-id max-results next-token
                     type)
   (common-lisp:declare
    (common-lisp:ignorable managed-device-id max-results next-token type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/managed-device/~A/resources"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'managed-device-id))))
        "ListDeviceResources" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-device-resources))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "GET" :rest-json "/managed-devices" "ListDevices" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token state task-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token state task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "GET" :rest-json "/executions" "ListExecutions" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-executions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token state)
   (common-lisp:declare (common-lisp:ignorable max-results next-token state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tasks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "GET" :rest-json "/tasks" "ListTasks" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tasks))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'snow-device-management-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2021-08-04"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
