;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/textract/api
  (:use)
  (:nicknames #:aws/textract)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/textract/api)
(common-lisp:progn
 (common-lisp:defclass textract-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "textract" :protocol :json))
 (common-lisp:export 'textract-request))
(common-lisp:progn
 (common-lisp:define-condition textract-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'textract-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadDocumentException" . bad-document-exception)
    ("DocumentTooLargeException" . document-too-large-exception)
    ("HumanLoopQuotaExceededException" . human-loop-quota-exceeded-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InternalServerError" . internal-server-error)
    ("InvalidJobIdException" . invalid-job-id-exception)
    ("InvalidKMSKeyException" . invalid-kmskey-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidS3ObjectException" . invalid-s3object-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ProvisionedThroughputExceededException"
     . provisioned-throughput-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnsupportedDocumentException" . unsupported-document-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-document-request-"))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or document common-lisp:null))
   (feature-types (common-lisp:error ":feature-types is required") :type
    (common-lisp:or feature-types common-lisp:null))
   (human-loop-config common-lisp:nil :type
    (common-lisp:or human-loop-config common-lisp:null))
   (queries-config common-lisp:nil :type
    (common-lisp:or queries-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-document-request 'make-analyze-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-types))
      (common-lisp:list
       (common-lisp:cons "FeatureTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries-config))
      (common-lisp:list
       (common-lisp:cons "QueriesConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-document-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null))
   (human-loop-activation-output common-lisp:nil :type
    (common-lisp:or human-loop-activation-output common-lisp:null))
   (analyze-document-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-document-response
                    'make-analyze-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-output))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-document-model-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeDocumentModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyze-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-expense-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-expense-request-"))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-expense-request 'make-analyze-expense-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-expense-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-expense-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (expense-documents common-lisp:nil :type
    (common-lisp:or expense-document-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-expense-response 'make-analyze-expense-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expense-documents))
      (common-lisp:list
       (common-lisp:cons "ExpenseDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyze-expense-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-iddetections (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-iddetections-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or string common-lisp:null))
   (normalized-value common-lisp:nil :type
    (common-lisp:or normalized-value common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-iddetections 'make-analyze-iddetections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyze-iddetections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyze-iddetections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normalized-value))
      (common-lisp:list
       (common-lisp:cons "NormalizedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyze-iddetections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-idrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-idrequest-"))
   (document-pages (common-lisp:error ":document-pages is required") :type
    (common-lisp:or document-pages common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-idrequest 'make-analyze-idrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyze-idrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyze-idrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-pages))
      (common-lisp:list
       (common-lisp:cons "DocumentPages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyze-idrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyze-idresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyze-idresponse-"))
   (identity-documents common-lisp:nil :type
    (common-lisp:or identity-document-list common-lisp:null))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (analyze-idmodel-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyze-idresponse 'make-analyze-idresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyze-idresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyze-idresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-documents))
      (common-lisp:list
       (common-lisp:cons "IdentityDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-idmodel-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeIDModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyze-idresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-document-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bad-document-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (block (:copier common-lisp:nil) (:conc-name "struct-shape-block-"))
   (block-type common-lisp:nil :type
    (common-lisp:or block-type common-lisp:null))
   (confidence common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (text-type common-lisp:nil :type
    (common-lisp:or text-type common-lisp:null))
   (row-index common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (column-index common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (row-span common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (column-span common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (geometry common-lisp:nil :type (common-lisp:or geometry common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (relationships common-lisp:nil :type
    (common-lisp:or relationship-list common-lisp:null))
   (entity-types common-lisp:nil :type
    (common-lisp:or entity-types common-lisp:null))
   (selection-status common-lisp:nil :type
    (common-lisp:or selection-status common-lisp:null))
   (page common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (query common-lisp:nil :type (common-lisp:or query common-lisp:null)))
 (common-lisp:export (common-lisp:list 'block 'make-block))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-type))
      (common-lisp:list
       (common-lisp:cons "BlockType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-index))
      (common-lisp:list
       (common-lisp:cons "RowIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-index))
      (common-lisp:list
       (common-lisp:cons "ColumnIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-span))
      (common-lisp:list
       (common-lisp:cons "RowSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-span))
      (common-lisp:list
       (common-lisp:cons "ColumnSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationships))
      (common-lisp:list
       (common-lisp:cons "Relationships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "EntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-status))
      (common-lisp:list
       (common-lisp:cons "SelectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype block-list () '(trivial-types:proper-list block))
 (common-lisp:defun |make-block-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block))
   aws-sdk/generator/shape::members))
(common-lisp:deftype block-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bounding-box (:copier common-lisp:nil)
      (:conc-name "struct-shape-bounding-box-"))
   (width common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (height common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (left common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (top common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bounding-box 'make-bounding-box))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bounding-box))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bounding-box))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bounding-box))
   common-lisp:nil))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype content-classifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype content-classifiers ()
   '(trivial-types:proper-list content-classifier))
 (common-lisp:defun |make-content-classifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-classifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (detect-document-text-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-document-text-request-"))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-document-text-request
                    'make-detect-document-text-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detect-document-text-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-document-text-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null))
   (detect-document-text-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-document-text-response
                    'make-detect-document-text-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-document-text-model-version))
      (common-lisp:list
       (common-lisp:cons "DetectDocumentTextModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-document-text-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detected-signature (:copier common-lisp:nil)
      (:conc-name "struct-shape-detected-signature-"))
   (page common-lisp:nil :type (common-lisp:or uinteger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detected-signature 'make-detected-signature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detected-signature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detected-signature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detected-signature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detected-signature-list ()
   '(trivial-types:proper-list detected-signature))
 (common-lisp:defun |make-detected-signature-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detected-signature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document (:copier common-lisp:nil) (:conc-name "struct-shape-document-"))
   (bytes common-lisp:nil :type (common-lisp:or image-blob common-lisp:null))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "Bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-group-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (split-documents common-lisp:nil :type
    (common-lisp:or split-document-list common-lisp:null))
   (detected-signatures common-lisp:nil :type
    (common-lisp:or detected-signature-list common-lisp:null))
   (undetected-signatures common-lisp:nil :type
    (common-lisp:or undetected-signature-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document-group 'make-document-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-documents))
      (common-lisp:list
       (common-lisp:cons "SplitDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detected-signatures))
      (common-lisp:list
       (common-lisp:cons "DetectedSignatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'undetected-signatures))
      (common-lisp:list
       (common-lisp:cons "UndetectedSignatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-group-list ()
   '(trivial-types:proper-list document-group))
 (common-lisp:defun |make-document-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-location-"))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-location 'make-document-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-metadata-"))
   (pages common-lisp:nil :type (common-lisp:or uinteger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-metadata 'make-document-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-pages () '(trivial-types:proper-list document))
 (common-lisp:defun |make-document-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition document-too-large-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'document-too-large-exception)))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entity-types () '(trivial-types:proper-list entity-type))
 (common-lisp:defun |make-entity-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (expense-currency (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-currency-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expense-currency 'make-expense-currency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expense-currency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expense-currency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expense-currency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (expense-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-detection-"))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (geometry common-lisp:nil :type (common-lisp:or geometry common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expense-detection 'make-expense-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expense-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expense-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expense-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (expense-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-document-"))
   (expense-index common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (summary-fields common-lisp:nil :type
    (common-lisp:or expense-field-list common-lisp:null))
   (line-item-groups common-lisp:nil :type
    (common-lisp:or line-item-group-list common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expense-document 'make-expense-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expense-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expense-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expense-index))
      (common-lisp:list
       (common-lisp:cons "ExpenseIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-fields))
      (common-lisp:list
       (common-lisp:cons "SummaryFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-item-groups))
      (common-lisp:list
       (common-lisp:cons "LineItemGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expense-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expense-document-list ()
   '(trivial-types:proper-list expense-document))
 (common-lisp:defun |make-expense-document-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expense-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (expense-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-field-"))
   (type common-lisp:nil :type (common-lisp:or expense-type common-lisp:null))
   (label-detection common-lisp:nil :type
    (common-lisp:or expense-detection common-lisp:null))
   (value-detection common-lisp:nil :type
    (common-lisp:or expense-detection common-lisp:null))
   (page-number common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (currency common-lisp:nil :type
    (common-lisp:or expense-currency common-lisp:null))
   (group-properties common-lisp:nil :type
    (common-lisp:or expense-group-property-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'expense-field 'make-expense-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expense-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expense-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-detection))
      (common-lisp:list
       (common-lisp:cons "LabelDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-detection))
      (common-lisp:list
       (common-lisp:cons "ValueDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "Currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-properties))
      (common-lisp:list
       (common-lisp:cons "GroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expense-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expense-field-list ()
   '(trivial-types:proper-list expense-field))
 (common-lisp:defun |make-expense-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expense-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (expense-group-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-group-property-"))
   (types common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expense-group-property 'make-expense-group-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expense-group-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expense-group-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expense-group-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expense-group-property-list ()
   '(trivial-types:proper-list expense-group-property))
 (common-lisp:defun |make-expense-group-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expense-group-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (expense-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-expense-type-"))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'expense-type 'make-expense-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expense-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expense-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expense-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extraction (:copier common-lisp:nil)
      (:conc-name "struct-shape-extraction-"))
   (lending-document common-lisp:nil :type
    (common-lisp:or lending-document common-lisp:null))
   (expense-document common-lisp:nil :type
    (common-lisp:or expense-document common-lisp:null))
   (identity-document common-lisp:nil :type
    (common-lisp:or identity-document common-lisp:null)))
 (common-lisp:export (common-lisp:list 'extraction 'make-extraction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extraction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extraction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lending-document))
      (common-lisp:list
       (common-lisp:cons "LendingDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expense-document))
      (common-lisp:list
       (common-lisp:cons "ExpenseDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-document))
      (common-lisp:list
       (common-lisp:cons "IdentityDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extraction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extraction-list ()
   '(trivial-types:proper-list extraction))
 (common-lisp:defun |make-extraction-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extraction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feature-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-types ()
   '(trivial-types:proper-list feature-type))
 (common-lisp:defun |make-feature-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:deftype flow-definition-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geometry (:copier common-lisp:nil) (:conc-name "struct-shape-geometry-"))
   (bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (polygon common-lisp:nil :type (common-lisp:or polygon common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geometry 'make-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon))
      (common-lisp:list
       (common-lisp:cons "Polygon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-analysis-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-analysis-request
                    'make-get-document-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-analysis-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null))
   (warnings common-lisp:nil :type (common-lisp:or warnings common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (analyze-document-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-analysis-response
                    'make-get-document-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-document-model-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeDocumentModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-text-detection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-text-detection-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-text-detection-request
                    'make-get-document-text-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-text-detection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-text-detection-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null))
   (warnings common-lisp:nil :type (common-lisp:or warnings common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (detect-document-text-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-text-detection-response
                    'make-get-document-text-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-document-text-model-version))
      (common-lisp:list
       (common-lisp:cons "DetectDocumentTextModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-text-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-expense-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-expense-analysis-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-expense-analysis-request
                    'make-get-expense-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-expense-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-expense-analysis-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (expense-documents common-lisp:nil :type
    (common-lisp:or expense-document-list common-lisp:null))
   (warnings common-lisp:nil :type (common-lisp:or warnings common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (analyze-expense-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-expense-analysis-response
                    'make-get-expense-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expense-documents))
      (common-lisp:list
       (common-lisp:cons "ExpenseDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-expense-model-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeExpenseModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-expense-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lending-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lending-analysis-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lending-analysis-request
                    'make-get-lending-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lending-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lending-analysis-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (results common-lisp:nil :type
    (common-lisp:or lending-result-list common-lisp:null))
   (warnings common-lisp:nil :type (common-lisp:or warnings common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (analyze-lending-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lending-analysis-response
                    'make-get-lending-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-lending-model-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeLendingModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lending-analysis-summary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lending-analysis-summary-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lending-analysis-summary-request
                    'make-get-lending-analysis-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lending-analysis-summary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lending-analysis-summary-response-"))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or lending-summary common-lisp:null))
   (warnings common-lisp:nil :type (common-lisp:or warnings common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (analyze-lending-model-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lending-analysis-summary-response
                    'make-get-lending-analysis-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyze-lending-model-version))
      (common-lisp:list
       (common-lisp:cons "AnalyzeLendingModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lending-analysis-summary-response))
   common-lisp:nil))
(common-lisp:deftype human-loop-activation-conditions-evaluation-results ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-activation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-activation-output-"))
   (human-loop-arn common-lisp:nil :type
    (common-lisp:or human-loop-arn common-lisp:null))
   (human-loop-activation-reasons common-lisp:nil :type
    (common-lisp:or human-loop-activation-reasons common-lisp:null))
   (human-loop-activation-conditions-evaluation-results common-lisp:nil :type
    (common-lisp:or human-loop-activation-conditions-evaluation-results
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-activation-output
                    'make-human-loop-activation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-arn))
      (common-lisp:list
       (common-lisp:cons "HumanLoopArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-reasons))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-conditions-evaluation-results))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConditionsEvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   common-lisp:nil))
(common-lisp:deftype human-loop-activation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype human-loop-activation-reasons ()
   '(trivial-types:proper-list human-loop-activation-reason))
 (common-lisp:defun |make-human-loop-activation-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            human-loop-activation-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype human-loop-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-config-"))
   (human-loop-name (common-lisp:error ":human-loop-name is required") :type
    (common-lisp:or human-loop-name common-lisp:null))
   (flow-definition-arn (common-lisp:error ":flow-definition-arn is required")
    :type (common-lisp:or flow-definition-arn common-lisp:null))
   (data-attributes common-lisp:nil :type
    (common-lisp:or human-loop-data-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-config 'make-human-loop-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-name))
      (common-lisp:list
       (common-lisp:cons "HumanLoopName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition-arn))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-attributes))
      (common-lisp:list
       (common-lisp:cons "DataAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input human-loop-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-data-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-data-attributes-"))
   (content-classifiers common-lisp:nil :type
    (common-lisp:or content-classifiers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-data-attributes
                    'make-human-loop-data-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-classifiers))
      (common-lisp:list
       (common-lisp:cons "ContentClassifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   common-lisp:nil))
(common-lisp:deftype human-loop-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition human-loop-quota-exceeded-exception
     (textract-error)
     ((resource-type :initarg :resource-type :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'human-loop-quota-exceeded-exception
                    'human-loop-quota-exceeded-exception-resource-type
                    'human-loop-quota-exceeded-exception-quota-code
                    'human-loop-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:deftype id-list () '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-document-"))
   (document-index common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (identity-document-fields common-lisp:nil :type
    (common-lisp:or identity-document-field-list common-lisp:null))
   (blocks common-lisp:nil :type (common-lisp:or block-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-document 'make-identity-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-index))
      (common-lisp:list
       (common-lisp:cons "DocumentIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-document-fields))
      (common-lisp:list
       (common-lisp:cons "IdentityDocumentFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-document-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-document-field-"))
   (type common-lisp:nil :type
    (common-lisp:or analyze-iddetections common-lisp:null))
   (value-detection common-lisp:nil :type
    (common-lisp:or analyze-iddetections common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-document-field 'make-identity-document-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-document-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-document-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-detection))
      (common-lisp:list
       (common-lisp:cons "ValueDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-document-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-document-field-list ()
   '(trivial-types:proper-list identity-document-field))
 (common-lisp:defun |make-identity-document-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-document-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype identity-document-list ()
   '(trivial-types:proper-list identity-document))
 (common-lisp:defun |make-identity-document-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-server-error)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-id-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-job-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-kmskey-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-kmskey-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3object-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3object-exception)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-tag () 'common-lisp:string)
(common-lisp:deftype kmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lending-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-lending-detection-"))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (selection-status common-lisp:nil :type
    (common-lisp:or selection-status common-lisp:null))
   (geometry common-lisp:nil :type (common-lisp:or geometry common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lending-detection 'make-lending-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lending-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lending-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-status))
      (common-lisp:list
       (common-lisp:cons "SelectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lending-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lending-detection-list ()
   '(trivial-types:proper-list lending-detection))
 (common-lisp:defun |make-lending-detection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lending-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lending-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-lending-document-"))
   (lending-fields common-lisp:nil :type
    (common-lisp:or lending-field-list common-lisp:null))
   (signature-detections common-lisp:nil :type
    (common-lisp:or signature-detection-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lending-document 'make-lending-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lending-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lending-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lending-fields))
      (common-lisp:list
       (common-lisp:cons "LendingFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signature-detections))
      (common-lisp:list
       (common-lisp:cons "SignatureDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lending-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lending-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-lending-field-"))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-detection common-lisp:nil :type
    (common-lisp:or lending-detection common-lisp:null))
   (value-detections common-lisp:nil :type
    (common-lisp:or lending-detection-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lending-field 'make-lending-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lending-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lending-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-detection))
      (common-lisp:list
       (common-lisp:cons "KeyDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-detections))
      (common-lisp:list
       (common-lisp:cons "ValueDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lending-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lending-field-list ()
   '(trivial-types:proper-list lending-field))
 (common-lisp:defun |make-lending-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lending-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lending-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-lending-result-"))
   (page common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (page-classification common-lisp:nil :type
    (common-lisp:or page-classification common-lisp:null))
   (extractions common-lisp:nil :type
    (common-lisp:or extraction-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lending-result 'make-lending-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lending-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lending-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-classification))
      (common-lisp:list
       (common-lisp:cons "PageClassification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extractions))
      (common-lisp:list
       (common-lisp:cons "Extractions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lending-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lending-result-list ()
   '(trivial-types:proper-list lending-result))
 (common-lisp:defun |make-lending-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lending-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lending-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lending-summary-"))
   (document-groups common-lisp:nil :type
    (common-lisp:or document-group-list common-lisp:null))
   (undetected-document-types common-lisp:nil :type
    (common-lisp:or undetected-document-type-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lending-summary 'make-lending-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lending-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lending-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-groups))
      (common-lisp:list
       (common-lisp:cons "DocumentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'undetected-document-types))
      (common-lisp:list
       (common-lisp:cons "UndetectedDocumentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lending-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (line-item-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-item-fields-"))
   (line-item-expense-fields common-lisp:nil :type
    (common-lisp:or expense-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-item-fields 'make-line-item-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-item-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-item-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'line-item-expense-fields))
      (common-lisp:list
       (common-lisp:cons "LineItemExpenseFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-item-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-item-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-item-group-"))
   (line-item-group-index common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (line-items common-lisp:nil :type
    (common-lisp:or line-item-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'line-item-group 'make-line-item-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-item-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-item-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'line-item-group-index))
      (common-lisp:list
       (common-lisp:cons "LineItemGroupIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-items))
      (common-lisp:list
       (common-lisp:cons "LineItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-item-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype line-item-group-list ()
   '(trivial-types:proper-list line-item-group))
 (common-lisp:defun |make-line-item-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list line-item-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype line-item-list ()
   '(trivial-types:proper-list line-item-fields))
 (common-lisp:defun |make-line-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list line-item-fields))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (normalized-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-normalized-value-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value-type common-lisp:nil :type
    (common-lisp:or value-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'normalized-value 'make-normalized-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input normalized-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input normalized-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input normalized-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-channel-"))
   (snstopic-arn (common-lisp:error ":snstopic-arn is required") :type
    (common-lisp:or snstopic-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-channel 'make-notification-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "SNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-config-"))
   (s3bucket (common-lisp:error ":s3bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (s3prefix common-lisp:nil :type
    (common-lisp:or s3object-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-config 'make-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (page-classification (:copier common-lisp:nil)
      (:conc-name "struct-shape-page-classification-"))
   (page-type (common-lisp:error ":page-type is required") :type
    (common-lisp:or prediction-list common-lisp:null))
   (page-number (common-lisp:error ":page-number is required") :type
    (common-lisp:or prediction-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'page-classification 'make-page-classification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page-classification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page-classification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-type))
      (common-lisp:list
       (common-lisp:cons "PageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page-classification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype page-list () '(trivial-types:proper-list uinteger))
 (common-lisp:defun |make-page-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uinteger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list uinteger))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uinteger))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype percent () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (point (:copier common-lisp:nil) (:conc-name "struct-shape-point-"))
   (x common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (y common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'point 'make-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'x))
      (common-lisp:list
       (common-lisp:cons "X"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'y))
      (common-lisp:list
       (common-lisp:cons "Y"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype polygon () '(trivial-types:proper-list point))
 (common-lisp:defun |make-polygon|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (prediction (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-"))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prediction 'make-prediction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prediction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prediction-list ()
   '(trivial-types:proper-list prediction))
 (common-lisp:defun |make-prediction-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prediction))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition provisioned-throughput-exceeded-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype queries () '(trivial-types:proper-list query))
 (common-lisp:defun |make-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (queries-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-queries-config-"))
   (queries (common-lisp:error ":queries is required") :type
    (common-lisp:or queries common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queries-config 'make-queries-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queries-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queries-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "Queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queries-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query (:copier common-lisp:nil) (:conc-name "struct-shape-query-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or query-input common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or query-input common-lisp:null))
   (pages common-lisp:nil :type (common-lisp:or query-pages common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query 'make-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query))
   common-lisp:nil))
(common-lisp:deftype query-input () 'common-lisp:string)
(common-lisp:deftype query-page () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-pages () '(trivial-types:proper-list query-page))
 (common-lisp:defun |make-query-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-page))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (relationship (:copier common-lisp:nil)
      (:conc-name "struct-shape-relationship-"))
   (type common-lisp:nil :type
    (common-lisp:or relationship-type common-lisp:null))
   (ids common-lisp:nil :type (common-lisp:or id-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'relationship 'make-relationship))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "Ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relationship-list ()
   '(trivial-types:proper-list relationship))
 (common-lisp:defun |make-relationship-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relationship))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relationship-type () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object (:copier common-lisp:nil) (:conc-name "struct-shape-s3object-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or s3object-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or s3object-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype s3object-name () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:deftype snstopic-arn () 'common-lisp:string)
(common-lisp:deftype selection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (signature-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-signature-detection-"))
   (confidence common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (geometry common-lisp:nil :type (common-lisp:or geometry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signature-detection 'make-signature-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signature-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signature-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signature-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype signature-detection-list ()
   '(trivial-types:proper-list signature-detection))
 (common-lisp:defun |make-signature-detection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signature-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (split-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-split-document-"))
   (index common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (pages common-lisp:nil :type (common-lisp:or page-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'split-document 'make-split-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input split-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input split-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "Index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input split-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype split-document-list ()
   '(trivial-types:proper-list split-document))
 (common-lisp:defun |make-split-document-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list split-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-document-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-document-analysis-request-"))
   (document-location (common-lisp:error ":document-location is required")
    :type (common-lisp:or document-location common-lisp:null))
   (feature-types (common-lisp:error ":feature-types is required") :type
    (common-lisp:or feature-types common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (job-tag common-lisp:nil :type (common-lisp:or job-tag common-lisp:null))
   (notification-channel common-lisp:nil :type
    (common-lisp:or notification-channel common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or output-config common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null))
   (queries-config common-lisp:nil :type
    (common-lisp:or queries-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-document-analysis-request
                    'make-start-document-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-location))
      (common-lisp:list
       (common-lisp:cons "DocumentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-types))
      (common-lisp:list
       (common-lisp:cons "FeatureTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries-config))
      (common-lisp:list
       (common-lisp:cons "QueriesConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-document-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-document-analysis-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-document-analysis-response
                    'make-start-document-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-document-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-document-text-detection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-document-text-detection-request-"))
   (document-location (common-lisp:error ":document-location is required")
    :type (common-lisp:or document-location common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (job-tag common-lisp:nil :type (common-lisp:or job-tag common-lisp:null))
   (notification-channel common-lisp:nil :type
    (common-lisp:or notification-channel common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or output-config common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-document-text-detection-request
                    'make-start-document-text-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-location))
      (common-lisp:list
       (common-lisp:cons "DocumentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-document-text-detection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-document-text-detection-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-document-text-detection-response
                    'make-start-document-text-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-document-text-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-expense-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-expense-analysis-request-"))
   (document-location (common-lisp:error ":document-location is required")
    :type (common-lisp:or document-location common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (job-tag common-lisp:nil :type (common-lisp:or job-tag common-lisp:null))
   (notification-channel common-lisp:nil :type
    (common-lisp:or notification-channel common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or output-config common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-expense-analysis-request
                    'make-start-expense-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-location))
      (common-lisp:list
       (common-lisp:cons "DocumentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-expense-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-expense-analysis-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-expense-analysis-response
                    'make-start-expense-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-expense-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-lending-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-lending-analysis-request-"))
   (document-location (common-lisp:error ":document-location is required")
    :type (common-lisp:or document-location common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (job-tag common-lisp:nil :type (common-lisp:or job-tag common-lisp:null))
   (notification-channel common-lisp:nil :type
    (common-lisp:or notification-channel common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or output-config common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-lending-analysis-request
                    'make-start-lending-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-location))
      (common-lisp:list
       (common-lisp:cons "DocumentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-lending-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-lending-analysis-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-lending-analysis-response
                    'make-start-lending-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-lending-analysis-response))
   common-lisp:nil))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype uinteger () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype undetected-document-type-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-undetected-document-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (undetected-signature (:copier common-lisp:nil)
      (:conc-name "struct-shape-undetected-signature-"))
   (page common-lisp:nil :type (common-lisp:or uinteger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'undetected-signature 'make-undetected-signature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input undetected-signature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input undetected-signature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input undetected-signature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype undetected-signature-list ()
   '(trivial-types:proper-list undetected-signature))
 (common-lisp:defun |make-undetected-signature-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list undetected-signature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unsupported-document-exception
     (textract-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-document-exception)))
(common-lisp:deftype value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (warning (:copier common-lisp:nil) (:conc-name "struct-shape-warning-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (pages common-lisp:nil :type (common-lisp:or pages common-lisp:null)))
 (common-lisp:export (common-lisp:list 'warning 'make-warning))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype warnings () '(trivial-types:proper-list warning))
 (common-lisp:defun |make-warnings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list warning))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun analyze-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document feature-types human-loop-config
                     queries-config)
   (common-lisp:declare
    (common-lisp:ignorable document feature-types human-loop-config
     queries-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-analyze-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AnalyzeDocument"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'analyze-document))
(common-lisp:progn
 (common-lisp:defun analyze-expense
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document)
   (common-lisp:declare (common-lisp:ignorable document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-analyze-expense-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AnalyzeExpense"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'analyze-expense))
(common-lisp:progn
 (common-lisp:defun analyze-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-pages)
   (common-lisp:declare (common-lisp:ignorable document-pages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-analyze-idrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AnalyzeID"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'analyze-id))
(common-lisp:progn
 (common-lisp:defun detect-document-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document)
   (common-lisp:declare (common-lisp:ignorable document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-document-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DetectDocumentText"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detect-document-text))
(common-lisp:progn
 (common-lisp:defun get-document-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDocumentAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-analysis))
(common-lisp:progn
 (common-lisp:defun get-document-text-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-document-text-detection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDocumentTextDetection"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-text-detection))
(common-lisp:progn
 (common-lisp:defun get-expense-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-expense-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetExpenseAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-expense-analysis))
(common-lisp:progn
 (common-lisp:defun get-lending-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lending-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetLendingAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lending-analysis))
(common-lisp:progn
 (common-lisp:defun get-lending-analysis-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-lending-analysis-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetLendingAnalysisSummary"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lending-analysis-summary))
(common-lisp:progn
 (common-lisp:defun start-document-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-location feature-types
                     client-request-token job-tag notification-channel
                     output-config kmskey-id queries-config)
   (common-lisp:declare
    (common-lisp:ignorable document-location feature-types client-request-token
     job-tag notification-channel output-config kmskey-id queries-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-document-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartDocumentAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-document-analysis))
(common-lisp:progn
 (common-lisp:defun start-document-text-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-location client-request-token
                     job-tag notification-channel output-config kmskey-id)
   (common-lisp:declare
    (common-lisp:ignorable document-location client-request-token job-tag
     notification-channel output-config kmskey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-document-text-detection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartDocumentTextDetection"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-document-text-detection))
(common-lisp:progn
 (common-lisp:defun start-expense-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-location client-request-token
                     job-tag notification-channel output-config kmskey-id)
   (common-lisp:declare
    (common-lisp:ignorable document-location client-request-token job-tag
     notification-channel output-config kmskey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-expense-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartExpenseAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-expense-analysis))
(common-lisp:progn
 (common-lisp:defun start-lending-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-location client-request-token
                     job-tag notification-channel output-config kmskey-id)
   (common-lisp:declare
    (common-lisp:ignorable document-location client-request-token job-tag
     notification-channel output-config kmskey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-lending-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'textract-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartLendingAnalysis"
                                                        "2018-06-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-lending-analysis))
