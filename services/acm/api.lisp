;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/acm/api
  (:use)
  (:nicknames #:aws/acm)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/acm/api)
(common-lisp:progn
 (common-lisp:define-condition acm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'acm-error))
(common-lisp:progn
 (common-lisp:defclass acm-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "acm" :api-version
                        "2015-12-08" :host-prefix "acm" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "CertificateManager" :json-version
                        "1.1"))
 (common-lisp:export 'acm-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InvalidArgsException" . invalid-args-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidDomainValidationOptionsException"
     . invalid-domain-validation-options-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("RequestInProgressException" . request-in-progress-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagPolicyException" . tag-policy-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-certificate-request
                    'make-add-tags-to-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-certificate-request))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype availability-error-message () 'common-lisp:string)
(common-lisp:deftype certificate-body () 'common-lisp:string)
(common-lisp:deftype certificate-body-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype certificate-chain () 'common-lisp:string)
(common-lisp:deftype certificate-chain-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-detail-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name-string common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or domain-list common-lisp:null))
   (domain-validation-options common-lisp:nil :type
    (common-lisp:or domain-validation-list common-lisp:null))
   (serial common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subject common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (issuer common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (issued-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (imported-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (revoked-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (revocation-reason common-lisp:nil :type
    (common-lisp:or revocation-reason common-lisp:null))
   (not-before common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (not-after common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or key-algorithm common-lisp:null))
   (signature-algorithm common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (in-use-by common-lisp:nil :type
    (common-lisp:or in-use-list common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or certificate-type common-lisp:null))
   (renewal-summary common-lisp:nil :type
    (common-lisp:or renewal-summary common-lisp:null))
   (key-usages common-lisp:nil :type
    (common-lisp:or key-usage-list common-lisp:null))
   (extended-key-usages common-lisp:nil :type
    (common-lisp:or extended-key-usage-list common-lisp:null))
   (certificate-authority-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (renewal-eligibility common-lisp:nil :type
    (common-lisp:or renewal-eligibility common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or certificate-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-detail 'make-certificate-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-at))
      (common-lisp:list
       (common-lisp:cons "ImportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "RevocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "SignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-use-by))
      (common-lisp:list
       (common-lisp:cons "InUseBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "RenewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usages))
      (common-lisp:list
       (common-lisp:cons "KeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usages))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-eligibility))
      (common-lisp:list
       (common-lisp:cons "RenewalEligibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-options-"))
   (certificate-transparency-logging-preference common-lisp:nil :type
    (common-lisp:or certificate-transparency-logging-preference
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-options 'make-certificate-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-transparency-logging-preference))
      (common-lisp:list
       (common-lisp:cons "CertificateTransparencyLoggingPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-options))
   common-lisp:nil))
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-statuses ()
   '(trivial-types:proper-list certificate-status))
 (common-lisp:defun make-certificate-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-summary-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name-string common-lisp:null))
   (subject-alternative-name-summaries common-lisp:nil :type
    (common-lisp:or domain-list common-lisp:null))
   (has-additional-subject-alternative-names common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or certificate-type common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or key-algorithm common-lisp:null))
   (key-usages common-lisp:nil :type
    (common-lisp:or key-usage-names common-lisp:null))
   (extended-key-usages common-lisp:nil :type
    (common-lisp:or extended-key-usage-names common-lisp:null))
   (in-use common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (exported common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (renewal-eligibility common-lisp:nil :type
    (common-lisp:or renewal-eligibility common-lisp:null))
   (not-before common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (not-after common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (issued-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (imported-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (revoked-at common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-summary 'make-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-name-summaries))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNameSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-additional-subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "HasAdditionalSubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usages))
      (common-lisp:list
       (common-lisp:cons "KeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usages))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-use))
      (common-lisp:list
       (common-lisp:cons "InUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exported))
      (common-lisp:list
       (common-lisp:cons "Exported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-eligibility))
      (common-lisp:list
       (common-lisp:cons "RenewalEligibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-at))
      (common-lisp:list
       (common-lisp:cons "ImportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-summary-list ()
   '(trivial-types:proper-list certificate-summary))
 (common-lisp:defun make-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-transparency-logging-preference ()
  'common-lisp:string)
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-response-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-list ()
   '(trivial-types:proper-list domain-name-string))
 (common-lisp:defun make-domain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name-string () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-validation (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-validation-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name-string common-lisp:null))
   (validation-emails common-lisp:nil :type
    (common-lisp:or validation-email-list common-lisp:null))
   (validation-domain common-lisp:nil :type
    (common-lisp:or domain-name-string common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (resource-record common-lisp:nil :type
    (common-lisp:or resource-record common-lisp:null))
   (validation-method common-lisp:nil :type
    (common-lisp:or validation-method common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-validation 'make-domain-validation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-validation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-validation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-emails))
      (common-lisp:list
       (common-lisp:cons "ValidationEmails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-domain))
      (common-lisp:list
       (common-lisp:cons "ValidationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "ValidationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record))
      (common-lisp:list
       (common-lisp:cons "ResourceRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-method))
      (common-lisp:list
       (common-lisp:cons "ValidationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-validation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-validation-list ()
   '(trivial-types:proper-list domain-validation))
 (common-lisp:defun make-domain-validation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-validation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-validation-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-validation-option-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name-string common-lisp:null))
   (validation-domain (common-lisp:error ":validation-domain is required")
    :type (common-lisp:or domain-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-validation-option 'make-domain-validation-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-domain))
      (common-lisp:list
       (common-lisp:cons "ValidationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-validation-option-list ()
   '(trivial-types:proper-list domain-validation-option))
 (common-lisp:defun make-domain-validation-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            domain-validation-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (expiry-events-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-expiry-events-configuration-"))
   (days-before-expiry common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expiry-events-configuration
                    'make-expiry-events-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expiry-events-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expiry-events-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days-before-expiry))
      (common-lisp:list
       (common-lisp:cons "DaysBeforeExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expiry-events-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (passphrase (common-lisp:error ":passphrase is required") :type
    (common-lisp:or passphrase-blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-certificate-request
                    'make-export-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passphrase))
      (common-lisp:list
       (common-lisp:cons "Passphrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-certificate-response-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate-body common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or certificate-chain common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or private-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-certificate-response
                    'make-export-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extended-key-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-extended-key-usage-"))
   (name common-lisp:nil :type
    (common-lisp:or extended-key-usage-name common-lisp:null))
   (oid common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'extended-key-usage 'make-extended-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extended-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extended-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oid))
      (common-lisp:list
       (common-lisp:cons "OID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extended-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extended-key-usage-filter-list ()
   '(trivial-types:proper-list extended-key-usage-name))
 (common-lisp:defun make-extended-key-usage-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extended-key-usage-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype extended-key-usage-list ()
   '(trivial-types:proper-list extended-key-usage))
 (common-lisp:defun make-extended-key-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extended-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype extended-key-usage-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype extended-key-usage-names ()
   '(trivial-types:proper-list extended-key-usage-name))
 (common-lisp:defun make-extended-key-usage-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extended-key-usage-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filters (:copier common-lisp:nil) (:conc-name "struct-shape-filters-"))
   (extended-key-usage common-lisp:nil :type
    (common-lisp:or extended-key-usage-filter-list common-lisp:null))
   (key-usage common-lisp:nil :type
    (common-lisp:or key-usage-filter-list common-lisp:null))
   (key-types common-lisp:nil :type
    (common-lisp:or key-algorithm-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filters 'make-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usage))
      (common-lisp:list
       (common-lisp:cons "extendedKeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "keyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-types))
      (common-lisp:list
       (common-lisp:cons "keyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-configuration-response-"))
   (expiry-events common-lisp:nil :type
    (common-lisp:or expiry-events-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-configuration-response
                    'make-get-account-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-events))
      (common-lisp:list
       (common-lisp:cons "ExpiryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-certificate-request 'make-get-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-certificate-response-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate-body common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or certificate-chain common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-certificate-response 'make-get-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-certificate-request-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or certificate-body-blob common-lisp:null))
   (private-key (common-lisp:error ":private-key is required") :type
    (common-lisp:or private-key-blob common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or certificate-chain-blob common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-certificate-request
                    'make-import-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-certificate-response
                    'make-import-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype in-use-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-in-use-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-args-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-args-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-args-exception 'invalid-args-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-domain-validation-options-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-domain-validation-options-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-domain-validation-options-exception
                    'invalid-domain-validation-options-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:deftype key-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-algorithm-list ()
   '(trivial-types:proper-list key-algorithm))
 (common-lisp:defun make-key-algorithm-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-algorithm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (key-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-usage-"))
   (name common-lisp:nil :type
    (common-lisp:or key-usage-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-usage 'make-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-usage-filter-list ()
   '(trivial-types:proper-list key-usage-name))
 (common-lisp:defun make-key-usage-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-usage-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype key-usage-list () '(trivial-types:proper-list key-usage))
 (common-lisp:defun make-key-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-usage-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-usage-names ()
   '(trivial-types:proper-list key-usage-name))
 (common-lisp:defun make-key-usage-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-usage-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-request-"))
   (certificate-statuses common-lisp:nil :type
    (common-lisp:or certificate-statuses common-lisp:null))
   (includes common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or max-items common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-statuses))
      (common-lisp:list
       (common-lisp:cons "CertificateStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "Includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (certificate-summary-list common-lisp:nil :type
    (common-lisp:or certificate-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-summary-list))
      (common-lisp:list
       (common-lisp:cons "CertificateSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-certificate-request
                    'make-list-tags-for-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-certificate-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-certificate-response
                    'make-list-tags-for-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-certificate-response))
   common-lisp:nil))
(common-lisp:deftype max-items () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype passphrase-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype pca-arn () 'common-lisp:string)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:deftype private-key () 'common-lisp:string)
(common-lisp:deftype private-key-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-account-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-account-configuration-request-"))
   (expiry-events common-lisp:nil :type
    (common-lisp:or expiry-events-configuration common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-account-configuration-request
                    'make-put-account-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-events))
      (common-lisp:list
       (common-lisp:cons "ExpiryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-configuration-request))
   common-lisp:nil))
(common-lisp:deftype record-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-certificate-request
                    'make-remove-tags-from-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (renew-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-renew-certificate-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'renew-certificate-request
                    'make-renew-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          renew-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          renew-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          renew-certificate-request))
   common-lisp:nil))
(common-lisp:deftype renewal-eligibility () 'common-lisp:string)
(common-lisp:deftype renewal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (renewal-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-renewal-summary-"))
   (renewal-status (common-lisp:error ":renewal-status is required") :type
    (common-lisp:or renewal-status common-lisp:null))
   (domain-validation-options
    (common-lisp:error ":domain-validation-options is required") :type
    (common-lisp:or domain-validation-list common-lisp:null))
   (renewal-status-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (updated-at (common-lisp:error ":updated-at is required") :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'renewal-summary 'make-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "RenewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'renewal-status-reason))
      (common-lisp:list
       (common-lisp:cons "RenewalStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-certificate-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name-string common-lisp:null))
   (validation-method common-lisp:nil :type
    (common-lisp:or validation-method common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or domain-list common-lisp:null))
   (idempotency-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (domain-validation-options common-lisp:nil :type
    (common-lisp:or domain-validation-option-list common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or certificate-options common-lisp:null))
   (certificate-authority-arn common-lisp:nil :type
    (common-lisp:or pca-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or key-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-certificate-request
                    'make-request-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-method))
      (common-lisp:list
       (common-lisp:cons "ValidationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-certificate-response
                    'make-request-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-in-progress-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-in-progress-exception
                    'request-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resend-validation-email-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resend-validation-email-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name-string common-lisp:null))
   (validation-domain (common-lisp:error ":validation-domain is required")
    :type (common-lisp:or domain-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resend-validation-email-request
                    'make-resend-validation-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-validation-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-validation-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-domain))
      (common-lisp:list
       (common-lisp:cons "ValidationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-validation-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-record-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or record-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-record 'make-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-record))
   common-lisp:nil))
(common-lisp:deftype revocation-reason () 'common-lisp:string)
(common-lisp:deftype service-error-message () 'common-lisp:string)
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-policy-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tag-policy-exception 'tag-policy-exception-message)))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-options-request-"))
   (certificate-arn (common-lisp:error ":certificate-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or certificate-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-options-request
                    'make-update-certificate-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-email-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-validation-email-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (acm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype validation-exception-message () 'common-lisp:string)
(common-lisp:deftype validation-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-tags-to-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn tags)
   (common-lisp:declare (common-lisp:ignorable certificate-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-certificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun export-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn passphrase)
   (common-lisp:declare (common-lisp:ignorable certificate-arn passphrase))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-certificate))
(common-lisp:progn
 (common-lisp:defun get-account-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'acm-request :method "POST" :path "/"
                                :operation "GetAccountConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-configuration))
(common-lisp:progn
 (common-lisp:defun get-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-certificate))
(common-lisp:progn
 (common-lisp:defun import-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn certificate private-key
                     certificate-chain tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-arn certificate private-key
     certificate-chain tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-certificate))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-statuses includes next-token
                     max-items sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable certificate-statuses includes next-token max-items
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-tags-for-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-tags-for-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-certificate))
(common-lisp:progn
 (common-lisp:defun put-account-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key expiry-events idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable expiry-events idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-account-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccountConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-account-configuration))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn tags)
   (common-lisp:declare (common-lisp:ignorable certificate-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-certificate))
(common-lisp:progn
 (common-lisp:defun renew-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-renew-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RenewCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'renew-certificate))
(common-lisp:progn
 (common-lisp:defun request-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name validation-method
                     subject-alternative-names idempotency-token
                     domain-validation-options options
                     certificate-authority-arn tags key-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable domain-name validation-method
     subject-alternative-names idempotency-token domain-validation-options
     options certificate-authority-arn tags key-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RequestCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-certificate))
(common-lisp:progn
 (common-lisp:defun resend-validation-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn domain validation-domain)
   (common-lisp:declare
    (common-lisp:ignorable certificate-arn domain validation-domain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resend-validation-email-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResendValidationEmail"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resend-validation-email))
(common-lisp:progn
 (common-lisp:defun update-certificate-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn options)
   (common-lisp:declare (common-lisp:ignorable certificate-arn options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-certificate-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCertificateOptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-certificate-options))
