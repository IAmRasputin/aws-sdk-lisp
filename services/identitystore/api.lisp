;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/identitystore/api
  (:use)
  (:nicknames #:aws/identitystore)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/identitystore/api)
(common-lisp:progn
 (common-lisp:defclass identitystore-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "identitystore" :protocol
                        :json))
 (common-lisp:export 'identitystore-request))
(common-lisp:progn
 (common-lisp:define-condition identitystore-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'identitystore-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (address (:copier common-lisp:nil) (:conc-name "struct-shape-address-"))
   (street-address common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (locality common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (postal-code common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (country common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (formatted common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (primary common-lisp:nil :type
    (common-lisp:or sensitive-boolean-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street-address))
      (common-lisp:list
       (common-lisp:cons "StreetAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locality))
      (common-lisp:list
       (common-lisp:cons "Locality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted))
      (common-lisp:list
       (common-lisp:cons "Formatted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype addresses () '(trivial-types:proper-list address))
 (common-lisp:defun |make-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (alternate-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-alternate-identifier-"))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null))
   (unique-attribute common-lisp:nil :type
    (common-lisp:or unique-attribute common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alternate-identifier 'make-alternate-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alternate-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alternate-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-attribute))
      (common-lisp:list
       (common-lisp:cons "UniqueAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alternate-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-operation-"))
   (attribute-path (common-lisp:error ":attribute-path is required") :type
    (common-lisp:or attribute-path common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-operation 'make-attribute-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-path))
      (common-lisp:list
       (common-lisp:cons "AttributePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-operations ()
   '(trivial-types:proper-list attribute-operation))
 (common-lisp:defun |make-attribute-operations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-")))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-request-id 'conflict-exception-reason)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-membership-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or member-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-request
                    'make-create-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-membership-response-"))
   (membership-id (common-lisp:error ":membership-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-response
                    'make-create-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or group-display-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-response-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (nick-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (profile-url common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (emails common-lisp:nil :type (common-lisp:or emails common-lisp:null))
   (addresses common-lisp:nil :type
    (common-lisp:or addresses common-lisp:null))
   (phone-numbers common-lisp:nil :type
    (common-lisp:or phone-numbers common-lisp:null))
   (user-type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (locale common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nick-name))
      (common-lisp:list
       (common-lisp:cons "NickName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-url))
      (common-lisp:list
       (common-lisp:cons "ProfileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emails))
      (common-lisp:list
       (common-lisp:cons "Emails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "UserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:list
       (common-lisp:cons "PreferredLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-membership-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (membership-id (common-lisp:error ":membership-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-request
                    'make-delete-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-membership-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-response
                    'make-delete-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-membership-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (membership-id (common-lisp:error ":membership-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-request
                    'make-describe-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-membership-response-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (membership-id (common-lisp:error ":membership-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or member-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-response
                    'make-describe-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-request 'make-describe-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-response-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or group-display-name common-lisp:null))
   (external-ids common-lisp:nil :type
    (common-lisp:or external-ids common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-response 'make-describe-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-response-"))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (external-ids common-lisp:nil :type
    (common-lisp:or external-ids common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (nick-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (profile-url common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (emails common-lisp:nil :type (common-lisp:or emails common-lisp:null))
   (addresses common-lisp:nil :type
    (common-lisp:or addresses common-lisp:null))
   (phone-numbers common-lisp:nil :type
    (common-lisp:or phone-numbers common-lisp:null))
   (user-type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (locale common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nick-name))
      (common-lisp:list
       (common-lisp:cons "NickName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-url))
      (common-lisp:list
       (common-lisp:cons "ProfileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emails))
      (common-lisp:list
       (common-lisp:cons "Emails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "UserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:list
       (common-lisp:cons "PreferredLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email (:copier common-lisp:nil) (:conc-name "struct-shape-email-"))
   (value common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (primary common-lisp:nil :type
    (common-lisp:or sensitive-boolean-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'email 'make-email))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype emails () '(trivial-types:proper-list email))
 (common-lisp:defun |make-emails|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list email))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (external-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-id-"))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or external-id-issuer common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or external-id-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'external-id 'make-external-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input external-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input external-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input external-id))
   common-lisp:nil))
(common-lisp:deftype external-id-identifier () 'common-lisp:string)
(common-lisp:deftype external-id-issuer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype external-ids () '(trivial-types:proper-list external-id))
 (common-lisp:defun |make-external-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (attribute-path (common-lisp:error ":attribute-path is required") :type
    (common-lisp:or attribute-path common-lisp:null))
   (attribute-value (common-lisp:error ":attribute-value is required") :type
    (common-lisp:or sensitive-string-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-path))
      (common-lisp:list
       (common-lisp:cons "AttributePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-id-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (alternate-identifier
    (common-lisp:error ":alternate-identifier is required") :type
    (common-lisp:or alternate-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-id-request 'make-get-group-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-identifier))
      (common-lisp:list
       (common-lisp:cons "AlternateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-id-response-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-id-response 'make-get-group-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-membership-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-membership-id-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or member-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-membership-id-request
                    'make-get-group-membership-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-membership-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-membership-id-response-"))
   (membership-id (common-lisp:error ":membership-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-membership-id-response
                    'make-get-group-membership-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-membership-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-id-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (alternate-identifier
    (common-lisp:error ":alternate-identifier is required") :type
    (common-lisp:or alternate-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-id-request 'make-get-user-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-identifier))
      (common-lisp:list
       (common-lisp:cons "AlternateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-id-response-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-id-response 'make-get-user-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or group-display-name common-lisp:null))
   (external-ids common-lisp:nil :type
    (common-lisp:or external-ids common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:deftype group-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-ids () '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-membership-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (membership-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or member-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-membership 'make-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "MembershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-membership-existence-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-membership-existence-result-"))
   (group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or member-id common-lisp:null))
   (membership-exists common-lisp:nil :type
    (common-lisp:or sensitive-boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-membership-existence-result
                    'make-group-membership-existence-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          group-membership-existence-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          group-membership-existence-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-exists))
      (common-lisp:list
       (common-lisp:cons "MembershipExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          group-membership-existence-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-membership-existence-results ()
   '(trivial-types:proper-list group-membership-existence-result))
 (common-lisp:defun |make-group-membership-existence-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            group-membership-existence-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype group-memberships ()
   '(trivial-types:proper-list group-membership))
 (common-lisp:defun |make-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun |make-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-store-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-server-exception-request-id)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-request-id
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (is-member-in-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-member-in-groups-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or member-id common-lisp:null))
   (group-ids (common-lisp:error ":group-ids is required") :type
    (common-lisp:or group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-member-in-groups-request
                    'make-is-member-in-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (is-member-in-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-member-in-groups-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or group-membership-existence-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-member-in-groups-response
                    'make-is-member-in-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-member-in-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-for-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-for-member-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or member-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-for-member-request
                    'make-list-group-memberships-for-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-for-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-for-member-response-"))
   (group-memberships (common-lisp:error ":group-memberships is required")
    :type (common-lisp:or group-memberships common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-for-member-response
                    'make-list-group-memberships-for-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-memberships))
      (common-lisp:list
       (common-lisp:cons "GroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-for-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-request
                    'make-list-group-memberships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-response-"))
   (group-memberships (common-lisp:error ":group-memberships is required")
    :type (common-lisp:or group-memberships common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-response
                    'make-list-group-memberships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-memberships))
      (common-lisp:list
       (common-lisp:cons "GroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-response-"))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (users (common-lisp:error ":users is required") :type
    (common-lisp:or users common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-id-"))
   (user-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-id 'make-member-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (name (:copier common-lisp:nil) (:conc-name "struct-shape-name-"))
   (formatted common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (family-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (given-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (middle-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (honorific-prefix common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (honorific-suffix common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'name 'make-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted))
      (common-lisp:list
       (common-lisp:cons "Formatted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family-name))
      (common-lisp:list
       (common-lisp:cons "FamilyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honorific-prefix))
      (common-lisp:list
       (common-lisp:cons "HonorificPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honorific-suffix))
      (common-lisp:list
       (common-lisp:cons "HonorificSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input name))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-"))
   (value common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (primary common-lisp:nil :type
    (common-lisp:or sensitive-boolean-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'phone-number 'make-phone-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-numbers ()
   '(trivial-types:proper-list phone-number))
 (common-lisp:defun |make-phone-numbers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (identitystore-error)
     ((resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-message
                    'resource-not-found-exception-request-id)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype sensitive-boolean-type () 'common-lisp:boolean)
(common-lisp:deftype sensitive-string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-request-id
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (unique-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-unique-attribute-"))
   (attribute-path (common-lisp:error ":attribute-path is required") :type
    (common-lisp:or attribute-path common-lisp:null))
   (attribute-value (common-lisp:error ":attribute-value is required") :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unique-attribute 'make-unique-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unique-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unique-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-path))
      (common-lisp:list
       (common-lisp:cons "AttributePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unique-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (operations (common-lisp:error ":operations is required") :type
    (common-lisp:or attribute-operations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-response-")))
 (common-lisp:export
  (common-lisp:list 'update-group-response 'make-update-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (operations (common-lisp:error ":operations is required") :type
    (common-lisp:or attribute-operations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-")))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (external-ids common-lisp:nil :type
    (common-lisp:or external-ids common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (nick-name common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (profile-url common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (emails common-lisp:nil :type (common-lisp:or emails common-lisp:null))
   (addresses common-lisp:nil :type
    (common-lisp:or addresses common-lisp:null))
   (phone-numbers common-lisp:nil :type
    (common-lisp:or phone-numbers common-lisp:null))
   (user-type common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (locale common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or sensitive-string-type common-lisp:null))
   (identity-store-id (common-lisp:error ":identity-store-id is required")
    :type (common-lisp:or identity-store-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nick-name))
      (common-lisp:list
       (common-lisp:cons "NickName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-url))
      (common-lisp:list
       (common-lisp:cons "ProfileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emails))
      (common-lisp:list
       (common-lisp:cons "Emails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "UserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:list
       (common-lisp:cons "PreferredLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "IdentityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype users () '(trivial-types:proper-list user))
 (common-lisp:defun |make-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (identitystore-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       validation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-request-id)))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id display-name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id display-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGroup"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGroupMembership"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group-membership))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id user-name name
                     display-name nick-name profile-url emails addresses
                     phone-numbers user-type title preferred-language locale
                     timezone)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id user-name name display-name
     nick-name profile-url emails addresses phone-numbers user-type title
     preferred-language locale timezone))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUser"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id)
   (common-lisp:declare (common-lisp:ignorable identity-store-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGroup"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id membership-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id membership-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGroupMembership"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group-membership))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id user-id)
   (common-lisp:declare (common-lisp:ignorable identity-store-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteUser"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id)
   (common-lisp:declare (common-lisp:ignorable identity-store-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGroup"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group))
(common-lisp:progn
 (common-lisp:defun describe-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id membership-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id membership-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-group-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGroupMembership"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group-membership))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id user-id)
   (common-lisp:declare (common-lisp:ignorable identity-store-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUser"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun get-group-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id alternate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id alternate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetGroupId"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-group-id))
(common-lisp:progn
 (common-lisp:defun get-group-membership-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-membership-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetGroupMembershipId"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-group-membership-id))
(common-lisp:progn
 (common-lisp:defun get-user-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id alternate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id alternate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetUserId"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-id))
(common-lisp:progn
 (common-lisp:defun is-member-in-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id member-id group-ids)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id member-id group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-is-member-in-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "IsMemberInGroups"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'is-member-in-groups))
(common-lisp:progn
 (common-lisp:defun list-group-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id group-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-memberships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGroupMemberships"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-group-memberships))
(common-lisp:progn
 (common-lisp:defun list-group-memberships-for-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id member-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id member-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-group-memberships-for-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGroupMembershipsForMember"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-group-memberships-for-member))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id max-results next-token
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGroups"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id max-results next-token
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListUsers"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id group-id operations)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id group-id operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateGroup"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-store-id user-id operations)
   (common-lisp:declare
    (common-lisp:ignorable identity-store-id user-id operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'identitystore-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateUser"
                                                        "2020-06-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
