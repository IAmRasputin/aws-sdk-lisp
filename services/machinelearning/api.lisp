;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/machinelearning/api
  (:use)
  (:nicknames #:aws/machinelearning)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/machinelearning/api)
(common-lisp:progn
 (common-lisp:defclass machinelearning-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "machinelearning" :protocol
                        :json))
 (common-lisp:export 'machinelearning-request))
(common-lisp:progn
 (common-lisp:define-condition machinelearning-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'machinelearning-error))
(common-lisp:defvar *error-map*
  '(("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("PredictorNotMountedException" . predictor-not-mounted-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagLimitExceededException" . tag-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %add-tags-input-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %add-tags-input-resource-id :initform
                         (common-lisp:error ":resource-id is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-input-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defun make-add-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id tags)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %add-tags-output-resource-type :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %add-tags-output-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defun make-add-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:deftype algorithm () 'common-lisp:string)
(common-lisp:deftype aws-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-prediction common-lisp:nil
                       ((invalid-record-count :initarg :invalid-record-count
                         :type (common-lisp:or long-type common-lisp:null)
                         :accessor %batch-prediction-invalid-record-count
                         :initform common-lisp:nil)
                        (total-record-count :initarg :total-record-count :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %batch-prediction-total-record-count :initform
                         common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %batch-prediction-started-at :initform
                         common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %batch-prediction-finished-at :initform
                         common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %batch-prediction-compute-time :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %batch-prediction-message :initform common-lisp:nil)
                        (output-uri :initarg :output-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %batch-prediction-output-uri :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %batch-prediction-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %batch-prediction-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %batch-prediction-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %batch-prediction-created-at :initform
                         common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %batch-prediction-created-by-iam-user
                         :initform common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %batch-prediction-input-data-location-s3 :initform
                         common-lisp:nil)
                        (batch-prediction-data-source-id :initarg
                         :batch-prediction-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %batch-prediction-batch-prediction-data-source-id
                         :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %batch-prediction-mlmodel-id :initform
                         common-lisp:nil)
                        (batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor %batch-prediction-batch-prediction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-prediction 'make-batch-prediction))
 (common-lisp:defun make-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalid-record-count total-record-count
                     started-at finished-at compute-time message output-uri
                     status name last-updated-at created-at created-by-iam-user
                     input-data-location-s3 batch-prediction-data-source-id
                     mlmodel-id batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance 'batch-prediction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-record-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-record-count))
      (common-lisp:list
       (common-lisp:cons "InvalidRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-prediction))
   common-lisp:nil))
(common-lisp:deftype batch-prediction-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-predictions ()
   '(trivial-types:proper-list batch-prediction))
 (common-lisp:defun |make-batch-predictions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-prediction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype comparator-value () 'common-lisp:string)
(common-lisp:deftype compute-statistics () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-batch-prediction-input common-lisp:nil
                       ((output-uri :initarg :output-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %create-batch-prediction-input-output-uri :initform
                         (common-lisp:error ":output-uri is required"))
                        (batch-prediction-data-source-id :initarg
                         :batch-prediction-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-batch-prediction-input-batch-prediction-data-source-id
                         :initform
                         (common-lisp:error
                          ":batch-prediction-data-source-id is required"))
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-batch-prediction-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))
                        (batch-prediction-name :initarg :batch-prediction-name
                         :type (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         %create-batch-prediction-input-batch-prediction-name
                         :initform common-lisp:nil)
                        (batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %create-batch-prediction-input-batch-prediction-id
                         :initform
                         (common-lisp:error
                          ":batch-prediction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-input
                    'make-create-batch-prediction-input))
 (common-lisp:defun make-create-batch-prediction-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-uri
                     batch-prediction-data-source-id mlmodel-id
                     batch-prediction-name batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-prediction-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-name))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-batch-prediction-output common-lisp:nil
                       ((batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %create-batch-prediction-output-batch-prediction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-output
                    'make-create-batch-prediction-output))
 (common-lisp:defun make-create-batch-prediction-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-prediction-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-rdsinput common-lisp:nil
                       ((compute-statistics :initarg :compute-statistics :type
                         (common-lisp:or compute-statistics common-lisp:null)
                         :accessor
                         %create-data-source-from-rdsinput-compute-statistics
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-data-source-from-rdsinput-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (rdsdata :initarg :rdsdata :type
                         (common-lisp:or rdsdata-spec common-lisp:null)
                         :accessor %create-data-source-from-rdsinput-rdsdata
                         :initform (common-lisp:error ":rdsdata is required"))
                        (data-source-name :initarg :data-source-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         %create-data-source-from-rdsinput-data-source-name
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-rdsinput-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-rdsinput
                    'make-create-data-source-from-rdsinput))
 (common-lisp:defun make-create-data-source-from-rdsinput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-statistics role-arn rdsdata
                     data-source-name data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-rdsinput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsdata))
      (common-lisp:list
       (common-lisp:cons "RDSData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-rdsoutput common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-rdsoutput-data-source-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-rdsoutput
                    'make-create-data-source-from-rdsoutput))
 (common-lisp:defun make-create-data-source-from-rdsoutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-rdsoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-redshift-input common-lisp:nil
                       ((compute-statistics :initarg :compute-statistics :type
                         (common-lisp:or compute-statistics common-lisp:null)
                         :accessor
                         %create-data-source-from-redshift-input-compute-statistics
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-data-source-from-redshift-input-role-arn
                         :initform (common-lisp:error ":role-arn is required"))
                        (data-spec :initarg :data-spec :type
                         (common-lisp:or redshift-data-spec common-lisp:null)
                         :accessor
                         %create-data-source-from-redshift-input-data-spec
                         :initform
                         (common-lisp:error ":data-spec is required"))
                        (data-source-name :initarg :data-source-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         %create-data-source-from-redshift-input-data-source-name
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-redshift-input-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-redshift-input
                    'make-create-data-source-from-redshift-input))
 (common-lisp:defun make-create-data-source-from-redshift-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-statistics role-arn data-spec
                     data-source-name data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-redshift-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-spec))
      (common-lisp:list
       (common-lisp:cons "DataSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-redshift-output common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-redshift-output-data-source-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-redshift-output
                    'make-create-data-source-from-redshift-output))
 (common-lisp:defun make-create-data-source-from-redshift-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-redshift-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-s3input common-lisp:nil
                       ((compute-statistics :initarg :compute-statistics :type
                         (common-lisp:or compute-statistics common-lisp:null)
                         :accessor
                         %create-data-source-from-s3input-compute-statistics
                         :initform common-lisp:nil)
                        (data-spec :initarg :data-spec :type
                         (common-lisp:or s3data-spec common-lisp:null)
                         :accessor %create-data-source-from-s3input-data-spec
                         :initform
                         (common-lisp:error ":data-spec is required"))
                        (data-source-name :initarg :data-source-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         %create-data-source-from-s3input-data-source-name
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-s3input-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-s3input
                    'make-create-data-source-from-s3input))
 (common-lisp:defun make-create-data-source-from-s3input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-statistics data-spec
                     data-source-name data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-s3input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-spec))
      (common-lisp:list
       (common-lisp:cons "DataSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-from-s3output common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-data-source-from-s3output-data-source-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-s3output
                    'make-create-data-source-from-s3output))
 (common-lisp:defun make-create-data-source-from-s3output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-source-from-s3output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-evaluation-input common-lisp:nil
                       ((evaluation-data-source-id :initarg
                         :evaluation-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-evaluation-input-evaluation-data-source-id
                         :initform
                         (common-lisp:error
                          ":evaluation-data-source-id is required"))
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-evaluation-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))
                        (evaluation-name :initarg :evaluation-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %create-evaluation-input-evaluation-name
                         :initform common-lisp:nil)
                        (evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-evaluation-input-evaluation-id :initform
                         (common-lisp:error ":evaluation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-input 'make-create-evaluation-input))
 (common-lisp:defun make-create-evaluation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-data-source-id mlmodel-id
                     evaluation-name evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-evaluation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-name))
      (common-lisp:list
       (common-lisp:cons "EvaluationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-evaluation-output common-lisp:nil
                       ((evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-evaluation-output-evaluation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-output 'make-create-evaluation-output))
 (common-lisp:defun make-create-evaluation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-evaluation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mlmodel-input common-lisp:nil
                       ((recipe-uri :initarg :recipe-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %create-mlmodel-input-recipe-uri :initform
                         common-lisp:nil)
                        (recipe :initarg :recipe :type
                         (common-lisp:or recipe common-lisp:null) :accessor
                         %create-mlmodel-input-recipe :initform
                         common-lisp:nil)
                        (training-data-source-id :initarg
                         :training-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-mlmodel-input-training-data-source-id
                         :initform
                         (common-lisp:error
                          ":training-data-source-id is required"))
                        (parameters :initarg :parameters :type
                         (common-lisp:or training-parameters common-lisp:null)
                         :accessor %create-mlmodel-input-parameters :initform
                         common-lisp:nil)
                        (mlmodel-type :initarg :mlmodel-type :type
                         (common-lisp:or mlmodel-type common-lisp:null)
                         :accessor %create-mlmodel-input-mlmodel-type :initform
                         (common-lisp:error ":mlmodel-type is required"))
                        (mlmodel-name :initarg :mlmodel-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %create-mlmodel-input-mlmodel-name :initform
                         common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-mlmodel-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-mlmodel-input 'make-create-mlmodel-input))
 (common-lisp:defun make-create-mlmodel-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recipe-uri recipe training-data-source-id
                     parameters mlmodel-type mlmodel-name mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-mlmodel-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-name))
      (common-lisp:list
       (common-lisp:cons "MLModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe))
      (common-lisp:list
       (common-lisp:cons "Recipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe-uri))
      (common-lisp:list
       (common-lisp:cons "RecipeUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mlmodel-output common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-mlmodel-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-mlmodel-output 'make-create-mlmodel-output))
 (common-lisp:defun make-create-mlmodel-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-mlmodel-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-realtime-endpoint-input common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-realtime-endpoint-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-realtime-endpoint-input
                    'make-create-realtime-endpoint-input))
 (common-lisp:defun make-create-realtime-endpoint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-realtime-endpoint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-realtime-endpoint-output common-lisp:nil
                       ((realtime-endpoint-info :initarg
                         :realtime-endpoint-info :type
                         (common-lisp:or realtime-endpoint-info
                                         common-lisp:null)
                         :accessor
                         %create-realtime-endpoint-output-realtime-endpoint-info
                         :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-realtime-endpoint-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-realtime-endpoint-output
                    'make-create-realtime-endpoint-output))
 (common-lisp:defun make-create-realtime-endpoint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-endpoint-info mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-realtime-endpoint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-endpoint-info))
      (common-lisp:list
       (common-lisp:cons "RealtimeEndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   common-lisp:nil))
(common-lisp:deftype data-rearrangement () 'common-lisp:string)
(common-lisp:deftype data-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %data-source-started-at :initform common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %data-source-finished-at :initform common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %data-source-compute-time :initform common-lisp:nil)
                        (compute-statistics :initarg :compute-statistics :type
                         (common-lisp:or compute-statistics common-lisp:null)
                         :accessor %data-source-compute-statistics :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %data-source-role-arn :initform common-lisp:nil)
                        (rdsmetadata :initarg :rdsmetadata :type
                         (common-lisp:or rdsmetadata common-lisp:null)
                         :accessor %data-source-rdsmetadata :initform
                         common-lisp:nil)
                        (redshift-metadata :initarg :redshift-metadata :type
                         (common-lisp:or redshift-metadata common-lisp:null)
                         :accessor %data-source-redshift-metadata :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %data-source-message :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %data-source-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %data-source-name :initform common-lisp:nil)
                        (number-of-files :initarg :number-of-files :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %data-source-number-of-files :initform
                         common-lisp:nil)
                        (data-size-in-bytes :initarg :data-size-in-bytes :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %data-source-data-size-in-bytes :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %data-source-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %data-source-created-at :initform common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %data-source-created-by-iam-user :initform
                         common-lisp:nil)
                        (data-rearrangement :initarg :data-rearrangement :type
                         (common-lisp:or data-rearrangement common-lisp:null)
                         :accessor %data-source-data-rearrangement :initform
                         common-lisp:nil)
                        (data-location-s3 :initarg :data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %data-source-data-location-s3 :initform
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %data-source-data-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defun make-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key started-at finished-at compute-time
                     compute-statistics role-arn rdsmetadata redshift-metadata
                     message status name number-of-files data-size-in-bytes
                     last-updated-at created-at created-by-iam-user
                     data-rearrangement data-location-s3 data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-files))
      (common-lisp:list
       (common-lisp:cons "NumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-metadata))
      (common-lisp:list
       (common-lisp:cons "RedshiftMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsmetadata))
      (common-lisp:list
       (common-lisp:cons "RDSMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype data-source-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun |make-data-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-batch-prediction-input common-lisp:nil
                       ((batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %delete-batch-prediction-input-batch-prediction-id
                         :initform
                         (common-lisp:error
                          ":batch-prediction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-input
                    'make-delete-batch-prediction-input))
 (common-lisp:defun make-delete-batch-prediction-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-prediction-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-batch-prediction-output common-lisp:nil
                       ((batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %delete-batch-prediction-output-batch-prediction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-output
                    'make-delete-batch-prediction-output))
 (common-lisp:defun make-delete-batch-prediction-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-prediction-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-input common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-data-source-input-data-source-id :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-input 'make-delete-data-source-input))
 (common-lisp:defun make-delete-data-source-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-output common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-data-source-output-data-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-output
                    'make-delete-data-source-output))
 (common-lisp:defun make-delete-data-source-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-evaluation-input common-lisp:nil
                       ((evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-evaluation-input-evaluation-id :initform
                         (common-lisp:error ":evaluation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-input 'make-delete-evaluation-input))
 (common-lisp:defun make-delete-evaluation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-evaluation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-evaluation-output common-lisp:nil
                       ((evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-evaluation-output-evaluation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-output 'make-delete-evaluation-output))
 (common-lisp:defun make-delete-evaluation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-evaluation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mlmodel-input common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-mlmodel-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-mlmodel-input 'make-delete-mlmodel-input))
 (common-lisp:defun make-delete-mlmodel-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mlmodel-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mlmodel-output common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-mlmodel-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-mlmodel-output 'make-delete-mlmodel-output))
 (common-lisp:defun make-delete-mlmodel-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mlmodel-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-realtime-endpoint-input common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-realtime-endpoint-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-realtime-endpoint-input
                    'make-delete-realtime-endpoint-input))
 (common-lisp:defun make-delete-realtime-endpoint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-realtime-endpoint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-realtime-endpoint-output common-lisp:nil
                       ((realtime-endpoint-info :initarg
                         :realtime-endpoint-info :type
                         (common-lisp:or realtime-endpoint-info
                                         common-lisp:null)
                         :accessor
                         %delete-realtime-endpoint-output-realtime-endpoint-info
                         :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-realtime-endpoint-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-realtime-endpoint-output
                    'make-delete-realtime-endpoint-output))
 (common-lisp:defun make-delete-realtime-endpoint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-endpoint-info mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-realtime-endpoint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-endpoint-info))
      (common-lisp:list
       (common-lisp:cons "RealtimeEndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-input common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %delete-tags-input-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-tags-input-resource-id :initform
                         (common-lisp:error ":resource-id is required"))
                        (tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %delete-tags-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-input 'make-delete-tags-input))
 (common-lisp:defun make-delete-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id tag-keys)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-output common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %delete-tags-output-resource-type :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-tags-output-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-output 'make-delete-tags-output))
 (common-lisp:defun make-delete-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-predictions-input common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-batch-predictions-input-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-batch-predictions-input-next-token
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %describe-batch-predictions-input-sort-order :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-prefix
                         :initform common-lisp:nil)
                        (ne :initarg :ne :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-ne
                         :initform common-lisp:nil)
                        (le :initarg :le :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-le
                         :initform common-lisp:nil)
                        (ge :initarg :ge :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-ge
                         :initform common-lisp:nil)
                        (lt :initarg :lt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-lt
                         :initform common-lisp:nil)
                        (gt :initarg :gt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-gt
                         :initform common-lisp:nil)
                        (eq :initarg :eq :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-batch-predictions-input-eq
                         :initform common-lisp:nil)
                        (filter-variable :initarg :filter-variable :type
                         (common-lisp:or batch-prediction-filter-variable
                                         common-lisp:null)
                         :accessor
                         %describe-batch-predictions-input-filter-variable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-batch-predictions-input
                    'make-describe-batch-predictions-input))
 (common-lisp:defun make-describe-batch-predictions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token sort-order prefix ne le
                     ge lt gt eq filter-variable)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-predictions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-predictions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         %describe-batch-predictions-output-next-token
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or batch-predictions common-lisp:null)
                         :accessor %describe-batch-predictions-output-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-batch-predictions-output
                    'make-describe-batch-predictions-output))
 (common-lisp:defun make-describe-batch-predictions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token results)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-predictions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-sources-input common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-data-sources-input-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-data-sources-input-next-token
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %describe-data-sources-input-sort-order :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-prefix
                         :initform common-lisp:nil)
                        (ne :initarg :ne :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-ne :initform
                         common-lisp:nil)
                        (le :initarg :le :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-le :initform
                         common-lisp:nil)
                        (ge :initarg :ge :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-ge :initform
                         common-lisp:nil)
                        (lt :initarg :lt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-lt :initform
                         common-lisp:nil)
                        (gt :initarg :gt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-gt :initform
                         common-lisp:nil)
                        (eq :initarg :eq :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-data-sources-input-eq :initform
                         common-lisp:nil)
                        (filter-variable :initarg :filter-variable :type
                         (common-lisp:or data-source-filter-variable
                                         common-lisp:null)
                         :accessor %describe-data-sources-input-filter-variable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-sources-input
                    'make-describe-data-sources-input))
 (common-lisp:defun make-describe-data-sources-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token sort-order prefix ne le
                     ge lt gt eq filter-variable)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-sources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-sources-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-data-sources-output-next-token
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor %describe-data-sources-output-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-sources-output
                    'make-describe-data-sources-output))
 (common-lisp:defun make-describe-data-sources-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token results)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-sources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-evaluations-input common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-evaluations-input-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-evaluations-input-next-token
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %describe-evaluations-input-sort-order :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-prefix :initform
                         common-lisp:nil)
                        (ne :initarg :ne :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-ne :initform
                         common-lisp:nil)
                        (le :initarg :le :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-le :initform
                         common-lisp:nil)
                        (ge :initarg :ge :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-ge :initform
                         common-lisp:nil)
                        (lt :initarg :lt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-lt :initform
                         common-lisp:nil)
                        (gt :initarg :gt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-gt :initform
                         common-lisp:nil)
                        (eq :initarg :eq :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-evaluations-input-eq :initform
                         common-lisp:nil)
                        (filter-variable :initarg :filter-variable :type
                         (common-lisp:or evaluation-filter-variable
                                         common-lisp:null)
                         :accessor %describe-evaluations-input-filter-variable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluations-input
                    'make-describe-evaluations-input))
 (common-lisp:defun make-describe-evaluations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token sort-order prefix ne le
                     ge lt gt eq filter-variable)
   (common-lisp:apply #'common-lisp:make-instance 'describe-evaluations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-evaluations-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-evaluations-output-next-token
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or evaluations common-lisp:null)
                         :accessor %describe-evaluations-output-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluations-output
                    'make-describe-evaluations-output))
 (common-lisp:defun make-describe-evaluations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token results)
   (common-lisp:apply #'common-lisp:make-instance 'describe-evaluations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mlmodels-input common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-mlmodels-input-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-mlmodels-input-next-token
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %describe-mlmodels-input-sort-order :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-prefix :initform
                         common-lisp:nil)
                        (ne :initarg :ne :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-ne :initform
                         common-lisp:nil)
                        (le :initarg :le :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-le :initform
                         common-lisp:nil)
                        (ge :initarg :ge :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-ge :initform
                         common-lisp:nil)
                        (lt :initarg :lt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-lt :initform
                         common-lisp:nil)
                        (gt :initarg :gt :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-gt :initform
                         common-lisp:nil)
                        (eq :initarg :eq :type
                         (common-lisp:or comparator-value common-lisp:null)
                         :accessor %describe-mlmodels-input-eq :initform
                         common-lisp:nil)
                        (filter-variable :initarg :filter-variable :type
                         (common-lisp:or mlmodel-filter-variable
                                         common-lisp:null)
                         :accessor %describe-mlmodels-input-filter-variable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-mlmodels-input 'make-describe-mlmodels-input))
 (common-lisp:defun make-describe-mlmodels-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token sort-order prefix ne le
                     ge lt gt eq filter-variable)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mlmodels-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mlmodels-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor %describe-mlmodels-output-next-token
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or mlmodels common-lisp:null) :accessor
                         %describe-mlmodels-output-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-mlmodels-output 'make-describe-mlmodels-output))
 (common-lisp:defun make-describe-mlmodels-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token results)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mlmodels-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-input common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %describe-tags-input-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %describe-tags-input-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defun make-describe-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %describe-tags-output-tags :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or taggable-resource-type
                                         common-lisp:null)
                         :accessor %describe-tags-output-resource-type
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %describe-tags-output-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defun make-describe-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:deftype details-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype details-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-details-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype details-value () 'common-lisp:string)
(common-lisp:deftype edppipeline-id () 'common-lisp:string)
(common-lisp:deftype edpresource-role () 'common-lisp:string)
(common-lisp:deftype edpsecurity-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype edpsecurity-group-ids ()
   '(trivial-types:proper-list edpsecurity-group-id))
 (common-lisp:defun |make-edpsecurity-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edpsecurity-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype edpservice-role () 'common-lisp:string)
(common-lisp:deftype edpsubnet-id () 'common-lisp:string)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:deftype entity-status () 'common-lisp:string)
(common-lisp:deftype epoch-time () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluation common-lisp:nil
                       ((started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %evaluation-started-at :initform common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %evaluation-finished-at :initform common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %evaluation-compute-time :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %evaluation-message :initform common-lisp:nil)
                        (performance-metrics :initarg :performance-metrics
                         :type
                         (common-lisp:or performance-metrics common-lisp:null)
                         :accessor %evaluation-performance-metrics :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %evaluation-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %evaluation-name :initform common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %evaluation-last-updated-at :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %evaluation-created-at :initform common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %evaluation-created-by-iam-user :initform
                         common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %evaluation-input-data-location-s3 :initform
                         common-lisp:nil)
                        (evaluation-data-source-id :initarg
                         :evaluation-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %evaluation-evaluation-data-source-id :initform
                         common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %evaluation-mlmodel-id :initform common-lisp:nil)
                        (evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %evaluation-evaluation-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'evaluation 'make-evaluation))
 (common-lisp:defun make-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key started-at finished-at compute-time
                     message performance-metrics status name last-updated-at
                     created-at created-by-iam-user input-data-location-s3
                     evaluation-data-source-id mlmodel-id evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-metrics))
      (common-lisp:list
       (common-lisp:cons "PerformanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation))
   common-lisp:nil))
(common-lisp:deftype evaluation-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evaluations () '(trivial-types:proper-list evaluation))
 (common-lisp:defun |make-evaluations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-batch-prediction-input common-lisp:nil
                       ((batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %get-batch-prediction-input-batch-prediction-id
                         :initform
                         (common-lisp:error
                          ":batch-prediction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-input
                    'make-get-batch-prediction-input))
 (common-lisp:defun make-get-batch-prediction-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-batch-prediction-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-batch-prediction-output common-lisp:nil
                       ((invalid-record-count :initarg :invalid-record-count
                         :type (common-lisp:or long-type common-lisp:null)
                         :accessor
                         %get-batch-prediction-output-invalid-record-count
                         :initform common-lisp:nil)
                        (total-record-count :initarg :total-record-count :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-batch-prediction-output-total-record-count
                         :initform common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-batch-prediction-output-started-at :initform
                         common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-batch-prediction-output-finished-at :initform
                         common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-batch-prediction-output-compute-time :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %get-batch-prediction-output-message :initform
                         common-lisp:nil)
                        (log-uri :initarg :log-uri :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %get-batch-prediction-output-log-uri
                         :initform common-lisp:nil)
                        (output-uri :initarg :output-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-batch-prediction-output-output-uri :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %get-batch-prediction-output-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %get-batch-prediction-output-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-batch-prediction-output-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-batch-prediction-output-created-at :initform
                         common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor
                         %get-batch-prediction-output-created-by-iam-user
                         :initform common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-batch-prediction-output-input-data-location-s3
                         :initform common-lisp:nil)
                        (batch-prediction-data-source-id :initarg
                         :batch-prediction-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-batch-prediction-output-batch-prediction-data-source-id
                         :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-batch-prediction-output-mlmodel-id :initform
                         common-lisp:nil)
                        (batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %get-batch-prediction-output-batch-prediction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-output
                    'make-get-batch-prediction-output))
 (common-lisp:defun make-get-batch-prediction-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalid-record-count total-record-count
                     started-at finished-at compute-time message log-uri
                     output-uri status name last-updated-at created-at
                     created-by-iam-user input-data-location-s3
                     batch-prediction-data-source-id mlmodel-id
                     batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-batch-prediction-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-record-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-record-count))
      (common-lisp:list
       (common-lisp:cons "InvalidRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-input common-lisp:nil
                       ((verbose :initarg :verbose :type
                         (common-lisp:or verbose common-lisp:null) :accessor
                         %get-data-source-input-verbose :initform
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-data-source-input-data-source-id :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-source-input 'make-get-data-source-input))
 (common-lisp:defun make-get-data-source-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verbose data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verbose))
      (common-lisp:list
       (common-lisp:cons "Verbose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-output common-lisp:nil
                       ((data-source-schema :initarg :data-source-schema :type
                         (common-lisp:or data-schema common-lisp:null)
                         :accessor %get-data-source-output-data-source-schema
                         :initform common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-data-source-output-started-at :initform
                         common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-data-source-output-finished-at :initform
                         common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-data-source-output-compute-time :initform
                         common-lisp:nil)
                        (compute-statistics :initarg :compute-statistics :type
                         (common-lisp:or compute-statistics common-lisp:null)
                         :accessor %get-data-source-output-compute-statistics
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-data-source-output-role-arn :initform
                         common-lisp:nil)
                        (rdsmetadata :initarg :rdsmetadata :type
                         (common-lisp:or rdsmetadata common-lisp:null)
                         :accessor %get-data-source-output-rdsmetadata
                         :initform common-lisp:nil)
                        (redshift-metadata :initarg :redshift-metadata :type
                         (common-lisp:or redshift-metadata common-lisp:null)
                         :accessor %get-data-source-output-redshift-metadata
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %get-data-source-output-message :initform
                         common-lisp:nil)
                        (log-uri :initarg :log-uri :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %get-data-source-output-log-uri :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %get-data-source-output-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %get-data-source-output-name :initform
                         common-lisp:nil)
                        (number-of-files :initarg :number-of-files :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-data-source-output-number-of-files :initform
                         common-lisp:nil)
                        (data-size-in-bytes :initarg :data-size-in-bytes :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-data-source-output-data-size-in-bytes :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-data-source-output-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-data-source-output-created-at :initform
                         common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %get-data-source-output-created-by-iam-user
                         :initform common-lisp:nil)
                        (data-rearrangement :initarg :data-rearrangement :type
                         (common-lisp:or data-rearrangement common-lisp:null)
                         :accessor %get-data-source-output-data-rearrangement
                         :initform common-lisp:nil)
                        (data-location-s3 :initarg :data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-data-source-output-data-location-s3 :initform
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-data-source-output-data-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-output 'make-get-data-source-output))
 (common-lisp:defun make-get-data-source-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-schema started-at finished-at
                     compute-time compute-statistics role-arn rdsmetadata
                     redshift-metadata message log-uri status name
                     number-of-files data-size-in-bytes last-updated-at
                     created-at created-by-iam-user data-rearrangement
                     data-location-s3 data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-files))
      (common-lisp:list
       (common-lisp:cons "NumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-metadata))
      (common-lisp:list
       (common-lisp:cons "RedshiftMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsmetadata))
      (common-lisp:list
       (common-lisp:cons "RDSMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-schema))
      (common-lisp:list
       (common-lisp:cons "DataSourceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evaluation-input common-lisp:nil
                       ((evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-evaluation-input-evaluation-id :initform
                         (common-lisp:error ":evaluation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-evaluation-input 'make-get-evaluation-input))
 (common-lisp:defun make-get-evaluation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-evaluation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evaluation-output common-lisp:nil
                       ((started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-evaluation-output-started-at :initform
                         common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-evaluation-output-finished-at :initform
                         common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-evaluation-output-compute-time :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %get-evaluation-output-message :initform
                         common-lisp:nil)
                        (log-uri :initarg :log-uri :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %get-evaluation-output-log-uri :initform
                         common-lisp:nil)
                        (performance-metrics :initarg :performance-metrics
                         :type
                         (common-lisp:or performance-metrics common-lisp:null)
                         :accessor %get-evaluation-output-performance-metrics
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %get-evaluation-output-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %get-evaluation-output-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-evaluation-output-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-evaluation-output-created-at :initform
                         common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %get-evaluation-output-created-by-iam-user
                         :initform common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-evaluation-output-input-data-location-s3
                         :initform common-lisp:nil)
                        (evaluation-data-source-id :initarg
                         :evaluation-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-evaluation-output-evaluation-data-source-id
                         :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-evaluation-output-mlmodel-id :initform
                         common-lisp:nil)
                        (evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-evaluation-output-evaluation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-evaluation-output 'make-get-evaluation-output))
 (common-lisp:defun make-get-evaluation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key started-at finished-at compute-time
                     message log-uri performance-metrics status name
                     last-updated-at created-at created-by-iam-user
                     input-data-location-s3 evaluation-data-source-id
                     mlmodel-id evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-evaluation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-metrics))
      (common-lisp:list
       (common-lisp:cons "PerformanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-input common-lisp:nil
                       ((verbose :initarg :verbose :type
                         (common-lisp:or verbose common-lisp:null) :accessor
                         %get-mlmodel-input-verbose :initform common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-mlmodel-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-input 'make-get-mlmodel-input))
 (common-lisp:defun make-get-mlmodel-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verbose mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-mlmodel-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verbose))
      (common-lisp:list
       (common-lisp:cons "Verbose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-output common-lisp:nil
                       ((schema :initarg :schema :type
                         (common-lisp:or data-schema common-lisp:null)
                         :accessor %get-mlmodel-output-schema :initform
                         common-lisp:nil)
                        (recipe :initarg :recipe :type
                         (common-lisp:or recipe common-lisp:null) :accessor
                         %get-mlmodel-output-recipe :initform common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-mlmodel-output-started-at :initform
                         common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-mlmodel-output-finished-at :initform
                         common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-mlmodel-output-compute-time :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %get-mlmodel-output-message :initform common-lisp:nil)
                        (log-uri :initarg :log-uri :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %get-mlmodel-output-log-uri :initform
                         common-lisp:nil)
                        (score-threshold-last-updated-at :initarg
                         :score-threshold-last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-mlmodel-output-score-threshold-last-updated-at
                         :initform common-lisp:nil)
                        (score-threshold :initarg :score-threshold :type
                         (common-lisp:or score-threshold common-lisp:null)
                         :accessor %get-mlmodel-output-score-threshold
                         :initform common-lisp:nil)
                        (mlmodel-type :initarg :mlmodel-type :type
                         (common-lisp:or mlmodel-type common-lisp:null)
                         :accessor %get-mlmodel-output-mlmodel-type :initform
                         common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-mlmodel-output-input-data-location-s3 :initform
                         common-lisp:nil)
                        (training-parameters :initarg :training-parameters
                         :type
                         (common-lisp:or training-parameters common-lisp:null)
                         :accessor %get-mlmodel-output-training-parameters
                         :initform common-lisp:nil)
                        (endpoint-info :initarg :endpoint-info :type
                         (common-lisp:or realtime-endpoint-info
                                         common-lisp:null)
                         :accessor %get-mlmodel-output-endpoint-info :initform
                         common-lisp:nil)
                        (size-in-bytes :initarg :size-in-bytes :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %get-mlmodel-output-size-in-bytes :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %get-mlmodel-output-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or mlmodel-name common-lisp:null)
                         :accessor %get-mlmodel-output-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-mlmodel-output-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %get-mlmodel-output-created-at :initform
                         common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %get-mlmodel-output-created-by-iam-user
                         :initform common-lisp:nil)
                        (training-data-source-id :initarg
                         :training-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-mlmodel-output-training-data-source-id :initform
                         common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-mlmodel-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-output 'make-get-mlmodel-output))
 (common-lisp:defun make-get-mlmodel-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema recipe started-at finished-at
                     compute-time message log-uri
                     score-threshold-last-updated-at score-threshold
                     mlmodel-type input-data-location-s3 training-parameters
                     endpoint-info size-in-bytes status name last-updated-at
                     created-at created-by-iam-user training-data-source-id
                     mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-mlmodel-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'score-threshold-last-updated-at))
      (common-lisp:list
       (common-lisp:cons "ScoreThresholdLastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe))
      (common-lisp:list
       (common-lisp:cons "Recipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)
      (code :initarg :|code| :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-code)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message
                    'idempotent-parameter-mismatch-exception-code)))
(common-lisp:deftype integer-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (code :initarg :|code| :initform common-lisp:nil :reader
       internal-server-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (code :initarg :|code| :initform common-lisp:nil :reader
       invalid-input-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:deftype label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :|code| :initform common-lisp:nil :reader
       limit-exceeded-exception-code)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code)))
(common-lisp:deftype long-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mlmodel common-lisp:nil
                       ((started-at :initarg :started-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %mlmodel-started-at :initform common-lisp:nil)
                        (finished-at :initarg :finished-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %mlmodel-finished-at :initform common-lisp:nil)
                        (compute-time :initarg :compute-time :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %mlmodel-compute-time :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %mlmodel-message :initform common-lisp:nil)
                        (score-threshold-last-updated-at :initarg
                         :score-threshold-last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %mlmodel-score-threshold-last-updated-at :initform
                         common-lisp:nil)
                        (score-threshold :initarg :score-threshold :type
                         (common-lisp:or score-threshold common-lisp:null)
                         :accessor %mlmodel-score-threshold :initform
                         common-lisp:nil)
                        (mlmodel-type :initarg :mlmodel-type :type
                         (common-lisp:or mlmodel-type common-lisp:null)
                         :accessor %mlmodel-mlmodel-type :initform
                         common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or algorithm common-lisp:null) :accessor
                         %mlmodel-algorithm :initform common-lisp:nil)
                        (input-data-location-s3 :initarg
                         :input-data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %mlmodel-input-data-location-s3 :initform
                         common-lisp:nil)
                        (training-parameters :initarg :training-parameters
                         :type
                         (common-lisp:or training-parameters common-lisp:null)
                         :accessor %mlmodel-training-parameters :initform
                         common-lisp:nil)
                        (endpoint-info :initarg :endpoint-info :type
                         (common-lisp:or realtime-endpoint-info
                                         common-lisp:null)
                         :accessor %mlmodel-endpoint-info :initform
                         common-lisp:nil)
                        (size-in-bytes :initarg :size-in-bytes :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %mlmodel-size-in-bytes :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or entity-status common-lisp:null)
                         :accessor %mlmodel-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or mlmodel-name common-lisp:null)
                         :accessor %mlmodel-name :initform common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %mlmodel-last-updated-at :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %mlmodel-created-at :initform common-lisp:nil)
                        (created-by-iam-user :initarg :created-by-iam-user
                         :type (common-lisp:or aws-user-arn common-lisp:null)
                         :accessor %mlmodel-created-by-iam-user :initform
                         common-lisp:nil)
                        (training-data-source-id :initarg
                         :training-data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %mlmodel-training-data-source-id :initform
                         common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %mlmodel-mlmodel-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mlmodel 'make-mlmodel))
 (common-lisp:defun make-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key started-at finished-at compute-time
                     message score-threshold-last-updated-at score-threshold
                     mlmodel-type algorithm input-data-location-s3
                     training-parameters endpoint-info size-in-bytes status
                     name last-updated-at created-at created-by-iam-user
                     training-data-source-id mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'mlmodel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mlmodel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mlmodel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'score-threshold-last-updated-at))
      (common-lisp:list
       (common-lisp:cons "ScoreThresholdLastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mlmodel))
   common-lisp:nil))
(common-lisp:deftype mlmodel-filter-variable () 'common-lisp:string)
(common-lisp:deftype mlmodel-name () 'common-lisp:string)
(common-lisp:deftype mlmodel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mlmodels () '(trivial-types:proper-list mlmodel))
 (common-lisp:defun |make-mlmodels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mlmodel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype page-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass performance-metrics common-lisp:nil
                       ((properties :initarg :properties :type
                         (common-lisp:or performance-metrics-properties
                                         common-lisp:null)
                         :accessor %performance-metrics-properties :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'performance-metrics 'make-performance-metrics))
 (common-lisp:defun make-performance-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key properties)
   (common-lisp:apply #'common-lisp:make-instance 'performance-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input performance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input performance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input performance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype performance-metrics-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-performance-metrics-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype performance-metrics-property-key () 'common-lisp:string)
(common-lisp:deftype performance-metrics-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predict-input common-lisp:nil
                       ((predict-endpoint :initarg :predict-endpoint :type
                         (common-lisp:or vip-url common-lisp:null) :accessor
                         %predict-input-predict-endpoint :initform
                         (common-lisp:error ":predict-endpoint is required"))
                        (record :initarg :record :type
                         (common-lisp:or record common-lisp:null) :accessor
                         %predict-input-record :initform
                         (common-lisp:error ":record is required"))
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %predict-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export (common-lisp:list 'predict-input 'make-predict-input))
 (common-lisp:defun make-predict-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key predict-endpoint record mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'predict-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predict-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predict-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record))
      (common-lisp:list
       (common-lisp:cons "Record"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predict-endpoint))
      (common-lisp:list
       (common-lisp:cons "PredictEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predict-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predict-output common-lisp:nil
                       ((prediction :initarg :prediction :type
                         (common-lisp:or prediction common-lisp:null) :accessor
                         %predict-output-prediction :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'predict-output 'make-predict-output))
 (common-lisp:defun make-predict-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prediction)
   (common-lisp:apply #'common-lisp:make-instance 'predict-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predict-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predict-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction))
      (common-lisp:list
       (common-lisp:cons "Prediction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predict-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prediction common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or details-map common-lisp:null)
                         :accessor %prediction-details :initform
                         common-lisp:nil)
                        (predicted-scores :initarg :|predictedScores| :type
                         (common-lisp:or score-value-per-label-map
                                         common-lisp:null)
                         :accessor %prediction-predicted-scores :initform
                         common-lisp:nil)
                        (predicted-value :initarg :|predictedValue| :type
                         (common-lisp:or |floatLabel| common-lisp:null)
                         :accessor %prediction-predicted-value :initform
                         common-lisp:nil)
                        (predicted-label :initarg :|predictedLabel| :type
                         (common-lisp:or label common-lisp:null) :accessor
                         %prediction-predicted-label :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'prediction 'make-prediction))
 (common-lisp:defun make-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details predicted-scores predicted-value
                     predicted-label)
   (common-lisp:apply #'common-lisp:make-instance 'prediction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-label))
      (common-lisp:list
       (common-lisp:cons "predictedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-value))
      (common-lisp:list
       (common-lisp:cons "predictedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-scores))
      (common-lisp:list
       (common-lisp:cons "predictedScores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prediction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition predictor-not-mounted-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       predictor-not-mounted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'predictor-not-mounted-exception
                    'predictor-not-mounted-exception-message)))
(common-lisp:deftype presigned-s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rdsdata-spec common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or edpsecurity-group-ids
                                         common-lisp:null)
                         :accessor %rdsdata-spec-security-group-ids :initform
                         (common-lisp:error ":security-group-ids is required"))
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or edpsubnet-id common-lisp:null)
                         :accessor %rdsdata-spec-subnet-id :initform
                         (common-lisp:error ":subnet-id is required"))
                        (service-role :initarg :service-role :type
                         (common-lisp:or edpservice-role common-lisp:null)
                         :accessor %rdsdata-spec-service-role :initform
                         (common-lisp:error ":service-role is required"))
                        (resource-role :initarg :resource-role :type
                         (common-lisp:or edpresource-role common-lisp:null)
                         :accessor %rdsdata-spec-resource-role :initform
                         (common-lisp:error ":resource-role is required"))
                        (data-schema-uri :initarg :data-schema-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %rdsdata-spec-data-schema-uri :initform
                         common-lisp:nil)
                        (data-schema :initarg :data-schema :type
                         (common-lisp:or data-schema common-lisp:null)
                         :accessor %rdsdata-spec-data-schema :initform
                         common-lisp:nil)
                        (data-rearrangement :initarg :data-rearrangement :type
                         (common-lisp:or data-rearrangement common-lisp:null)
                         :accessor %rdsdata-spec-data-rearrangement :initform
                         common-lisp:nil)
                        (s3staging-location :initarg :s3staging-location :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %rdsdata-spec-s3staging-location :initform
                         (common-lisp:error ":s3staging-location is required"))
                        (database-credentials :initarg :database-credentials
                         :type
                         (common-lisp:or rdsdatabase-credentials
                                         common-lisp:null)
                         :accessor %rdsdata-spec-database-credentials :initform
                         (common-lisp:error
                          ":database-credentials is required"))
                        (select-sql-query :initarg :select-sql-query :type
                         (common-lisp:or rdsselect-sql-query common-lisp:null)
                         :accessor %rdsdata-spec-select-sql-query :initform
                         (common-lisp:error ":select-sql-query is required"))
                        (database-information :initarg :database-information
                         :type (common-lisp:or rdsdatabase common-lisp:null)
                         :accessor %rdsdata-spec-database-information :initform
                         (common-lisp:error
                          ":database-information is required"))))
 (common-lisp:export (common-lisp:list 'rdsdata-spec 'make-rdsdata-spec))
 (common-lisp:defun make-rdsdata-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnet-id service-role
                     resource-role data-schema-uri data-schema
                     data-rearrangement s3staging-location database-credentials
                     select-sql-query database-information)
   (common-lisp:apply #'common-lisp:make-instance 'rdsdata-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-information))
      (common-lisp:list
       (common-lisp:cons "DatabaseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-credentials))
      (common-lisp:list
       (common-lisp:cons "DatabaseCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3staging-location))
      (common-lisp:list
       (common-lisp:cons "S3StagingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema-uri))
      (common-lisp:list
       (common-lisp:cons "DataSchemaUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rdsdatabase common-lisp:nil
                       ((database-name :initarg :database-name :type
                         (common-lisp:or rdsdatabase-name common-lisp:null)
                         :accessor %rdsdatabase-database-name :initform
                         (common-lisp:error ":database-name is required"))
                        (instance-identifier :initarg :instance-identifier
                         :type
                         (common-lisp:or rdsinstance-identifier
                                         common-lisp:null)
                         :accessor %rdsdatabase-instance-identifier :initform
                         (common-lisp:error
                          ":instance-identifier is required"))))
 (common-lisp:export (common-lisp:list 'rdsdatabase 'make-rdsdatabase))
 (common-lisp:defun make-rdsdatabase
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database-name instance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'rdsdatabase
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsdatabase))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsdatabase))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsdatabase))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rdsdatabase-credentials common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or rdsdatabase-password common-lisp:null)
                         :accessor %rdsdatabase-credentials-password :initform
                         (common-lisp:error ":password is required"))
                        (username :initarg :username :type
                         (common-lisp:or rdsdatabase-username common-lisp:null)
                         :accessor %rdsdatabase-credentials-username :initform
                         (common-lisp:error ":username is required"))))
 (common-lisp:export
  (common-lisp:list 'rdsdatabase-credentials 'make-rdsdatabase-credentials))
 (common-lisp:defun make-rdsdatabase-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password username)
   (common-lisp:apply #'common-lisp:make-instance 'rdsdatabase-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   common-lisp:nil))
(common-lisp:deftype rdsdatabase-name () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-password () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-username () 'common-lisp:string)
(common-lisp:deftype rdsinstance-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rdsmetadata common-lisp:nil
                       ((data-pipeline-id :initarg :data-pipeline-id :type
                         (common-lisp:or edppipeline-id common-lisp:null)
                         :accessor %rdsmetadata-data-pipeline-id :initform
                         common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or edpservice-role common-lisp:null)
                         :accessor %rdsmetadata-service-role :initform
                         common-lisp:nil)
                        (resource-role :initarg :resource-role :type
                         (common-lisp:or edpresource-role common-lisp:null)
                         :accessor %rdsmetadata-resource-role :initform
                         common-lisp:nil)
                        (select-sql-query :initarg :select-sql-query :type
                         (common-lisp:or rdsselect-sql-query common-lisp:null)
                         :accessor %rdsmetadata-select-sql-query :initform
                         common-lisp:nil)
                        (database-user-name :initarg :database-user-name :type
                         (common-lisp:or rdsdatabase-username common-lisp:null)
                         :accessor %rdsmetadata-database-user-name :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or rdsdatabase common-lisp:null)
                         :accessor %rdsmetadata-database :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rdsmetadata 'make-rdsmetadata))
 (common-lisp:defun make-rdsmetadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-pipeline-id service-role
                     resource-role select-sql-query database-user-name
                     database)
   (common-lisp:apply #'common-lisp:make-instance 'rdsmetadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsmetadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsmetadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-user-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "DataPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsmetadata))
   common-lisp:nil))
(common-lisp:deftype rdsselect-sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass realtime-endpoint-info common-lisp:nil
                       ((endpoint-status :initarg :endpoint-status :type
                         (common-lisp:or realtime-endpoint-status
                                         common-lisp:null)
                         :accessor %realtime-endpoint-info-endpoint-status
                         :initform common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or vip-url common-lisp:null) :accessor
                         %realtime-endpoint-info-endpoint-url :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or epoch-time common-lisp:null) :accessor
                         %realtime-endpoint-info-created-at :initform
                         common-lisp:nil)
                        (peak-requests-per-second :initarg
                         :peak-requests-per-second :type
                         (common-lisp:or integer-type common-lisp:null)
                         :accessor
                         %realtime-endpoint-info-peak-requests-per-second
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'realtime-endpoint-info 'make-realtime-endpoint-info))
 (common-lisp:defun make-realtime-endpoint-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint-status endpoint-url created-at
                     peak-requests-per-second)
   (common-lisp:apply #'common-lisp:make-instance 'realtime-endpoint-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'peak-requests-per-second))
      (common-lisp:list
       (common-lisp:cons "PeakRequestsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   common-lisp:nil))
(common-lisp:deftype realtime-endpoint-status () 'common-lisp:string)
(common-lisp:deftype recipe () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record () 'common-lisp:hash-table)
 (common-lisp:defun |make-record| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype redshift-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-data-spec common-lisp:nil
                       ((data-schema-uri :initarg :data-schema-uri :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %redshift-data-spec-data-schema-uri :initform
                         common-lisp:nil)
                        (data-schema :initarg :data-schema :type
                         (common-lisp:or data-schema common-lisp:null)
                         :accessor %redshift-data-spec-data-schema :initform
                         common-lisp:nil)
                        (data-rearrangement :initarg :data-rearrangement :type
                         (common-lisp:or data-rearrangement common-lisp:null)
                         :accessor %redshift-data-spec-data-rearrangement
                         :initform common-lisp:nil)
                        (s3staging-location :initarg :s3staging-location :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %redshift-data-spec-s3staging-location :initform
                         (common-lisp:error ":s3staging-location is required"))
                        (database-credentials :initarg :database-credentials
                         :type
                         (common-lisp:or redshift-database-credentials
                                         common-lisp:null)
                         :accessor %redshift-data-spec-database-credentials
                         :initform
                         (common-lisp:error
                          ":database-credentials is required"))
                        (select-sql-query :initarg :select-sql-query :type
                         (common-lisp:or redshift-select-sql-query
                                         common-lisp:null)
                         :accessor %redshift-data-spec-select-sql-query
                         :initform
                         (common-lisp:error ":select-sql-query is required"))
                        (database-information :initarg :database-information
                         :type
                         (common-lisp:or redshift-database common-lisp:null)
                         :accessor %redshift-data-spec-database-information
                         :initform
                         (common-lisp:error
                          ":database-information is required"))))
 (common-lisp:export
  (common-lisp:list 'redshift-data-spec 'make-redshift-data-spec))
 (common-lisp:defun make-redshift-data-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-schema-uri data-schema
                     data-rearrangement s3staging-location database-credentials
                     select-sql-query database-information)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-data-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-information))
      (common-lisp:list
       (common-lisp:cons "DatabaseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-credentials))
      (common-lisp:list
       (common-lisp:cons "DatabaseCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3staging-location))
      (common-lisp:list
       (common-lisp:cons "S3StagingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema-uri))
      (common-lisp:list
       (common-lisp:cons "DataSchemaUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-database common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier :type
                         (common-lisp:or redshift-cluster-identifier
                                         common-lisp:null)
                         :accessor %redshift-database-cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or redshift-database-name
                                         common-lisp:null)
                         :accessor %redshift-database-database-name :initform
                         (common-lisp:error ":database-name is required"))))
 (common-lisp:export
  (common-lisp:list 'redshift-database 'make-redshift-database))
 (common-lisp:defun make-redshift-database
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-identifier database-name)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-database
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-database-credentials common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or redshift-database-password
                                         common-lisp:null)
                         :accessor %redshift-database-credentials-password
                         :initform (common-lisp:error ":password is required"))
                        (username :initarg :username :type
                         (common-lisp:or redshift-database-username
                                         common-lisp:null)
                         :accessor %redshift-database-credentials-username
                         :initform
                         (common-lisp:error ":username is required"))))
 (common-lisp:export
  (common-lisp:list 'redshift-database-credentials
                    'make-redshift-database-credentials))
 (common-lisp:defun make-redshift-database-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password username)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-database-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   common-lisp:nil))
(common-lisp:deftype redshift-database-name () 'common-lisp:string)
(common-lisp:deftype redshift-database-password () 'common-lisp:string)
(common-lisp:deftype redshift-database-username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-metadata common-lisp:nil
                       ((select-sql-query :initarg :select-sql-query :type
                         (common-lisp:or redshift-select-sql-query
                                         common-lisp:null)
                         :accessor %redshift-metadata-select-sql-query
                         :initform common-lisp:nil)
                        (database-user-name :initarg :database-user-name :type
                         (common-lisp:or redshift-database-username
                                         common-lisp:null)
                         :accessor %redshift-metadata-database-user-name
                         :initform common-lisp:nil)
                        (redshift-database :initarg :redshift-database :type
                         (common-lisp:or redshift-database common-lisp:null)
                         :accessor %redshift-metadata-redshift-database
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'redshift-metadata 'make-redshift-metadata))
 (common-lisp:defun make-redshift-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key select-sql-query database-user-name
                     redshift-database)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-database))
      (common-lisp:list
       (common-lisp:cons "RedshiftDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-user-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-metadata))
   common-lisp:nil))
(common-lisp:deftype redshift-select-sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :|code| :initform common-lisp:nil :reader
       resource-not-found-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3data-spec common-lisp:nil
                       ((data-schema-location-s3 :initarg
                         :data-schema-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %s3data-spec-data-schema-location-s3 :initform
                         common-lisp:nil)
                        (data-schema :initarg :data-schema :type
                         (common-lisp:or data-schema common-lisp:null)
                         :accessor %s3data-spec-data-schema :initform
                         common-lisp:nil)
                        (data-rearrangement :initarg :data-rearrangement :type
                         (common-lisp:or data-rearrangement common-lisp:null)
                         :accessor %s3data-spec-data-rearrangement :initform
                         common-lisp:nil)
                        (data-location-s3 :initarg :data-location-s3 :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %s3data-spec-data-location-s3 :initform
                         (common-lisp:error ":data-location-s3 is required"))))
 (common-lisp:export (common-lisp:list 's3data-spec 'make-s3data-spec))
 (common-lisp:defun make-s3data-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-schema-location-s3 data-schema
                     data-rearrangement data-location-s3)
   (common-lisp:apply #'common-lisp:make-instance 's3data-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-schema-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataSchemaLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-spec))
   common-lisp:nil))
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:deftype score-threshold () 'common-lisp:single-float)
(common-lisp:deftype score-value () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:deftype score-value-per-label-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-score-value-per-label-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-exception
     (machinelearning-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       tag-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tag-limit-exceeded-exception
                    'tag-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype taggable-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-training-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass update-batch-prediction-input common-lisp:nil
                       ((batch-prediction-name :initarg :batch-prediction-name
                         :type (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         %update-batch-prediction-input-batch-prediction-name
                         :initform
                         (common-lisp:error
                          ":batch-prediction-name is required"))
                        (batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %update-batch-prediction-input-batch-prediction-id
                         :initform
                         (common-lisp:error
                          ":batch-prediction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-batch-prediction-input
                    'make-update-batch-prediction-input))
 (common-lisp:defun make-update-batch-prediction-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-name
                     batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-batch-prediction-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-name))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-batch-prediction-output common-lisp:nil
                       ((batch-prediction-id :initarg :batch-prediction-id
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         %update-batch-prediction-output-batch-prediction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-batch-prediction-output
                    'make-update-batch-prediction-output))
 (common-lisp:defun make-update-batch-prediction-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-batch-prediction-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-input common-lisp:nil
                       ((data-source-name :initarg :data-source-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %update-data-source-input-data-source-name
                         :initform
                         (common-lisp:error ":data-source-name is required"))
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-data-source-input-data-source-id :initform
                         (common-lisp:error ":data-source-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-source-input 'make-update-data-source-input))
 (common-lisp:defun make-update-data-source-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-name data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-output common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-data-source-output-data-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-output
                    'make-update-data-source-output))
 (common-lisp:defun make-update-data-source-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-evaluation-input common-lisp:nil
                       ((evaluation-name :initarg :evaluation-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %update-evaluation-input-evaluation-name
                         :initform
                         (common-lisp:error ":evaluation-name is required"))
                        (evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-evaluation-input-evaluation-id :initform
                         (common-lisp:error ":evaluation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-input 'make-update-evaluation-input))
 (common-lisp:defun make-update-evaluation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-name evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-evaluation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-name))
      (common-lisp:list
       (common-lisp:cons "EvaluationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-evaluation-output common-lisp:nil
                       ((evaluation-id :initarg :evaluation-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-evaluation-output-evaluation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-output 'make-update-evaluation-output))
 (common-lisp:defun make-update-evaluation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-evaluation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mlmodel-input common-lisp:nil
                       ((score-threshold :initarg :score-threshold :type
                         (common-lisp:or score-threshold common-lisp:null)
                         :accessor %update-mlmodel-input-score-threshold
                         :initform common-lisp:nil)
                        (mlmodel-name :initarg :mlmodel-name :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %update-mlmodel-input-mlmodel-name :initform
                         common-lisp:nil)
                        (mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-mlmodel-input-mlmodel-id :initform
                         (common-lisp:error ":mlmodel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-mlmodel-input 'make-update-mlmodel-input))
 (common-lisp:defun make-update-mlmodel-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key score-threshold mlmodel-name mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-mlmodel-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-name))
      (common-lisp:list
       (common-lisp:cons "MLModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mlmodel-output common-lisp:nil
                       ((mlmodel-id :initarg :mlmodel-id :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-mlmodel-output-mlmodel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-mlmodel-output 'make-update-mlmodel-output))
 (common-lisp:defun make-update-mlmodel-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-mlmodel-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   common-lisp:nil))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:deftype variable-value () 'common-lisp:string)
(common-lisp:deftype verbose () 'common-lisp:boolean)
(common-lisp:deftype vip-url () 'common-lisp:string)
(common-lisp:deftype |floatLabel| () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags resource-id resource-type)
   (common-lisp:declare (common-lisp:ignorable tags resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddTags" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id batch-prediction-name
                     mlmodel-id batch-prediction-data-source-id output-uri)
   (common-lisp:declare
    (common-lisp:ignorable batch-prediction-id batch-prediction-name mlmodel-id
     batch-prediction-data-source-id output-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateBatchPrediction" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-prediction))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-rds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name rdsdata
                     role-arn compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name rdsdata role-arn
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-from-rdsinput
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateDataSourceFromRDS" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-rds))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-redshift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name data-spec
                     role-arn compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name data-spec role-arn
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-source-from-redshift-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateDataSourceFromRedshift" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-redshift))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name data-spec
                     compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name data-spec
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-from-s3input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateDataSourceFromS3" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-s3))
(common-lisp:progn
 (common-lisp:defun create-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id evaluation-name mlmodel-id
                     evaluation-data-source-id)
   (common-lisp:declare
    (common-lisp:ignorable evaluation-id evaluation-name mlmodel-id
     evaluation-data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateEvaluation" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-evaluation))
(common-lisp:progn
 (common-lisp:defun create-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id mlmodel-name mlmodel-type
                     parameters training-data-source-id recipe recipe-uri)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id mlmodel-name mlmodel-type parameters
     training-data-source-id recipe recipe-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateMLModel" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mlmodel))
(common-lisp:progn
 (common-lisp:defun create-realtime-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-realtime-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateRealtimeEndpoint" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-realtime-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:declare (common-lisp:ignorable batch-prediction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteBatchPrediction" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-prediction))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id)
   (common-lisp:declare (common-lisp:ignorable data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteDataSource" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id)
   (common-lisp:declare (common-lisp:ignorable evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteEvaluation" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-evaluation))
(common-lisp:progn
 (common-lisp:defun delete-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteMLModel" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mlmodel))
(common-lisp:progn
 (common-lisp:defun delete-realtime-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-realtime-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteRealtimeEndpoint" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-realtime-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tag-keys resource-id resource-type)
   (common-lisp:declare
    (common-lisp:ignorable tag-keys resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteTags" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-batch-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-batch-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeBatchPredictions" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-batch-predictions))
(common-lisp:progn
 (common-lisp:defun describe-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-sources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeDataSources" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-sources))
(common-lisp:progn
 (common-lisp:defun describe-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-evaluations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeEvaluations" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-evaluations))
(common-lisp:progn
 (common-lisp:defun describe-mlmodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mlmodels-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeMLModels" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mlmodels))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id resource-type)
   (common-lisp:declare (common-lisp:ignorable resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeTags" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun get-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:declare (common-lisp:ignorable batch-prediction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetBatchPrediction" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-prediction))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id verbose)
   (common-lisp:declare (common-lisp:ignorable data-source-id verbose))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetDataSource" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id)
   (common-lisp:declare (common-lisp:ignorable evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetEvaluation" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evaluation))
(common-lisp:progn
 (common-lisp:defun get-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id verbose)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id verbose))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetMLModel" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mlmodel))
(common-lisp:progn
 (common-lisp:defun predict
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id record predict-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id record predict-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-predict-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "Predict" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'predict))
(common-lisp:progn
 (common-lisp:defun update-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id
                     batch-prediction-name)
   (common-lisp:declare
    (common-lisp:ignorable batch-prediction-id batch-prediction-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateBatchPrediction" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-batch-prediction))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateDataSource" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id evaluation-name)
   (common-lisp:declare (common-lisp:ignorable evaluation-id evaluation-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateEvaluation" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-evaluation))
(common-lisp:progn
 (common-lisp:defun update-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id mlmodel-name score-threshold)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id mlmodel-name score-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateMLModel" "2014-12-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mlmodel))
