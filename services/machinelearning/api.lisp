;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/machinelearning/api
  (:use)
  (:nicknames #:aws/machinelearning)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/machinelearning/api)
(common-lisp:progn
 (common-lisp:define-condition machinelearning-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'machinelearning-error))
(common-lisp:progn
 (common-lisp:defclass machinelearning-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "machinelearning"
                        :api-version "2014-12-12" :host-prefix
                        "machinelearning" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "AmazonML_20141212" :json-version "1.1"))
 (common-lisp:export 'machinelearning-request))
(common-lisp:defvar *error-map*
  '(("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("PredictorNotMountedException" . predictor-not-mounted-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagLimitExceededException" . tag-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-input-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or taggable-resource-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-output-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or taggable-resource-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:deftype algorithm () 'common-lisp:string)
(common-lisp:deftype aws-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-prediction (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-prediction-"))
   (batch-prediction-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (batch-prediction-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (output-uri common-lisp:nil :type (common-lisp:or s3url common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (total-record-count common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (invalid-record-count common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-prediction 'make-batch-prediction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-record-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-record-count))
      (common-lisp:list
       (common-lisp:cons "InvalidRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-prediction))
   common-lisp:nil))
(common-lisp:deftype batch-prediction-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-predictions ()
   '(trivial-types:proper-list batch-prediction))
 (common-lisp:defun make-batch-predictions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-prediction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype comparator-value () 'common-lisp:string)
(common-lisp:deftype compute-statistics () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-prediction-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-prediction-input-"))
   (batch-prediction-id (common-lisp:error ":batch-prediction-id is required")
    :type (common-lisp:or entity-id common-lisp:null))
   (batch-prediction-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (batch-prediction-data-source-id
    (common-lisp:error ":batch-prediction-data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (output-uri (common-lisp:error ":output-uri is required") :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-input
                    'make-create-batch-prediction-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-name))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-prediction-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-prediction-output-"))
   (batch-prediction-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-output
                    'make-create-batch-prediction-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-rdsinput (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-rdsinput-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (data-source-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (rdsdata (common-lisp:error ":rdsdata is required") :type
    (common-lisp:or rdsdata-spec common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (compute-statistics common-lisp:nil :type
    (common-lisp:or compute-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-rdsinput
                    'make-create-data-source-from-rdsinput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsdata))
      (common-lisp:list
       (common-lisp:cons "RDSData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-rdsoutput (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-rdsoutput-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-rdsoutput
                    'make-create-data-source-from-rdsoutput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-rdsoutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-redshift-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-redshift-input-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (data-source-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (data-spec (common-lisp:error ":data-spec is required") :type
    (common-lisp:or redshift-data-spec common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (compute-statistics common-lisp:nil :type
    (common-lisp:or compute-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-redshift-input
                    'make-create-data-source-from-redshift-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-spec))
      (common-lisp:list
       (common-lisp:cons "DataSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-redshift-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-redshift-output-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-redshift-output
                    'make-create-data-source-from-redshift-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-redshift-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-s3input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-s3input-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (data-source-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (data-spec (common-lisp:error ":data-spec is required") :type
    (common-lisp:or s3data-spec common-lisp:null))
   (compute-statistics common-lisp:nil :type
    (common-lisp:or compute-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-s3input
                    'make-create-data-source-from-s3input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-spec))
      (common-lisp:list
       (common-lisp:cons "DataSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-from-s3output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-from-s3output-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-from-s3output
                    'make-create-data-source-from-s3output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-from-s3output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-evaluation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-evaluation-input-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-data-source-id
    (common-lisp:error ":evaluation-data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-input 'make-create-evaluation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-name))
      (common-lisp:list
       (common-lisp:cons "EvaluationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-evaluation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-evaluation-output-"))
   (evaluation-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-output 'make-create-evaluation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mlmodel-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mlmodel-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (mlmodel-type (common-lisp:error ":mlmodel-type is required") :type
    (common-lisp:or mlmodel-type common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or training-parameters common-lisp:null))
   (training-data-source-id
    (common-lisp:error ":training-data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (recipe common-lisp:nil :type (common-lisp:or recipe common-lisp:null))
   (recipe-uri common-lisp:nil :type (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mlmodel-input 'make-create-mlmodel-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-name))
      (common-lisp:list
       (common-lisp:cons "MLModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe))
      (common-lisp:list
       (common-lisp:cons "Recipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe-uri))
      (common-lisp:list
       (common-lisp:cons "RecipeUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mlmodel-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mlmodel-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mlmodel-output 'make-create-mlmodel-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-realtime-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-realtime-endpoint-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-realtime-endpoint-input
                    'make-create-realtime-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-realtime-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-realtime-endpoint-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (realtime-endpoint-info common-lisp:nil :type
    (common-lisp:or realtime-endpoint-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-realtime-endpoint-output
                    'make-create-realtime-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-endpoint-info))
      (common-lisp:list
       (common-lisp:cons "RealtimeEndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-endpoint-output))
   common-lisp:nil))
(common-lisp:deftype data-rearrangement () 'common-lisp:string)
(common-lisp:deftype data-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (data-rearrangement common-lisp:nil :type
    (common-lisp:or data-rearrangement common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (data-size-in-bytes common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (number-of-files common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (redshift-metadata common-lisp:nil :type
    (common-lisp:or redshift-metadata common-lisp:null))
   (rdsmetadata common-lisp:nil :type
    (common-lisp:or rdsmetadata common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (compute-statistics common-lisp:nil :type
    (common-lisp:or compute-statistics common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-files))
      (common-lisp:list
       (common-lisp:cons "NumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-metadata))
      (common-lisp:list
       (common-lisp:cons "RedshiftMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsmetadata))
      (common-lisp:list
       (common-lisp:cons "RDSMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype data-source-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-prediction-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-prediction-input-"))
   (batch-prediction-id (common-lisp:error ":batch-prediction-id is required")
    :type (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-input
                    'make-delete-batch-prediction-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-prediction-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-prediction-output-"))
   (batch-prediction-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-output
                    'make-delete-batch-prediction-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-input-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-input 'make-delete-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-output-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-output
                    'make-delete-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-evaluation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-evaluation-input-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-input 'make-delete-evaluation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-evaluation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-evaluation-output-"))
   (evaluation-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-output 'make-delete-evaluation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mlmodel-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mlmodel-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mlmodel-input 'make-delete-mlmodel-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mlmodel-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mlmodel-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mlmodel-output 'make-delete-mlmodel-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-realtime-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-realtime-endpoint-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-realtime-endpoint-input
                    'make-delete-realtime-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-realtime-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-realtime-endpoint-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (realtime-endpoint-info common-lisp:nil :type
    (common-lisp:or realtime-endpoint-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-realtime-endpoint-output
                    'make-delete-realtime-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-endpoint-info))
      (common-lisp:list
       (common-lisp:cons "RealtimeEndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-input-"))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or taggable-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-input 'make-delete-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-output-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or taggable-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-output 'make-delete-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-batch-predictions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-batch-predictions-input-"))
   (filter-variable common-lisp:nil :type
    (common-lisp:or batch-prediction-filter-variable common-lisp:null))
   (eq common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (gt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (lt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ge common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (le common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ne common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or page-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-batch-predictions-input
                    'make-describe-batch-predictions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-batch-predictions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-batch-predictions-output-"))
   (results common-lisp:nil :type
    (common-lisp:or batch-predictions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-batch-predictions-output
                    'make-describe-batch-predictions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-sources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-sources-input-"))
   (filter-variable common-lisp:nil :type
    (common-lisp:or data-source-filter-variable common-lisp:null))
   (eq common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (gt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (lt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ge common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (le common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ne common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or page-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-sources-input
                    'make-describe-data-sources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-sources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-sources-output-"))
   (results common-lisp:nil :type
    (common-lisp:or data-sources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-sources-output
                    'make-describe-data-sources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-sources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-evaluations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-evaluations-input-"))
   (filter-variable common-lisp:nil :type
    (common-lisp:or evaluation-filter-variable common-lisp:null))
   (eq common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (gt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (lt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ge common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (le common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ne common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or page-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluations-input
                    'make-describe-evaluations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-evaluations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-evaluations-output-"))
   (results common-lisp:nil :type
    (common-lisp:or evaluations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluations-output
                    'make-describe-evaluations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mlmodels-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mlmodels-input-"))
   (filter-variable common-lisp:nil :type
    (common-lisp:or mlmodel-filter-variable common-lisp:null))
   (eq common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (gt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (lt common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ge common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (le common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (ne common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or comparator-value common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or page-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mlmodels-input 'make-describe-mlmodels-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-variable))
      (common-lisp:list
       (common-lisp:cons "FilterVariable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "EQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "GT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "LT"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ge))
      (common-lisp:list
       (common-lisp:cons "GE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'le))
      (common-lisp:list
       (common-lisp:cons "LE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ne))
      (common-lisp:list
       (common-lisp:cons "NE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mlmodels-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mlmodels-output-"))
   (results common-lisp:nil :type (common-lisp:or mlmodels common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mlmodels-output 'make-describe-mlmodels-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mlmodels-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-input-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or taggable-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-output-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or taggable-resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:deftype details-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype details-map () 'common-lisp:hash-table)
 (common-lisp:defun make-details-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype details-value () 'common-lisp:string)
(common-lisp:deftype edppipeline-id () 'common-lisp:string)
(common-lisp:deftype edpresource-role () 'common-lisp:string)
(common-lisp:deftype edpsecurity-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype edpsecurity-group-ids ()
   '(trivial-types:proper-list edpsecurity-group-id))
 (common-lisp:defun make-edpsecurity-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edpsecurity-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype edpservice-role () 'common-lisp:string)
(common-lisp:deftype edpsubnet-id () 'common-lisp:string)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:deftype entity-status () 'common-lisp:string)
(common-lisp:deftype epoch-time () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-"))
   (evaluation-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (performance-metrics common-lisp:nil :type
    (common-lisp:or performance-metrics common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluation 'make-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-metrics))
      (common-lisp:list
       (common-lisp:cons "PerformanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation))
   common-lisp:nil))
(common-lisp:deftype evaluation-filter-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evaluations () '(trivial-types:proper-list evaluation))
 (common-lisp:defun make-evaluations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-prediction-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-prediction-input-"))
   (batch-prediction-id (common-lisp:error ":batch-prediction-id is required")
    :type (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-input
                    'make-get-batch-prediction-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-prediction-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-prediction-output-"))
   (batch-prediction-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (batch-prediction-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (output-uri common-lisp:nil :type (common-lisp:or s3url common-lisp:null))
   (log-uri common-lisp:nil :type
    (common-lisp:or presigned-s3url common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (total-record-count common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (invalid-record-count common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-output
                    'make-get-batch-prediction-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-data-source-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-record-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-record-count))
      (common-lisp:list
       (common-lisp:cons "InvalidRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-input-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (verbose common-lisp:nil :type (common-lisp:or verbose common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-input 'make-get-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verbose))
      (common-lisp:list
       (common-lisp:cons "Verbose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-output-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (data-rearrangement common-lisp:nil :type
    (common-lisp:or data-rearrangement common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (data-size-in-bytes common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (number-of-files common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (log-uri common-lisp:nil :type
    (common-lisp:or presigned-s3url common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (redshift-metadata common-lisp:nil :type
    (common-lisp:or redshift-metadata common-lisp:null))
   (rdsmetadata common-lisp:nil :type
    (common-lisp:or rdsmetadata common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (compute-statistics common-lisp:nil :type
    (common-lisp:or compute-statistics common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (data-source-schema common-lisp:nil :type
    (common-lisp:or data-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-output 'make-get-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-files))
      (common-lisp:list
       (common-lisp:cons "NumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-metadata))
      (common-lisp:list
       (common-lisp:cons "RedshiftMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsmetadata))
      (common-lisp:list
       (common-lisp:cons "RDSMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-statistics))
      (common-lisp:list
       (common-lisp:cons "ComputeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-schema))
      (common-lisp:list
       (common-lisp:cons "DataSourceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evaluation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evaluation-input-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evaluation-input 'make-get-evaluation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evaluation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evaluation-output-"))
   (evaluation-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (performance-metrics common-lisp:nil :type
    (common-lisp:or performance-metrics common-lisp:null))
   (log-uri common-lisp:nil :type
    (common-lisp:or presigned-s3url common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evaluation-output 'make-get-evaluation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-source-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-metrics))
      (common-lisp:list
       (common-lisp:cons "PerformanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mlmodel-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mlmodel-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (verbose common-lisp:nil :type (common-lisp:or verbose common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-input 'make-get-mlmodel-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verbose))
      (common-lisp:list
       (common-lisp:cons "Verbose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mlmodel-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mlmodel-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (training-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or mlmodel-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (size-in-bytes common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (endpoint-info common-lisp:nil :type
    (common-lisp:or realtime-endpoint-info common-lisp:null))
   (training-parameters common-lisp:nil :type
    (common-lisp:or training-parameters common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (mlmodel-type common-lisp:nil :type
    (common-lisp:or mlmodel-type common-lisp:null))
   (score-threshold common-lisp:nil :type
    (common-lisp:or score-threshold common-lisp:null))
   (score-threshold-last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (log-uri common-lisp:nil :type
    (common-lisp:or presigned-s3url common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (recipe common-lisp:nil :type (common-lisp:or recipe common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or data-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-output 'make-get-mlmodel-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'score-threshold-last-updated-at))
      (common-lisp:list
       (common-lisp:cons "ScoreThresholdLastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe))
      (common-lisp:list
       (common-lisp:cons "Recipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mlmodel-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-code)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message
                    'idempotent-parameter-mismatch-exception-code)))
(common-lisp:deftype integer-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-server-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-input-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:deftype label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code)))
(common-lisp:deftype long-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (mlmodel (:copier common-lisp:nil) (:conc-name "struct-shape-mlmodel-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (training-data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (created-by-iam-user common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or mlmodel-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or entity-status common-lisp:null))
   (size-in-bytes common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (endpoint-info common-lisp:nil :type
    (common-lisp:or realtime-endpoint-info common-lisp:null))
   (training-parameters common-lisp:nil :type
    (common-lisp:or training-parameters common-lisp:null))
   (input-data-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (algorithm common-lisp:nil :type
    (common-lisp:or algorithm common-lisp:null))
   (mlmodel-type common-lisp:nil :type
    (common-lisp:or mlmodel-type common-lisp:null))
   (score-threshold common-lisp:nil :type
    (common-lisp:or score-threshold common-lisp:null))
   (score-threshold-last-updated-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (compute-time common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (finished-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mlmodel 'make-mlmodel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mlmodel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mlmodel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source-id))
      (common-lisp:list
       (common-lisp:cons "TrainingDataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-iam-user))
      (common-lisp:list
       (common-lisp:cons "CreatedByIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-location-s3))
      (common-lisp:list
       (common-lisp:cons "InputDataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-type))
      (common-lisp:list
       (common-lisp:cons "MLModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'score-threshold-last-updated-at))
      (common-lisp:list
       (common-lisp:cons "ScoreThresholdLastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-time))
      (common-lisp:list
       (common-lisp:cons "ComputeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-at))
      (common-lisp:list
       (common-lisp:cons "FinishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mlmodel))
   common-lisp:nil))
(common-lisp:deftype mlmodel-filter-variable () 'common-lisp:string)
(common-lisp:deftype mlmodel-name () 'common-lisp:string)
(common-lisp:deftype mlmodel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mlmodels () '(trivial-types:proper-list mlmodel))
 (common-lisp:defun make-mlmodels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mlmodel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype page-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-metrics-"))
   (properties common-lisp:nil :type
    (common-lisp:or performance-metrics-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-metrics 'make-performance-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input performance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input performance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input performance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype performance-metrics-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun make-performance-metrics-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype performance-metrics-property-key () 'common-lisp:string)
(common-lisp:deftype performance-metrics-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predict-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-predict-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (record (common-lisp:error ":record is required") :type
    (common-lisp:or record common-lisp:null))
   (predict-endpoint (common-lisp:error ":predict-endpoint is required") :type
    (common-lisp:or vip-url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predict-input 'make-predict-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predict-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predict-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record))
      (common-lisp:list
       (common-lisp:cons "Record"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predict-endpoint))
      (common-lisp:list
       (common-lisp:cons "PredictEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predict-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predict-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-predict-output-"))
   (prediction common-lisp:nil :type
    (common-lisp:or prediction common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predict-output 'make-predict-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predict-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predict-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction))
      (common-lisp:list
       (common-lisp:cons "Prediction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predict-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prediction (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-"))
   (predicted-label common-lisp:nil :type
    (common-lisp:or label common-lisp:null))
   (predicted-value common-lisp:nil :type
    (common-lisp:or |floatLabel| common-lisp:null))
   (predicted-scores common-lisp:nil :type
    (common-lisp:or score-value-per-label-map common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or details-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prediction 'make-prediction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-label))
      (common-lisp:list
       (common-lisp:cons "predictedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-value))
      (common-lisp:list
       (common-lisp:cons "predictedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-scores))
      (common-lisp:list
       (common-lisp:cons "predictedScores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prediction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition predictor-not-mounted-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       predictor-not-mounted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'predictor-not-mounted-exception
                    'predictor-not-mounted-exception-message)))
(common-lisp:deftype presigned-s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rdsdata-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-rdsdata-spec-"))
   (database-information
    (common-lisp:error ":database-information is required") :type
    (common-lisp:or rdsdatabase common-lisp:null))
   (select-sql-query (common-lisp:error ":select-sql-query is required") :type
    (common-lisp:or rdsselect-sql-query common-lisp:null))
   (database-credentials
    (common-lisp:error ":database-credentials is required") :type
    (common-lisp:or rdsdatabase-credentials common-lisp:null))
   (s3staging-location (common-lisp:error ":s3staging-location is required")
    :type (common-lisp:or s3url common-lisp:null))
   (data-rearrangement common-lisp:nil :type
    (common-lisp:or data-rearrangement common-lisp:null))
   (data-schema common-lisp:nil :type
    (common-lisp:or data-schema common-lisp:null))
   (data-schema-uri common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null))
   (resource-role (common-lisp:error ":resource-role is required") :type
    (common-lisp:or edpresource-role common-lisp:null))
   (service-role (common-lisp:error ":service-role is required") :type
    (common-lisp:or edpservice-role common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or edpsubnet-id common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or edpsecurity-group-ids common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rdsdata-spec 'make-rdsdata-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-information))
      (common-lisp:list
       (common-lisp:cons "DatabaseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-credentials))
      (common-lisp:list
       (common-lisp:cons "DatabaseCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3staging-location))
      (common-lisp:list
       (common-lisp:cons "S3StagingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema-uri))
      (common-lisp:list
       (common-lisp:cons "DataSchemaUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsdata-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rdsdatabase (:copier common-lisp:nil)
      (:conc-name "struct-shape-rdsdatabase-"))
   (instance-identifier (common-lisp:error ":instance-identifier is required")
    :type (common-lisp:or rdsinstance-identifier common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or rdsdatabase-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rdsdatabase 'make-rdsdatabase))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsdatabase))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsdatabase))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsdatabase))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rdsdatabase-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-rdsdatabase-credentials-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or rdsdatabase-username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or rdsdatabase-password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rdsdatabase-credentials 'make-rdsdatabase-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rdsdatabase-credentials))
   common-lisp:nil))
(common-lisp:deftype rdsdatabase-name () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-password () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-username () 'common-lisp:string)
(common-lisp:deftype rdsinstance-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rdsmetadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-rdsmetadata-"))
   (database common-lisp:nil :type
    (common-lisp:or rdsdatabase common-lisp:null))
   (database-user-name common-lisp:nil :type
    (common-lisp:or rdsdatabase-username common-lisp:null))
   (select-sql-query common-lisp:nil :type
    (common-lisp:or rdsselect-sql-query common-lisp:null))
   (resource-role common-lisp:nil :type
    (common-lisp:or edpresource-role common-lisp:null))
   (service-role common-lisp:nil :type
    (common-lisp:or edpservice-role common-lisp:null))
   (data-pipeline-id common-lisp:nil :type
    (common-lisp:or edppipeline-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rdsmetadata 'make-rdsmetadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsmetadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsmetadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-user-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "DataPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsmetadata))
   common-lisp:nil))
(common-lisp:deftype rdsselect-sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (realtime-endpoint-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-realtime-endpoint-info-"))
   (peak-requests-per-second common-lisp:nil :type
    (common-lisp:or integer-type common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or epoch-time common-lisp:null))
   (endpoint-url common-lisp:nil :type
    (common-lisp:or vip-url common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or realtime-endpoint-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'realtime-endpoint-info 'make-realtime-endpoint-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'peak-requests-per-second))
      (common-lisp:list
       (common-lisp:cons "PeakRequestsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          realtime-endpoint-info))
   common-lisp:nil))
(common-lisp:deftype realtime-endpoint-status () 'common-lisp:string)
(common-lisp:deftype recipe () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record () 'common-lisp:hash-table)
 (common-lisp:defun make-record (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype redshift-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-data-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-data-spec-"))
   (database-information
    (common-lisp:error ":database-information is required") :type
    (common-lisp:or redshift-database common-lisp:null))
   (select-sql-query (common-lisp:error ":select-sql-query is required") :type
    (common-lisp:or redshift-select-sql-query common-lisp:null))
   (database-credentials
    (common-lisp:error ":database-credentials is required") :type
    (common-lisp:or redshift-database-credentials common-lisp:null))
   (s3staging-location (common-lisp:error ":s3staging-location is required")
    :type (common-lisp:or s3url common-lisp:null))
   (data-rearrangement common-lisp:nil :type
    (common-lisp:or data-rearrangement common-lisp:null))
   (data-schema common-lisp:nil :type
    (common-lisp:or data-schema common-lisp:null))
   (data-schema-uri common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-data-spec 'make-redshift-data-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-information))
      (common-lisp:list
       (common-lisp:cons "DatabaseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-credentials))
      (common-lisp:list
       (common-lisp:cons "DatabaseCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3staging-location))
      (common-lisp:list
       (common-lisp:cons "S3StagingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema-uri))
      (common-lisp:list
       (common-lisp:cons "DataSchemaUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-data-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-database (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-database-"))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or redshift-database-name common-lisp:null))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or redshift-cluster-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-database 'make-redshift-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-database-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-database-credentials-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or redshift-database-username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or redshift-database-password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-database-credentials
                    'make-redshift-database-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-database-credentials))
   common-lisp:nil))
(common-lisp:deftype redshift-database-name () 'common-lisp:string)
(common-lisp:deftype redshift-database-password () 'common-lisp:string)
(common-lisp:deftype redshift-database-username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-metadata-"))
   (redshift-database common-lisp:nil :type
    (common-lisp:or redshift-database common-lisp:null))
   (database-user-name common-lisp:nil :type
    (common-lisp:or redshift-database-username common-lisp:null))
   (select-sql-query common-lisp:nil :type
    (common-lisp:or redshift-select-sql-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-metadata 'make-redshift-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-database))
      (common-lisp:list
       (common-lisp:cons "RedshiftDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-user-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-sql-query))
      (common-lisp:list
       (common-lisp:cons "SelectSqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-metadata))
   common-lisp:nil))
(common-lisp:deftype redshift-select-sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-spec-"))
   (data-location-s3 (common-lisp:error ":data-location-s3 is required") :type
    (common-lisp:or s3url common-lisp:null))
   (data-rearrangement common-lisp:nil :type
    (common-lisp:or data-rearrangement common-lisp:null))
   (data-schema common-lisp:nil :type
    (common-lisp:or data-schema common-lisp:null))
   (data-schema-location-s3 common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3data-spec 'make-s3data-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rearrangement))
      (common-lisp:list
       (common-lisp:cons "DataRearrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-schema))
      (common-lisp:list
       (common-lisp:cons "DataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-schema-location-s3))
      (common-lisp:list
       (common-lisp:cons "DataSchemaLocationS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-spec))
   common-lisp:nil))
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:deftype score-threshold () 'common-lisp:single-float)
(common-lisp:deftype score-value () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:deftype score-value-per-label-map () 'common-lisp:hash-table)
 (common-lisp:defun make-score-value-per-label-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-exception
     (machinelearning-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tag-limit-exceeded-exception
                    'tag-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype taggable-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-training-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-batch-prediction-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-batch-prediction-input-"))
   (batch-prediction-id (common-lisp:error ":batch-prediction-id is required")
    :type (common-lisp:or entity-id common-lisp:null))
   (batch-prediction-name
    (common-lisp:error ":batch-prediction-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-batch-prediction-input
                    'make-update-batch-prediction-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-prediction-name))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-batch-prediction-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-batch-prediction-output-"))
   (batch-prediction-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-batch-prediction-output
                    'make-update-batch-prediction-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-prediction-id))
      (common-lisp:list
       (common-lisp:cons "BatchPredictionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-batch-prediction-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-input-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (data-source-name (common-lisp:error ":data-source-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-input 'make-update-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-output-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-output
                    'make-update-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-evaluation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-evaluation-input-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-name (common-lisp:error ":evaluation-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-input 'make-update-evaluation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-name))
      (common-lisp:list
       (common-lisp:cons "EvaluationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-evaluation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-evaluation-output-"))
   (evaluation-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-output 'make-update-evaluation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mlmodel-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mlmodel-input-"))
   (mlmodel-id (common-lisp:error ":mlmodel-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (mlmodel-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (score-threshold common-lisp:nil :type
    (common-lisp:or score-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mlmodel-input 'make-update-mlmodel-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-name))
      (common-lisp:list
       (common-lisp:cons "MLModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-threshold))
      (common-lisp:list
       (common-lisp:cons "ScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mlmodel-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mlmodel-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mlmodel-output-"))
   (mlmodel-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mlmodel-output 'make-update-mlmodel-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlmodel-id))
      (common-lisp:list
       (common-lisp:cons "MLModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mlmodel-output))
   common-lisp:nil))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:deftype variable-value () 'common-lisp:string)
(common-lisp:deftype verbose () 'common-lisp:boolean)
(common-lisp:deftype vip-url () 'common-lisp:string)
(common-lisp:deftype |floatLabel| () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags resource-id resource-type)
   (common-lisp:declare (common-lisp:ignorable tags resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "AddTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id batch-prediction-name
                     mlmodel-id batch-prediction-data-source-id output-uri)
   (common-lisp:declare
    (common-lisp:ignorable batch-prediction-id batch-prediction-name mlmodel-id
     batch-prediction-data-source-id output-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateBatchPrediction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-prediction))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-rds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name rdsdata
                     role-arn compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name rdsdata role-arn
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-from-rdsinput
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateDataSourceFromRDS"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-rds))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-redshift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name data-spec
                     role-arn compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name data-spec role-arn
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-source-from-redshift-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateDataSourceFromRedshift"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-redshift))
(common-lisp:progn
 (common-lisp:defun create-data-source-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name data-spec
                     compute-statistics)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name data-spec
     compute-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-from-s3input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateDataSourceFromS3"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source-from-s3))
(common-lisp:progn
 (common-lisp:defun create-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id evaluation-name mlmodel-id
                     evaluation-data-source-id)
   (common-lisp:declare
    (common-lisp:ignorable evaluation-id evaluation-name mlmodel-id
     evaluation-data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateEvaluation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-evaluation))
(common-lisp:progn
 (common-lisp:defun create-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id mlmodel-name mlmodel-type
                     parameters training-data-source-id recipe recipe-uri)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id mlmodel-name mlmodel-type parameters
     training-data-source-id recipe recipe-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateMLModel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mlmodel))
(common-lisp:progn
 (common-lisp:defun create-realtime-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-realtime-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "CreateRealtimeEndpoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-realtime-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:declare (common-lisp:ignorable batch-prediction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteBatchPrediction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-prediction))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id)
   (common-lisp:declare (common-lisp:ignorable data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id)
   (common-lisp:declare (common-lisp:ignorable evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteEvaluation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-evaluation))
(common-lisp:progn
 (common-lisp:defun delete-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteMLModel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mlmodel))
(common-lisp:progn
 (common-lisp:defun delete-realtime-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-realtime-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteRealtimeEndpoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-realtime-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tag-keys resource-id resource-type)
   (common-lisp:declare
    (common-lisp:ignorable tag-keys resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-batch-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-batch-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeBatchPredictions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-batch-predictions))
(common-lisp:progn
 (common-lisp:defun describe-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-sources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeDataSources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-sources))
(common-lisp:progn
 (common-lisp:defun describe-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-evaluations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEvaluations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-evaluations))
(common-lisp:progn
 (common-lisp:defun describe-mlmodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-variable eq gt lt ge le ne prefix
                     sort-order next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable filter-variable eq gt lt ge le ne prefix sort-order
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mlmodels-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeMLModels"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mlmodels))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id resource-type)
   (common-lisp:declare (common-lisp:ignorable resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun get-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id)
   (common-lisp:declare (common-lisp:ignorable batch-prediction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "GetBatchPrediction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-prediction))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id verbose)
   (common-lisp:declare (common-lisp:ignorable data-source-id verbose))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id)
   (common-lisp:declare (common-lisp:ignorable evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "GetEvaluation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evaluation))
(common-lisp:progn
 (common-lisp:defun get-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id verbose)
   (common-lisp:declare (common-lisp:ignorable mlmodel-id verbose))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "GetMLModel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mlmodel))
(common-lisp:progn
 (common-lisp:defun predict
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id record predict-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id record predict-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-predict-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "Predict"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'predict))
(common-lisp:progn
 (common-lisp:defun update-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch-prediction-id
                     batch-prediction-name)
   (common-lisp:declare
    (common-lisp:ignorable batch-prediction-id batch-prediction-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-batch-prediction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateBatchPrediction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-batch-prediction))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-id data-source-name)
   (common-lisp:declare
    (common-lisp:ignorable data-source-id data-source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluation-id evaluation-name)
   (common-lisp:declare (common-lisp:ignorable evaluation-id evaluation-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-evaluation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateEvaluation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-evaluation))
(common-lisp:progn
 (common-lisp:defun update-mlmodel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mlmodel-id mlmodel-name score-threshold)
   (common-lisp:declare
    (common-lisp:ignorable mlmodel-id mlmodel-name score-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mlmodel-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'machinelearning-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateMLModel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mlmodel))
