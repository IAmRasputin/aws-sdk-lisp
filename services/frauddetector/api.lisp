;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/frauddetector/api
  (:use)
  (:nicknames #:aws/frauddetector)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/frauddetector/api)
(common-lisp:progn
 (common-lisp:defclass frauddetector-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "frauddetector"))
 (common-lisp:export 'frauddetector-request))
(common-lisp:progn
 (common-lisp:define-condition frauddetector-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'frauddetector-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (atimetric-data-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-atimetric-data-point-"))
   (cr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (adr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (atodr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'atimetric-data-point 'make-atimetric-data-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cr))
      (common-lisp:list
       (common-lisp:cons "cr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adr))
      (common-lisp:list
       (common-lisp:cons "adr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'atodr))
      (common-lisp:list
       (common-lisp:cons "atodr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype atimetric-data-points-list ()
   '(trivial-types:proper-list atimetric-data-point))
 (common-lisp:defun |make-atimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list atimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (atimodel-performance (:copier common-lisp:nil)
      (:conc-name "struct-shape-atimodel-performance-"))
   (asi common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'atimodel-performance 'make-atimodel-performance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input atimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input atimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asi))
      (common-lisp:list
       (common-lisp:cons "asi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input atimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (atitraining-metrics-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-atitraining-metrics-value-"))
   (metric-data-points common-lisp:nil :type
    (common-lisp:or atimetric-data-points-list common-lisp:null))
   (model-performance common-lisp:nil :type
    (common-lisp:or atimodel-performance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'atitraining-metrics-value
                    'make-atitraining-metrics-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregated-log-odds-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregated-log-odds-metric-"))
   (variable-names (common-lisp:error ":variablenames is required") :type
    (common-lisp:or list-of-strings common-lisp:null))
   (aggregated-variables-importance
    (common-lisp:error ":aggregatedvariablesimportance is required") :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregated-log-odds-metric
                    'make-aggregated-log-odds-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-names))
      (common-lisp:list
       (common-lisp:cons "variableNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-importance))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImportance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregated-variables-impact-explanation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregated-variables-impact-explanation-"))
   (event-variable-names common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (relative-impact common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (log-odds-impact common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregated-variables-impact-explanation
                    'make-aggregated-variables-impact-explanation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-variable-names))
      (common-lisp:list
       (common-lisp:cons "eventVariableNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-impact))
      (common-lisp:list
       (common-lisp:cons "relativeImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-impact))
      (common-lisp:list
       (common-lisp:cons "logOddsImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregated-variables-importance-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregated-variables-importance-metrics-"))
   (log-odds-metrics common-lisp:nil :type
    (common-lisp:or list-of-aggregated-log-odds-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregated-variables-importance-metrics
                    'make-aggregated-variables-importance-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-metrics))
      (common-lisp:list
       (common-lisp:cons "logOddsMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allow-deny-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-deny-list-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |noDashIdentifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or |variableType| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'allow-deny-list 'make-allow-deny-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-deny-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-deny-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "updatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-deny-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype allow-deny-lists ()
   '(trivial-types:proper-list allow-deny-list))
 (common-lisp:defun |make-allow-deny-lists|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allow-deny-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype async-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-variable-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-variable-error-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (code common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-error
                    'make-batch-create-variable-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-variable-error-list ()
   '(trivial-types:proper-list batch-create-variable-error))
 (common-lisp:defun |make-batch-create-variable-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-variable-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-variable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-variable-request-"))
   (variable-entries (common-lisp:error ":variableentries is required") :type
    (common-lisp:or variable-entry-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-request
                    'make-batch-create-variable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-entries))
      (common-lisp:list
       (common-lisp:cons "variableEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-variable-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-variable-result-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-create-variable-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-result
                    'make-batch-create-variable-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-variable-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-variable-error-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (code common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-error 'make-batch-get-variable-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-variable-error-list ()
   '(trivial-types:proper-list batch-get-variable-error))
 (common-lisp:defun |make-batch-get-variable-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-variable-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-variable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-variable-request-"))
   (names (common-lisp:error ":names is required") :type
    (common-lisp:or name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-request
                    'make-batch-get-variable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-variable-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-variable-result-"))
   (variables common-lisp:nil :type
    (common-lisp:or variable-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or batch-get-variable-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-result
                    'make-batch-get-variable-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-import-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or async-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or |time| common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (input-path common-lisp:nil :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (output-path common-lisp:nil :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or |iamRoleArn| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (processed-records-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failed-records-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-records-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'batch-import 'make-batch-import))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-import))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-import))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-records-count))
      (common-lisp:list
       (common-lisp:cons "processedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-records-count))
      (common-lisp:list
       (common-lisp:cons "failedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records-count))
      (common-lisp:list
       (common-lisp:cons "totalRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-import))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-list ()
   '(trivial-types:proper-list batch-import))
 (common-lisp:defun |make-batch-import-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-import))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-prediction (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-prediction-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or async-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or |time| common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (last-heartbeat-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (input-path common-lisp:nil :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (output-path common-lisp:nil :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or |iamRoleArn| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (processed-records-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-records-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-prediction 'make-batch-prediction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-heartbeat-time))
      (common-lisp:list
       (common-lisp:cons "lastHeartbeatTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version))
      (common-lisp:list
       (common-lisp:cons "detectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-records-count))
      (common-lisp:list
       (common-lisp:cons "processedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records-count))
      (common-lisp:list
       (common-lisp:cons "totalRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-prediction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-prediction-list ()
   '(trivial-types:proper-list batch-prediction))
 (common-lisp:defun |make-batch-prediction-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-prediction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-import-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-import-job-request
                    'make-cancel-batch-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-import-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-import-job-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-import-job-result
                    'make-cancel-batch-import-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-prediction-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-prediction-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-prediction-job-request
                    'make-cancel-batch-prediction-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-prediction-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-prediction-job-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-prediction-job-result
                    'make-cancel-batch-prediction-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-import-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (input-path (common-lisp:error ":inputpath is required") :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (output-path (common-lisp:error ":outputpath is required") :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (iam-role-arn (common-lisp:error ":iamrolearn is required") :type
    (common-lisp:or |iamRoleArn| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-batch-import-job-request
                    'make-create-batch-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-import-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-import-job-result-")))
 (common-lisp:export
  (common-lisp:list 'create-batch-import-job-result
                    'make-create-batch-import-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-prediction-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-prediction-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (input-path (common-lisp:error ":inputpath is required") :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (output-path (common-lisp:error ":outputpath is required") :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-name (common-lisp:error ":detectorname is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (iam-role-arn (common-lisp:error ":iamrolearn is required") :type
    (common-lisp:or |iamRoleArn| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-job-request
                    'make-create-batch-prediction-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version))
      (common-lisp:list
       (common-lisp:cons "detectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-batch-prediction-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-batch-prediction-job-result-")))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-job-result
                    'make-create-batch-prediction-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-detector-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-detector-version-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (external-model-endpoints common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rule-list common-lisp:null))
   (model-versions common-lisp:nil :type
    (common-lisp:or list-of-model-versions common-lisp:null))
   (rule-execution-mode common-lisp:nil :type
    (common-lisp:or rule-execution-mode common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-detector-version-request
                    'make-create-detector-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-detector-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-detector-version-result-"))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or detector-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-detector-version-result
                    'make-create-detector-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-list-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |noDashIdentifier| common-lisp:null))
   (elements common-lisp:nil :type
    (common-lisp:or elements-list common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or |variableType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-list-request 'make-create-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-list-result-")))
 (common-lisp:export
  (common-lisp:list 'create-list-result 'make-create-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-request 'make-create-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-result-")))
 (common-lisp:export
  (common-lisp:list 'create-model-result 'make-create-model-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-version-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (training-data-source (common-lisp:error ":trainingdatasource is required")
    :type (common-lisp:or training-data-source-enum common-lisp:null))
   (training-data-schema (common-lisp:error ":trainingdataschema is required")
    :type (common-lisp:or training-data-schema common-lisp:null))
   (external-events-detail common-lisp:nil :type
    (common-lisp:or external-events-detail common-lisp:null))
   (ingested-events-detail common-lisp:nil :type
    (common-lisp:or ingested-events-detail common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-version-request
                    'make-create-model-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-version-result-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-version-result
                    'make-create-model-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-request-"))
   (rule-id (common-lisp:error ":ruleid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or |ruleExpression| common-lisp:null))
   (language (common-lisp:error ":language is required") :type
    (common-lisp:or language common-lisp:null))
   (outcomes (common-lisp:error ":outcomes is required") :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-request 'make-create-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-result-"))
   (rule common-lisp:nil :type (common-lisp:or rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-result 'make-create-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-variable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-variable-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or data-type common-lisp:null))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or data-source common-lisp:null))
   (default-value (common-lisp:error ":defaultvalue is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-variable-request 'make-create-variable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-variable-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-variable-result-")))
 (common-lisp:export
  (common-lisp:list 'create-variable-result 'make-create-variable-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype csv-index-to-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-csv-index-to-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype data-source () 'common-lisp:string)
(common-lisp:deftype data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-validation-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-validation-metrics-"))
   (file-level-messages common-lisp:nil :type
    (common-lisp:or |fileValidationMessageList| common-lisp:null))
   (field-level-messages common-lisp:nil :type
    (common-lisp:or |fieldValidationMessageList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-validation-metrics 'make-data-validation-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-level-messages))
      (common-lisp:list
       (common-lisp:cons "fileLevelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-messages))
      (common-lisp:list
       (common-lisp:cons "fieldLevelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   common-lisp:nil))
(common-lisp:deftype delete-audit-history () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-import-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-batch-import-job-request
                    'make-delete-batch-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-import-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-import-job-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-batch-import-job-result
                    'make-delete-batch-import-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-prediction-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-prediction-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-job-request
                    'make-delete-batch-prediction-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-batch-prediction-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-batch-prediction-job-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-job-result
                    'make-delete-batch-prediction-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-detector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-detector-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-detector-request 'make-delete-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-detector-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-detector-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-detector-result 'make-delete-detector-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-detector-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-detector-version-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-detector-version-request
                    'make-delete-detector-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-detector-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-detector-version-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-detector-version-result
                    'make-delete-detector-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-entity-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-entity-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-entity-type-request
                    'make-delete-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-entity-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-entity-type-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-entity-type-result
                    'make-delete-entity-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-request-"))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (delete-audit-history common-lisp:nil :type
    (common-lisp:or delete-audit-history common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-request 'make-delete-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-audit-history))
      (common-lisp:list
       (common-lisp:cons "deleteAuditHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-event-result 'make-delete-event-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-type-request
                    'make-delete-event-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-type-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-event-type-result 'make-delete-event-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-events-by-event-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-events-by-event-type-request-"))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-events-by-event-type-request
                    'make-delete-events-by-event-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-events-by-event-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-events-by-event-type-result-"))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (events-deletion-status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-events-by-event-type-result
                    'make-delete-events-by-event-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-deletion-status))
      (common-lisp:list
       (common-lisp:cons "eventsDeletionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-external-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-external-model-request-"))
   (model-endpoint (common-lisp:error ":modelendpoint is required") :type
    (common-lisp:or |sageMakerEndpointIdentifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-external-model-request
                    'make-delete-external-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-external-model-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-external-model-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-external-model-result
                    'make-delete-external-model-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-label-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-label-request 'make-delete-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-label-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-label-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-label-result 'make-delete-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-list-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |noDashIdentifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-list-request 'make-delete-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-list-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-list-result 'make-delete-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-request 'make-delete-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-model-result 'make-delete-model-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-version-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number (common-lisp:error ":modelversionnumber is required")
    :type (common-lisp:or |floatVersionString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-version-request
                    'make-delete-model-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-version-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-model-version-result
                    'make-delete-model-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-outcome-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-outcome-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-outcome-request 'make-delete-outcome-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-outcome-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-outcome-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-outcome-result 'make-delete-outcome-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-rule-result 'make-delete-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-variable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-variable-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-variable-request 'make-delete-variable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-variable-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-variable-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-variable-result 'make-delete-variable-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-detector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-detector-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or detector-version-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-detector-request
                    'make-describe-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-detector-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-detector-result-"))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-summaries common-lisp:nil :type
    (common-lisp:or detector-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-detector-result 'make-describe-detector-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detector-version-summaries))
      (common-lisp:list
       (common-lisp:cons "detectorVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-versions-request-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-version-number common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |modelsMaxPageSize| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-versions-request
                    'make-describe-model-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-versions-result-"))
   (model-version-details common-lisp:nil :type
    (common-lisp:or |modelVersionDetailList| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-versions-result
                    'make-describe-model-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-details))
      (common-lisp:list
       (common-lisp:cons "modelVersionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detector (:copier common-lisp:nil) (:conc-name "struct-shape-detector-"))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'detector 'make-detector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-list () '(trivial-types:proper-list detector))
 (common-lisp:defun |make-detector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-version-max-results () 'common-lisp:integer)
(common-lisp:deftype detector-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detector-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-detector-version-summary-"))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or detector-version-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detector-version-summary 'make-detector-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-version-summary-list ()
   '(trivial-types:proper-list detector-version-summary))
 (common-lisp:defun |make-detector-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detectors-max-results () 'common-lisp:integer)
(common-lisp:deftype elements () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype elements-list () '(trivial-types:proper-list elements))
 (common-lisp:defun |make-elements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elements))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (entity (:copier common-lisp:nil) (:conc-name "struct-shape-entity-"))
   (entity-type (common-lisp:error ":entitytype is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (entity-id (common-lisp:error ":entityid is required") :type
    (common-lisp:or |entityRestrictedString| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-type-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-type 'make-entity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluated-external-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluated-external-model-"))
   (model-endpoint common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (use-event-variables common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (input-variables common-lisp:nil :type
    (common-lisp:or map-of-strings common-lisp:null))
   (output-variables common-lisp:nil :type
    (common-lisp:or map-of-strings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluated-external-model 'make-evaluated-external-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-event-variables))
      (common-lisp:list
       (common-lisp:cons "useEventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-variables))
      (common-lisp:list
       (common-lisp:cons "inputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluated-model-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluated-model-version-"))
   (model-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (model-version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (evaluations common-lisp:nil :type
    (common-lisp:or list-of-model-version-evaluations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluated-model-version 'make-evaluated-model-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "modelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluations))
      (common-lisp:list
       (common-lisp:cons "evaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluated-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluated-rule-"))
   (rule-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (rule-version common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or |sensitiveString| common-lisp:null))
   (expression-with-values common-lisp:nil :type
    (common-lisp:or |sensitiveString| common-lisp:null))
   (outcomes common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (evaluated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (matched common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluated-rule 'make-evaluated-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluated-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluated-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-with-values))
      (common-lisp:list
       (common-lisp:cons "expressionWithValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluated))
      (common-lisp:list
       (common-lisp:cons "evaluated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched))
      (common-lisp:list
       (common-lisp:cons "matched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluated-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluated-rule-list ()
   '(trivial-types:proper-list evaluated-rule))
 (common-lisp:defun |make-evaluated-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluated-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (event-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-variables common-lisp:nil :type
    (common-lisp:or event-attribute-map common-lisp:null))
   (current-label common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (label-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or |listOfEntities| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-label))
      (common-lisp:list
       (common-lisp:cons "currentLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-event-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype event-ingestion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-prediction-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-prediction-summary-"))
   (event-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-timestamp common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (prediction-timestamp common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-prediction-summary 'make-event-prediction-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   common-lisp:nil))
(common-lisp:deftype event-predictions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (event-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-type-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-variables common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (entity-types common-lisp:nil :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (event-ingestion common-lisp:nil :type
    (common-lisp:or event-ingestion common-lisp:null))
   (ingested-event-statistics common-lisp:nil :type
    (common-lisp:or ingested-event-statistics common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-type 'make-event-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-ingestion))
      (common-lisp:list
       (common-lisp:cons "eventIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-event-statistics))
      (common-lisp:list
       (common-lisp:cons "ingestedEventStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-event-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (event-variable-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-variable-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or |sensitiveString| common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or |sensitiveString| common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or |sensitiveString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-variable-summary 'make-event-variable-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (external-events-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-events-detail-"))
   (data-location (common-lisp:error ":datalocation is required") :type
    (common-lisp:or |s3BucketLocation| common-lisp:null))
   (data-access-role-arn (common-lisp:error ":dataaccessrolearn is required")
    :type (common-lisp:or |iamRoleArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-events-detail 'make-external-events-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "dataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (external-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-model-"))
   (model-endpoint common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (model-source common-lisp:nil :type
    (common-lisp:or model-source common-lisp:null))
   (invoke-model-endpoint-role-arn common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (input-configuration common-lisp:nil :type
    (common-lisp:or model-input-configuration common-lisp:null))
   (output-configuration common-lisp:nil :type
    (common-lisp:or model-output-configuration common-lisp:null))
   (model-endpoint-status common-lisp:nil :type
    (common-lisp:or model-endpoint-status common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'external-model 'make-external-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input external-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input external-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invoke-model-endpoint-role-arn))
      (common-lisp:list
       (common-lisp:cons "invokeModelEndpointRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-configuration))
      (common-lisp:list
       (common-lisp:cons "inputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-endpoint-status))
      (common-lisp:list
       (common-lisp:cons "modelEndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input external-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype external-model-endpoint-data-blob-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-external-model-endpoint-data-blob-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype external-model-list ()
   '(trivial-types:proper-list external-model))
 (common-lisp:defun |make-external-model-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (external-model-outputs (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-model-outputs-"))
   (external-model common-lisp:nil :type
    (common-lisp:or external-model-summary common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or external-model-prediction-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-model-outputs 'make-external-model-outputs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-model))
      (common-lisp:list
       (common-lisp:cons "externalModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype external-model-prediction-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-external-model-prediction-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (external-model-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-model-summary-"))
   (model-endpoint common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (model-source common-lisp:nil :type
    (common-lisp:or model-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-model-summary 'make-external-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   common-lisp:nil))
(common-lisp:deftype external-models-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (field-validation-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-validation-message-"))
   (field-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (identifier common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-validation-message 'make-field-validation-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (file-validation-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-validation-message-"))
   (title common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'file-validation-message 'make-file-validation-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-condition-"))
   (value common-lisp:nil :type
    (common-lisp:or |filterString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-import-jobs-request-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |batchImportsMaxPageSize| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-import-jobs-request
                    'make-get-batch-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-import-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-import-jobs-result-"))
   (batch-imports common-lisp:nil :type
    (common-lisp:or batch-import-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-import-jobs-result
                    'make-get-batch-import-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-imports))
      (common-lisp:list
       (common-lisp:cons "batchImports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-prediction-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-prediction-jobs-request-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |batchPredictionsMaxPageSize| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-jobs-request
                    'make-get-batch-prediction-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-prediction-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-prediction-jobs-result-"))
   (batch-predictions common-lisp:nil :type
    (common-lisp:or batch-prediction-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-jobs-result
                    'make-get-batch-prediction-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-predictions))
      (common-lisp:list
       (common-lisp:cons "batchPredictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delete-events-by-event-type-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-delete-events-by-event-type-status-request-"))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-delete-events-by-event-type-status-request
                    'make-get-delete-events-by-event-type-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delete-events-by-event-type-status-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-delete-events-by-event-type-status-result-"))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (events-deletion-status common-lisp:nil :type
    (common-lisp:or async-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-delete-events-by-event-type-status-result
                    'make-get-delete-events-by-event-type-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-deletion-status))
      (common-lisp:list
       (common-lisp:cons "eventsDeletionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-detector-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-detector-version-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-detector-version-request
                    'make-get-detector-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-detector-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-detector-version-result-"))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (external-model-endpoints common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (model-versions common-lisp:nil :type
    (common-lisp:or list-of-model-versions common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rule-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or detector-version-status common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (rule-execution-mode common-lisp:nil :type
    (common-lisp:or rule-execution-mode common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-detector-version-result
                    'make-get-detector-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-detectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-detectors-request-"))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or detectors-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-detectors-request 'make-get-detectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-detectors-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-detectors-result-"))
   (detectors common-lisp:nil :type
    (common-lisp:or detector-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-detectors-result 'make-get-detectors-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-detectors-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-detectors-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detectors))
      (common-lisp:list
       (common-lisp:cons "detectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-detectors-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-entity-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-entity-types-request-"))
   (name common-lisp:nil :type (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |entityTypesMaxResults| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-entity-types-request 'make-get-entity-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-entity-types-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-entity-types-result-"))
   (entity-types common-lisp:nil :type
    (common-lisp:or |entityTypeList| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-entity-types-result 'make-get-entity-types-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-prediction-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-prediction-metadata-request-"))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (prediction-timestamp (common-lisp:error ":predictiontimestamp is required")
    :type (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-metadata-request
                    'make-get-event-prediction-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-prediction-metadata-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-prediction-metadata-result-"))
   (event-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-timestamp common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (detector-version-status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-variables common-lisp:nil :type
    (common-lisp:or list-of-event-variable-summaries common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or evaluated-rule-list common-lisp:null))
   (rule-execution-mode common-lisp:nil :type
    (common-lisp:or rule-execution-mode common-lisp:null))
   (outcomes common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (evaluated-model-versions common-lisp:nil :type
    (common-lisp:or list-of-evaluated-model-versions common-lisp:null))
   (evaluated-external-models common-lisp:nil :type
    (common-lisp:or list-of-evaluated-external-models common-lisp:null))
   (prediction-timestamp common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-metadata-result
                    'make-get-event-prediction-metadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detector-version-status))
      (common-lisp:list
       (common-lisp:cons "detectorVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluated-model-versions))
      (common-lisp:list
       (common-lisp:cons "evaluatedModelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluated-external-models))
      (common-lisp:list
       (common-lisp:cons "evaluatedExternalModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-prediction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-prediction-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or |listOfEntities| common-lisp:null))
   (event-timestamp (common-lisp:error ":eventtimestamp is required") :type
    (common-lisp:or |utcTimestampISO8601| common-lisp:null))
   (event-variables (common-lisp:error ":eventvariables is required") :type
    (common-lisp:or event-variable-map common-lisp:null))
   (external-model-endpoint-data-blobs common-lisp:nil :type
    (common-lisp:or external-model-endpoint-data-blob-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-request
                    'make-get-event-prediction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoint-data-blobs))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpointDataBlobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-prediction-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-prediction-result-"))
   (model-scores common-lisp:nil :type
    (common-lisp:or list-of-model-scores common-lisp:null))
   (rule-results common-lisp:nil :type
    (common-lisp:or list-of-rule-results common-lisp:null))
   (external-model-outputs common-lisp:nil :type
    (common-lisp:or list-of-external-model-outputs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-result
                    'make-get-event-prediction-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-scores))
      (common-lisp:list
       (common-lisp:cons "modelScores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "ruleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-outputs))
      (common-lisp:list
       (common-lisp:cons "externalModelOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-request-"))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-request 'make-get-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-result-"))
   (event common-lisp:nil :type (common-lisp:or event common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-result 'make-get-event-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-event-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-types-request-"))
   (name common-lisp:nil :type (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |eventTypesMaxResults| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-types-request 'make-get-event-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-types-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-types-result-"))
   (event-types common-lisp:nil :type
    (common-lisp:or |eventTypeList| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-types-result 'make-get-event-types-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-types))
      (common-lisp:list
       (common-lisp:cons "eventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-external-models-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-external-models-request-"))
   (model-endpoint common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or external-models-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-external-models-request
                    'make-get-external-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-external-models-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-external-models-result-"))
   (external-models common-lisp:nil :type
    (common-lisp:or external-model-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-external-models-result
                    'make-get-external-models-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-models))
      (common-lisp:list
       (common-lisp:cons "externalModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-kmsencryption-key-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-kmsencryption-key-result-"))
   (kms-key common-lisp:nil :type (common-lisp:or kmskey common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-kmsencryption-key-result
                    'make-get-kmsencryption-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-labels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-labels-request-"))
   (name common-lisp:nil :type (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |labelsMaxResults| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-labels-request 'make-get-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-labels-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-labels-result-"))
   (labels common-lisp:nil :type (common-lisp:or |labelList| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-labels-result 'make-get-labels-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-labels-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-labels-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-labels-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-list-elements-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-list-elements-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |noDashIdentifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |nextToken| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or lists-elements-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-list-elements-request
                    'make-get-list-elements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-list-elements-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-list-elements-result-"))
   (elements common-lisp:nil :type
    (common-lisp:or elements-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |nextToken| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-list-elements-result 'make-get-list-elements-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lists-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lists-metadata-request-"))
   (name common-lisp:nil :type
    (common-lisp:or |noDashIdentifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |nextToken| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or lists-metadata-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lists-metadata-request
                    'make-get-lists-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lists-metadata-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lists-metadata-result-"))
   (lists common-lisp:nil :type
    (common-lisp:or allow-deny-lists common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |nextToken| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lists-metadata-result
                    'make-get-lists-metadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lists))
      (common-lisp:list
       (common-lisp:cons "lists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-model-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-model-version-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number (common-lisp:error ":modelversionnumber is required")
    :type (common-lisp:or |floatVersionString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-model-version-request
                    'make-get-model-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-model-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-model-version-result-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (training-data-source common-lisp:nil :type
    (common-lisp:or training-data-source-enum common-lisp:null))
   (training-data-schema common-lisp:nil :type
    (common-lisp:or training-data-schema common-lisp:null))
   (external-events-detail common-lisp:nil :type
    (common-lisp:or external-events-detail common-lisp:null))
   (ingested-events-detail common-lisp:nil :type
    (common-lisp:or ingested-events-detail common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-model-version-result 'make-get-model-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-models-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-models-request-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |modelsMaxPageSize| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-models-request 'make-get-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-models-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-models-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (models common-lisp:nil :type
    (common-lisp:or |modelList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-models-result 'make-get-models-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-models-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-models-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-models-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-outcomes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-outcomes-request-"))
   (name common-lisp:nil :type (common-lisp:or |identifier| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or outcomes-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-outcomes-request 'make-get-outcomes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-outcomes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-outcomes-result-"))
   (outcomes common-lisp:nil :type
    (common-lisp:or outcome-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-outcomes-result 'make-get-outcomes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rules-request-"))
   (rule-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (rule-version common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or rules-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rules-request 'make-get-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rules-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rules-result-"))
   (rule-details common-lisp:nil :type
    (common-lisp:or rule-detail-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rules-result 'make-get-rules-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rules-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-details))
      (common-lisp:list
       (common-lisp:cons "ruleDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rules-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-variables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-variables-request-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or variables-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-variables-request 'make-get-variables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-variables-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-variables-result-"))
   (variables common-lisp:nil :type
    (common-lisp:or variable-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-variables-result 'make-get-variables-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-variables-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-variables-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-variables-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingested-event-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingested-event-statistics-"))
   (number-of-events common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (event-data-size-in-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (least-recent-event common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (most-recent-event common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingested-event-statistics
                    'make-ingested-event-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-events))
      (common-lisp:list
       (common-lisp:cons "numberOfEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "eventDataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'least-recent-event))
      (common-lisp:list
       (common-lisp:cons "leastRecentEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'most-recent-event))
      (common-lisp:list
       (common-lisp:cons "mostRecentEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingested-events-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingested-events-detail-"))
   (ingested-events-time-window
    (common-lisp:error ":ingestedeventstimewindow is required") :type
    (common-lisp:or ingested-events-time-window common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingested-events-detail 'make-ingested-events-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-time-window))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsTimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingested-events-time-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingested-events-time-window-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or |time| common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingested-events-time-window
                    'make-ingested-events-time-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype json-key-to-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-json-key-to-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (kmskey (:copier common-lisp:nil) (:conc-name "struct-shape-kmskey-"))
   (kms-encryption-key-arn common-lisp:nil :type
    (common-lisp:or kms-encryption-key-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kmskey 'make-kmskey))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kmskey))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kmskey))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kmskey))
   common-lisp:nil))
(common-lisp:deftype kms-encryption-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (label (:copier common-lisp:nil) (:conc-name "struct-shape-label-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label 'make-label))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (label-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-schema-"))
   (label-mapper common-lisp:nil :type
    (common-lisp:or |labelMapper| common-lisp:null))
   (unlabeled-events-treatment common-lisp:nil :type
    (common-lisp:or unlabeled-events-treatment common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label-schema 'make-label-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-mapper))
      (common-lisp:list
       (common-lisp:cons "labelMapper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unlabeled-events-treatment))
      (common-lisp:list
       (common-lisp:cons "unlabeledEventsTreatment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-schema))
   common-lisp:nil))
(common-lisp:deftype language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-predictions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-predictions-request-"))
   (event-id common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null))
   (event-type common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null))
   (detector-id common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null))
   (detector-version-id common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or event-predictions-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-predictions-request
                    'make-list-event-predictions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "predictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-predictions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-predictions-result-"))
   (event-prediction-summaries common-lisp:nil :type
    (common-lisp:or list-of-event-prediction-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-predictions-result
                    'make-list-event-predictions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-prediction-summaries))
      (common-lisp:list
       (common-lisp:cons "eventPredictionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-aggregated-log-odds-metrics ()
   '(trivial-types:proper-list aggregated-log-odds-metric))
 (common-lisp:defun |make-list-of-aggregated-log-odds-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-log-odds-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-aggregated-variables-impact-explanations ()
   '(trivial-types:proper-list aggregated-variables-impact-explanation))
 (common-lisp:defun |make-list-of-aggregated-variables-impact-explanations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-variables-impact-explanation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-evaluated-external-models ()
   '(trivial-types:proper-list evaluated-external-model))
 (common-lisp:defun |make-list-of-evaluated-external-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluated-external-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-evaluated-model-versions ()
   '(trivial-types:proper-list evaluated-model-version))
 (common-lisp:defun |make-list-of-evaluated-model-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluated-model-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-event-prediction-summaries ()
   '(trivial-types:proper-list event-prediction-summary))
 (common-lisp:defun |make-list-of-event-prediction-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-prediction-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-event-variable-summaries ()
   '(trivial-types:proper-list event-variable-summary))
 (common-lisp:defun |make-list-of-event-variable-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-variable-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-external-model-outputs ()
   '(trivial-types:proper-list external-model-outputs))
 (common-lisp:defun |make-list-of-external-model-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-model-outputs))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-log-odds-metrics ()
   '(trivial-types:proper-list log-odds-metric))
 (common-lisp:defun |make-list-of-log-odds-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-odds-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-scores ()
   '(trivial-types:proper-list model-scores))
 (common-lisp:defun |make-list-of-model-scores|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-scores))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-version-evaluations ()
   '(trivial-types:proper-list model-version-evaluation))
 (common-lisp:defun |make-list-of-model-version-evaluations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-version-evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-versions ()
   '(trivial-types:proper-list model-version))
 (common-lisp:defun |make-list-of-model-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-rule-results ()
   '(trivial-types:proper-list rule-result))
 (common-lisp:defun |make-list-of-rule-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-strings ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-list-of-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or tags-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype list-update-mode () 'common-lisp:string)
(common-lisp:deftype lists-elements-max-results () 'common-lisp:integer)
(common-lisp:deftype lists-metadata-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (log-odds-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-odds-metric-"))
   (variable-name (common-lisp:error ":variablename is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-type (common-lisp:error ":variabletype is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-importance (common-lisp:error ":variableimportance is required")
    :type (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-odds-metric 'make-log-odds-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-odds-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-odds-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-name))
      (common-lisp:list
       (common-lisp:cons "variableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-importance))
      (common-lisp:list
       (common-lisp:cons "variableImportance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-odds-metric))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-of-strings () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-strings| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-data-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-data-point-"))
   (fpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (precision common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (tpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-data-point 'make-metric-data-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model (:copier common-lisp:nil) (:conc-name "struct-shape-model-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-type-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model 'make-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-endpoint-data-blob (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-endpoint-data-blob-"))
   (byte-buffer common-lisp:nil :type
    (common-lisp:or
     (common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*))
     common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or |contentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-endpoint-data-blob 'make-model-endpoint-data-blob))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-buffer))
      (common-lisp:list
       (common-lisp:cons "byteBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   common-lisp:nil))
(common-lisp:deftype model-endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-input-configuration-"))
   (event-type-name common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or model-input-data-format common-lisp:null))
   (use-event-variables (common-lisp:error ":useeventvariables is required")
    :type (common-lisp:or use-event-variables common-lisp:null))
   (json-input-template common-lisp:nil :type
    (common-lisp:or |modelInputTemplate| common-lisp:null))
   (csv-input-template common-lisp:nil :type
    (common-lisp:or |modelInputTemplate| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-input-configuration
                    'make-model-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-event-variables))
      (common-lisp:list
       (common-lisp:cons "useEventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-input-template))
      (common-lisp:list
       (common-lisp:cons "jsonInputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-input-template))
      (common-lisp:list
       (common-lisp:cons "csvInputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   common-lisp:nil))
(common-lisp:deftype model-input-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-output-configuration-"))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or model-output-data-format common-lisp:null))
   (json-key-to-variable-map common-lisp:nil :type
    (common-lisp:or json-key-to-variable-map common-lisp:null))
   (csv-index-to-variable-map common-lisp:nil :type
    (common-lisp:or csv-index-to-variable-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-output-configuration
                    'make-model-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'json-key-to-variable-map))
      (common-lisp:list
       (common-lisp:cons "jsonKeyToVariableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csv-index-to-variable-map))
      (common-lisp:list
       (common-lisp:cons "csvIndexToVariableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   common-lisp:nil))
(common-lisp:deftype model-output-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-prediction-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-model-prediction-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (model-scores (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-scores-"))
   (model-version common-lisp:nil :type
    (common-lisp:or model-version common-lisp:null))
   (scores common-lisp:nil :type
    (common-lisp:or model-prediction-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-scores 'make-model-scores))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-scores))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-scores))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "modelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scores))
      (common-lisp:list
       (common-lisp:cons "scores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-scores))
   common-lisp:nil))
(common-lisp:deftype model-source () 'common-lisp:string)
(common-lisp:deftype model-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-version-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number (common-lisp:error ":modelversionnumber is required")
    :type (common-lisp:or |floatVersionString| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-version 'make-model-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-version-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-version-detail-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (training-data-source common-lisp:nil :type
    (common-lisp:or training-data-source-enum common-lisp:null))
   (training-data-schema common-lisp:nil :type
    (common-lisp:or training-data-schema common-lisp:null))
   (external-events-detail common-lisp:nil :type
    (common-lisp:or external-events-detail common-lisp:null))
   (ingested-events-detail common-lisp:nil :type
    (common-lisp:or ingested-events-detail common-lisp:null))
   (training-result common-lisp:nil :type
    (common-lisp:or training-result common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (training-result-v2 common-lisp:nil :type
    (common-lisp:or training-result-v2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-version-detail 'make-model-version-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-version-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-version-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-result))
      (common-lisp:list
       (common-lisp:cons "trainingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-result-v2))
      (common-lisp:list
       (common-lisp:cons "trainingResultV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-version-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-version-evaluation (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-version-evaluation-"))
   (output-variable-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (evaluation-score common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (prediction-explanations common-lisp:nil :type
    (common-lisp:or prediction-explanations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-version-evaluation 'make-model-version-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-variable-name))
      (common-lisp:list
       (common-lisp:cons "outputVariableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-score))
      (common-lisp:list
       (common-lisp:cons "evaluationScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-explanations))
      (common-lisp:list
       (common-lisp:cons "predictionExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   common-lisp:nil))
(common-lisp:deftype model-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype name-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype non-empty-list-of-strings ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-non-empty-list-of-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ofimetric-data-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-ofimetric-data-point-"))
   (fpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (precision common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (tpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ofimetric-data-point 'make-ofimetric-data-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ofimetric-data-points-list ()
   '(trivial-types:proper-list ofimetric-data-point))
 (common-lisp:defun |make-ofimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ofimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ofimodel-performance (:copier common-lisp:nil)
      (:conc-name "struct-shape-ofimodel-performance-"))
   (auc common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (uncertainty-range common-lisp:nil :type
    (common-lisp:or uncertainty-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ofimodel-performance 'make-ofimodel-performance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uncertainty-range))
      (common-lisp:list
       (common-lisp:cons "uncertaintyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ofitraining-metrics-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-ofitraining-metrics-value-"))
   (metric-data-points common-lisp:nil :type
    (common-lisp:or ofimetric-data-points-list common-lisp:null))
   (model-performance common-lisp:nil :type
    (common-lisp:or ofimodel-performance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ofitraining-metrics-value
                    'make-ofitraining-metrics-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (outcome (:copier common-lisp:nil) (:conc-name "struct-shape-outcome-"))
   (name common-lisp:nil :type (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'outcome 'make-outcome))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outcome))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outcome))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outcome))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outcome-list () '(trivial-types:proper-list outcome))
 (common-lisp:defun |make-outcome-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outcome))
   aws-sdk/generator/shape::members))
(common-lisp:deftype outcomes-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (prediction-explanations (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-explanations-"))
   (variable-impact-explanations common-lisp:nil :type
    (common-lisp:or |listOfVariableImpactExplanations| common-lisp:null))
   (aggregated-variables-impact-explanations common-lisp:nil :type
    (common-lisp:or list-of-aggregated-variables-impact-explanations
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prediction-explanations 'make-prediction-explanations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-impact-explanations))
      (common-lisp:list
       (common-lisp:cons "variableImpactExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-impact-explanations))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImpactExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prediction-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-time-range-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or |time| common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or |time| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prediction-time-range 'make-prediction-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-detector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-detector-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-detector-request 'make-put-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-detector-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-detector-result-")))
 (common-lisp:export
  (common-lisp:list 'put-detector-result 'make-put-detector-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-entity-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-entity-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-entity-type-request 'make-put-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-entity-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-entity-type-result-")))
 (common-lisp:export
  (common-lisp:list 'put-entity-type-result 'make-put-entity-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (event-variables (common-lisp:error ":eventvariables is required") :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null))
   (entity-types (common-lisp:error ":entitytypes is required") :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (event-ingestion common-lisp:nil :type
    (common-lisp:or event-ingestion common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-event-type-request 'make-put-event-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-ingestion))
      (common-lisp:list
       (common-lisp:cons "eventIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-type-result-")))
 (common-lisp:export
  (common-lisp:list 'put-event-type-result 'make-put-event-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-external-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-external-model-request-"))
   (model-endpoint (common-lisp:error ":modelendpoint is required") :type
    (common-lisp:or |sageMakerEndpointIdentifier| common-lisp:null))
   (model-source (common-lisp:error ":modelsource is required") :type
    (common-lisp:or model-source common-lisp:null))
   (invoke-model-endpoint-role-arn
    (common-lisp:error ":invokemodelendpointrolearn is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (input-configuration (common-lisp:error ":inputconfiguration is required")
    :type (common-lisp:or model-input-configuration common-lisp:null))
   (output-configuration (common-lisp:error ":outputconfiguration is required")
    :type (common-lisp:or model-output-configuration common-lisp:null))
   (model-endpoint-status
    (common-lisp:error ":modelendpointstatus is required") :type
    (common-lisp:or model-endpoint-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-external-model-request
                    'make-put-external-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invoke-model-endpoint-role-arn))
      (common-lisp:list
       (common-lisp:cons "invokeModelEndpointRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-configuration))
      (common-lisp:list
       (common-lisp:cons "inputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-endpoint-status))
      (common-lisp:list
       (common-lisp:cons "modelEndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-external-model-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-external-model-result-")))
 (common-lisp:export
  (common-lisp:list 'put-external-model-result
                    'make-put-external-model-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-kmsencryption-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-kmsencryption-key-request-"))
   (kms-encryption-key-arn
    (common-lisp:error ":kmsencryptionkeyarn is required") :type
    (common-lisp:or kms-encryption-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-kmsencryption-key-request
                    'make-put-kmsencryption-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-kmsencryption-key-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-kmsencryption-key-result-")))
 (common-lisp:export
  (common-lisp:list 'put-kmsencryption-key-result
                    'make-put-kmsencryption-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-label-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-label-request 'make-put-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-label-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-label-result-")))
 (common-lisp:export
  (common-lisp:list 'put-label-result 'make-put-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-outcome-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-outcome-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-outcome-request 'make-put-outcome-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-outcome-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-outcome-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-outcome-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-outcome-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-outcome-result-")))
 (common-lisp:export
  (common-lisp:list 'put-outcome-result 'make-put-outcome-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-outcome-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (rule-id (common-lisp:error ":ruleid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (rule-version (common-lisp:error ":ruleversion is required") :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-detail-"))
   (rule-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (detector-id common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (rule-version common-lisp:nil :type
    (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or |ruleExpression| common-lisp:null))
   (language common-lisp:nil :type (common-lisp:or language common-lisp:null))
   (outcomes common-lisp:nil :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-detail 'make-rule-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-detail-list ()
   '(trivial-types:proper-list rule-detail))
 (common-lisp:defun |make-rule-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-execution-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-list () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-result-"))
   (rule-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (outcomes common-lisp:nil :type
    (common-lisp:or list-of-strings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-result 'make-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-result))
   common-lisp:nil))
(common-lisp:deftype rules-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (send-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-event-request-"))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-timestamp (common-lisp:error ":eventtimestamp is required") :type
    (common-lisp:or |utcTimestampISO8601| common-lisp:null))
   (event-variables (common-lisp:error ":eventvariables is required") :type
    (common-lisp:or event-variable-map common-lisp:null))
   (assigned-label common-lisp:nil :type
    (common-lisp:or |identifier| common-lisp:null))
   (label-timestamp common-lisp:nil :type
    (common-lisp:or |utcTimestampISO8601| common-lisp:null))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or |listOfEntities| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-event-request 'make-send-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-label))
      (common-lisp:list
       (common-lisp:cons "assignedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-event-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-event-result-")))
 (common-lisp:export
  (common-lisp:list 'send-event-result 'make-send-event-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tfimetric-data-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-tfimetric-data-point-"))
   (fpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (precision common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (tpr common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tfimetric-data-point 'make-tfimetric-data-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tfimetric-data-points-list ()
   '(trivial-types:proper-list tfimetric-data-point))
 (common-lisp:defun |make-tfimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tfimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tfimodel-performance (:copier common-lisp:nil)
      (:conc-name "struct-shape-tfimodel-performance-"))
   (auc common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (uncertainty-range common-lisp:nil :type
    (common-lisp:or uncertainty-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tfimodel-performance 'make-tfimodel-performance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uncertainty-range))
      (common-lisp:list
       (common-lisp:cons "uncertaintyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tfitraining-metrics-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-tfitraining-metrics-value-"))
   (metric-data-points common-lisp:nil :type
    (common-lisp:or tfimetric-data-points-list common-lisp:null))
   (model-performance common-lisp:nil :type
    (common-lisp:or tfimodel-performance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tfitraining-metrics-value
                    'make-tfitraining-metrics-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or |tagKey| common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |tagValue| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tags-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (training-data-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-data-schema-"))
   (model-variables (common-lisp:error ":modelvariables is required") :type
    (common-lisp:or list-of-strings common-lisp:null))
   (label-schema common-lisp:nil :type
    (common-lisp:or label-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-data-schema 'make-training-data-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-data-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-data-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-variables))
      (common-lisp:list
       (common-lisp:cons "modelVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-schema))
      (common-lisp:list
       (common-lisp:cons "labelSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-data-schema))
   common-lisp:nil))
(common-lisp:deftype training-data-source-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (training-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-metrics-"))
   (auc common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (metric-data-points common-lisp:nil :type
    (common-lisp:or |metricDataPointsList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-metrics 'make-training-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (training-metrics-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-metrics-v2-"))
   (ofi common-lisp:nil :type
    (common-lisp:or ofitraining-metrics-value common-lisp:null))
   (tfi common-lisp:nil :type
    (common-lisp:or tfitraining-metrics-value common-lisp:null))
   (ati common-lisp:nil :type
    (common-lisp:or atitraining-metrics-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-metrics-v2 'make-training-metrics-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ofi))
      (common-lisp:list
       (common-lisp:cons "ofi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tfi))
      (common-lisp:list
       (common-lisp:cons "tfi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ati))
      (common-lisp:list
       (common-lisp:cons "ati"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (training-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-result-"))
   (data-validation-metrics common-lisp:nil :type
    (common-lisp:or data-validation-metrics common-lisp:null))
   (training-metrics common-lisp:nil :type
    (common-lisp:or training-metrics common-lisp:null))
   (variable-importance-metrics common-lisp:nil :type
    (common-lisp:or variable-importance-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'training-result 'make-training-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-validation-metrics))
      (common-lisp:list
       (common-lisp:cons "dataValidationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-metrics))
      (common-lisp:list
       (common-lisp:cons "trainingMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "variableImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (training-result-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-result-v2-"))
   (data-validation-metrics common-lisp:nil :type
    (common-lisp:or data-validation-metrics common-lisp:null))
   (training-metrics-v2 common-lisp:nil :type
    (common-lisp:or training-metrics-v2 common-lisp:null))
   (variable-importance-metrics common-lisp:nil :type
    (common-lisp:or variable-importance-metrics common-lisp:null))
   (aggregated-variables-importance-metrics common-lisp:nil :type
    (common-lisp:or aggregated-variables-importance-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-result-v2 'make-training-result-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-result-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-result-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-validation-metrics))
      (common-lisp:list
       (common-lisp:cons "dataValidationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-metrics-v2))
      (common-lisp:list
       (common-lisp:cons "trainingMetricsV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "variableImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-result-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (uncertainty-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-uncertainty-range-"))
   (lower-bound-value (common-lisp:error ":lowerboundvalue is required") :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (upper-bound-value (common-lisp:error ":upperboundvalue is required") :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'uncertainty-range 'make-uncertainty-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uncertainty-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uncertainty-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound-value))
      (common-lisp:list
       (common-lisp:cons "lowerBoundValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound-value))
      (common-lisp:list
       (common-lisp:cons "upperBoundValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uncertainty-range))
   common-lisp:nil))
(common-lisp:deftype unlabeled-events-treatment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or |tagKeyList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-metadata-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |description| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-metadata-request
                    'make-update-detector-version-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-metadata-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-metadata-result-")))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-metadata-result
                    'make-update-detector-version-metadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (external-model-endpoints
    (common-lisp:error ":externalmodelendpoints is required") :type
    (common-lisp:or list-of-strings common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rule-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (model-versions common-lisp:nil :type
    (common-lisp:or list-of-model-versions common-lisp:null))
   (rule-execution-mode common-lisp:nil :type
    (common-lisp:or rule-execution-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-request
                    'make-update-detector-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-result-")))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-result
                    'make-update-detector-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-status-request-"))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (detector-version-id (common-lisp:error ":detectorversionid is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or detector-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-status-request
                    'make-update-detector-version-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-detector-version-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-detector-version-status-result-")))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-status-result
                    'make-update-detector-version-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-label-request-"))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (event-type-name (common-lisp:error ":eventtypename is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (assigned-label (common-lisp:error ":assignedlabel is required") :type
    (common-lisp:or |identifier| common-lisp:null))
   (label-timestamp (common-lisp:error ":labeltimestamp is required") :type
    (common-lisp:or |utcTimestampISO8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-label-request
                    'make-update-event-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-label))
      (common-lisp:list
       (common-lisp:cons "assignedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-label-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-label-result-")))
 (common-lisp:export
  (common-lisp:list 'update-event-label-result
                    'make-update-event-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-list-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |noDashIdentifier| common-lisp:null))
   (elements common-lisp:nil :type
    (common-lisp:or elements-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (update-mode common-lisp:nil :type
    (common-lisp:or list-update-mode common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or |variableType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-list-request 'make-update-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-mode))
      (common-lisp:list
       (common-lisp:cons "updateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-list-result-")))
 (common-lisp:export
  (common-lisp:list 'update-list-result 'make-update-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-request 'make-update-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-result-")))
 (common-lisp:export
  (common-lisp:list 'update-model-result 'make-update-model-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-version-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (major-version-number (common-lisp:error ":majorversionnumber is required")
    :type (common-lisp:or |wholeNumberVersionString| common-lisp:null))
   (external-events-detail common-lisp:nil :type
    (common-lisp:or external-events-detail common-lisp:null))
   (ingested-events-detail common-lisp:nil :type
    (common-lisp:or ingested-events-detail common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-version-request
                    'make-update-model-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-version-number))
      (common-lisp:list
       (common-lisp:cons "majorVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-version-result-"))
   (model-id common-lisp:nil :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type common-lisp:nil :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number common-lisp:nil :type
    (common-lisp:or |floatVersionString| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-version-result
                    'make-update-model-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-version-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-version-status-request-"))
   (model-id (common-lisp:error ":modelid is required") :type
    (common-lisp:or |modelIdentifier| common-lisp:null))
   (model-type (common-lisp:error ":modeltype is required") :type
    (common-lisp:or model-type-enum common-lisp:null))
   (model-version-number (common-lisp:error ":modelversionnumber is required")
    :type (common-lisp:or |floatVersionString| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or model-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-version-status-request
                    'make-update-model-version-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-version-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-version-status-result-")))
 (common-lisp:export
  (common-lisp:list 'update-model-version-status-result
                    'make-update-model-version-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-metadata-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |description| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-metadata-request
                    'make-update-rule-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-metadata-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-metadata-result-")))
 (common-lisp:export
  (common-lisp:list 'update-rule-metadata-result
                    'make-update-rule-metadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-version-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |description| common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or |ruleExpression| common-lisp:null))
   (language (common-lisp:error ":language is required") :type
    (common-lisp:or language common-lisp:null))
   (outcomes (common-lisp:error ":outcomes is required") :type
    (common-lisp:or non-empty-list-of-strings common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-version-request
                    'make-update-rule-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-version-result-"))
   (rule common-lisp:nil :type (common-lisp:or rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-version-result
                    'make-update-rule-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-variable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-variable-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-variable-request 'make-update-variable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-variable-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-variable-result-")))
 (common-lisp:export
  (common-lisp:list 'update-variable-result 'make-update-variable-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   common-lisp:nil))
(common-lisp:deftype use-event-variables () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (frauddetector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (variable (:copier common-lisp:nil) (:conc-name "struct-shape-variable-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or data-type common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or |time| common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or |fraudDetectorArn| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variable 'make-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (variable-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-entry-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (variable-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variable-entry 'make-variable-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-entry-list ()
   '(trivial-types:proper-list variable-entry))
 (common-lisp:defun |make-variable-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variable-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (variable-impact-explanation (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-impact-explanation-"))
   (event-variable-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (relative-impact common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (log-odds-impact common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'variable-impact-explanation
                    'make-variable-impact-explanation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variable-name))
      (common-lisp:list
       (common-lisp:cons "eventVariableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-impact))
      (common-lisp:list
       (common-lisp:cons "relativeImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-impact))
      (common-lisp:list
       (common-lisp:cons "logOddsImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (variable-importance-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-importance-metrics-"))
   (log-odds-metrics common-lisp:nil :type
    (common-lisp:or list-of-log-odds-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'variable-importance-metrics
                    'make-variable-importance-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-metrics))
      (common-lisp:list
       (common-lisp:cons "logOddsMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-list () '(trivial-types:proper-list variable))
 (common-lisp:defun |make-variable-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variable))
   aws-sdk/generator/shape::members))
(common-lisp:deftype variables-max-results () 'common-lisp:integer)
(common-lisp:deftype |attributeKey| () 'common-lisp:string)
(common-lisp:deftype |attributeValue| () 'common-lisp:string)
(common-lisp:deftype |batchImportsMaxPageSize| () 'common-lisp:integer)
(common-lisp:deftype |batchPredictionsMaxPageSize| () 'common-lisp:integer)
common-lisp:nil
(common-lisp:deftype |contentType| () 'common-lisp:string)
(common-lisp:deftype |description| () 'common-lisp:string)
(common-lisp:deftype |entityRestrictedString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |entityTypeList| ()
   '(trivial-types:proper-list entity-type))
 (common-lisp:defun |make-entitytypelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |entityTypesMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |eventTypeList| ()
   '(trivial-types:proper-list event-type))
 (common-lisp:defun |make-eventtypelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |eventTypesMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |fieldValidationMessageList| ()
   '(trivial-types:proper-list field-validation-message))
 (common-lisp:defun |make-fieldvalidationmessagelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |fileValidationMessageList| ()
   '(trivial-types:proper-list file-validation-message))
 (common-lisp:defun |make-filevalidationmessagelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |filterString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |floatVersionString| () 'common-lisp:string)
(common-lisp:deftype |fraudDetectorArn| () 'common-lisp:string)
(common-lisp:deftype |iamRoleArn| () 'common-lisp:string)
(common-lisp:deftype |identifier| () 'common-lisp:string)
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |labelList| () '(trivial-types:proper-list label))
 (common-lisp:defun |make-labellist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |labelMapper| () 'common-lisp:hash-table)
 (common-lisp:defun |make-labelmapper| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |labelsMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |listOfEntities| () '(trivial-types:proper-list entity))
 (common-lisp:defun |make-listofentities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |listOfVariableImpactExplanations| ()
   '(trivial-types:proper-list variable-impact-explanation))
 (common-lisp:defun |make-listofvariableimpactexplanations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            variable-impact-explanation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |metricDataPointsList| ()
   '(trivial-types:proper-list metric-data-point))
 (common-lisp:defun |make-metricdatapointslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |modelIdentifier| () 'common-lisp:string)
(common-lisp:deftype |modelInputTemplate| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |modelList| () '(trivial-types:proper-list model))
 (common-lisp:defun |make-modellist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |modelVersionDetailList| ()
   '(trivial-types:proper-list model-version-detail))
 (common-lisp:defun |make-modelversiondetaillist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-version-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |modelsMaxPageSize| () 'common-lisp:integer)
(common-lisp:deftype |nextToken| () 'common-lisp:string)
(common-lisp:deftype |noDashIdentifier| () 'common-lisp:string)
(common-lisp:deftype |ruleExpression| () 'common-lisp:string)
(common-lisp:deftype |s3BucketLocation| () 'common-lisp:string)
(common-lisp:deftype |sageMakerEndpointIdentifier| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |tagKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagKeyList| () '(trivial-types:proper-list |tagKey|))
 (common-lisp:defun |make-tagkeylist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKey|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |tagList| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValue| () 'common-lisp:string)
(common-lisp:deftype |time| () 'common-lisp:string)
(common-lisp:deftype |utcTimestampISO8601| () 'common-lisp:string)
(common-lisp:deftype |variableName| () 'common-lisp:string)
(common-lisp:deftype |variableType| () 'common-lisp:string)
(common-lisp:deftype |variableValue| () 'common-lisp:string)
(common-lisp:deftype |wholeNumberVersionString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key variable-entries tags)
   (common-lisp:declare (common-lisp:ignorable variable-entries tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCreateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-variable))
(common-lisp:progn
 (common-lisp:defun batch-get-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names)
   (common-lisp:declare (common-lisp:ignorable names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-variable))
(common-lisp:progn
 (common-lisp:defun cancel-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-batch-import-job))
(common-lisp:progn
 (common-lisp:defun cancel-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun create-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id input-path output-path
                     event-type-name iam-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable job-id input-path output-path event-type-name
     iam-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-import-job))
(common-lisp:progn
 (common-lisp:defun create-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id input-path output-path
                     event-type-name detector-name detector-version
                     iam-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable job-id input-path output-path event-type-name
     detector-name detector-version iam-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun create-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id description
                     external-model-endpoints rules model-versions
                     rule-execution-mode tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id description external-model-endpoints
     rules model-versions rule-execution-mode tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-detector-version))
(common-lisp:progn
 (common-lisp:defun create-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name elements variable-type description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name elements variable-type description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-list))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type description
                     event-type-name tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type description event-type-name
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun create-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type training-data-source
                     training-data-schema external-events-detail
                     ingested-events-detail tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type training-data-source
     training-data-schema external-events-detail ingested-events-detail tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-version))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id detector-id description
                     expression language outcomes tags)
   (common-lisp:declare
    (common-lisp:ignorable rule-id detector-id description expression language
     outcomes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateRule"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name data-type data-source default-value
                     description variable-type tags)
   (common-lisp:declare
    (common-lisp:ignorable name data-type data-source default-value description
     variable-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-variable))
(common-lisp:progn
 (common-lisp:defun delete-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-import-job))
(common-lisp:progn
 (common-lisp:defun delete-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun delete-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-detector))
(common-lisp:progn
 (common-lisp:defun delete-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-detector-version))
(common-lisp:progn
 (common-lisp:defun delete-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEntityType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-entity-type))
(common-lisp:progn
 (common-lisp:defun delete-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name
                     delete-audit-history)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name delete-audit-history))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event))
(common-lisp:progn
 (common-lisp:defun delete-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-type))
(common-lisp:progn
 (common-lisp:defun delete-events-by-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-events-by-event-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventsByEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-events-by-event-type))
(common-lisp:progn
 (common-lisp:defun delete-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint)
   (common-lisp:declare (common-lisp:ignorable model-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-external-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExternalModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-external-model))
(common-lisp:progn
 (common-lisp:defun delete-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-label))
(common-lisp:progn
 (common-lisp:defun delete-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-list))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type)
   (common-lisp:declare (common-lisp:ignorable model-id model-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun delete-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-version))
(common-lisp:progn
 (common-lisp:defun delete-outcome
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-outcome-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOutcome"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-outcome))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule)
   (common-lisp:declare (common-lisp:ignorable rule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteRule"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-variable))
(common-lisp:progn
 (common-lisp:defun describe-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-detector))
(common-lisp:progn
 (common-lisp:defun describe-model-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-version-number model-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-version-number model-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelVersions"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-versions))
(common-lisp:progn
 (common-lisp:defun get-batch-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-batch-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBatchImportJobs"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-import-jobs))
(common-lisp:progn
 (common-lisp:defun get-batch-prediction-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-batch-prediction-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBatchPredictionJobs"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-prediction-jobs))
(common-lisp:progn
 (common-lisp:defun get-delete-events-by-event-type-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-delete-events-by-event-type-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeleteEventsByEventTypeStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-delete-events-by-event-type-status))
(common-lisp:progn
 (common-lisp:defun get-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-detector-version))
(common-lisp:progn
 (common-lisp:defun get-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDetectors"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-detectors))
(common-lisp:progn
 (common-lisp:defun get-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-entity-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEntityTypes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-entity-types))
(common-lisp:progn
 (common-lisp:defun get-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-id event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event))
(common-lisp:progn
 (common-lisp:defun get-event-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id event-id
                     event-type-name entities event-timestamp event-variables
                     external-model-endpoint-data-blobs)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id event-id
     event-type-name entities event-timestamp event-variables
     external-model-endpoint-data-blobs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-prediction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEventPrediction"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-prediction))
(common-lisp:progn
 (common-lisp:defun get-event-prediction-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name detector-id
                     detector-version-id prediction-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name detector-id
     detector-version-id prediction-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-event-prediction-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEventPredictionMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-prediction-metadata))
(common-lisp:progn
 (common-lisp:defun get-event-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEventTypes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-types))
(common-lisp:progn
 (common-lisp:defun get-external-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-endpoint next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-external-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExternalModels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-external-models))
(common-lisp:progn
 (common-lisp:defun get-kmsencryption-key ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'frauddetector-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"GetKMSEncryptionKey")
                                  ("Version" ,@"2019-11-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-kmsencryption-key))
(common-lisp:progn
 (common-lisp:defun get-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetLabels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-labels))
(common-lisp:progn
 (common-lisp:defun get-list-elements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-list-elements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetListElements"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-list-elements))
(common-lisp:progn
 (common-lisp:defun get-lists-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lists-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetListsMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lists-metadata))
(common-lisp:progn
 (common-lisp:defun get-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-model-version))
(common-lisp:progn
 (common-lisp:defun get-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetModels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-models))
(common-lisp:progn
 (common-lisp:defun get-outcomes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-outcomes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOutcomes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-outcomes))
(common-lisp:progn
 (common-lisp:defun get-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id detector-id rule-version
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable rule-id detector-id rule-version next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetRules"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rules))
(common-lisp:progn
 (common-lisp:defun get-variables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-variables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVariables"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-variables))
(common-lisp:progn
 (common-lisp:defun list-event-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type detector-id
                     detector-version-id prediction-time-range next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type detector-id detector-version-id
     prediction-time-range next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-predictions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEventPredictions"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-predictions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id description event-type-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id description event-type-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-detector))
(common-lisp:progn
 (common-lisp:defun put-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEntityType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-entity-type))
(common-lisp:progn
 (common-lisp:defun put-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description event-variables labels
                     entity-types event-ingestion tags)
   (common-lisp:declare
    (common-lisp:ignorable name description event-variables labels entity-types
     event-ingestion tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-event-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-event-type))
(common-lisp:progn
 (common-lisp:defun put-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint model-source
                     invoke-model-endpoint-role-arn input-configuration
                     output-configuration model-endpoint-status tags)
   (common-lisp:declare
    (common-lisp:ignorable model-endpoint model-source
     invoke-model-endpoint-role-arn input-configuration output-configuration
     model-endpoint-status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-external-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutExternalModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-external-model))
(common-lisp:progn
 (common-lisp:defun put-kmsencryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-encryption-key-arn)
   (common-lisp:declare (common-lisp:ignorable kms-encryption-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-kmsencryption-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutKMSEncryptionKey"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-kmsencryption-key))
(common-lisp:progn
 (common-lisp:defun put-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-label))
(common-lisp:progn
 (common-lisp:defun put-outcome
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-outcome-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutOutcome"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-outcome))
(common-lisp:progn
 (common-lisp:defun send-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name event-timestamp
                     event-variables assigned-label label-timestamp entities)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name event-timestamp
     event-variables assigned-label label-timestamp entities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "SendEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-event))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id
                     external-model-endpoints rules description model-versions
                     rule-execution-mode)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id
     external-model-endpoints rules description model-versions
     rule-execution-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version))
(common-lisp:progn
 (common-lisp:defun update-detector-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id
                     description)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-detector-version-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDetectorVersionMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version-metadata))
(common-lisp:progn
 (common-lisp:defun update-detector-version-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id status)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-detector-version-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDetectorVersionStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version-status))
(common-lisp:progn
 (common-lisp:defun update-event-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name assigned-label
                     label-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name assigned-label
     label-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEventLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-label))
(common-lisp:progn
 (common-lisp:defun update-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name elements description update-mode
                     variable-type)
   (common-lisp:declare
    (common-lisp:ignorable name elements description update-mode
     variable-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-list))
(common-lisp:progn
 (common-lisp:defun update-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type description)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model))
(common-lisp:progn
 (common-lisp:defun update-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type major-version-number
                     external-events-detail ingested-events-detail tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type major-version-number
     external-events-detail ingested-events-detail tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-version))
(common-lisp:progn
 (common-lisp:defun update-model-version-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number
                     status)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-model-version-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModelVersionStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-version-status))
(common-lisp:progn
 (common-lisp:defun update-rule-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule description)
   (common-lisp:declare (common-lisp:ignorable rule description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRuleMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-metadata))
(common-lisp:progn
 (common-lisp:defun update-rule-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule description expression language
                     outcomes tags)
   (common-lisp:declare
    (common-lisp:ignorable rule description expression language outcomes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRuleVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-version))
(common-lisp:progn
 (common-lisp:defun update-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name default-value description
                     variable-type)
   (common-lisp:declare
    (common-lisp:ignorable name default-value description variable-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-variable))
