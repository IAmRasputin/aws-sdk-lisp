;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/frauddetector/api
  (:use)
  (:nicknames #:aws/frauddetector)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/frauddetector/api)
(common-lisp:progn
 (common-lisp:defclass frauddetector-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "frauddetector" :protocol
                        :json))
 (common-lisp:export 'frauddetector-request))
(common-lisp:progn
 (common-lisp:define-condition frauddetector-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'frauddetector-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass atimetric-data-point common-lisp:nil
                       ((atodr :initarg :|atodr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %atimetric-data-point-atodr :initform
                         common-lisp:nil)
                        (threshold :initarg :|threshold| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %atimetric-data-point-threshold :initform
                         common-lisp:nil)
                        (adr :initarg :|adr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %atimetric-data-point-adr :initform
                         common-lisp:nil)
                        (cr :initarg :|cr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %atimetric-data-point-cr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'atimetric-data-point 'make-atimetric-data-point))
 (common-lisp:defun make-atimetric-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key atodr threshold adr cr)
   (common-lisp:apply #'common-lisp:make-instance 'atimetric-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cr))
      (common-lisp:list
       (common-lisp:cons "cr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adr))
      (common-lisp:list
       (common-lisp:cons "adr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'atodr))
      (common-lisp:list
       (common-lisp:cons "atodr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input atimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype atimetric-data-points-list ()
   '(trivial-types:proper-list atimetric-data-point))
 (common-lisp:defun |make-atimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list atimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass atimodel-performance common-lisp:nil
                       ((asi :initarg :|asi| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %atimodel-performance-asi :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'atimodel-performance 'make-atimodel-performance))
 (common-lisp:defun make-atimodel-performance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key asi)
   (common-lisp:apply #'common-lisp:make-instance 'atimodel-performance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input atimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input atimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asi))
      (common-lisp:list
       (common-lisp:cons "asi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input atimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass atitraining-metrics-value common-lisp:nil
                       ((model-performance :initarg :|modelPerformance| :type
                         (common-lisp:or atimodel-performance common-lisp:null)
                         :accessor %atitraining-metrics-value-model-performance
                         :initform common-lisp:nil)
                        (metric-data-points :initarg :|metricDataPoints| :type
                         (common-lisp:or atimetric-data-points-list
                                         common-lisp:null)
                         :accessor
                         %atitraining-metrics-value-metric-data-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'atitraining-metrics-value
                    'make-atitraining-metrics-value))
 (common-lisp:defun make-atitraining-metrics-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-performance metric-data-points)
   (common-lisp:apply #'common-lisp:make-instance 'atitraining-metrics-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          atitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass aggregated-log-odds-metric common-lisp:nil
                       ((aggregated-variables-importance :initarg
                         :|aggregatedVariablesImportance| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         %aggregated-log-odds-metric-aggregated-variables-importance
                         :initform
                         (common-lisp:error
                          ":aggregatedvariablesimportance is required"))
                        (variable-names :initarg :|variableNames| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %aggregated-log-odds-metric-variable-names
                         :initform
                         (common-lisp:error ":variablenames is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregated-log-odds-metric
                    'make-aggregated-log-odds-metric))
 (common-lisp:defun make-aggregated-log-odds-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregated-variables-importance
                     variable-names)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-log-odds-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-names))
      (common-lisp:list
       (common-lisp:cons "variableNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-importance))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImportance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-log-odds-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-variables-impact-explanation common-lisp:nil
                       ((log-odds-impact :initarg :|logOddsImpact| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         %aggregated-variables-impact-explanation-log-odds-impact
                         :initform common-lisp:nil)
                        (relative-impact :initarg :|relativeImpact| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %aggregated-variables-impact-explanation-relative-impact
                         :initform common-lisp:nil)
                        (event-variable-names :initarg :|eventVariableNames|
                         :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor
                         %aggregated-variables-impact-explanation-event-variable-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregated-variables-impact-explanation
                    'make-aggregated-variables-impact-explanation))
 (common-lisp:defun make-aggregated-variables-impact-explanation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-odds-impact relative-impact
                     event-variable-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-variables-impact-explanation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-variable-names))
      (common-lisp:list
       (common-lisp:cons "eventVariableNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-impact))
      (common-lisp:list
       (common-lisp:cons "relativeImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-impact))
      (common-lisp:list
       (common-lisp:cons "logOddsImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-impact-explanation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-variables-importance-metrics common-lisp:nil
                       ((log-odds-metrics :initarg :|logOddsMetrics| :type
                         (common-lisp:or list-of-aggregated-log-odds-metrics
                                         common-lisp:null)
                         :accessor
                         %aggregated-variables-importance-metrics-log-odds-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregated-variables-importance-metrics
                    'make-aggregated-variables-importance-metrics))
 (common-lisp:defun make-aggregated-variables-importance-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-odds-metrics)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-variables-importance-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-metrics))
      (common-lisp:list
       (common-lisp:cons "logOddsMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-variables-importance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allow-deny-list common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %allow-deny-list-arn :initform
                         common-lisp:nil)
                        (updated-time :initarg :|updatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %allow-deny-list-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %allow-deny-list-created-time :initform
                         common-lisp:nil)
                        (variable-type :initarg :|variableType| :type
                         (common-lisp:or |variableType| common-lisp:null)
                         :accessor %allow-deny-list-variable-type :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %allow-deny-list-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %allow-deny-list-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'allow-deny-list 'make-allow-deny-list))
 (common-lisp:defun make-allow-deny-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn updated-time created-time
                     variable-type description name)
   (common-lisp:apply #'common-lisp:make-instance 'allow-deny-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-deny-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-deny-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "updatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-deny-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype allow-deny-lists ()
   '(trivial-types:proper-list allow-deny-list))
 (common-lisp:defun |make-allow-deny-lists|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allow-deny-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype async-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-create-variable-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-create-variable-error-message
                         :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %batch-create-variable-error-code :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-create-variable-error-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-error
                    'make-batch-create-variable-error))
 (common-lisp:defun make-batch-create-variable-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code name)
   (common-lisp:apply #'common-lisp:make-instance 'batch-create-variable-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-variable-error-list ()
   '(trivial-types:proper-list batch-create-variable-error))
 (common-lisp:defun |make-batch-create-variable-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-variable-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-create-variable-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %batch-create-variable-request-tags :initform
                         common-lisp:nil)
                        (variable-entries :initarg :|variableEntries| :type
                         (common-lisp:or variable-entry-list common-lisp:null)
                         :accessor
                         %batch-create-variable-request-variable-entries
                         :initform
                         (common-lisp:error ":variableentries is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-request
                    'make-batch-create-variable-request))
 (common-lisp:defun make-batch-create-variable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags variable-entries)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-variable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-entries))
      (common-lisp:list
       (common-lisp:cons "variableEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-variable-result common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or batch-create-variable-error-list
                                         common-lisp:null)
                         :accessor %batch-create-variable-result-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-create-variable-result
                    'make-batch-create-variable-result))
 (common-lisp:defun make-batch-create-variable-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance 'batch-create-variable-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-variable-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-get-variable-error-message :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %batch-get-variable-error-code :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-get-variable-error-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-error 'make-batch-get-variable-error))
 (common-lisp:defun make-batch-get-variable-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code name)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-variable-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-variable-error-list ()
   '(trivial-types:proper-list batch-get-variable-error))
 (common-lisp:defun |make-batch-get-variable-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-variable-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-variable-request common-lisp:nil
                       ((names :initarg :|names| :type
                         (common-lisp:or name-list common-lisp:null) :accessor
                         %batch-get-variable-request-names :initform
                         (common-lisp:error ":names is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-request
                    'make-batch-get-variable-request))
 (common-lisp:defun make-batch-get-variable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key names)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-variable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-variable-result common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or batch-get-variable-error-list
                                         common-lisp:null)
                         :accessor %batch-get-variable-result-errors :initform
                         common-lisp:nil)
                        (variables :initarg :|variables| :type
                         (common-lisp:or variable-list common-lisp:null)
                         :accessor %batch-get-variable-result-variables
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-variable-result
                    'make-batch-get-variable-result))
 (common-lisp:defun make-batch-get-variable-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors variables)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-variable-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-import common-lisp:nil
                       ((total-records-count :initarg :|totalRecordsCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %batch-import-total-records-count :initform
                         common-lisp:nil)
                        (failed-records-count :initarg :|failedRecordsCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %batch-import-failed-records-count :initform
                         common-lisp:nil)
                        (processed-records-count :initarg
                         :|processedRecordsCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-import-processed-records-count :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %batch-import-arn :initform common-lisp:nil)
                        (iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or |iamRoleArn| common-lisp:null)
                         :accessor %batch-import-iam-role-arn :initform
                         common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %batch-import-event-type-name :initform
                         common-lisp:nil)
                        (output-path :initarg :|outputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %batch-import-output-path :initform
                         common-lisp:nil)
                        (input-path :initarg :|inputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %batch-import-input-path :initform
                         common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %batch-import-completion-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %batch-import-start-time :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-import-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or async-job-status common-lisp:null)
                         :accessor %batch-import-status :initform
                         common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %batch-import-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'batch-import 'make-batch-import))
 (common-lisp:defun make-batch-import
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-records-count failed-records-count
                     processed-records-count arn iam-role-arn event-type-name
                     output-path input-path completion-time start-time
                     failure-reason status job-id)
   (common-lisp:apply #'common-lisp:make-instance 'batch-import
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-import))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-import))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-records-count))
      (common-lisp:list
       (common-lisp:cons "processedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-records-count))
      (common-lisp:list
       (common-lisp:cons "failedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records-count))
      (common-lisp:list
       (common-lisp:cons "totalRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-import))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-list ()
   '(trivial-types:proper-list batch-import))
 (common-lisp:defun |make-batch-import-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-import))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-prediction common-lisp:nil
                       ((total-records-count :initarg :|totalRecordsCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %batch-prediction-total-records-count
                         :initform common-lisp:nil)
                        (processed-records-count :initarg
                         :|processedRecordsCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-prediction-processed-records-count :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %batch-prediction-arn :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or |iamRoleArn| common-lisp:null)
                         :accessor %batch-prediction-iam-role-arn :initform
                         common-lisp:nil)
                        (detector-version :initarg :|detectorVersion| :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor %batch-prediction-detector-version :initform
                         common-lisp:nil)
                        (detector-name :initarg :|detectorName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %batch-prediction-detector-name :initform
                         common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %batch-prediction-event-type-name :initform
                         common-lisp:nil)
                        (output-path :initarg :|outputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %batch-prediction-output-path :initform
                         common-lisp:nil)
                        (input-path :initarg :|inputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %batch-prediction-input-path :initform
                         common-lisp:nil)
                        (last-heartbeat-time :initarg :|lastHeartbeatTime|
                         :type (common-lisp:or |time| common-lisp:null)
                         :accessor %batch-prediction-last-heartbeat-time
                         :initform common-lisp:nil)
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %batch-prediction-completion-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %batch-prediction-start-time :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %batch-prediction-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or async-job-status common-lisp:null)
                         :accessor %batch-prediction-status :initform
                         common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %batch-prediction-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-prediction 'make-batch-prediction))
 (common-lisp:defun make-batch-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-records-count
                     processed-records-count arn iam-role-arn detector-version
                     detector-name event-type-name output-path input-path
                     last-heartbeat-time completion-time start-time
                     failure-reason status job-id)
   (common-lisp:apply #'common-lisp:make-instance 'batch-prediction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-prediction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-heartbeat-time))
      (common-lisp:list
       (common-lisp:cons "lastHeartbeatTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version))
      (common-lisp:list
       (common-lisp:cons "detectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-records-count))
      (common-lisp:list
       (common-lisp:cons "processedRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records-count))
      (common-lisp:list
       (common-lisp:cons "totalRecordsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-prediction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-prediction-list ()
   '(trivial-types:proper-list batch-prediction))
 (common-lisp:defun |make-batch-prediction-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-prediction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-batch-import-job-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %cancel-batch-import-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-import-job-request
                    'make-cancel-batch-import-job-request))
 (common-lisp:defun make-cancel-batch-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-batch-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-batch-import-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-batch-import-job-result
                    'make-cancel-batch-import-job-result))
 (common-lisp:defun make-cancel-batch-import-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-batch-import-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-batch-prediction-job-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %cancel-batch-prediction-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-prediction-job-request
                    'make-cancel-batch-prediction-job-request))
 (common-lisp:defun make-cancel-batch-prediction-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-batch-prediction-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-batch-prediction-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-batch-prediction-job-result
                    'make-cancel-batch-prediction-job-result))
 (common-lisp:defun make-cancel-batch-prediction-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-batch-prediction-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-batch-import-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-batch-import-job-request-tags :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or |iamRoleArn| common-lisp:null)
                         :accessor
                         %create-batch-import-job-request-iam-role-arn
                         :initform
                         (common-lisp:error ":iamrolearn is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %create-batch-import-job-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (output-path :initarg :|outputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %create-batch-import-job-request-output-path
                         :initform
                         (common-lisp:error ":outputpath is required"))
                        (input-path :initarg :|inputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %create-batch-import-job-request-input-path
                         :initform
                         (common-lisp:error ":inputpath is required"))
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-batch-import-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-batch-import-job-request
                    'make-create-batch-import-job-request))
 (common-lisp:defun make-create-batch-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-role-arn event-type-name
                     output-path input-path job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-batch-import-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-batch-import-job-result
                    'make-create-batch-import-job-result))
 (common-lisp:defun make-create-batch-import-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-import-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-batch-prediction-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-batch-prediction-job-request-tags :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or |iamRoleArn| common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-iam-role-arn
                         :initform
                         (common-lisp:error ":iamrolearn is required"))
                        (detector-version :initarg :|detectorVersion| :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-detector-version
                         :initform common-lisp:nil)
                        (detector-name :initarg :|detectorName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-detector-name
                         :initform
                         (common-lisp:error ":detectorname is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (output-path :initarg :|outputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-output-path
                         :initform
                         (common-lisp:error ":outputpath is required"))
                        (input-path :initarg :|inputPath| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor
                         %create-batch-prediction-job-request-input-path
                         :initform
                         (common-lisp:error ":inputpath is required"))
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-batch-prediction-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-job-request
                    'make-create-batch-prediction-job-request))
 (common-lisp:defun make-create-batch-prediction-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-role-arn detector-version
                     detector-name event-type-name output-path input-path
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-prediction-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "inputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-path))
      (common-lisp:list
       (common-lisp:cons "outputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version))
      (common-lisp:list
       (common-lisp:cons "detectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-batch-prediction-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-batch-prediction-job-result
                    'make-create-batch-prediction-job-result))
 (common-lisp:defun make-create-batch-prediction-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-prediction-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-detector-version-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-detector-version-request-tags :initform
                         common-lisp:nil)
                        (rule-execution-mode :initarg :|ruleExecutionMode|
                         :type
                         (common-lisp:or rule-execution-mode common-lisp:null)
                         :accessor
                         %create-detector-version-request-rule-execution-mode
                         :initform common-lisp:nil)
                        (model-versions :initarg :|modelVersions| :type
                         (common-lisp:or list-of-model-versions
                                         common-lisp:null)
                         :accessor
                         %create-detector-version-request-model-versions
                         :initform common-lisp:nil)
                        (rules :initarg :|rules| :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         %create-detector-version-request-rules :initform
                         (common-lisp:error ":rules is required"))
                        (external-model-endpoints :initarg
                         :|externalModelEndpoints| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor
                         %create-detector-version-request-external-model-endpoints
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-detector-version-request-description
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-detector-version-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-detector-version-request
                    'make-create-detector-version-request))
 (common-lisp:defun make-create-detector-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags rule-execution-mode model-versions
                     rules external-model-endpoints description detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-detector-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-detector-version-result common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or detector-version-status
                                         common-lisp:null)
                         :accessor %create-detector-version-result-status
                         :initform common-lisp:nil)
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %create-detector-version-result-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-detector-version-result-detector-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-detector-version-result
                    'make-create-detector-version-result))
 (common-lisp:defun make-create-detector-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-detector-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-list-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-list-request-tags :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-list-request-description :initform
                         common-lisp:nil)
                        (variable-type :initarg :|variableType| :type
                         (common-lisp:or |variableType| common-lisp:null)
                         :accessor %create-list-request-variable-type :initform
                         common-lisp:nil)
                        (elements :initarg :|elements| :type
                         (common-lisp:or elements-list common-lisp:null)
                         :accessor %create-list-request-elements :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %create-list-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-list-request 'make-create-list-request))
 (common-lisp:defun make-create-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description variable-type elements
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-list-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-list-result 'make-create-list-result))
 (common-lisp:defun make-create-list-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-model-request-tags :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-model-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-model-request-description :initform
                         common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %create-model-request-model-type :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %create-model-request-model-id :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-model-request 'make-create-model-request))
 (common-lisp:defun make-create-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags event-type-name description
                     model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-model-result 'make-create-model-result))
 (common-lisp:defun make-create-model-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-version-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-model-version-request-tags :initform
                         common-lisp:nil)
                        (ingested-events-detail :initarg
                         :|ingestedEventsDetail| :type
                         (common-lisp:or ingested-events-detail
                                         common-lisp:null)
                         :accessor
                         %create-model-version-request-ingested-events-detail
                         :initform common-lisp:nil)
                        (external-events-detail :initarg
                         :|externalEventsDetail| :type
                         (common-lisp:or external-events-detail
                                         common-lisp:null)
                         :accessor
                         %create-model-version-request-external-events-detail
                         :initform common-lisp:nil)
                        (training-data-schema :initarg :|trainingDataSchema|
                         :type
                         (common-lisp:or training-data-schema common-lisp:null)
                         :accessor
                         %create-model-version-request-training-data-schema
                         :initform
                         (common-lisp:error ":trainingdataschema is required"))
                        (training-data-source :initarg :|trainingDataSource|
                         :type
                         (common-lisp:or training-data-source-enum
                                         common-lisp:null)
                         :accessor
                         %create-model-version-request-training-data-source
                         :initform
                         (common-lisp:error ":trainingdatasource is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %create-model-version-request-model-type
                         :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %create-model-version-request-model-id
                         :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-model-version-request
                    'make-create-model-version-request))
 (common-lisp:defun make-create-model-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags ingested-events-detail
                     external-events-detail training-data-schema
                     training-data-source model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-version-result common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-model-version-result-status
                         :initform common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %create-model-version-result-model-version-number
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %create-model-version-result-model-type
                         :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %create-model-version-result-model-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-model-version-result
                    'make-create-model-version-result))
 (common-lisp:defun make-create-model-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status model-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-rule-request-tags :initform common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %create-rule-request-outcomes :initform
                         (common-lisp:error ":outcomes is required"))
                        (language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %create-rule-request-language :initform
                         (common-lisp:error ":language is required"))
                        (expression :initarg :|expression| :type
                         (common-lisp:or |ruleExpression| common-lisp:null)
                         :accessor %create-rule-request-expression :initform
                         (common-lisp:error ":expression is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-rule-request-description :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-rule-request-detector-id :initform
                         (common-lisp:error ":detectorid is required"))
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %create-rule-request-rule-id :initform
                         (common-lisp:error ":ruleid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rule-request 'make-create-rule-request))
 (common-lisp:defun make-create-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags outcomes language expression
                     description detector-id rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-result common-lisp:nil
                       ((rule :initarg :|rule| :type
                         (common-lisp:or rule common-lisp:null) :accessor
                         %create-rule-result-rule :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-rule-result 'make-create-rule-result))
 (common-lisp:defun make-create-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-variable-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-variable-request-tags :initform
                         common-lisp:nil)
                        (variable-type :initarg :|variableType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-variable-request-variable-type
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-variable-request-description
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-variable-request-default-value
                         :initform
                         (common-lisp:error ":defaultvalue is required"))
                        (data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %create-variable-request-data-source
                         :initform
                         (common-lisp:error ":datasource is required"))
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %create-variable-request-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-variable-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-variable-request 'make-create-variable-request))
 (common-lisp:defun make-create-variable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags variable-type description
                     default-value data-source data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'create-variable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-variable-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-variable-result 'make-create-variable-result))
 (common-lisp:defun make-create-variable-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-variable-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype csv-index-to-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-csv-index-to-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype data-source () 'common-lisp:string)
(common-lisp:deftype data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-validation-metrics common-lisp:nil
                       ((field-level-messages :initarg :|fieldLevelMessages|
                         :type
                         (common-lisp:or |fieldValidationMessageList|
                                         common-lisp:null)
                         :accessor
                         %data-validation-metrics-field-level-messages
                         :initform common-lisp:nil)
                        (file-level-messages :initarg :|fileLevelMessages|
                         :type
                         (common-lisp:or |fileValidationMessageList|
                                         common-lisp:null)
                         :accessor %data-validation-metrics-file-level-messages
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-validation-metrics 'make-data-validation-metrics))
 (common-lisp:defun make-data-validation-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-messages file-level-messages)
   (common-lisp:apply #'common-lisp:make-instance 'data-validation-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-level-messages))
      (common-lisp:list
       (common-lisp:cons "fileLevelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-messages))
      (common-lisp:list
       (common-lisp:cons "fieldLevelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-validation-metrics))
   common-lisp:nil))
(common-lisp:deftype delete-audit-history () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-batch-import-job-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-batch-import-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-batch-import-job-request
                    'make-delete-batch-import-job-request))
 (common-lisp:defun make-delete-batch-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-batch-import-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-batch-import-job-result
                    'make-delete-batch-import-job-result))
 (common-lisp:defun make-delete-batch-import-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-import-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-batch-prediction-job-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-batch-prediction-job-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-job-request
                    'make-delete-batch-prediction-job-request))
 (common-lisp:defun make-delete-batch-prediction-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-prediction-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-batch-prediction-job-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-batch-prediction-job-result
                    'make-delete-batch-prediction-job-result))
 (common-lisp:defun make-delete-batch-prediction-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-batch-prediction-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-batch-prediction-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-request common-lisp:nil
                       ((detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-detector-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-detector-request 'make-delete-detector-request))
 (common-lisp:defun make-delete-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-detector-result 'make-delete-detector-result))
 (common-lisp:defun make-delete-detector-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-detector-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-version-request common-lisp:nil
                       ((detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %delete-detector-version-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-detector-version-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-detector-version-request
                    'make-delete-detector-version-request))
 (common-lisp:defun make-delete-detector-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-detector-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-version-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-detector-version-result
                    'make-delete-detector-version-result))
 (common-lisp:defun make-delete-detector-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-detector-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-type-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-entity-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-entity-type-request
                    'make-delete-entity-type-request))
 (common-lisp:defun make-delete-entity-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-type-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-entity-type-result
                    'make-delete-entity-type-result))
 (common-lisp:defun make-delete-entity-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-request common-lisp:nil
                       ((delete-audit-history :initarg :|deleteAuditHistory|
                         :type
                         (common-lisp:or delete-audit-history common-lisp:null)
                         :accessor %delete-event-request-delete-audit-history
                         :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-event-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-event-request-event-id :initform
                         (common-lisp:error ":eventid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-request 'make-delete-event-request))
 (common-lisp:defun make-delete-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-audit-history event-type-name
                     event-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-audit-history))
      (common-lisp:list
       (common-lisp:cons "deleteAuditHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-event-result 'make-delete-event-result))
 (common-lisp:defun make-delete-event-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-type-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-event-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-type-request
                    'make-delete-event-type-request))
 (common-lisp:defun make-delete-event-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-type-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-event-type-result 'make-delete-event-type-result))
 (common-lisp:defun make-delete-event-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-events-by-event-type-request common-lisp:nil
                       ((event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %delete-events-by-event-type-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-events-by-event-type-request
                    'make-delete-events-by-event-type-request))
 (common-lisp:defun make-delete-events-by-event-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-type-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-events-by-event-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-events-by-event-type-result common-lisp:nil
                       ((events-deletion-status :initarg
                         :|eventsDeletionStatus| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-events-by-event-type-result-events-deletion-status
                         :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %delete-events-by-event-type-result-event-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-events-by-event-type-result
                    'make-delete-events-by-event-type-result))
 (common-lisp:defun make-delete-events-by-event-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events-deletion-status event-type-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-events-by-event-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-deletion-status))
      (common-lisp:list
       (common-lisp:cons "eventsDeletionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-events-by-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-external-model-request common-lisp:nil
                       ((model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or |sageMakerEndpointIdentifier|
                                         common-lisp:null)
                         :accessor
                         %delete-external-model-request-model-endpoint
                         :initform
                         (common-lisp:error ":modelendpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-external-model-request
                    'make-delete-external-model-request))
 (common-lisp:defun make-delete-external-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-external-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-external-model-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-external-model-result
                    'make-delete-external-model-result))
 (common-lisp:defun make-delete-external-model-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-external-model-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-external-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-label-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-label-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-label-request 'make-delete-label-request))
 (common-lisp:defun make-delete-label-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-label-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-label-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-label-result 'make-delete-label-result))
 (common-lisp:defun make-delete-label-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-label-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-list-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %delete-list-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-list-request 'make-delete-list-request))
 (common-lisp:defun make-delete-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-list-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-list-result 'make-delete-list-result))
 (common-lisp:defun make-delete-list-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-request common-lisp:nil
                       ((model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %delete-model-request-model-type :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %delete-model-request-model-id :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-model-request 'make-delete-model-request))
 (common-lisp:defun make-delete-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-model-result 'make-delete-model-result))
 (common-lisp:defun make-delete-model-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-version-request common-lisp:nil
                       ((model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %delete-model-version-request-model-version-number
                         :initform
                         (common-lisp:error ":modelversionnumber is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %delete-model-version-request-model-type
                         :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %delete-model-version-request-model-id
                         :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-model-version-request
                    'make-delete-model-version-request))
 (common-lisp:defun make-delete-model-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-version-number model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-version-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-model-version-result
                    'make-delete-model-version-result))
 (common-lisp:defun make-delete-model-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outcome-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %delete-outcome-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-outcome-request 'make-delete-outcome-request))
 (common-lisp:defun make-delete-outcome-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-outcome-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outcome-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-outcome-result 'make-delete-outcome-result))
 (common-lisp:defun make-delete-outcome-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-outcome-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outcome-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-request common-lisp:nil
                       ((rule :initarg :|rule| :type
                         (common-lisp:or rule common-lisp:null) :accessor
                         %delete-rule-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defun make-delete-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-rule-result 'make-delete-rule-result))
 (common-lisp:defun make-delete-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-variable-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-variable-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-variable-request 'make-delete-variable-request))
 (common-lisp:defun make-delete-variable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-variable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-variable-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-variable-result 'make-delete-variable-result))
 (common-lisp:defun make-delete-variable-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-variable-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variable-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-detector-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or detector-version-max-results
                                         common-lisp:null)
                         :accessor %describe-detector-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-detector-request-next-token
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %describe-detector-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-detector-request
                    'make-describe-detector-request))
 (common-lisp:defun make-describe-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-detector-result common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %describe-detector-result-arn :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-detector-result-next-token
                         :initform common-lisp:nil)
                        (detector-version-summaries :initarg
                         :|detectorVersionSummaries| :type
                         (common-lisp:or detector-version-summary-list
                                         common-lisp:null)
                         :accessor
                         %describe-detector-result-detector-version-summaries
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %describe-detector-result-detector-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-detector-result 'make-describe-detector-result))
 (common-lisp:defun make-describe-detector-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn next-token detector-version-summaries
                     detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-detector-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detector-version-summaries))
      (common-lisp:list
       (common-lisp:cons "detectorVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-versions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |modelsMaxPageSize| common-lisp:null)
                         :accessor %describe-model-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-model-versions-request-next-token
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %describe-model-versions-request-model-type
                         :initform common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %describe-model-versions-request-model-version-number
                         :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %describe-model-versions-request-model-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-model-versions-request
                    'make-describe-model-versions-request))
 (common-lisp:defun make-describe-model-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token model-type
                     model-version-number model-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-versions-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-model-versions-result-next-token
                         :initform common-lisp:nil)
                        (model-version-details :initarg :|modelVersionDetails|
                         :type
                         (common-lisp:or |modelVersionDetailList|
                                         common-lisp:null)
                         :accessor
                         %describe-model-versions-result-model-version-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-model-versions-result
                    'make-describe-model-versions-result))
 (common-lisp:defun make-describe-model-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token model-version-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-details))
      (common-lisp:list
       (common-lisp:cons "modelVersionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detector common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %detector-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %detector-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %detector-last-updated-time :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %detector-event-type-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %detector-description :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %detector-detector-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'detector 'make-detector))
 (common-lisp:defun make-detector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     event-type-name description detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'detector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-list () '(trivial-types:proper-list detector))
 (common-lisp:defun |make-detector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-version-max-results () 'common-lisp:integer)
(common-lisp:deftype detector-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detector-version-summary common-lisp:nil
                       ((last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %detector-version-summary-last-updated-time :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %detector-version-summary-description
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or detector-version-status
                                         common-lisp:null)
                         :accessor %detector-version-summary-status :initform
                         common-lisp:nil)
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %detector-version-summary-detector-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detector-version-summary 'make-detector-version-summary))
 (common-lisp:defun make-detector-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time description status
                     detector-version-id)
   (common-lisp:apply #'common-lisp:make-instance 'detector-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-version-summary-list ()
   '(trivial-types:proper-list detector-version-summary))
 (common-lisp:defun |make-detector-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detectors-max-results () 'common-lisp:integer)
(common-lisp:deftype elements () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype elements-list () '(trivial-types:proper-list elements))
 (common-lisp:defun |make-elements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elements))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((entity-id :initarg :|entityId| :type
                         (common-lisp:or |entityRestrictedString|
                                         common-lisp:null)
                         :accessor %entity-entity-id :initform
                         (common-lisp:error ":entityid is required"))
                        (entity-type :initarg :|entityType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %entity-entity-type :initform
                         (common-lisp:error ":entitytype is required"))))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defun make-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity-id entity-type)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity-type common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %entity-type-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %entity-type-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %entity-type-last-updated-time :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %entity-type-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %entity-type-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'entity-type 'make-entity-type))
 (common-lisp:defun make-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'entity-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluated-external-model common-lisp:nil
                       ((output-variables :initarg :|outputVariables| :type
                         (common-lisp:or map-of-strings common-lisp:null)
                         :accessor %evaluated-external-model-output-variables
                         :initform common-lisp:nil)
                        (input-variables :initarg :|inputVariables| :type
                         (common-lisp:or map-of-strings common-lisp:null)
                         :accessor %evaluated-external-model-input-variables
                         :initform common-lisp:nil)
                        (use-event-variables :initarg :|useEventVariables|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %evaluated-external-model-use-event-variables
                         :initform common-lisp:nil)
                        (model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %evaluated-external-model-model-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluated-external-model 'make-evaluated-external-model))
 (common-lisp:defun make-evaluated-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-variables input-variables
                     use-event-variables model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'evaluated-external-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-event-variables))
      (common-lisp:list
       (common-lisp:cons "useEventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-variables))
      (common-lisp:list
       (common-lisp:cons "inputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-external-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluated-model-version common-lisp:nil
                       ((evaluations :initarg :|evaluations| :type
                         (common-lisp:or list-of-model-version-evaluations
                                         common-lisp:null)
                         :accessor %evaluated-model-version-evaluations
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %evaluated-model-version-model-type
                         :initform common-lisp:nil)
                        (model-version :initarg :|modelVersion| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %evaluated-model-version-model-version
                         :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %evaluated-model-version-model-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluated-model-version 'make-evaluated-model-version))
 (common-lisp:defun make-evaluated-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluations model-type model-version
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'evaluated-model-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "modelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluations))
      (common-lisp:list
       (common-lisp:cons "evaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluated-model-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluated-rule common-lisp:nil
                       ((matched :initarg :|matched| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %evaluated-rule-matched :initform common-lisp:nil)
                        (evaluated :initarg :|evaluated| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %evaluated-rule-evaluated :initform common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %evaluated-rule-outcomes :initform
                         common-lisp:nil)
                        (expression-with-values :initarg
                         :|expressionWithValues| :type
                         (common-lisp:or |sensitiveString| common-lisp:null)
                         :accessor %evaluated-rule-expression-with-values
                         :initform common-lisp:nil)
                        (expression :initarg :|expression| :type
                         (common-lisp:or |sensitiveString| common-lisp:null)
                         :accessor %evaluated-rule-expression :initform
                         common-lisp:nil)
                        (rule-version :initarg :|ruleVersion| :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor %evaluated-rule-rule-version :initform
                         common-lisp:nil)
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %evaluated-rule-rule-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'evaluated-rule 'make-evaluated-rule))
 (common-lisp:defun make-evaluated-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matched evaluated outcomes
                     expression-with-values expression rule-version rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'evaluated-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluated-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluated-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-with-values))
      (common-lisp:list
       (common-lisp:cons "expressionWithValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluated))
      (common-lisp:list
       (common-lisp:cons "evaluated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched))
      (common-lisp:list
       (common-lisp:cons "matched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluated-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluated-rule-list ()
   '(trivial-types:proper-list evaluated-rule))
 (common-lisp:defun |make-evaluated-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluated-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((entities :initarg :|entities| :type
                         (common-lisp:or |listOfEntities| common-lisp:null)
                         :accessor %event-entities :initform common-lisp:nil)
                        (label-timestamp :initarg :|labelTimestamp| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-label-timestamp :initform
                         common-lisp:nil)
                        (current-label :initarg :|currentLabel| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-current-label :initform
                         common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or event-attribute-map common-lisp:null)
                         :accessor %event-event-variables :initform
                         common-lisp:nil)
                        (event-timestamp :initarg :|eventTimestamp| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-event-timestamp :initform
                         common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-event-type-name :initform
                         common-lisp:nil)
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-event-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entities label-timestamp current-label
                     event-variables event-timestamp event-type-name event-id)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-label))
      (common-lisp:list
       (common-lisp:cons "currentLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-event-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype event-ingestion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-prediction-summary common-lisp:nil
                       ((detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %event-prediction-summary-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %event-prediction-summary-detector-id
                         :initform common-lisp:nil)
                        (prediction-timestamp :initarg :|predictionTimestamp|
                         :type (common-lisp:or |time| common-lisp:null)
                         :accessor
                         %event-prediction-summary-prediction-timestamp
                         :initform common-lisp:nil)
                        (event-timestamp :initarg :|eventTimestamp| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %event-prediction-summary-event-timestamp :initform
                         common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %event-prediction-summary-event-type-name
                         :initform common-lisp:nil)
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %event-prediction-summary-event-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-prediction-summary 'make-event-prediction-summary))
 (common-lisp:defun make-event-prediction-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detector-version-id detector-id
                     prediction-timestamp event-timestamp event-type-name
                     event-id)
   (common-lisp:apply #'common-lisp:make-instance 'event-prediction-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-prediction-summary))
   common-lisp:nil))
(common-lisp:deftype event-predictions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass event-type common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %event-type-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %event-type-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %event-type-last-updated-time :initform
                         common-lisp:nil)
                        (ingested-event-statistics :initarg
                         :|ingestedEventStatistics| :type
                         (common-lisp:or ingested-event-statistics
                                         common-lisp:null)
                         :accessor %event-type-ingested-event-statistics
                         :initform common-lisp:nil)
                        (event-ingestion :initarg :|eventIngestion| :type
                         (common-lisp:or event-ingestion common-lisp:null)
                         :accessor %event-type-event-ingestion :initform
                         common-lisp:nil)
                        (entity-types :initarg :|entityTypes| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %event-type-entity-types :initform
                         common-lisp:nil)
                        (labels :initarg :|labels| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %event-type-labels :initform
                         common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %event-type-event-variables :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %event-type-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %event-type-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-type 'make-event-type))
 (common-lisp:defun make-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     ingested-event-statistics event-ingestion entity-types
                     labels event-variables description name)
   (common-lisp:apply #'common-lisp:make-instance 'event-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-ingestion))
      (common-lisp:list
       (common-lisp:cons "eventIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-event-statistics))
      (common-lisp:list
       (common-lisp:cons "ingestedEventStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-event-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass event-variable-summary common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or |sensitiveString| common-lisp:null)
                         :accessor %event-variable-summary-source :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or |sensitiveString| common-lisp:null)
                         :accessor %event-variable-summary-value :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |sensitiveString| common-lisp:null)
                         :accessor %event-variable-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-variable-summary 'make-event-variable-summary))
 (common-lisp:defun make-event-variable-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source value name)
   (common-lisp:apply #'common-lisp:make-instance 'event-variable-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-variable-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass external-events-detail common-lisp:nil
                       ((data-access-role-arn :initarg :|dataAccessRoleArn|
                         :type (common-lisp:or |iamRoleArn| common-lisp:null)
                         :accessor %external-events-detail-data-access-role-arn
                         :initform
                         (common-lisp:error ":dataaccessrolearn is required"))
                        (data-location :initarg :|dataLocation| :type
                         (common-lisp:or |s3BucketLocation| common-lisp:null)
                         :accessor %external-events-detail-data-location
                         :initform
                         (common-lisp:error ":datalocation is required"))))
 (common-lisp:export
  (common-lisp:list 'external-events-detail 'make-external-events-detail))
 (common-lisp:defun make-external-events-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-access-role-arn data-location)
   (common-lisp:apply #'common-lisp:make-instance 'external-events-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "dataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-events-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass external-model common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %external-model-arn :initform
                         common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %external-model-created-time :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %external-model-last-updated-time :initform
                         common-lisp:nil)
                        (model-endpoint-status :initarg :|modelEndpointStatus|
                         :type
                         (common-lisp:or model-endpoint-status
                                         common-lisp:null)
                         :accessor %external-model-model-endpoint-status
                         :initform common-lisp:nil)
                        (output-configuration :initarg :|outputConfiguration|
                         :type
                         (common-lisp:or model-output-configuration
                                         common-lisp:null)
                         :accessor %external-model-output-configuration
                         :initform common-lisp:nil)
                        (input-configuration :initarg :|inputConfiguration|
                         :type
                         (common-lisp:or model-input-configuration
                                         common-lisp:null)
                         :accessor %external-model-input-configuration
                         :initform common-lisp:nil)
                        (invoke-model-endpoint-role-arn :initarg
                         :|invokeModelEndpointRoleArn| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %external-model-invoke-model-endpoint-role-arn
                         :initform common-lisp:nil)
                        (model-source :initarg :|modelSource| :type
                         (common-lisp:or model-source common-lisp:null)
                         :accessor %external-model-model-source :initform
                         common-lisp:nil)
                        (model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %external-model-model-endpoint :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'external-model 'make-external-model))
 (common-lisp:defun make-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     model-endpoint-status output-configuration
                     input-configuration invoke-model-endpoint-role-arn
                     model-source model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'external-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input external-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input external-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invoke-model-endpoint-role-arn))
      (common-lisp:list
       (common-lisp:cons "invokeModelEndpointRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-configuration))
      (common-lisp:list
       (common-lisp:cons "inputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-endpoint-status))
      (common-lisp:list
       (common-lisp:cons "modelEndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input external-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype external-model-endpoint-data-blob-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-external-model-endpoint-data-blob-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype external-model-list ()
   '(trivial-types:proper-list external-model))
 (common-lisp:defun |make-external-model-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass external-model-outputs common-lisp:nil
                       ((outputs :initarg :|outputs| :type
                         (common-lisp:or external-model-prediction-map
                                         common-lisp:null)
                         :accessor %external-model-outputs-outputs :initform
                         common-lisp:nil)
                        (external-model :initarg :|externalModel| :type
                         (common-lisp:or external-model-summary
                                         common-lisp:null)
                         :accessor %external-model-outputs-external-model
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'external-model-outputs 'make-external-model-outputs))
 (common-lisp:defun make-external-model-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs external-model)
   (common-lisp:apply #'common-lisp:make-instance 'external-model-outputs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-model))
      (common-lisp:list
       (common-lisp:cons "externalModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-model-outputs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype external-model-prediction-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-external-model-prediction-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass external-model-summary common-lisp:nil
                       ((model-source :initarg :|modelSource| :type
                         (common-lisp:or model-source common-lisp:null)
                         :accessor %external-model-summary-model-source
                         :initform common-lisp:nil)
                        (model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %external-model-summary-model-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'external-model-summary 'make-external-model-summary))
 (common-lisp:defun make-external-model-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-source model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'external-model-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-model-summary))
   common-lisp:nil))
(common-lisp:deftype external-models-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass field-validation-message common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-validation-message-type :initform
                         common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-validation-message-content :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-validation-message-title :initform
                         common-lisp:nil)
                        (identifier :initarg :|identifier| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-validation-message-identifier
                         :initform common-lisp:nil)
                        (field-name :initarg :|fieldName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-validation-message-field-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-validation-message 'make-field-validation-message))
 (common-lisp:defun make-field-validation-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type content title identifier field-name)
   (common-lisp:apply #'common-lisp:make-instance 'field-validation-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-validation-message common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %file-validation-message-type :initform
                         common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %file-validation-message-content :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %file-validation-message-title :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-validation-message 'make-file-validation-message))
 (common-lisp:defun make-file-validation-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type content title)
   (common-lisp:apply #'common-lisp:make-instance 'file-validation-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-validation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-condition common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |filterString| common-lisp:null)
                         :accessor %filter-condition-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defun make-filter-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'filter-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-batch-import-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-batch-import-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |batchImportsMaxPageSize|
                                         common-lisp:null)
                         :accessor %get-batch-import-jobs-request-max-results
                         :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-batch-import-jobs-request-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-batch-import-jobs-request
                    'make-get-batch-import-jobs-request))
 (common-lisp:defun make-get-batch-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-batch-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-batch-import-jobs-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-batch-import-jobs-result-next-token
                         :initform common-lisp:nil)
                        (batch-imports :initarg :|batchImports| :type
                         (common-lisp:or batch-import-list common-lisp:null)
                         :accessor %get-batch-import-jobs-result-batch-imports
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-batch-import-jobs-result
                    'make-get-batch-import-jobs-result))
 (common-lisp:defun make-get-batch-import-jobs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token batch-imports)
   (common-lisp:apply #'common-lisp:make-instance 'get-batch-import-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-imports))
      (common-lisp:list
       (common-lisp:cons "batchImports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-import-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-batch-prediction-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-batch-prediction-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |batchPredictionsMaxPageSize|
                                         common-lisp:null)
                         :accessor
                         %get-batch-prediction-jobs-request-max-results
                         :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-batch-prediction-jobs-request-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-jobs-request
                    'make-get-batch-prediction-jobs-request))
 (common-lisp:defun make-get-batch-prediction-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-batch-prediction-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-batch-prediction-jobs-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-batch-prediction-jobs-result-next-token
                         :initform common-lisp:nil)
                        (batch-predictions :initarg :|batchPredictions| :type
                         (common-lisp:or batch-prediction-list
                                         common-lisp:null)
                         :accessor
                         %get-batch-prediction-jobs-result-batch-predictions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-batch-prediction-jobs-result
                    'make-get-batch-prediction-jobs-result))
 (common-lisp:defun make-get-batch-prediction-jobs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token batch-predictions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-batch-prediction-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-predictions))
      (common-lisp:list
       (common-lisp:cons "batchPredictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-prediction-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delete-events-by-event-type-status-request
                       common-lisp:nil
                       ((event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-delete-events-by-event-type-status-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-delete-events-by-event-type-status-request
                    'make-get-delete-events-by-event-type-status-request))
 (common-lisp:defun make-get-delete-events-by-event-type-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-type-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delete-events-by-event-type-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delete-events-by-event-type-status-result
                       common-lisp:nil
                       ((events-deletion-status :initarg
                         :|eventsDeletionStatus| :type
                         (common-lisp:or async-job-status common-lisp:null)
                         :accessor
                         %get-delete-events-by-event-type-status-result-events-deletion-status
                         :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-delete-events-by-event-type-status-result-event-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-delete-events-by-event-type-status-result
                    'make-get-delete-events-by-event-type-status-result))
 (common-lisp:defun make-get-delete-events-by-event-type-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events-deletion-status event-type-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delete-events-by-event-type-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-deletion-status))
      (common-lisp:list
       (common-lisp:cons "eventsDeletionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delete-events-by-event-type-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detector-version-request common-lisp:nil
                       ((detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %get-detector-version-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-detector-version-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-detector-version-request
                    'make-get-detector-version-request))
 (common-lisp:defun make-get-detector-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-detector-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detector-version-result common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %get-detector-version-result-arn :initform
                         common-lisp:nil)
                        (rule-execution-mode :initarg :|ruleExecutionMode|
                         :type
                         (common-lisp:or rule-execution-mode common-lisp:null)
                         :accessor
                         %get-detector-version-result-rule-execution-mode
                         :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %get-detector-version-result-created-time :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %get-detector-version-result-last-updated-time
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or detector-version-status
                                         common-lisp:null)
                         :accessor %get-detector-version-result-status
                         :initform common-lisp:nil)
                        (rules :initarg :|rules| :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         %get-detector-version-result-rules :initform
                         common-lisp:nil)
                        (model-versions :initarg :|modelVersions| :type
                         (common-lisp:or list-of-model-versions
                                         common-lisp:null)
                         :accessor %get-detector-version-result-model-versions
                         :initform common-lisp:nil)
                        (external-model-endpoints :initarg
                         :|externalModelEndpoints| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor
                         %get-detector-version-result-external-model-endpoints
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-detector-version-result-description
                         :initform common-lisp:nil)
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %get-detector-version-result-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-detector-version-result-detector-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-detector-version-result
                    'make-get-detector-version-result))
 (common-lisp:defun make-get-detector-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn rule-execution-mode created-time
                     last-updated-time status rules model-versions
                     external-model-endpoints description detector-version-id
                     detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-detector-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detectors-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or detectors-max-results
                                         common-lisp:null)
                         :accessor %get-detectors-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-detectors-request-next-token :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-detectors-request-detector-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-detectors-request 'make-get-detectors-request))
 (common-lisp:defun make-get-detectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detectors-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-detectors-result-next-token :initform
                         common-lisp:nil)
                        (detectors :initarg :|detectors| :type
                         (common-lisp:or detector-list common-lisp:null)
                         :accessor %get-detectors-result-detectors :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-detectors-result 'make-get-detectors-result))
 (common-lisp:defun make-get-detectors-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token detectors)
   (common-lisp:apply #'common-lisp:make-instance 'get-detectors-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-detectors-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-detectors-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detectors))
      (common-lisp:list
       (common-lisp:cons "detectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-detectors-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-types-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |entityTypesMaxResults|
                                         common-lisp:null)
                         :accessor %get-entity-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-entity-types-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-entity-types-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-entity-types-request 'make-get-entity-types-request))
 (common-lisp:defun make-get-entity-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-types-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-entity-types-result-next-token
                         :initform common-lisp:nil)
                        (entity-types :initarg :|entityTypes| :type
                         (common-lisp:or |entityTypeList| common-lisp:null)
                         :accessor %get-entity-types-result-entity-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-entity-types-result 'make-get-entity-types-result))
 (common-lisp:defun make-get-entity-types-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entity-types)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-types-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entity-types-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-prediction-metadata-request common-lisp:nil
                       ((prediction-timestamp :initarg :|predictionTimestamp|
                         :type (common-lisp:or |time| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-request-prediction-timestamp
                         :initform
                         (common-lisp:error
                          ":predictiontimestamp is required"))
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-request-event-id
                         :initform
                         (common-lisp:error ":eventid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-metadata-request
                    'make-get-event-prediction-metadata-request))
 (common-lisp:defun make-get-event-prediction-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prediction-timestamp detector-version-id
                     detector-id event-type-name event-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-event-prediction-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-prediction-metadata-result common-lisp:nil
                       ((prediction-timestamp :initarg :|predictionTimestamp|
                         :type (common-lisp:or |time| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-prediction-timestamp
                         :initform common-lisp:nil)
                        (evaluated-external-models :initarg
                         :|evaluatedExternalModels| :type
                         (common-lisp:or list-of-evaluated-external-models
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-evaluated-external-models
                         :initform common-lisp:nil)
                        (evaluated-model-versions :initarg
                         :|evaluatedModelVersions| :type
                         (common-lisp:or list-of-evaluated-model-versions
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-evaluated-model-versions
                         :initform common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-outcomes
                         :initform common-lisp:nil)
                        (rule-execution-mode :initarg :|ruleExecutionMode|
                         :type
                         (common-lisp:or rule-execution-mode common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-rule-execution-mode
                         :initform common-lisp:nil)
                        (rules :initarg :|rules| :type
                         (common-lisp:or evaluated-rule-list common-lisp:null)
                         :accessor %get-event-prediction-metadata-result-rules
                         :initform common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or list-of-event-variable-summaries
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-event-variables
                         :initform common-lisp:nil)
                        (detector-version-status :initarg
                         :|detectorVersionStatus| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-detector-version-status
                         :initform common-lisp:nil)
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-detector-id
                         :initform common-lisp:nil)
                        (event-timestamp :initarg :|eventTimestamp| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %get-event-prediction-metadata-result-event-timestamp
                         :initform common-lisp:nil)
                        (entity-type :initarg :|entityType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-entity-type
                         :initform common-lisp:nil)
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-entity-id
                         :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-event-type-name
                         :initform common-lisp:nil)
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %get-event-prediction-metadata-result-event-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-metadata-result
                    'make-get-event-prediction-metadata-result))
 (common-lisp:defun make-get-event-prediction-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prediction-timestamp
                     evaluated-external-models evaluated-model-versions
                     outcomes rule-execution-mode rules event-variables
                     detector-version-status detector-version-id detector-id
                     event-timestamp entity-type entity-id event-type-name
                     event-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-event-prediction-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detector-version-status))
      (common-lisp:list
       (common-lisp:cons "detectorVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluated-model-versions))
      (common-lisp:list
       (common-lisp:cons "evaluatedModelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluated-external-models))
      (common-lisp:list
       (common-lisp:cons "evaluatedExternalModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-timestamp))
      (common-lisp:list
       (common-lisp:cons "predictionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-prediction-request common-lisp:nil
                       ((external-model-endpoint-data-blobs :initarg
                         :|externalModelEndpointDataBlobs| :type
                         (common-lisp:or external-model-endpoint-data-blob-map
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-request-external-model-endpoint-data-blobs
                         :initform common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or event-variable-map common-lisp:null)
                         :accessor
                         %get-event-prediction-request-event-variables
                         :initform
                         (common-lisp:error ":eventvariables is required"))
                        (event-timestamp :initarg :|eventTimestamp| :type
                         (common-lisp:or |utcTimestampISO8601|
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-request-event-timestamp
                         :initform
                         (common-lisp:error ":eventtimestamp is required"))
                        (entities :initarg :|entities| :type
                         (common-lisp:or |listOfEntities| common-lisp:null)
                         :accessor %get-event-prediction-request-entities
                         :initform (common-lisp:error ":entities is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-event-prediction-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-prediction-request-event-id
                         :initform (common-lisp:error ":eventid is required"))
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-request-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-prediction-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-request
                    'make-get-event-prediction-request))
 (common-lisp:defun make-get-event-prediction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-model-endpoint-data-blobs
                     event-variables event-timestamp entities event-type-name
                     event-id detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-prediction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoint-data-blobs))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpointDataBlobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-prediction-result common-lisp:nil
                       ((external-model-outputs :initarg
                         :|externalModelOutputs| :type
                         (common-lisp:or list-of-external-model-outputs
                                         common-lisp:null)
                         :accessor
                         %get-event-prediction-result-external-model-outputs
                         :initform common-lisp:nil)
                        (rule-results :initarg :|ruleResults| :type
                         (common-lisp:or list-of-rule-results common-lisp:null)
                         :accessor %get-event-prediction-result-rule-results
                         :initform common-lisp:nil)
                        (model-scores :initarg :|modelScores| :type
                         (common-lisp:or list-of-model-scores common-lisp:null)
                         :accessor %get-event-prediction-result-model-scores
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-prediction-result
                    'make-get-event-prediction-result))
 (common-lisp:defun make-get-event-prediction-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-model-outputs rule-results
                     model-scores)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-prediction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-scores))
      (common-lisp:list
       (common-lisp:cons "modelScores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "ruleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-outputs))
      (common-lisp:list
       (common-lisp:cons "externalModelOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-prediction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-request common-lisp:nil
                       ((event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-request-event-type-name :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-request-event-id :initform
                         (common-lisp:error ":eventid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-event-request 'make-get-event-request))
 (common-lisp:defun make-get-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-type-name event-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-result common-lisp:nil
                       ((event :initarg :|event| :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %get-event-result-event :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-result 'make-get-event-result))
 (common-lisp:defun make-get-event-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-event-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-types-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |eventTypesMaxResults|
                                         common-lisp:null)
                         :accessor %get-event-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-types-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-event-types-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-types-request 'make-get-event-types-request))
 (common-lisp:defun make-get-event-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-types-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-event-types-result-next-token :initform
                         common-lisp:nil)
                        (event-types :initarg :|eventTypes| :type
                         (common-lisp:or |eventTypeList| common-lisp:null)
                         :accessor %get-event-types-result-event-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-types-result 'make-get-event-types-result))
 (common-lisp:defun make-get-event-types-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-types)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-types-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-types))
      (common-lisp:list
       (common-lisp:cons "eventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-types-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-external-models-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or external-models-max-results
                                         common-lisp:null)
                         :accessor %get-external-models-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-external-models-request-next-token
                         :initform common-lisp:nil)
                        (model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-external-models-request-model-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-external-models-request
                    'make-get-external-models-request))
 (common-lisp:defun make-get-external-models-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'get-external-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-external-models-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-external-models-result-next-token
                         :initform common-lisp:nil)
                        (external-models :initarg :|externalModels| :type
                         (common-lisp:or external-model-list common-lisp:null)
                         :accessor %get-external-models-result-external-models
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-external-models-result
                    'make-get-external-models-result))
 (common-lisp:defun make-get-external-models-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token external-models)
   (common-lisp:apply #'common-lisp:make-instance 'get-external-models-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-models))
      (common-lisp:list
       (common-lisp:cons "externalModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-models-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kmsencryption-key-result common-lisp:nil
                       ((kms-key :initarg :|kmsKey| :type
                         (common-lisp:or kmskey common-lisp:null) :accessor
                         %get-kmsencryption-key-result-kms-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-kmsencryption-key-result
                    'make-get-kmsencryption-key-result))
 (common-lisp:defun make-get-kmsencryption-key-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key)
   (common-lisp:apply #'common-lisp:make-instance 'get-kmsencryption-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kmsencryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-labels-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |labelsMaxResults| common-lisp:null)
                         :accessor %get-labels-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-labels-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-labels-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-labels-request 'make-get-labels-request))
 (common-lisp:defun make-get-labels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-labels-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-labels-result-next-token :initform
                         common-lisp:nil)
                        (labels :initarg :|labels| :type
                         (common-lisp:or |labelList| common-lisp:null)
                         :accessor %get-labels-result-labels :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-labels-result 'make-get-labels-result))
 (common-lisp:defun make-get-labels-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token labels)
   (common-lisp:apply #'common-lisp:make-instance 'get-labels-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-labels-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-labels-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-labels-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-list-elements-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or lists-elements-max-results
                                         common-lisp:null)
                         :accessor %get-list-elements-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-list-elements-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %get-list-elements-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-list-elements-request
                    'make-get-list-elements-request))
 (common-lisp:defun make-get-list-elements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-list-elements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-list-elements-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-list-elements-result-next-token
                         :initform common-lisp:nil)
                        (elements :initarg :|elements| :type
                         (common-lisp:or elements-list common-lisp:null)
                         :accessor %get-list-elements-result-elements :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-list-elements-result 'make-get-list-elements-result))
 (common-lisp:defun make-get-list-elements-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token elements)
   (common-lisp:apply #'common-lisp:make-instance 'get-list-elements-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-list-elements-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lists-metadata-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or lists-metadata-max-results
                                         common-lisp:null)
                         :accessor %get-lists-metadata-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-lists-metadata-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %get-lists-metadata-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lists-metadata-request
                    'make-get-lists-metadata-request))
 (common-lisp:defun make-get-lists-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-lists-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lists-metadata-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-lists-metadata-result-next-token
                         :initform common-lisp:nil)
                        (lists :initarg :|lists| :type
                         (common-lisp:or allow-deny-lists common-lisp:null)
                         :accessor %get-lists-metadata-result-lists :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lists-metadata-result
                    'make-get-lists-metadata-result))
 (common-lisp:defun make-get-lists-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token lists)
   (common-lisp:apply #'common-lisp:make-instance 'get-lists-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lists))
      (common-lisp:list
       (common-lisp:cons "lists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lists-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-version-request common-lisp:nil
                       ((model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %get-model-version-request-model-version-number
                         :initform
                         (common-lisp:error ":modelversionnumber is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %get-model-version-request-model-type
                         :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %get-model-version-request-model-id
                         :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-model-version-request
                    'make-get-model-version-request))
 (common-lisp:defun make-get-model-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-version-number model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-version-result common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %get-model-version-result-arn :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-model-version-result-status :initform
                         common-lisp:nil)
                        (ingested-events-detail :initarg
                         :|ingestedEventsDetail| :type
                         (common-lisp:or ingested-events-detail
                                         common-lisp:null)
                         :accessor
                         %get-model-version-result-ingested-events-detail
                         :initform common-lisp:nil)
                        (external-events-detail :initarg
                         :|externalEventsDetail| :type
                         (common-lisp:or external-events-detail
                                         common-lisp:null)
                         :accessor
                         %get-model-version-result-external-events-detail
                         :initform common-lisp:nil)
                        (training-data-schema :initarg :|trainingDataSchema|
                         :type
                         (common-lisp:or training-data-schema common-lisp:null)
                         :accessor
                         %get-model-version-result-training-data-schema
                         :initform common-lisp:nil)
                        (training-data-source :initarg :|trainingDataSource|
                         :type
                         (common-lisp:or training-data-source-enum
                                         common-lisp:null)
                         :accessor
                         %get-model-version-result-training-data-source
                         :initform common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %get-model-version-result-model-version-number
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %get-model-version-result-model-type
                         :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %get-model-version-result-model-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-model-version-result 'make-get-model-version-result))
 (common-lisp:defun make-get-model-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn status ingested-events-detail
                     external-events-detail training-data-schema
                     training-data-source model-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-models-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |modelsMaxPageSize| common-lisp:null)
                         :accessor %get-models-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-models-request-next-token :initform
                         common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %get-models-request-model-type :initform
                         common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %get-models-request-model-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-models-request 'make-get-models-request))
 (common-lisp:defun make-get-models-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-models-result common-lisp:nil
                       ((models :initarg :|models| :type
                         (common-lisp:or |modelList| common-lisp:null)
                         :accessor %get-models-result-models :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-models-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-models-result 'make-get-models-result))
 (common-lisp:defun make-get-models-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key models next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-models-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-models-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-models-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-models-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outcomes-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or outcomes-max-results common-lisp:null)
                         :accessor %get-outcomes-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-outcomes-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-outcomes-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-outcomes-request 'make-get-outcomes-request))
 (common-lisp:defun make-get-outcomes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-outcomes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outcomes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outcomes-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-outcomes-result-next-token :initform
                         common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or outcome-list common-lisp:null)
                         :accessor %get-outcomes-result-outcomes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-outcomes-result 'make-get-outcomes-result))
 (common-lisp:defun make-get-outcomes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token outcomes)
   (common-lisp:apply #'common-lisp:make-instance 'get-outcomes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outcomes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rules-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or rules-max-results common-lisp:null)
                         :accessor %get-rules-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-rules-request-next-token :initform
                         common-lisp:nil)
                        (rule-version :initarg :|ruleVersion| :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor %get-rules-request-rule-version :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-rules-request-detector-id :initform
                         (common-lisp:error ":detectorid is required"))
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %get-rules-request-rule-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-rules-request 'make-get-rules-request))
 (common-lisp:defun make-get-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token rule-version
                     detector-id rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rules-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-rules-result-next-token :initform
                         common-lisp:nil)
                        (rule-details :initarg :|ruleDetails| :type
                         (common-lisp:or rule-detail-list common-lisp:null)
                         :accessor %get-rules-result-rule-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-rules-result 'make-get-rules-result))
 (common-lisp:defun make-get-rules-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rule-details)
   (common-lisp:apply #'common-lisp:make-instance 'get-rules-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rules-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-details))
      (common-lisp:list
       (common-lisp:cons "ruleDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rules-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variables-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or variables-max-results
                                         common-lisp:null)
                         :accessor %get-variables-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-variables-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-variables-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-variables-request 'make-get-variables-request))
 (common-lisp:defun make-get-variables-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-variables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variables-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-variables-result-next-token :initform
                         common-lisp:nil)
                        (variables :initarg :|variables| :type
                         (common-lisp:or variable-list common-lisp:null)
                         :accessor %get-variables-result-variables :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-variables-result 'make-get-variables-result))
 (common-lisp:defun make-get-variables-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token variables)
   (common-lisp:apply #'common-lisp:make-instance 'get-variables-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-variables-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-variables-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-variables-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingested-event-statistics common-lisp:nil
                       ((last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %ingested-event-statistics-last-updated-time :initform
                         common-lisp:nil)
                        (most-recent-event :initarg :|mostRecentEvent| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %ingested-event-statistics-most-recent-event :initform
                         common-lisp:nil)
                        (least-recent-event :initarg :|leastRecentEvent| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %ingested-event-statistics-least-recent-event
                         :initform common-lisp:nil)
                        (event-data-size-in-bytes :initarg
                         :|eventDataSizeInBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %ingested-event-statistics-event-data-size-in-bytes
                         :initform common-lisp:nil)
                        (number-of-events :initarg :|numberOfEvents| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %ingested-event-statistics-number-of-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ingested-event-statistics
                    'make-ingested-event-statistics))
 (common-lisp:defun make-ingested-event-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time most-recent-event
                     least-recent-event event-data-size-in-bytes
                     number-of-events)
   (common-lisp:apply #'common-lisp:make-instance 'ingested-event-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-events))
      (common-lisp:list
       (common-lisp:cons "numberOfEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "eventDataSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'least-recent-event))
      (common-lisp:list
       (common-lisp:cons "leastRecentEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'most-recent-event))
      (common-lisp:list
       (common-lisp:cons "mostRecentEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-event-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingested-events-detail common-lisp:nil
                       ((ingested-events-time-window :initarg
                         :|ingestedEventsTimeWindow| :type
                         (common-lisp:or ingested-events-time-window
                                         common-lisp:null)
                         :accessor
                         %ingested-events-detail-ingested-events-time-window
                         :initform
                         (common-lisp:error
                          ":ingestedeventstimewindow is required"))))
 (common-lisp:export
  (common-lisp:list 'ingested-events-detail 'make-ingested-events-detail))
 (common-lisp:defun make-ingested-events-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingested-events-time-window)
   (common-lisp:apply #'common-lisp:make-instance 'ingested-events-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-time-window))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsTimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingested-events-time-window common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %ingested-events-time-window-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %ingested-events-time-window-start-time :initform
                         (common-lisp:error ":starttime is required"))))
 (common-lisp:export
  (common-lisp:list 'ingested-events-time-window
                    'make-ingested-events-time-window))
 (common-lisp:defun make-ingested-events-time-window
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time)
   (common-lisp:apply #'common-lisp:make-instance 'ingested-events-time-window
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-events-time-window))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype json-key-to-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-json-key-to-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass kmskey common-lisp:nil
                       ((kms-encryption-key-arn :initarg :|kmsEncryptionKeyArn|
                         :type
                         (common-lisp:or kms-encryption-key-arn
                                         common-lisp:null)
                         :accessor %kmskey-kms-encryption-key-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kmskey 'make-kmskey))
 (common-lisp:defun make-kmskey
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-encryption-key-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kmskey
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kmskey))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kmskey))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kmskey))
   common-lisp:nil))
(common-lisp:deftype kms-encryption-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass label common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %label-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %label-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %label-last-updated-time :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %label-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %label-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'label 'make-label))
 (common-lisp:defun make-label
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'label
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass label-schema common-lisp:nil
                       ((unlabeled-events-treatment :initarg
                         :|unlabeledEventsTreatment| :type
                         (common-lisp:or unlabeled-events-treatment
                                         common-lisp:null)
                         :accessor %label-schema-unlabeled-events-treatment
                         :initform common-lisp:nil)
                        (label-mapper :initarg :|labelMapper| :type
                         (common-lisp:or |labelMapper| common-lisp:null)
                         :accessor %label-schema-label-mapper :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'label-schema 'make-label-schema))
 (common-lisp:defun make-label-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unlabeled-events-treatment label-mapper)
   (common-lisp:apply #'common-lisp:make-instance 'label-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-mapper))
      (common-lisp:list
       (common-lisp:cons "labelMapper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unlabeled-events-treatment))
      (common-lisp:list
       (common-lisp:cons "unlabeledEventsTreatment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-schema))
   common-lisp:nil))
(common-lisp:deftype language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-event-predictions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or event-predictions-max-results
                                         common-lisp:null)
                         :accessor %list-event-predictions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-event-predictions-request-next-token
                         :initform common-lisp:nil)
                        (prediction-time-range :initarg :|predictionTimeRange|
                         :type
                         (common-lisp:or prediction-time-range
                                         common-lisp:null)
                         :accessor
                         %list-event-predictions-request-prediction-time-range
                         :initform common-lisp:nil)
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or filter-condition common-lisp:null)
                         :accessor
                         %list-event-predictions-request-detector-version-id
                         :initform common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or filter-condition common-lisp:null)
                         :accessor %list-event-predictions-request-detector-id
                         :initform common-lisp:nil)
                        (event-type :initarg :|eventType| :type
                         (common-lisp:or filter-condition common-lisp:null)
                         :accessor %list-event-predictions-request-event-type
                         :initform common-lisp:nil)
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or filter-condition common-lisp:null)
                         :accessor %list-event-predictions-request-event-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-predictions-request
                    'make-list-event-predictions-request))
 (common-lisp:defun make-list-event-predictions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     prediction-time-range detector-version-id detector-id
                     event-type event-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-predictions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "predictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-predictions-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-event-predictions-result-next-token
                         :initform common-lisp:nil)
                        (event-prediction-summaries :initarg
                         :|eventPredictionSummaries| :type
                         (common-lisp:or list-of-event-prediction-summaries
                                         common-lisp:null)
                         :accessor
                         %list-event-predictions-result-event-prediction-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-predictions-result
                    'make-list-event-predictions-result))
 (common-lisp:defun make-list-event-predictions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-prediction-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-predictions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-prediction-summaries))
      (common-lisp:list
       (common-lisp:cons "eventPredictionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-predictions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-aggregated-log-odds-metrics ()
   '(trivial-types:proper-list aggregated-log-odds-metric))
 (common-lisp:defun |make-list-of-aggregated-log-odds-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-log-odds-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-aggregated-variables-impact-explanations ()
   '(trivial-types:proper-list aggregated-variables-impact-explanation))
 (common-lisp:defun |make-list-of-aggregated-variables-impact-explanations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-variables-impact-explanation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-evaluated-external-models ()
   '(trivial-types:proper-list evaluated-external-model))
 (common-lisp:defun |make-list-of-evaluated-external-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluated-external-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-evaluated-model-versions ()
   '(trivial-types:proper-list evaluated-model-version))
 (common-lisp:defun |make-list-of-evaluated-model-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluated-model-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-event-prediction-summaries ()
   '(trivial-types:proper-list event-prediction-summary))
 (common-lisp:defun |make-list-of-event-prediction-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-prediction-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-event-variable-summaries ()
   '(trivial-types:proper-list event-variable-summary))
 (common-lisp:defun |make-list-of-event-variable-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-variable-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-external-model-outputs ()
   '(trivial-types:proper-list external-model-outputs))
 (common-lisp:defun |make-list-of-external-model-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-model-outputs))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-log-odds-metrics ()
   '(trivial-types:proper-list log-odds-metric))
 (common-lisp:defun |make-list-of-log-odds-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-odds-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-scores ()
   '(trivial-types:proper-list model-scores))
 (common-lisp:defun |make-list-of-model-scores|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-scores))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-version-evaluations ()
   '(trivial-types:proper-list model-version-evaluation))
 (common-lisp:defun |make-list-of-model-version-evaluations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-version-evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-model-versions ()
   '(trivial-types:proper-list model-version))
 (common-lisp:defun |make-list-of-model-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-rule-results ()
   '(trivial-types:proper-list rule-result))
 (common-lisp:defun |make-list-of-rule-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-strings ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-list-of-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or tags-max-results common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-tags-for-resource-request-next-token
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-tags-for-resource-result-next-token
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype list-update-mode () 'common-lisp:string)
(common-lisp:deftype lists-elements-max-results () 'common-lisp:integer)
(common-lisp:deftype lists-metadata-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass log-odds-metric common-lisp:nil
                       ((variable-importance :initarg :|variableImportance|
                         :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %log-odds-metric-variable-importance
                         :initform
                         (common-lisp:error ":variableimportance is required"))
                        (variable-type :initarg :|variableType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %log-odds-metric-variable-type :initform
                         (common-lisp:error ":variabletype is required"))
                        (variable-name :initarg :|variableName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %log-odds-metric-variable-name :initform
                         (common-lisp:error ":variablename is required"))))
 (common-lisp:export (common-lisp:list 'log-odds-metric 'make-log-odds-metric))
 (common-lisp:defun make-log-odds-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variable-importance variable-type
                     variable-name)
   (common-lisp:apply #'common-lisp:make-instance 'log-odds-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-odds-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-odds-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-name))
      (common-lisp:list
       (common-lisp:cons "variableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-importance))
      (common-lisp:list
       (common-lisp:cons "variableImportance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-odds-metric))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-of-strings () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-strings| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass metric-data-point common-lisp:nil
                       ((threshold :initarg :|threshold| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %metric-data-point-threshold :initform
                         common-lisp:nil)
                        (tpr :initarg :|tpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %metric-data-point-tpr :initform
                         common-lisp:nil)
                        (precision :initarg :|precision| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %metric-data-point-precision :initform
                         common-lisp:nil)
                        (fpr :initarg :|fpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %metric-data-point-fpr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-data-point 'make-metric-data-point))
 (common-lisp:defun make-metric-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threshold tpr precision fpr)
   (common-lisp:apply #'common-lisp:make-instance 'metric-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %model-arn :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %model-last-updated-time :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %model-created-time :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %model-event-type-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %model-description :initform
                         common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %model-model-type :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %model-model-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'model 'make-model))
 (common-lisp:defun make-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn last-updated-time created-time
                     event-type-name description model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-endpoint-data-blob common-lisp:nil
                       ((content-type :initarg :|contentType| :type
                         (common-lisp:or |contentType| common-lisp:null)
                         :accessor %model-endpoint-data-blob-content-type
                         :initform common-lisp:nil)
                        (byte-buffer :initarg :|byteBuffer| :type
                         (common-lisp:or
                          (common-lisp:simple-array
                           (common-lisp:unsigned-byte 8) (common-lisp:*))
                          common-lisp:null)
                         :accessor %model-endpoint-data-blob-byte-buffer
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-endpoint-data-blob 'make-model-endpoint-data-blob))
 (common-lisp:defun make-model-endpoint-data-blob
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type byte-buffer)
   (common-lisp:apply #'common-lisp:make-instance 'model-endpoint-data-blob
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-buffer))
      (common-lisp:list
       (common-lisp:cons "byteBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-endpoint-data-blob))
   common-lisp:nil))
(common-lisp:deftype model-endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-input-configuration common-lisp:nil
                       ((csv-input-template :initarg :|csvInputTemplate| :type
                         (common-lisp:or |modelInputTemplate| common-lisp:null)
                         :accessor
                         %model-input-configuration-csv-input-template
                         :initform common-lisp:nil)
                        (json-input-template :initarg :|jsonInputTemplate|
                         :type
                         (common-lisp:or |modelInputTemplate| common-lisp:null)
                         :accessor
                         %model-input-configuration-json-input-template
                         :initform common-lisp:nil)
                        (use-event-variables :initarg :|useEventVariables|
                         :type
                         (common-lisp:or use-event-variables common-lisp:null)
                         :accessor
                         %model-input-configuration-use-event-variables
                         :initform
                         (common-lisp:error ":useeventvariables is required"))
                        (format :initarg :|format| :type
                         (common-lisp:or model-input-data-format
                                         common-lisp:null)
                         :accessor %model-input-configuration-format :initform
                         common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %model-input-configuration-event-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-input-configuration
                    'make-model-input-configuration))
 (common-lisp:defun make-model-input-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key csv-input-template json-input-template
                     use-event-variables format event-type-name)
   (common-lisp:apply #'common-lisp:make-instance 'model-input-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-event-variables))
      (common-lisp:list
       (common-lisp:cons "useEventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-input-template))
      (common-lisp:list
       (common-lisp:cons "jsonInputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-input-template))
      (common-lisp:list
       (common-lisp:cons "csvInputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-input-configuration))
   common-lisp:nil))
(common-lisp:deftype model-input-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-output-configuration common-lisp:nil
                       ((csv-index-to-variable-map :initarg
                         :|csvIndexToVariableMap| :type
                         (common-lisp:or csv-index-to-variable-map
                                         common-lisp:null)
                         :accessor
                         %model-output-configuration-csv-index-to-variable-map
                         :initform common-lisp:nil)
                        (json-key-to-variable-map :initarg
                         :|jsonKeyToVariableMap| :type
                         (common-lisp:or json-key-to-variable-map
                                         common-lisp:null)
                         :accessor
                         %model-output-configuration-json-key-to-variable-map
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or model-output-data-format
                                         common-lisp:null)
                         :accessor %model-output-configuration-format :initform
                         (common-lisp:error ":format is required"))))
 (common-lisp:export
  (common-lisp:list 'model-output-configuration
                    'make-model-output-configuration))
 (common-lisp:defun make-model-output-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key csv-index-to-variable-map
                     json-key-to-variable-map format)
   (common-lisp:apply #'common-lisp:make-instance 'model-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'json-key-to-variable-map))
      (common-lisp:list
       (common-lisp:cons "jsonKeyToVariableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csv-index-to-variable-map))
      (common-lisp:list
       (common-lisp:cons "csvIndexToVariableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-output-configuration))
   common-lisp:nil))
(common-lisp:deftype model-output-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-prediction-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-model-prediction-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass model-scores common-lisp:nil
                       ((scores :initarg :|scores| :type
                         (common-lisp:or model-prediction-map common-lisp:null)
                         :accessor %model-scores-scores :initform
                         common-lisp:nil)
                        (model-version :initarg :|modelVersion| :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %model-scores-model-version :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'model-scores 'make-model-scores))
 (common-lisp:defun make-model-scores
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scores model-version)
   (common-lisp:apply #'common-lisp:make-instance 'model-scores
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-scores))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-scores))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "modelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scores))
      (common-lisp:list
       (common-lisp:cons "scores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-scores))
   common-lisp:nil))
(common-lisp:deftype model-source () 'common-lisp:string)
(common-lisp:deftype model-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-version common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %model-version-arn :initform
                         common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor %model-version-model-version-number
                         :initform
                         (common-lisp:error ":modelversionnumber is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %model-version-model-type :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %model-version-model-id :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export (common-lisp:list 'model-version 'make-model-version))
 (common-lisp:defun make-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn model-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'model-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-version-detail common-lisp:nil
                       ((training-result-v2 :initarg :|trainingResultV2| :type
                         (common-lisp:or training-result-v2 common-lisp:null)
                         :accessor %model-version-detail-training-result-v2
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %model-version-detail-arn :initform
                         common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %model-version-detail-created-time :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %model-version-detail-last-updated-time :initform
                         common-lisp:nil)
                        (training-result :initarg :|trainingResult| :type
                         (common-lisp:or training-result common-lisp:null)
                         :accessor %model-version-detail-training-result
                         :initform common-lisp:nil)
                        (ingested-events-detail :initarg
                         :|ingestedEventsDetail| :type
                         (common-lisp:or ingested-events-detail
                                         common-lisp:null)
                         :accessor %model-version-detail-ingested-events-detail
                         :initform common-lisp:nil)
                        (external-events-detail :initarg
                         :|externalEventsDetail| :type
                         (common-lisp:or external-events-detail
                                         common-lisp:null)
                         :accessor %model-version-detail-external-events-detail
                         :initform common-lisp:nil)
                        (training-data-schema :initarg :|trainingDataSchema|
                         :type
                         (common-lisp:or training-data-schema common-lisp:null)
                         :accessor %model-version-detail-training-data-schema
                         :initform common-lisp:nil)
                        (training-data-source :initarg :|trainingDataSource|
                         :type
                         (common-lisp:or training-data-source-enum
                                         common-lisp:null)
                         :accessor %model-version-detail-training-data-source
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %model-version-detail-status :initform
                         common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor %model-version-detail-model-version-number
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %model-version-detail-model-type :initform
                         common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %model-version-detail-model-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-version-detail 'make-model-version-detail))
 (common-lisp:defun make-model-version-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key training-result-v2 arn created-time
                     last-updated-time training-result ingested-events-detail
                     external-events-detail training-data-schema
                     training-data-source status model-version-number
                     model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'model-version-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-version-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-version-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-source))
      (common-lisp:list
       (common-lisp:cons "trainingDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-schema))
      (common-lisp:list
       (common-lisp:cons "trainingDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-result))
      (common-lisp:list
       (common-lisp:cons "trainingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-result-v2))
      (common-lisp:list
       (common-lisp:cons "trainingResultV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-version-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-version-evaluation common-lisp:nil
                       ((prediction-explanations :initarg
                         :|predictionExplanations| :type
                         (common-lisp:or prediction-explanations
                                         common-lisp:null)
                         :accessor
                         %model-version-evaluation-prediction-explanations
                         :initform common-lisp:nil)
                        (evaluation-score :initarg :|evaluationScore| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %model-version-evaluation-evaluation-score
                         :initform common-lisp:nil)
                        (output-variable-name :initarg :|outputVariableName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %model-version-evaluation-output-variable-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-version-evaluation 'make-model-version-evaluation))
 (common-lisp:defun make-model-version-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prediction-explanations evaluation-score
                     output-variable-name)
   (common-lisp:apply #'common-lisp:make-instance 'model-version-evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-variable-name))
      (common-lisp:list
       (common-lisp:cons "outputVariableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-score))
      (common-lisp:list
       (common-lisp:cons "evaluationScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-explanations))
      (common-lisp:list
       (common-lisp:cons "predictionExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-version-evaluation))
   common-lisp:nil))
(common-lisp:deftype model-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype name-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype non-empty-list-of-strings ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-non-empty-list-of-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ofimetric-data-point common-lisp:nil
                       ((threshold :initarg :|threshold| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %ofimetric-data-point-threshold :initform
                         common-lisp:nil)
                        (tpr :initarg :|tpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %ofimetric-data-point-tpr :initform
                         common-lisp:nil)
                        (precision :initarg :|precision| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %ofimetric-data-point-precision :initform
                         common-lisp:nil)
                        (fpr :initarg :|fpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %ofimetric-data-point-fpr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ofimetric-data-point 'make-ofimetric-data-point))
 (common-lisp:defun make-ofimetric-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threshold tpr precision fpr)
   (common-lisp:apply #'common-lisp:make-instance 'ofimetric-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ofimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ofimetric-data-points-list ()
   '(trivial-types:proper-list ofimetric-data-point))
 (common-lisp:defun |make-ofimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ofimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ofimodel-performance common-lisp:nil
                       ((uncertainty-range :initarg :|uncertaintyRange| :type
                         (common-lisp:or uncertainty-range common-lisp:null)
                         :accessor %ofimodel-performance-uncertainty-range
                         :initform common-lisp:nil)
                        (auc :initarg :|auc| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %ofimodel-performance-auc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ofimodel-performance 'make-ofimodel-performance))
 (common-lisp:defun make-ofimodel-performance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uncertainty-range auc)
   (common-lisp:apply #'common-lisp:make-instance 'ofimodel-performance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uncertainty-range))
      (common-lisp:list
       (common-lisp:cons "uncertaintyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ofimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ofitraining-metrics-value common-lisp:nil
                       ((model-performance :initarg :|modelPerformance| :type
                         (common-lisp:or ofimodel-performance common-lisp:null)
                         :accessor %ofitraining-metrics-value-model-performance
                         :initform common-lisp:nil)
                        (metric-data-points :initarg :|metricDataPoints| :type
                         (common-lisp:or ofimetric-data-points-list
                                         common-lisp:null)
                         :accessor
                         %ofitraining-metrics-value-metric-data-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ofitraining-metrics-value
                    'make-ofitraining-metrics-value))
 (common-lisp:defun make-ofitraining-metrics-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-performance metric-data-points)
   (common-lisp:apply #'common-lisp:make-instance 'ofitraining-metrics-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ofitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outcome common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %outcome-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %outcome-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %outcome-last-updated-time :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %outcome-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %outcome-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'outcome 'make-outcome))
 (common-lisp:defun make-outcome
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'outcome
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outcome))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outcome))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outcome))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outcome-list () '(trivial-types:proper-list outcome))
 (common-lisp:defun |make-outcome-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outcome))
   aws-sdk/generator/shape::members))
(common-lisp:deftype outcomes-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass prediction-explanations common-lisp:nil
                       ((aggregated-variables-impact-explanations :initarg
                         :|aggregatedVariablesImpactExplanations| :type
                         (common-lisp:or
                          list-of-aggregated-variables-impact-explanations
                          common-lisp:null)
                         :accessor
                         %prediction-explanations-aggregated-variables-impact-explanations
                         :initform common-lisp:nil)
                        (variable-impact-explanations :initarg
                         :|variableImpactExplanations| :type
                         (common-lisp:or |listOfVariableImpactExplanations|
                                         common-lisp:null)
                         :accessor
                         %prediction-explanations-variable-impact-explanations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prediction-explanations 'make-prediction-explanations))
 (common-lisp:defun make-prediction-explanations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregated-variables-impact-explanations
                     variable-impact-explanations)
   (common-lisp:apply #'common-lisp:make-instance 'prediction-explanations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-impact-explanations))
      (common-lisp:list
       (common-lisp:cons "variableImpactExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-impact-explanations))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImpactExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-explanations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prediction-time-range common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %prediction-time-range-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %prediction-time-range-start-time :initform
                         (common-lisp:error ":starttime is required"))))
 (common-lisp:export
  (common-lisp:list 'prediction-time-range 'make-prediction-time-range))
 (common-lisp:defun make-prediction-time-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time)
   (common-lisp:apply #'common-lisp:make-instance 'prediction-time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-detector-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-detector-request-tags :initform common-lisp:nil)
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-detector-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %put-detector-request-description :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-detector-request-detector-id :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'put-detector-request 'make-put-detector-request))
 (common-lisp:defun make-put-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags event-type-name description
                     detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-detector-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-detector-result 'make-put-detector-result))
 (common-lisp:defun make-put-detector-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-detector-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-detector-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-detector-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-entity-type-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-entity-type-request-tags :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %put-entity-type-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-entity-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-entity-type-request 'make-put-entity-type-request))
 (common-lisp:defun make-put-entity-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-entity-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-entity-type-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-entity-type-result 'make-put-entity-type-result))
 (common-lisp:defun make-put-entity-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-entity-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-entity-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-event-type-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-event-type-request-tags :initform
                         common-lisp:nil)
                        (event-ingestion :initarg :|eventIngestion| :type
                         (common-lisp:or event-ingestion common-lisp:null)
                         :accessor %put-event-type-request-event-ingestion
                         :initform common-lisp:nil)
                        (entity-types :initarg :|entityTypes| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %put-event-type-request-entity-types
                         :initform
                         (common-lisp:error ":entitytypes is required"))
                        (labels :initarg :|labels| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %put-event-type-request-labels :initform
                         common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %put-event-type-request-event-variables
                         :initform
                         (common-lisp:error ":eventvariables is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %put-event-type-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-event-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-event-type-request 'make-put-event-type-request))
 (common-lisp:defun make-put-event-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags event-ingestion entity-types labels
                     event-variables description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-event-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-types))
      (common-lisp:list
       (common-lisp:cons "entityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-ingestion))
      (common-lisp:list
       (common-lisp:cons "eventIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-event-type-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-event-type-result 'make-put-event-type-result))
 (common-lisp:defun make-put-event-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-event-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-external-model-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-external-model-request-tags :initform
                         common-lisp:nil)
                        (model-endpoint-status :initarg :|modelEndpointStatus|
                         :type
                         (common-lisp:or model-endpoint-status
                                         common-lisp:null)
                         :accessor
                         %put-external-model-request-model-endpoint-status
                         :initform
                         (common-lisp:error
                          ":modelendpointstatus is required"))
                        (output-configuration :initarg :|outputConfiguration|
                         :type
                         (common-lisp:or model-output-configuration
                                         common-lisp:null)
                         :accessor
                         %put-external-model-request-output-configuration
                         :initform
                         (common-lisp:error
                          ":outputconfiguration is required"))
                        (input-configuration :initarg :|inputConfiguration|
                         :type
                         (common-lisp:or model-input-configuration
                                         common-lisp:null)
                         :accessor
                         %put-external-model-request-input-configuration
                         :initform
                         (common-lisp:error ":inputconfiguration is required"))
                        (invoke-model-endpoint-role-arn :initarg
                         :|invokeModelEndpointRoleArn| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %put-external-model-request-invoke-model-endpoint-role-arn
                         :initform
                         (common-lisp:error
                          ":invokemodelendpointrolearn is required"))
                        (model-source :initarg :|modelSource| :type
                         (common-lisp:or model-source common-lisp:null)
                         :accessor %put-external-model-request-model-source
                         :initform
                         (common-lisp:error ":modelsource is required"))
                        (model-endpoint :initarg :|modelEndpoint| :type
                         (common-lisp:or |sageMakerEndpointIdentifier|
                                         common-lisp:null)
                         :accessor %put-external-model-request-model-endpoint
                         :initform
                         (common-lisp:error ":modelendpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'put-external-model-request
                    'make-put-external-model-request))
 (common-lisp:defun make-put-external-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags model-endpoint-status
                     output-configuration input-configuration
                     invoke-model-endpoint-role-arn model-source
                     model-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'put-external-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-endpoint))
      (common-lisp:list
       (common-lisp:cons "modelEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-source))
      (common-lisp:list
       (common-lisp:cons "modelSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invoke-model-endpoint-role-arn))
      (common-lisp:list
       (common-lisp:cons "invokeModelEndpointRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-configuration))
      (common-lisp:list
       (common-lisp:cons "inputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-endpoint-status))
      (common-lisp:list
       (common-lisp:cons "modelEndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-external-model-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-external-model-result
                    'make-put-external-model-result))
 (common-lisp:defun make-put-external-model-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-external-model-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-kmsencryption-key-request common-lisp:nil
                       ((kms-encryption-key-arn :initarg :|kmsEncryptionKeyArn|
                         :type
                         (common-lisp:or kms-encryption-key-arn
                                         common-lisp:null)
                         :accessor
                         %put-kmsencryption-key-request-kms-encryption-key-arn
                         :initform
                         (common-lisp:error
                          ":kmsencryptionkeyarn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-kmsencryption-key-request
                    'make-put-kmsencryption-key-request))
 (common-lisp:defun make-put-kmsencryption-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-encryption-key-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-kmsencryption-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-kmsencryption-key-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-kmsencryption-key-result
                    'make-put-kmsencryption-key-result))
 (common-lisp:defun make-put-kmsencryption-key-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-kmsencryption-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-kmsencryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-label-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-label-request-tags :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %put-label-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-label-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-label-request 'make-put-label-request))
 (common-lisp:defun make-put-label-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-label-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-label-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-label-result 'make-put-label-result))
 (common-lisp:defun make-put-label-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-label-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-outcome-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %put-outcome-request-tags :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %put-outcome-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %put-outcome-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-outcome-request 'make-put-outcome-request))
 (common-lisp:defun make-put-outcome-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-outcome-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-outcome-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-outcome-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-outcome-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-outcome-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-outcome-result 'make-put-outcome-result))
 (common-lisp:defun make-put-outcome-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-outcome-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-outcome-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-outcome-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((rule-version :initarg :|ruleVersion| :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor %rule-rule-version :initform
                         (common-lisp:error ":ruleversion is required"))
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %rule-rule-id :initform
                         (common-lisp:error ":ruleid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %rule-detector-id :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defun make-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-version rule-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-detail common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %rule-detail-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %rule-detail-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %rule-detail-last-updated-time :initform
                         common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %rule-detail-outcomes :initform
                         common-lisp:nil)
                        (language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %rule-detail-language :initform common-lisp:nil)
                        (expression :initarg :|expression| :type
                         (common-lisp:or |ruleExpression| common-lisp:null)
                         :accessor %rule-detail-expression :initform
                         common-lisp:nil)
                        (rule-version :initarg :|ruleVersion| :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor %rule-detail-rule-version :initform
                         common-lisp:nil)
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %rule-detail-detector-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %rule-detail-description :initform
                         common-lisp:nil)
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %rule-detail-rule-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule-detail 'make-rule-detail))
 (common-lisp:defun make-rule-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     outcomes language expression rule-version detector-id
                     description rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'rule-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "ruleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-detail-list ()
   '(trivial-types:proper-list rule-detail))
 (common-lisp:defun |make-rule-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-execution-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-list () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-result common-lisp:nil
                       ((outcomes :initarg :|outcomes| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %rule-result-outcomes :initform
                         common-lisp:nil)
                        (rule-id :initarg :|ruleId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %rule-result-rule-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule-result 'make-rule-result))
 (common-lisp:defun make-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outcomes rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-result))
   common-lisp:nil))
(common-lisp:deftype rules-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass send-event-request common-lisp:nil
                       ((entities :initarg :|entities| :type
                         (common-lisp:or |listOfEntities| common-lisp:null)
                         :accessor %send-event-request-entities :initform
                         (common-lisp:error ":entities is required"))
                        (label-timestamp :initarg :|labelTimestamp| :type
                         (common-lisp:or |utcTimestampISO8601|
                                         common-lisp:null)
                         :accessor %send-event-request-label-timestamp
                         :initform common-lisp:nil)
                        (assigned-label :initarg :|assignedLabel| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %send-event-request-assigned-label :initform
                         common-lisp:nil)
                        (event-variables :initarg :|eventVariables| :type
                         (common-lisp:or event-variable-map common-lisp:null)
                         :accessor %send-event-request-event-variables
                         :initform
                         (common-lisp:error ":eventvariables is required"))
                        (event-timestamp :initarg :|eventTimestamp| :type
                         (common-lisp:or |utcTimestampISO8601|
                                         common-lisp:null)
                         :accessor %send-event-request-event-timestamp
                         :initform
                         (common-lisp:error ":eventtimestamp is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %send-event-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %send-event-request-event-id :initform
                         (common-lisp:error ":eventid is required"))))
 (common-lisp:export
  (common-lisp:list 'send-event-request 'make-send-event-request))
 (common-lisp:defun make-send-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entities label-timestamp assigned-label
                     event-variables event-timestamp event-type-name event-id)
   (common-lisp:apply #'common-lisp:make-instance 'send-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variables))
      (common-lisp:list
       (common-lisp:cons "eventVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-label))
      (common-lisp:list
       (common-lisp:cons "assignedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-event-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'send-event-result 'make-send-event-result))
 (common-lisp:defun make-send-event-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'send-event-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tfimetric-data-point common-lisp:nil
                       ((threshold :initarg :|threshold| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %tfimetric-data-point-threshold :initform
                         common-lisp:nil)
                        (tpr :initarg :|tpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %tfimetric-data-point-tpr :initform
                         common-lisp:nil)
                        (precision :initarg :|precision| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %tfimetric-data-point-precision :initform
                         common-lisp:nil)
                        (fpr :initarg :|fpr| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %tfimetric-data-point-fpr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tfimetric-data-point 'make-tfimetric-data-point))
 (common-lisp:defun make-tfimetric-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threshold tpr precision fpr)
   (common-lisp:apply #'common-lisp:make-instance 'tfimetric-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpr))
      (common-lisp:list
       (common-lisp:cons "fpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tpr))
      (common-lisp:list
       (common-lisp:cons "tpr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tfimetric-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tfimetric-data-points-list ()
   '(trivial-types:proper-list tfimetric-data-point))
 (common-lisp:defun |make-tfimetric-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tfimetric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tfimodel-performance common-lisp:nil
                       ((uncertainty-range :initarg :|uncertaintyRange| :type
                         (common-lisp:or uncertainty-range common-lisp:null)
                         :accessor %tfimodel-performance-uncertainty-range
                         :initform common-lisp:nil)
                        (auc :initarg :|auc| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %tfimodel-performance-auc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tfimodel-performance 'make-tfimodel-performance))
 (common-lisp:defun make-tfimodel-performance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uncertainty-range auc)
   (common-lisp:apply #'common-lisp:make-instance 'tfimodel-performance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uncertainty-range))
      (common-lisp:list
       (common-lisp:cons "uncertaintyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tfimodel-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tfitraining-metrics-value common-lisp:nil
                       ((model-performance :initarg :|modelPerformance| :type
                         (common-lisp:or tfimodel-performance common-lisp:null)
                         :accessor %tfitraining-metrics-value-model-performance
                         :initform common-lisp:nil)
                        (metric-data-points :initarg :|metricDataPoints| :type
                         (common-lisp:or tfimetric-data-points-list
                                         common-lisp:null)
                         :accessor
                         %tfitraining-metrics-value-metric-data-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tfitraining-metrics-value
                    'make-tfitraining-metrics-value))
 (common-lisp:defun make-tfitraining-metrics-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-performance metric-data-points)
   (common-lisp:apply #'common-lisp:make-instance 'tfitraining-metrics-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-performance))
      (common-lisp:list
       (common-lisp:cons "modelPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tfitraining-metrics-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |tagValue| common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or |tagKey| common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defun make-tag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tags-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass training-data-schema common-lisp:nil
                       ((label-schema :initarg :|labelSchema| :type
                         (common-lisp:or label-schema common-lisp:null)
                         :accessor %training-data-schema-label-schema :initform
                         common-lisp:nil)
                        (model-variables :initarg :|modelVariables| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor %training-data-schema-model-variables
                         :initform
                         (common-lisp:error ":modelvariables is required"))))
 (common-lisp:export
  (common-lisp:list 'training-data-schema 'make-training-data-schema))
 (common-lisp:defun make-training-data-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-schema model-variables)
   (common-lisp:apply #'common-lisp:make-instance 'training-data-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-data-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-data-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-variables))
      (common-lisp:list
       (common-lisp:cons "modelVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-schema))
      (common-lisp:list
       (common-lisp:cons "labelSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-data-schema))
   common-lisp:nil))
(common-lisp:deftype training-data-source-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass training-metrics common-lisp:nil
                       ((metric-data-points :initarg :|metricDataPoints| :type
                         (common-lisp:or |metricDataPointsList|
                                         common-lisp:null)
                         :accessor %training-metrics-metric-data-points
                         :initform common-lisp:nil)
                        (auc :initarg :|auc| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %training-metrics-auc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'training-metrics 'make-training-metrics))
 (common-lisp:defun make-training-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-data-points auc)
   (common-lisp:apply #'common-lisp:make-instance 'training-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auc))
      (common-lisp:list
       (common-lisp:cons "auc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-points))
      (common-lisp:list
       (common-lisp:cons "metricDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass training-metrics-v2 common-lisp:nil
                       ((ati :initarg :|ati| :type
                         (common-lisp:or atitraining-metrics-value
                                         common-lisp:null)
                         :accessor %training-metrics-v2-ati :initform
                         common-lisp:nil)
                        (tfi :initarg :|tfi| :type
                         (common-lisp:or tfitraining-metrics-value
                                         common-lisp:null)
                         :accessor %training-metrics-v2-tfi :initform
                         common-lisp:nil)
                        (ofi :initarg :|ofi| :type
                         (common-lisp:or ofitraining-metrics-value
                                         common-lisp:null)
                         :accessor %training-metrics-v2-ofi :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'training-metrics-v2 'make-training-metrics-v2))
 (common-lisp:defun make-training-metrics-v2
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ati tfi ofi)
   (common-lisp:apply #'common-lisp:make-instance 'training-metrics-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ofi))
      (common-lisp:list
       (common-lisp:cons "ofi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tfi))
      (common-lisp:list
       (common-lisp:cons "tfi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ati))
      (common-lisp:list
       (common-lisp:cons "ati"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-metrics-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass training-result common-lisp:nil
                       ((variable-importance-metrics :initarg
                         :|variableImportanceMetrics| :type
                         (common-lisp:or variable-importance-metrics
                                         common-lisp:null)
                         :accessor %training-result-variable-importance-metrics
                         :initform common-lisp:nil)
                        (training-metrics :initarg :|trainingMetrics| :type
                         (common-lisp:or training-metrics common-lisp:null)
                         :accessor %training-result-training-metrics :initform
                         common-lisp:nil)
                        (data-validation-metrics :initarg
                         :|dataValidationMetrics| :type
                         (common-lisp:or data-validation-metrics
                                         common-lisp:null)
                         :accessor %training-result-data-validation-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'training-result 'make-training-result))
 (common-lisp:defun make-training-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variable-importance-metrics
                     training-metrics data-validation-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'training-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-validation-metrics))
      (common-lisp:list
       (common-lisp:cons "dataValidationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-metrics))
      (common-lisp:list
       (common-lisp:cons "trainingMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "variableImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass training-result-v2 common-lisp:nil
                       ((aggregated-variables-importance-metrics :initarg
                         :|aggregatedVariablesImportanceMetrics| :type
                         (common-lisp:or
                          aggregated-variables-importance-metrics
                          common-lisp:null)
                         :accessor
                         %training-result-v2-aggregated-variables-importance-metrics
                         :initform common-lisp:nil)
                        (variable-importance-metrics :initarg
                         :|variableImportanceMetrics| :type
                         (common-lisp:or variable-importance-metrics
                                         common-lisp:null)
                         :accessor
                         %training-result-v2-variable-importance-metrics
                         :initform common-lisp:nil)
                        (training-metrics-v2 :initarg :|trainingMetricsV2|
                         :type
                         (common-lisp:or training-metrics-v2 common-lisp:null)
                         :accessor %training-result-v2-training-metrics-v2
                         :initform common-lisp:nil)
                        (data-validation-metrics :initarg
                         :|dataValidationMetrics| :type
                         (common-lisp:or data-validation-metrics
                                         common-lisp:null)
                         :accessor %training-result-v2-data-validation-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'training-result-v2 'make-training-result-v2))
 (common-lisp:defun make-training-result-v2
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregated-variables-importance-metrics
                     variable-importance-metrics training-metrics-v2
                     data-validation-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'training-result-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-result-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-result-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-validation-metrics))
      (common-lisp:list
       (common-lisp:cons "dataValidationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-metrics-v2))
      (common-lisp:list
       (common-lisp:cons "trainingMetricsV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variable-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "variableImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-variables-importance-metrics))
      (common-lisp:list
       (common-lisp:cons "aggregatedVariablesImportanceMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-result-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass uncertainty-range common-lisp:nil
                       ((upper-bound-value :initarg :|upperBoundValue| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %uncertainty-range-upper-bound-value
                         :initform
                         (common-lisp:error ":upperboundvalue is required"))
                        (lower-bound-value :initarg :|lowerBoundValue| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %uncertainty-range-lower-bound-value
                         :initform
                         (common-lisp:error ":lowerboundvalue is required"))))
 (common-lisp:export
  (common-lisp:list 'uncertainty-range 'make-uncertainty-range))
 (common-lisp:defun make-uncertainty-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upper-bound-value lower-bound-value)
   (common-lisp:apply #'common-lisp:make-instance 'uncertainty-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uncertainty-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uncertainty-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound-value))
      (common-lisp:list
       (common-lisp:cons "lowerBoundValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound-value))
      (common-lisp:list
       (common-lisp:cons "upperBoundValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uncertainty-range))
   common-lisp:nil))
(common-lisp:deftype unlabeled-events-treatment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or |tagKeyList| common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defun make-untag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-metadata-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         %update-detector-version-metadata-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %update-detector-version-metadata-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %update-detector-version-metadata-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-metadata-request
                    'make-update-detector-version-metadata-request))
 (common-lisp:defun make-update-detector-version-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description detector-version-id
                     detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-metadata-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-detector-version-metadata-result
                    'make-update-detector-version-metadata-result))
 (common-lisp:defun make-update-detector-version-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-request common-lisp:nil
                       ((rule-execution-mode :initarg :|ruleExecutionMode|
                         :type
                         (common-lisp:or rule-execution-mode common-lisp:null)
                         :accessor
                         %update-detector-version-request-rule-execution-mode
                         :initform common-lisp:nil)
                        (model-versions :initarg :|modelVersions| :type
                         (common-lisp:or list-of-model-versions
                                         common-lisp:null)
                         :accessor
                         %update-detector-version-request-model-versions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-detector-version-request-description
                         :initform common-lisp:nil)
                        (rules :initarg :|rules| :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         %update-detector-version-request-rules :initform
                         (common-lisp:error ":rules is required"))
                        (external-model-endpoints :initarg
                         :|externalModelEndpoints| :type
                         (common-lisp:or list-of-strings common-lisp:null)
                         :accessor
                         %update-detector-version-request-external-model-endpoints
                         :initform
                         (common-lisp:error
                          ":externalmodelendpoints is required"))
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %update-detector-version-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %update-detector-version-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-request
                    'make-update-detector-version-request))
 (common-lisp:defun make-update-detector-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-execution-mode model-versions
                     description rules external-model-endpoints
                     detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-model-endpoints))
      (common-lisp:list
       (common-lisp:cons "externalModelEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "modelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-execution-mode))
      (common-lisp:list
       (common-lisp:cons "ruleExecutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-detector-version-result
                    'make-update-detector-version-result))
 (common-lisp:defun make-update-detector-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-status-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or detector-version-status
                                         common-lisp:null)
                         :accessor
                         %update-detector-version-status-request-status
                         :initform (common-lisp:error ":status is required"))
                        (detector-version-id :initarg :|detectorVersionId|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %update-detector-version-status-request-detector-version-id
                         :initform
                         (common-lisp:error ":detectorversionid is required"))
                        (detector-id :initarg :|detectorId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor
                         %update-detector-version-status-request-detector-id
                         :initform
                         (common-lisp:error ":detectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-detector-version-status-request
                    'make-update-detector-version-status-request))
 (common-lisp:defun make-update-detector-version-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status detector-version-id detector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-version-id))
      (common-lisp:list
       (common-lisp:cons "detectorVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-version-status-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-detector-version-status-result
                    'make-update-detector-version-status-result))
 (common-lisp:defun make-update-detector-version-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-detector-version-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-version-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-label-request common-lisp:nil
                       ((label-timestamp :initarg :|labelTimestamp| :type
                         (common-lisp:or |utcTimestampISO8601|
                                         common-lisp:null)
                         :accessor %update-event-label-request-label-timestamp
                         :initform
                         (common-lisp:error ":labeltimestamp is required"))
                        (assigned-label :initarg :|assignedLabel| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %update-event-label-request-assigned-label
                         :initform
                         (common-lisp:error ":assignedlabel is required"))
                        (event-type-name :initarg :|eventTypeName| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %update-event-label-request-event-type-name
                         :initform
                         (common-lisp:error ":eventtypename is required"))
                        (event-id :initarg :|eventId| :type
                         (common-lisp:or |identifier| common-lisp:null)
                         :accessor %update-event-label-request-event-id
                         :initform
                         (common-lisp:error ":eventid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-event-label-request
                    'make-update-event-label-request))
 (common-lisp:defun make-update-event-label-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-timestamp assigned-label
                     event-type-name event-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-event-label-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "eventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-label))
      (common-lisp:list
       (common-lisp:cons "assignedLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-timestamp))
      (common-lisp:list
       (common-lisp:cons "labelTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-label-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-event-label-result
                    'make-update-event-label-result))
 (common-lisp:defun make-update-event-label-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-event-label-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-list-request common-lisp:nil
                       ((variable-type :initarg :|variableType| :type
                         (common-lisp:or |variableType| common-lisp:null)
                         :accessor %update-list-request-variable-type :initform
                         common-lisp:nil)
                        (update-mode :initarg :|updateMode| :type
                         (common-lisp:or list-update-mode common-lisp:null)
                         :accessor %update-list-request-update-mode :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-list-request-description :initform
                         common-lisp:nil)
                        (elements :initarg :|elements| :type
                         (common-lisp:or elements-list common-lisp:null)
                         :accessor %update-list-request-elements :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |noDashIdentifier| common-lisp:null)
                         :accessor %update-list-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-list-request 'make-update-list-request))
 (common-lisp:defun make-update-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variable-type update-mode description
                     elements name)
   (common-lisp:apply #'common-lisp:make-instance 'update-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-mode))
      (common-lisp:list
       (common-lisp:cons "updateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-list-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-list-result 'make-update-list-result))
 (common-lisp:defun make-update-list-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-model-request-description :initform
                         common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %update-model-request-model-type :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %update-model-request-model-id :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-model-request 'make-update-model-request))
 (common-lisp:defun make-update-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description model-type model-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-model-result 'make-update-model-result))
 (common-lisp:defun make-update-model-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-model-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-model-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-model-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-version-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %update-model-version-request-tags :initform
                         common-lisp:nil)
                        (ingested-events-detail :initarg
                         :|ingestedEventsDetail| :type
                         (common-lisp:or ingested-events-detail
                                         common-lisp:null)
                         :accessor
                         %update-model-version-request-ingested-events-detail
                         :initform common-lisp:nil)
                        (external-events-detail :initarg
                         :|externalEventsDetail| :type
                         (common-lisp:or external-events-detail
                                         common-lisp:null)
                         :accessor
                         %update-model-version-request-external-events-detail
                         :initform common-lisp:nil)
                        (major-version-number :initarg :|majorVersionNumber|
                         :type
                         (common-lisp:or |wholeNumberVersionString|
                                         common-lisp:null)
                         :accessor
                         %update-model-version-request-major-version-number
                         :initform
                         (common-lisp:error ":majorversionnumber is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %update-model-version-request-model-type
                         :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %update-model-version-request-model-id
                         :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-model-version-request
                    'make-update-model-version-request))
 (common-lisp:defun make-update-model-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags ingested-events-detail
                     external-events-detail major-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-model-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-version-number))
      (common-lisp:list
       (common-lisp:cons "majorVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-events-detail))
      (common-lisp:list
       (common-lisp:cons "externalEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-events-detail))
      (common-lisp:list
       (common-lisp:cons "ingestedEventsDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-version-result common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-model-version-result-status
                         :initform common-lisp:nil)
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %update-model-version-result-model-version-number
                         :initform common-lisp:nil)
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor %update-model-version-result-model-type
                         :initform common-lisp:nil)
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor %update-model-version-result-model-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-model-version-result
                    'make-update-model-version-result))
 (common-lisp:defun make-update-model-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status model-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-model-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-version-status-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or model-version-status common-lisp:null)
                         :accessor %update-model-version-status-request-status
                         :initform (common-lisp:error ":status is required"))
                        (model-version-number :initarg :|modelVersionNumber|
                         :type
                         (common-lisp:or |floatVersionString| common-lisp:null)
                         :accessor
                         %update-model-version-status-request-model-version-number
                         :initform
                         (common-lisp:error ":modelversionnumber is required"))
                        (model-type :initarg :|modelType| :type
                         (common-lisp:or model-type-enum common-lisp:null)
                         :accessor
                         %update-model-version-status-request-model-type
                         :initform
                         (common-lisp:error ":modeltype is required"))
                        (model-id :initarg :|modelId| :type
                         (common-lisp:or |modelIdentifier| common-lisp:null)
                         :accessor
                         %update-model-version-status-request-model-id
                         :initform
                         (common-lisp:error ":modelid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-model-version-status-request
                    'make-update-model-version-status-request))
 (common-lisp:defun make-update-model-version-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status model-version-number model-type
                     model-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-version-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-version-number))
      (common-lisp:list
       (common-lisp:cons "modelVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-version-status-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-model-version-status-result
                    'make-update-model-version-status-result))
 (common-lisp:defun make-update-model-version-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-version-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-version-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rule-metadata-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-rule-metadata-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (rule :initarg :|rule| :type
                         (common-lisp:or rule common-lisp:null) :accessor
                         %update-rule-metadata-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'update-rule-metadata-request
                    'make-update-rule-metadata-request))
 (common-lisp:defun make-update-rule-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description rule)
   (common-lisp:apply #'common-lisp:make-instance 'update-rule-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rule-metadata-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-rule-metadata-result
                    'make-update-rule-metadata-result))
 (common-lisp:defun make-update-rule-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-rule-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rule-version-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %update-rule-version-request-tags :initform
                         common-lisp:nil)
                        (outcomes :initarg :|outcomes| :type
                         (common-lisp:or non-empty-list-of-strings
                                         common-lisp:null)
                         :accessor %update-rule-version-request-outcomes
                         :initform (common-lisp:error ":outcomes is required"))
                        (language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %update-rule-version-request-language :initform
                         (common-lisp:error ":language is required"))
                        (expression :initarg :|expression| :type
                         (common-lisp:or |ruleExpression| common-lisp:null)
                         :accessor %update-rule-version-request-expression
                         :initform
                         (common-lisp:error ":expression is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-rule-version-request-description
                         :initform common-lisp:nil)
                        (rule :initarg :|rule| :type
                         (common-lisp:or rule common-lisp:null) :accessor
                         %update-rule-version-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'update-rule-version-request
                    'make-update-rule-version-request))
 (common-lisp:defun make-update-rule-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags outcomes language expression
                     description rule)
   (common-lisp:apply #'common-lisp:make-instance 'update-rule-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcomes))
      (common-lisp:list
       (common-lisp:cons "outcomes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rule-version-result common-lisp:nil
                       ((rule :initarg :|rule| :type
                         (common-lisp:or rule common-lisp:null) :accessor
                         %update-rule-version-result-rule :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-rule-version-result
                    'make-update-rule-version-result))
 (common-lisp:defun make-update-rule-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule)
   (common-lisp:apply #'common-lisp:make-instance 'update-rule-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-variable-request common-lisp:nil
                       ((variable-type :initarg :|variableType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-variable-request-variable-type
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-variable-request-description
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-variable-request-default-value
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-variable-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-variable-request 'make-update-variable-request))
 (common-lisp:defun make-update-variable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variable-type description default-value
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'update-variable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-variable-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-variable-result 'make-update-variable-result))
 (common-lisp:defun make-update-variable-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-variable-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variable-result))
   common-lisp:nil))
(common-lisp:deftype use-event-variables () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (frauddetector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass variable common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |fraudDetectorArn| common-lisp:null)
                         :accessor %variable-arn :initform common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %variable-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or |time| common-lisp:null) :accessor
                         %variable-last-updated-time :initform common-lisp:nil)
                        (variable-type :initarg :|variableType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-variable-type :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-description :initform
                         common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-default-value :initform
                         common-lisp:nil)
                        (data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %variable-data-source :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %variable-data-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'variable 'make-variable))
 (common-lisp:defun make-variable
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn created-time last-updated-time
                     variable-type description default-value data-source
                     data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'variable
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass variable-entry common-lisp:nil
                       ((variable-type :initarg :|variableType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-variable-type :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-description :initform
                         common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-default-value :initform
                         common-lisp:nil)
                        (data-source :initarg :|dataSource| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-data-source :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-data-type :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-entry-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'variable-entry 'make-variable-entry))
 (common-lisp:defun make-variable-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variable-type description default-value
                     data-source data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'variable-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-type))
      (common-lisp:list
       (common-lisp:cons "variableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-entry-list ()
   '(trivial-types:proper-list variable-entry))
 (common-lisp:defun |make-variable-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variable-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass variable-impact-explanation common-lisp:nil
                       ((log-odds-impact :initarg :|logOddsImpact| :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor %variable-impact-explanation-log-odds-impact
                         :initform common-lisp:nil)
                        (relative-impact :initarg :|relativeImpact| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %variable-impact-explanation-relative-impact
                         :initform common-lisp:nil)
                        (event-variable-name :initarg :|eventVariableName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %variable-impact-explanation-event-variable-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'variable-impact-explanation
                    'make-variable-impact-explanation))
 (common-lisp:defun make-variable-impact-explanation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-odds-impact relative-impact
                     event-variable-name)
   (common-lisp:apply #'common-lisp:make-instance 'variable-impact-explanation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-variable-name))
      (common-lisp:list
       (common-lisp:cons "eventVariableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-impact))
      (common-lisp:list
       (common-lisp:cons "relativeImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-impact))
      (common-lisp:list
       (common-lisp:cons "logOddsImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variable-impact-explanation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass variable-importance-metrics common-lisp:nil
                       ((log-odds-metrics :initarg :|logOddsMetrics| :type
                         (common-lisp:or list-of-log-odds-metrics
                                         common-lisp:null)
                         :accessor
                         %variable-importance-metrics-log-odds-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'variable-importance-metrics
                    'make-variable-importance-metrics))
 (common-lisp:defun make-variable-importance-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-odds-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'variable-importance-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-odds-metrics))
      (common-lisp:list
       (common-lisp:cons "logOddsMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variable-importance-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-list () '(trivial-types:proper-list variable))
 (common-lisp:defun |make-variable-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variable))
   aws-sdk/generator/shape::members))
(common-lisp:deftype variables-max-results () 'common-lisp:integer)
(common-lisp:deftype |attributeKey| () 'common-lisp:string)
(common-lisp:deftype |attributeValue| () 'common-lisp:string)
(common-lisp:deftype |batchImportsMaxPageSize| () 'common-lisp:integer)
(common-lisp:deftype |batchPredictionsMaxPageSize| () 'common-lisp:integer)
common-lisp:nil
(common-lisp:deftype |contentType| () 'common-lisp:string)
(common-lisp:deftype |description| () 'common-lisp:string)
(common-lisp:deftype |entityRestrictedString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |entityTypeList| ()
   '(trivial-types:proper-list entity-type))
 (common-lisp:defun |make-entitytypelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |entityTypesMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |eventTypeList| ()
   '(trivial-types:proper-list event-type))
 (common-lisp:defun |make-eventtypelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |eventTypesMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |fieldValidationMessageList| ()
   '(trivial-types:proper-list field-validation-message))
 (common-lisp:defun |make-fieldvalidationmessagelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |fileValidationMessageList| ()
   '(trivial-types:proper-list file-validation-message))
 (common-lisp:defun |make-filevalidationmessagelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |filterString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |floatVersionString| () 'common-lisp:string)
(common-lisp:deftype |fraudDetectorArn| () 'common-lisp:string)
(common-lisp:deftype |iamRoleArn| () 'common-lisp:string)
(common-lisp:deftype |identifier| () 'common-lisp:string)
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |labelList| () '(trivial-types:proper-list label))
 (common-lisp:defun |make-labellist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |labelMapper| () 'common-lisp:hash-table)
 (common-lisp:defun |make-labelmapper| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |labelsMaxResults| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |listOfEntities| () '(trivial-types:proper-list entity))
 (common-lisp:defun |make-listofentities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |listOfVariableImpactExplanations| ()
   '(trivial-types:proper-list variable-impact-explanation))
 (common-lisp:defun |make-listofvariableimpactexplanations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            variable-impact-explanation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |metricDataPointsList| ()
   '(trivial-types:proper-list metric-data-point))
 (common-lisp:defun |make-metricdatapointslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |modelIdentifier| () 'common-lisp:string)
(common-lisp:deftype |modelInputTemplate| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |modelList| () '(trivial-types:proper-list model))
 (common-lisp:defun |make-modellist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |modelVersionDetailList| ()
   '(trivial-types:proper-list model-version-detail))
 (common-lisp:defun |make-modelversiondetaillist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-version-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |modelsMaxPageSize| () 'common-lisp:integer)
(common-lisp:deftype |nextToken| () 'common-lisp:string)
(common-lisp:deftype |noDashIdentifier| () 'common-lisp:string)
(common-lisp:deftype |ruleExpression| () 'common-lisp:string)
(common-lisp:deftype |s3BucketLocation| () 'common-lisp:string)
(common-lisp:deftype |sageMakerEndpointIdentifier| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |tagKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagKeyList| () '(trivial-types:proper-list |tagKey|))
 (common-lisp:defun |make-tagkeylist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKey|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |tagList| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValue| () 'common-lisp:string)
(common-lisp:deftype |time| () 'common-lisp:string)
(common-lisp:deftype |utcTimestampISO8601| () 'common-lisp:string)
(common-lisp:deftype |variableName| () 'common-lisp:string)
(common-lisp:deftype |variableType| () 'common-lisp:string)
(common-lisp:deftype |variableValue| () 'common-lisp:string)
(common-lisp:deftype |wholeNumberVersionString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key variable-entries tags)
   (common-lisp:declare (common-lisp:ignorable variable-entries tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchCreateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-variable))
(common-lisp:progn
 (common-lisp:defun batch-get-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names)
   (common-lisp:declare (common-lisp:ignorable names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-variable))
(common-lisp:progn
 (common-lisp:defun cancel-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-batch-import-job))
(common-lisp:progn
 (common-lisp:defun cancel-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun create-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id input-path output-path
                     event-type-name iam-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable job-id input-path output-path event-type-name
     iam-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-import-job))
(common-lisp:progn
 (common-lisp:defun create-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id input-path output-path
                     event-type-name detector-name detector-version
                     iam-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable job-id input-path output-path event-type-name
     detector-name detector-version iam-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun create-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id description
                     external-model-endpoints rules model-versions
                     rule-execution-mode tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id description external-model-endpoints
     rules model-versions rule-execution-mode tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-detector-version))
(common-lisp:progn
 (common-lisp:defun create-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name elements variable-type description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name elements variable-type description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-list))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type description
                     event-type-name tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type description event-type-name
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun create-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type training-data-source
                     training-data-schema external-events-detail
                     ingested-events-detail tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type training-data-source
     training-data-schema external-events-detail ingested-events-detail tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-version))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id detector-id description
                     expression language outcomes tags)
   (common-lisp:declare
    (common-lisp:ignorable rule-id detector-id description expression language
     outcomes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateRule"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name data-type data-source default-value
                     description variable-type tags)
   (common-lisp:declare
    (common-lisp:ignorable name data-type data-source default-value description
     variable-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-variable))
(common-lisp:progn
 (common-lisp:defun delete-batch-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-batch-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteBatchImportJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-import-job))
(common-lisp:progn
 (common-lisp:defun delete-batch-prediction-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-batch-prediction-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteBatchPredictionJob"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-batch-prediction-job))
(common-lisp:progn
 (common-lisp:defun delete-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-detector))
(common-lisp:progn
 (common-lisp:defun delete-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-detector-version))
(common-lisp:progn
 (common-lisp:defun delete-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEntityType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-entity-type))
(common-lisp:progn
 (common-lisp:defun delete-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name
                     delete-audit-history)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name delete-audit-history))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event))
(common-lisp:progn
 (common-lisp:defun delete-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-type))
(common-lisp:progn
 (common-lisp:defun delete-events-by-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-events-by-event-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEventsByEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-events-by-event-type))
(common-lisp:progn
 (common-lisp:defun delete-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint)
   (common-lisp:declare (common-lisp:ignorable model-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-external-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteExternalModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-external-model))
(common-lisp:progn
 (common-lisp:defun delete-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-label))
(common-lisp:progn
 (common-lisp:defun delete-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-list))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type)
   (common-lisp:declare (common-lisp:ignorable model-id model-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun delete-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-version))
(common-lisp:progn
 (common-lisp:defun delete-outcome
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-outcome-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteOutcome"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-outcome))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule)
   (common-lisp:declare (common-lisp:ignorable rule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteRule"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-variable))
(common-lisp:progn
 (common-lisp:defun describe-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-detector))
(common-lisp:progn
 (common-lisp:defun describe-model-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-version-number model-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-version-number model-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeModelVersions"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-versions))
(common-lisp:progn
 (common-lisp:defun get-batch-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-batch-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetBatchImportJobs"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-import-jobs))
(common-lisp:progn
 (common-lisp:defun get-batch-prediction-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-batch-prediction-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetBatchPredictionJobs"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-prediction-jobs))
(common-lisp:progn
 (common-lisp:defun get-delete-events-by-event-type-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-delete-events-by-event-type-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeleteEventsByEventTypeStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-delete-events-by-event-type-status))
(common-lisp:progn
 (common-lisp:defun get-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-detector-version))
(common-lisp:progn
 (common-lisp:defun get-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDetectors"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-detectors))
(common-lisp:progn
 (common-lisp:defun get-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-entity-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetEntityTypes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-entity-types))
(common-lisp:progn
 (common-lisp:defun get-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name)
   (common-lisp:declare (common-lisp:ignorable event-id event-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event))
(common-lisp:progn
 (common-lisp:defun get-event-prediction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id event-id
                     event-type-name entities event-timestamp event-variables
                     external-model-endpoint-data-blobs)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id event-id
     event-type-name entities event-timestamp event-variables
     external-model-endpoint-data-blobs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-prediction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetEventPrediction"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-prediction))
(common-lisp:progn
 (common-lisp:defun get-event-prediction-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name detector-id
                     detector-version-id prediction-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name detector-id
     detector-version-id prediction-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-event-prediction-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetEventPredictionMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-prediction-metadata))
(common-lisp:progn
 (common-lisp:defun get-event-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetEventTypes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-types))
(common-lisp:progn
 (common-lisp:defun get-external-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-endpoint next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-external-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetExternalModels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-external-models))
(common-lisp:progn
 (common-lisp:defun get-kmsencryption-key ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'frauddetector-request :method "POST" :path "/"
                                :protocol :json :operation
                                "GetKMSEncryptionKey" :params
                                `(("Action" ,@"GetKMSEncryptionKey")
                                  ("Version" ,@"2019-11-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-kmsencryption-key))
(common-lisp:progn
 (common-lisp:defun get-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetLabels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-labels))
(common-lisp:progn
 (common-lisp:defun get-list-elements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-list-elements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetListElements"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-list-elements))
(common-lisp:progn
 (common-lisp:defun get-lists-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lists-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetListsMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lists-metadata))
(common-lisp:progn
 (common-lisp:defun get-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-model-version))
(common-lisp:progn
 (common-lisp:defun get-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetModels"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-models))
(common-lisp:progn
 (common-lisp:defun get-outcomes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-outcomes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOutcomes"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-outcomes))
(common-lisp:progn
 (common-lisp:defun get-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id detector-id rule-version
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable rule-id detector-id rule-version next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetRules"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rules))
(common-lisp:progn
 (common-lisp:defun get-variables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-variables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetVariables"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-variables))
(common-lisp:progn
 (common-lisp:defun list-event-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type detector-id
                     detector-version-id prediction-time-range next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type detector-id detector-version-id
     prediction-time-range next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-predictions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEventPredictions"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-predictions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id description event-type-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id description event-type-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutDetector"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-detector))
(common-lisp:progn
 (common-lisp:defun put-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutEntityType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-entity-type))
(common-lisp:progn
 (common-lisp:defun put-event-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description event-variables labels
                     entity-types event-ingestion tags)
   (common-lisp:declare
    (common-lisp:ignorable name description event-variables labels entity-types
     event-ingestion tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-event-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutEventType"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-event-type))
(common-lisp:progn
 (common-lisp:defun put-external-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-endpoint model-source
                     invoke-model-endpoint-role-arn input-configuration
                     output-configuration model-endpoint-status tags)
   (common-lisp:declare
    (common-lisp:ignorable model-endpoint model-source
     invoke-model-endpoint-role-arn input-configuration output-configuration
     model-endpoint-status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-external-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutExternalModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-external-model))
(common-lisp:progn
 (common-lisp:defun put-kmsencryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-encryption-key-arn)
   (common-lisp:declare (common-lisp:ignorable kms-encryption-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-kmsencryption-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutKMSEncryptionKey"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-kmsencryption-key))
(common-lisp:progn
 (common-lisp:defun put-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-label))
(common-lisp:progn
 (common-lisp:defun put-outcome
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-outcome-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutOutcome"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-outcome))
(common-lisp:progn
 (common-lisp:defun send-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name event-timestamp
                     event-variables assigned-label label-timestamp entities)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name event-timestamp
     event-variables assigned-label label-timestamp entities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendEvent"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-event))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-detector-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id
                     external-model-endpoints rules description model-versions
                     rule-execution-mode)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id
     external-model-endpoints rules description model-versions
     rule-execution-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-detector-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDetectorVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version))
(common-lisp:progn
 (common-lisp:defun update-detector-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id
                     description)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-detector-version-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDetectorVersionMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version-metadata))
(common-lisp:progn
 (common-lisp:defun update-detector-version-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id detector-version-id status)
   (common-lisp:declare
    (common-lisp:ignorable detector-id detector-version-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-detector-version-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDetectorVersionStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-detector-version-status))
(common-lisp:progn
 (common-lisp:defun update-event-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id event-type-name assigned-label
                     label-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable event-id event-type-name assigned-label
     label-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateEventLabel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-label))
(common-lisp:progn
 (common-lisp:defun update-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name elements description update-mode
                     variable-type)
   (common-lisp:declare
    (common-lisp:ignorable name elements description update-mode
     variable-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateList"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-list))
(common-lisp:progn
 (common-lisp:defun update-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type description)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateModel"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model))
(common-lisp:progn
 (common-lisp:defun update-model-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type major-version-number
                     external-events-detail ingested-events-detail tags)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type major-version-number
     external-events-detail ingested-events-detail tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateModelVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-version))
(common-lisp:progn
 (common-lisp:defun update-model-version-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-id model-type model-version-number
                     status)
   (common-lisp:declare
    (common-lisp:ignorable model-id model-type model-version-number status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-model-version-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateModelVersionStatus"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-version-status))
(common-lisp:progn
 (common-lisp:defun update-rule-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule description)
   (common-lisp:declare (common-lisp:ignorable rule description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRuleMetadata"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-metadata))
(common-lisp:progn
 (common-lisp:defun update-rule-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule description expression language
                     outcomes tags)
   (common-lisp:declare
    (common-lisp:ignorable rule description expression language outcomes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRuleVersion"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-version))
(common-lisp:progn
 (common-lisp:defun update-variable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name default-value description
                     variable-type)
   (common-lisp:declare
    (common-lisp:ignorable name default-value description variable-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-variable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'frauddetector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateVariable"
                                                        "2019-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-variable))
