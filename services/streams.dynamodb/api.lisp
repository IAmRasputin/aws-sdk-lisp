;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/streams.dynamodb/api
  (:use)
  (:nicknames #:aws/streams.dynamodb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/streams.dynamodb/api)
(common-lisp:progn
 (common-lisp:define-condition streams.dynamodb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'streams.dynamodb-error))
(common-lisp:progn
 (common-lisp:defclass streams.dynamodb-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "streams.dynamodb"
                        :api-version "2012-08-10" :host-prefix
                        "streams.dynamodb" :signing-name "dynamodb"
                        :global-host common-lisp:nil :target-prefix
                        "DynamoDBStreams_20120810" :json-version "1.0"))
 (common-lisp:export 'streams.dynamodb-request))
(common-lisp:defvar *error-map*
  '(("ExpiredIteratorException" . expired-iterator-exception)
    ("InternalServerError" . internal-server-error)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TrimmedDataAccessException" . trimmed-data-access-exception)))
(common-lisp:progn
 (common-lisp:deftype attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-"))
   (s common-lisp:nil :type
    (common-lisp:or string-attribute-value common-lisp:null))
   (n common-lisp:nil :type
    (common-lisp:or number-attribute-value common-lisp:null))
   (b common-lisp:nil :type
    (common-lisp:or binary-attribute-value common-lisp:null))
   (ss common-lisp:nil :type
    (common-lisp:or string-set-attribute-value common-lisp:null))
   (ns common-lisp:nil :type
    (common-lisp:or number-set-attribute-value common-lisp:null))
   (bs common-lisp:nil :type
    (common-lisp:or binary-set-attribute-value common-lisp:null))
   (m common-lisp:nil :type
    (common-lisp:or map-attribute-value common-lisp:null))
   (l common-lisp:nil :type
    (common-lisp:or list-attribute-value common-lisp:null))
   (null common-lisp:nil :type
    (common-lisp:or null-attribute-value common-lisp:null))
   (bool common-lisp:nil :type
    (common-lisp:or boolean-attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's))
      (common-lisp:list
       (common-lisp:cons "S"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'n))
      (common-lisp:list
       (common-lisp:cons "N"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'b))
      (common-lisp:list
       (common-lisp:cons "B"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ss))
      (common-lisp:list
       (common-lisp:cons "SS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns))
      (common-lisp:list
       (common-lisp:cons "NS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bs))
      (common-lisp:list
       (common-lisp:cons "BS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm))
      (common-lisp:list
       (common-lisp:cons "M"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'l))
      (common-lisp:list
       (common-lisp:cons "L"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null))
      (common-lisp:list
       (common-lisp:cons "NULL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bool))
      (common-lisp:list
       (common-lisp:cons "BOOL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:deftype binary-attribute-value ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype binary-set-attribute-value ()
   '(trivial-types:proper-list binary-attribute-value))
 (common-lisp:defun make-binary-set-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list binary-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean-attribute-value () 'common-lisp:boolean)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stream-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stream-input-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or stream-arn common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (exclusive-start-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-input 'make-describe-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-shard-id))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stream-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stream-output-"))
   (stream-description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-output 'make-describe-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-description))
      (common-lisp:list
       (common-lisp:cons "StreamDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-iterator-exception
     (streams.dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-iterator-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-iterator-exception
                    'expired-iterator-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-records-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-records-input-"))
   (shard-iterator (common-lisp:error ":shard-iterator is required") :type
    (common-lisp:or shard-iterator common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-records-input 'make-get-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-records-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-records-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator))
      (common-lisp:list
       (common-lisp:cons "ShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-records-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-records-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-records-output-"))
   (records common-lisp:nil :type
    (common-lisp:or record-list common-lisp:null))
   (next-shard-iterator common-lisp:nil :type
    (common-lisp:or shard-iterator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-records-output 'make-get-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-records-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-records-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-shard-iterator))
      (common-lisp:list
       (common-lisp:cons "NextShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-records-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-shard-iterator-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-shard-iterator-input-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or stream-arn common-lisp:null))
   (shard-id (common-lisp:error ":shard-id is required") :type
    (common-lisp:or shard-id common-lisp:null))
   (shard-iterator-type (common-lisp:error ":shard-iterator-type is required")
    :type (common-lisp:or shard-iterator-type common-lisp:null))
   (sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-input 'make-get-shard-iterator-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator-type))
      (common-lisp:list
       (common-lisp:cons "ShardIteratorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-shard-iterator-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-shard-iterator-output-"))
   (shard-iterator common-lisp:nil :type
    (common-lisp:or shard-iterator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-output
                    'make-get-shard-iterator-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator))
      (common-lisp:list
       (common-lisp:cons "ShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity (:copier common-lisp:nil) (:conc-name "struct-shape-identity-"))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (streams.dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-message)))
(common-lisp:progn
 (common-lisp:deftype key-schema ()
   '(trivial-types:proper-list key-schema-element))
 (common-lisp:defun make-key-schema
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-schema-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-schema-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-schema-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-schema-element-"))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or key-schema-attribute-name common-lisp:null))
   (key-type (common-lisp:error ":key-type is required") :type
    (common-lisp:or key-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-schema-element 'make-key-schema-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-schema-element))
   common-lisp:nil))
(common-lisp:deftype key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (streams.dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype list-attribute-value ()
   '(trivial-types:proper-list attribute-value))
 (common-lisp:defun make-list-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streams-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streams-input-"))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (exclusive-start-stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-input 'make-list-streams-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-stream-arn))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streams-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streams-output-"))
   (streams common-lisp:nil :type
    (common-lisp:or stream-list common-lisp:null))
   (last-evaluated-stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-output 'make-list-streams-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-evaluated-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype map-attribute-value () 'common-lisp:hash-table)
 (common-lisp:defun make-map-attribute-value
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype null-attribute-value () 'common-lisp:boolean)
(common-lisp:deftype number-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype number-set-attribute-value ()
   '(trivial-types:proper-list number-attribute-value))
 (common-lisp:defun make-number-set-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:deftype positive-integer-object () 'common-lisp:integer)
(common-lisp:deftype positive-long-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (record (:copier common-lisp:nil) (:conc-name "struct-shape-record-"))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-name common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (event-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dynamodb common-lisp:nil :type
    (common-lisp:or stream-record common-lisp:null))
   (user-identity common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-version))
      (common-lisp:list
       (common-lisp:cons "eventVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "eventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb))
      (common-lisp:list
       (common-lisp:cons "dynamodb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "userIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-list () '(trivial-types:proper-list record))
 (common-lisp:defun make-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (streams.dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype sequence-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sequence-number-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-sequence-number-range-"))
   (starting-sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null))
   (ending-sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sequence-number-range 'make-sequence-number-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-sequence-number))
      (common-lisp:list
       (common-lisp:cons "StartingSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ending-sequence-number))
      (common-lisp:list
       (common-lisp:cons "EndingSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (shard (:copier common-lisp:nil) (:conc-name "struct-shape-shard-"))
   (shard-id common-lisp:nil :type (common-lisp:or shard-id common-lisp:null))
   (sequence-number-range common-lisp:nil :type
    (common-lisp:or sequence-number-range common-lisp:null))
   (parent-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'shard 'make-shard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sequence-number-range))
      (common-lisp:list
       (common-lisp:cons "SequenceNumberRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-shard-id))
      (common-lisp:list
       (common-lisp:cons "ParentShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype shard-description-list ()
   '(trivial-types:proper-list shard))
 (common-lisp:defun make-shard-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard))
   aws-sdk/generator/shape::members))
(common-lisp:deftype shard-id () 'common-lisp:string)
(common-lisp:deftype shard-iterator () 'common-lisp:string)
(common-lisp:deftype shard-iterator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream (:copier common-lisp:nil) (:conc-name "struct-shape-stream-"))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (stream-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream 'make-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-label))
      (common-lisp:list
       (common-lisp:cons "StreamLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream))
   common-lisp:nil))
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-description-"))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (stream-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (stream-status common-lisp:nil :type
    (common-lisp:or stream-status common-lisp:null))
   (stream-view-type common-lisp:nil :type
    (common-lisp:or stream-view-type common-lisp:null))
   (creation-request-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or key-schema common-lisp:null))
   (shards common-lisp:nil :type
    (common-lisp:or shard-description-list common-lisp:null))
   (last-evaluated-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-description 'make-stream-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-label))
      (common-lisp:list
       (common-lisp:cons "StreamLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-status))
      (common-lisp:list
       (common-lisp:cons "StreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view-type))
      (common-lisp:list
       (common-lisp:cons "StreamViewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-request-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationRequestDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shards))
      (common-lisp:list
       (common-lisp:cons "Shards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-evaluated-shard-id))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stream-list () '(trivial-types:proper-list stream))
 (common-lisp:defun make-stream-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-record-"))
   (approximate-creation-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (keys common-lisp:nil :type (common-lisp:or attribute-map common-lisp:null))
   (new-image common-lisp:nil :type
    (common-lisp:or attribute-map common-lisp:null))
   (old-image common-lisp:nil :type
    (common-lisp:or attribute-map common-lisp:null))
   (sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null))
   (size-bytes common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (stream-view-type common-lisp:nil :type
    (common-lisp:or stream-view-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream-record 'make-stream-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-creation-date-time))
      (common-lisp:list
       (common-lisp:cons "ApproximateCreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-image))
      (common-lisp:list
       (common-lisp:cons "NewImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-image))
      (common-lisp:list
       (common-lisp:cons "OldImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view-type))
      (common-lisp:list
       (common-lisp:cons "StreamViewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-record))
   common-lisp:nil))
(common-lisp:deftype stream-status () 'common-lisp:string)
(common-lisp:deftype stream-view-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-set-attribute-value ()
   '(trivial-types:proper-list string-attribute-value))
 (common-lisp:defun make-string-set-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition trimmed-data-access-exception
     (streams.dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       trimmed-data-access-exception-message)))
 (common-lisp:export
  (common-lisp:list 'trimmed-data-access-exception
                    'trimmed-data-access-exception-message)))
(common-lisp:progn
 (common-lisp:defun describe-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn limit
                     exclusive-start-shard-id)
   (common-lisp:declare
    (common-lisp:ignorable stream-arn limit exclusive-start-shard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'streams.dynamodb-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeStream"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-stream))
(common-lisp:progn
 (common-lisp:defun get-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key shard-iterator limit)
   (common-lisp:declare (common-lisp:ignorable shard-iterator limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'streams.dynamodb-request aws-sdk/generator/operation::input "POST" "/"
        "GetRecords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-records))
(common-lisp:progn
 (common-lisp:defun get-shard-iterator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn shard-id shard-iterator-type
                     sequence-number)
   (common-lisp:declare
    (common-lisp:ignorable stream-arn shard-id shard-iterator-type
     sequence-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-shard-iterator-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'streams.dynamodb-request aws-sdk/generator/operation::input "POST" "/"
        "GetShardIterator"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-shard-iterator))
(common-lisp:progn
 (common-lisp:defun list-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name limit
                     exclusive-start-stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable table-name limit exclusive-start-stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streams-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'streams.dynamodb-request aws-sdk/generator/operation::input "POST" "/"
        "ListStreams"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streams))
