;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/finspace-data/api
  (:use)
  (:nicknames #:aws/finspace-data)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/finspace-data/api)
(common-lisp:progn
 (common-lisp:defclass finspace-data-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "finspace-data" :protocol
                        :rest-json))
 (common-lisp:export 'finspace-data-request))
(common-lisp:progn
 (common-lisp:define-condition finspace-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'finspace-data-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype alias-string () 'common-lisp:string)
(common-lisp:deftype api-access () 'common-lisp:string)
(common-lisp:deftype application-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-permission-list ()
   '(trivial-types:proper-list application-permission))
 (common-lisp:defun |make-application-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-user-to-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-user-to-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-user-to-permission-group-request
                    'make-associate-user-to-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-user-to-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-user-to-permission-group-response-"))
   (status-code common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-user-to-permission-group-response
                    'make-associate-user-to-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-credentials-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or access-key-id common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or secret-access-key common-lisp:null))
   (session-token common-lisp:nil :type
    (common-lisp:or session-token common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aws-credentials 'make-aws-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-credentials))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype changeset-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (changeset-error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-changeset-error-info-"))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (error-category common-lisp:nil :type
    (common-lisp:or error-category common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'changeset-error-info 'make-changeset-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input changeset-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input changeset-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "errorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input changeset-error-info))
   common-lisp:nil))
(common-lisp:deftype changeset-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype changeset-list ()
   '(trivial-types:proper-list changeset-summary))
 (common-lisp:defun |make-changeset-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list changeset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (changeset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-changeset-summary-"))
   (changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null))
   (changeset-arn common-lisp:nil :type
    (common-lisp:or changeset-arn common-lisp:null))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null))
   (source-params common-lisp:nil :type
    (common-lisp:or source-params common-lisp:null))
   (format-params common-lisp:nil :type
    (common-lisp:or format-params common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or changeset-error-info common-lisp:null))
   (active-until-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (active-from-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (updates-changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null))
   (updated-by-changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'changeset-summary 'make-changeset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input changeset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input changeset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-arn))
      (common-lisp:list
       (common-lisp:cons "changesetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-until-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeUntilTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updates-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatesChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updated-by-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatedByChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input changeset-summary))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-definition-"))
   (data-type common-lisp:nil :type
    (common-lisp:or column-data-type common-lisp:null))
   (column-name common-lisp:nil :type
    (common-lisp:or column-name common-lisp:null))
   (column-description common-lisp:nil :type
    (common-lisp:or column-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-definition 'make-column-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-description))
      (common-lisp:list
       (common-lisp:cons "columnDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-definition))
   common-lisp:nil))
(common-lisp:deftype column-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-list ()
   '(trivial-types:proper-list column-definition))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-name-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-column-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-changeset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-changeset-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (change-type (common-lisp:error ":changetype is required") :type
    (common-lisp:or change-type common-lisp:null))
   (source-params (common-lisp:error ":sourceparams is required") :type
    (common-lisp:or source-params common-lisp:null))
   (format-params (common-lisp:error ":formatparams is required") :type
    (common-lisp:or format-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-changeset-request 'make-create-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-changeset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-changeset-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-changeset-response
                    'make-create-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-view-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-view-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (auto-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (sort-columns common-lisp:nil :type
    (common-lisp:or sort-column-list common-lisp:null))
   (partition-columns common-lisp:nil :type
    (common-lisp:or partition-column-list common-lisp:null))
   (as-of-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (destination-type-params
    (common-lisp:error ":destinationtypeparams is required") :type
    (common-lisp:or data-view-destination-type-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-view-request 'make-create-data-view-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-params))
      (common-lisp:list
       (common-lisp:cons "destinationTypeParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-view-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-view-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (data-view-id common-lisp:nil :type
    (common-lisp:or data-view-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-view-response
                    'make-create-data-view-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dataset-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-title (common-lisp:error ":datasettitle is required") :type
    (common-lisp:or dataset-title common-lisp:null))
   (kind (common-lisp:error ":kind is required") :type
    (common-lisp:or dataset-kind common-lisp:null))
   (dataset-description common-lisp:nil :type
    (common-lisp:or dataset-description common-lisp:null))
   (owner-info common-lisp:nil :type
    (common-lisp:or dataset-owner-info common-lisp:null))
   (permission-group-params
    (common-lisp:error ":permissiongroupparams is required") :type
    (common-lisp:or permission-group-params common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias-string common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-union common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-info))
      (common-lisp:list
       (common-lisp:cons "ownerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permission-group-params))
      (common-lisp:list
       (common-lisp:cons "permissionGroupParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dataset-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-permission-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or permission-group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or permission-group-description common-lisp:null))
   (application-permissions
    (common-lisp:error ":applicationpermissions is required") :type
    (common-lisp:or application-permission-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-permission-group-request
                    'make-create-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-permission-group-response-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-permission-group-response
                    'make-create-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (email-address (common-lisp:error ":emailaddress is required") :type
    (common-lisp:or email common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or user-type common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (api-access common-lisp:nil :type
    (common-lisp:or api-access common-lisp:null))
   (api-access-principal-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "ApiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-credentials-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or |stringValueLength1to255| common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or |stringValueMaxLength1000| common-lisp:null))
   (session-token common-lisp:nil :type
    (common-lisp:or |stringValueMaxLength1000| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:deftype data-view-arn () 'common-lisp:string)
(common-lisp:deftype data-view-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-view-destination-type-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-view-destination-type-params-"))
   (destination-type (common-lisp:error ":destinationtype is required") :type
    (common-lisp:or data-view-destination-type common-lisp:null))
   (s3destination-export-file-format common-lisp:nil :type
    (common-lisp:or export-file-format common-lisp:null))
   (s3destination-export-file-format-options common-lisp:nil :type
    (common-lisp:or s3destination-format-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-view-destination-type-params
                    'make-data-view-destination-type-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3destination-export-file-format))
      (common-lisp:list
       (common-lisp:cons "s3DestinationExportFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3destination-export-file-format-options))
      (common-lisp:list
       (common-lisp:cons "s3DestinationExportFileFormatOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-view-error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-view-error-info-"))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (error-category common-lisp:nil :type
    (common-lisp:or error-category common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-view-error-info 'make-data-view-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-view-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-view-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "errorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-view-error-info))
   common-lisp:nil))
(common-lisp:deftype data-view-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-view-list ()
   '(trivial-types:proper-list data-view-summary))
 (common-lisp:defun |make-data-view-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-view-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-view-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-view-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-view-summary-"))
   (data-view-id common-lisp:nil :type
    (common-lisp:or data-view-id common-lisp:null))
   (data-view-arn common-lisp:nil :type
    (common-lisp:or data-view-arn common-lisp:null))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (as-of-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (partition-columns common-lisp:nil :type
    (common-lisp:or partition-column-list common-lisp:null))
   (sort-columns common-lisp:nil :type
    (common-lisp:or sort-column-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-view-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or data-view-error-info common-lisp:null))
   (destination-type-properties common-lisp:nil :type
    (common-lisp:or data-view-destination-type-params common-lisp:null))
   (auto-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-view-summary 'make-data-view-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-view-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-view-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-arn))
      (common-lisp:list
       (common-lisp:cons "dataViewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-properties))
      (common-lisp:list
       (common-lisp:cons "destinationTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-view-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dataset (:copier common-lisp:nil) (:conc-name "struct-shape-dataset-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (dataset-title common-lisp:nil :type
    (common-lisp:or dataset-title common-lisp:null))
   (kind common-lisp:nil :type (common-lisp:or dataset-kind common-lisp:null))
   (dataset-description common-lisp:nil :type
    (common-lisp:or dataset-description common-lisp:null))
   (owner-info common-lisp:nil :type
    (common-lisp:or dataset-owner-info common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-union common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or alias-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dataset 'make-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "datasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-info))
      (common-lisp:list
       (common-lisp:cons "ownerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset))
   common-lisp:nil))
(common-lisp:deftype dataset-arn () 'common-lisp:string)
(common-lisp:deftype dataset-description () 'common-lisp:string)
(common-lisp:deftype dataset-id () 'common-lisp:string)
(common-lisp:deftype dataset-kind () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-list () '(trivial-types:proper-list dataset))
 (common-lisp:defun |make-dataset-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-owner-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-owner-info-"))
   (name common-lisp:nil :type (common-lisp:or owner-name common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataset-owner-info 'make-dataset-owner-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "phoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:deftype dataset-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dataset-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dataset-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-permission-group-request
                    'make-delete-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-group-response-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-permission-group-response
                    'make-delete-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-user-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-user-request 'make-disable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-user-response 'make-disable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-user-from-permission-group-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-user-from-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-from-permission-group-request
                    'make-disassociate-user-from-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-user-from-permission-group-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-user-from-permission-group-response-"))
   (status-code common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-from-permission-group-response
                    'make-disassociate-user-from-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-user-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-user-request 'make-enable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-user-response 'make-enable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-response))
   common-lisp:nil))
(common-lisp:deftype error-category () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype export-file-format () 'common-lisp:string)
(common-lisp:deftype first-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype format-params () 'common-lisp:hash-table)
 (common-lisp:defun |make-format-params| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-changeset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-changeset-request-"))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (changeset-id (common-lisp:error ":changesetid is required") :type
    (common-lisp:or changeset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-changeset-request 'make-get-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-changeset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-changeset-response-"))
   (changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null))
   (changeset-arn common-lisp:nil :type
    (common-lisp:or changeset-arn common-lisp:null))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null))
   (source-params common-lisp:nil :type
    (common-lisp:or source-params common-lisp:null))
   (format-params common-lisp:nil :type
    (common-lisp:or format-params common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or changeset-error-info common-lisp:null))
   (active-until-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (active-from-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (updates-changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null))
   (updated-by-changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-changeset-response 'make-get-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-arn))
      (common-lisp:list
       (common-lisp:cons "changesetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-until-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeUntilTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updates-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatesChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updated-by-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatedByChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-view-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-view-request-"))
   (data-view-id (common-lisp:error ":dataviewid is required") :type
    (common-lisp:or data-view-id common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-view-request 'make-get-data-view-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-view-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-view-response-"))
   (auto-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partition-columns common-lisp:nil :type
    (common-lisp:or partition-column-list common-lisp:null))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (as-of-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or data-view-error-info common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (sort-columns common-lisp:nil :type
    (common-lisp:or sort-column-list common-lisp:null))
   (data-view-id common-lisp:nil :type
    (common-lisp:or data-view-id common-lisp:null))
   (data-view-arn common-lisp:nil :type
    (common-lisp:or data-view-arn common-lisp:null))
   (destination-type-params common-lisp:nil :type
    (common-lisp:or data-view-destination-type-params common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-view-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-view-response 'make-get-data-view-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-arn))
      (common-lisp:list
       (common-lisp:cons "dataViewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-params))
      (common-lisp:list
       (common-lisp:cons "destinationTypeParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataset-request-"))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or string-value-length1to255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataset-request 'make-get-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataset-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (dataset-title common-lisp:nil :type
    (common-lisp:or dataset-title common-lisp:null))
   (kind common-lisp:nil :type (common-lisp:or dataset-kind common-lisp:null))
   (dataset-description common-lisp:nil :type
    (common-lisp:or dataset-description common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-union common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dataset-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataset-response 'make-get-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "datasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-external-data-view-access-details-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-external-data-view-access-details-request-"))
   (data-view-id (common-lisp:error ":dataviewid is required") :type
    (common-lisp:or data-view-id common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-external-data-view-access-details-request
                    'make-get-external-data-view-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-external-data-view-access-details-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-external-data-view-access-details-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or aws-credentials common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-external-data-view-access-details-response
                    'make-get-external-data-view-access-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-group-request
                    'make-get-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-group-response-"))
   (permission-group common-lisp:nil :type
    (common-lisp:or permission-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-group-response
                    'make-get-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group))
      (common-lisp:list
       (common-lisp:cons "permissionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-programmatic-access-credentials-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-programmatic-access-credentials-request-"))
   (duration-in-minutes common-lisp:nil :type
    (common-lisp:or session-duration common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-programmatic-access-credentials-request
                    'make-get-programmatic-access-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-programmatic-access-credentials-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-programmatic-access-credentials-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (duration-in-minutes common-lisp:nil :type
    (common-lisp:or session-duration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-programmatic-access-credentials-response
                    'make-get-programmatic-access-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or user-status common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (api-access common-lisp:nil :type
    (common-lisp:or api-access common-lisp:null))
   (api-access-principal-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-enabled-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-disabled-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-login-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-enabled-time))
      (common-lisp:list
       (common-lisp:cons "lastEnabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-disabled-time))
      (common-lisp:list
       (common-lisp:cons "lastDisabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-login-time))
      (common-lisp:list
       (common-lisp:cons "lastLoginTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-working-location-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-working-location-request-"))
   (location-type common-lisp:nil :type
    (common-lisp:or |locationType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-working-location-request
                    'make-get-working-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-type))
      (common-lisp:list
       (common-lisp:cons "locationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-working-location-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-working-location-response-"))
   (s3uri common-lisp:nil :type
    (common-lisp:or |stringValueLength1to1024| common-lisp:null))
   (s3path common-lisp:nil :type
    (common-lisp:or |stringValueLength1to1024| common-lisp:null))
   (s3bucket common-lisp:nil :type
    (common-lisp:or |stringValueLength1to63| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-working-location-response
                    'make-get-working-location-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   common-lisp:nil))
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:deftype ingestion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype last-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-changesets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-changesets-request-"))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-changesets-request 'make-list-changesets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-changesets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-changesets-response-"))
   (changesets common-lisp:nil :type
    (common-lisp:or changeset-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-changesets-response 'make-list-changesets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changesets))
      (common-lisp:list
       (common-lisp:cons "changesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-views-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-views-request-"))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-views-request 'make-list-data-views-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-views-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-views-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (data-views common-lisp:nil :type
    (common-lisp:or data-view-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-views-response 'make-list-data-views-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-views))
      (common-lisp:list
       (common-lisp:cons "dataViews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datasets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datasets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datasets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datasets-response-"))
   (datasets common-lisp:nil :type
    (common-lisp:or dataset-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permission-groups-by-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permission-groups-by-user-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":maxresults is required") :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-by-user-request
                    'make-list-permission-groups-by-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permission-groups-by-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permission-groups-by-user-response-"))
   (permission-groups common-lisp:nil :type
    (common-lisp:or permission-group-by-user-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-by-user-response
                    'make-list-permission-groups-by-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-groups))
      (common-lisp:list
       (common-lisp:cons "permissionGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permission-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permission-groups-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":maxresults is required") :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-request
                    'make-list-permission-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-permission-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-permission-groups-response-"))
   (permission-groups common-lisp:nil :type
    (common-lisp:or permission-group-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-response
                    'make-list-permission-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-groups))
      (common-lisp:list
       (common-lisp:cons "permissionGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-by-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-by-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":maxresults is required") :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-by-permission-group-request
                    'make-list-users-by-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-by-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-by-permission-group-response-"))
   (users common-lisp:nil :type
    (common-lisp:or user-by-permission-group-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-by-permission-group-response
                    'make-list-users-by-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":maxresults is required") :type
    (common-lisp:or result-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (users common-lisp:nil :type (common-lisp:or user-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype owner-name () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partition-column-list ()
   '(trivial-types:proper-list string-value-length1to255))
 (common-lisp:defun |make-partition-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-value-length1to255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (permission-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-group-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or permission-group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or permission-group-description common-lisp:null))
   (application-permissions common-lisp:nil :type
    (common-lisp:or application-permission-list common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (membership-status common-lisp:nil :type
    (common-lisp:or permission-group-membership-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'permission-group 'make-permission-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (permission-group-by-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-group-by-user-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or permission-group-name common-lisp:null))
   (membership-status common-lisp:nil :type
    (common-lisp:or permission-group-membership-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'permission-group-by-user 'make-permission-group-by-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permission-group-by-user-list ()
   '(trivial-types:proper-list permission-group-by-user))
 (common-lisp:defun |make-permission-group-by-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            permission-group-by-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-group-description () 'common-lisp:string)
(common-lisp:deftype permission-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-group-list ()
   '(trivial-types:proper-list permission-group))
 (common-lisp:defun |make-permission-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-group-membership-status () 'common-lisp:string)
(common-lisp:deftype permission-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (permission-group-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-group-params-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null))
   (dataset-permissions common-lisp:nil :type
    (common-lisp:or resource-permissions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'permission-group-params 'make-permission-group-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-permissions))
      (common-lisp:list
       (common-lisp:cons "datasetPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   common-lisp:nil))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-user-password-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-user-password-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-user-password-request
                    'make-reset-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-user-password-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-user-password-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (temporary-password common-lisp:nil :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-user-password-response
                    'make-reset-user-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporary-password))
      (common-lisp:list
       (common-lisp:cons "temporaryPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       resource-not-found-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-permission-"))
   (permission common-lisp:nil :type
    (common-lisp:or string-value-length1to250 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-permission 'make-resource-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-permissions-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-resource-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype result-limit () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3destination-format-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-s3destination-format-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-definition-"))
   (columns common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (primary-key-columns common-lisp:nil :type
    (common-lisp:or column-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-definition 'make-schema-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key-columns))
      (common-lisp:list
       (common-lisp:cons "primaryKeyColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-union (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-union-"))
   (tabular-schema-config common-lisp:nil :type
    (common-lisp:or schema-definition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema-union 'make-schema-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tabular-schema-config))
      (common-lisp:list
       (common-lisp:cons "tabularSchemaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-union))
   common-lisp:nil))
(common-lisp:deftype secret-access-key () 'common-lisp:string)
(common-lisp:deftype session-duration () 'common-lisp:integer)
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-column-list ()
   '(trivial-types:proper-list string-value-length1to255))
 (common-lisp:defun |make-sort-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-value-length1to255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-params () 'common-lisp:hash-table)
 (common-lisp:defun |make-source-params| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype string-map-key () 'common-lisp:string)
(common-lisp:deftype string-map-value () 'common-lisp:string)
(common-lisp:deftype string-value-length1to250 () 'common-lisp:string)
(common-lisp:deftype string-value-length1to255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (finspace-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype timestamp-epoch () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (update-changeset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-changeset-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (changeset-id (common-lisp:error ":changesetid is required") :type
    (common-lisp:or changeset-id common-lisp:null))
   (source-params (common-lisp:error ":sourceparams is required") :type
    (common-lisp:or source-params common-lisp:null))
   (format-params (common-lisp:error ":formatparams is required") :type
    (common-lisp:or format-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-changeset-request 'make-update-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-changeset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-changeset-response-"))
   (changeset-id common-lisp:nil :type
    (common-lisp:or changeset-id common-lisp:null))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-changeset-response
                    'make-update-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dataset-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (dataset-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or dataset-id common-lisp:null))
   (dataset-title (common-lisp:error ":datasettitle is required") :type
    (common-lisp:or dataset-title common-lisp:null))
   (kind (common-lisp:error ":kind is required") :type
    (common-lisp:or dataset-kind common-lisp:null))
   (dataset-description common-lisp:nil :type
    (common-lisp:or dataset-description common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias-string common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-union common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dataset-request 'make-update-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dataset-response-"))
   (dataset-id common-lisp:nil :type
    (common-lisp:or dataset-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dataset-response 'make-update-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-permission-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-permission-group-request-"))
   (permission-group-id (common-lisp:error ":permissiongroupid is required")
    :type (common-lisp:or permission-group-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or permission-group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or permission-group-description common-lisp:null))
   (application-permissions common-lisp:nil :type
    (common-lisp:or application-permission-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-permission-group-request
                    'make-update-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-permission-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-permission-group-response-"))
   (permission-group-id common-lisp:nil :type
    (common-lisp:or permission-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-permission-group-response
                    'make-update-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (api-access common-lisp:nil :type
    (common-lisp:or api-access common-lisp:null))
   (api-access-principal-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or user-status common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (api-access common-lisp:nil :type
    (common-lisp:or api-access common-lisp:null))
   (api-access-principal-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-enabled-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-disabled-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null))
   (last-login-time common-lisp:nil :type
    (common-lisp:or timestamp-epoch common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-enabled-time))
      (common-lisp:list
       (common-lisp:cons "lastEnabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-disabled-time))
      (common-lisp:list
       (common-lisp:cons "lastDisabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-login-time))
      (common-lisp:list
       (common-lisp:cons "lastLoginTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-by-permission-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-by-permission-group-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or user-status common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (api-access common-lisp:nil :type
    (common-lisp:or api-access common-lisp:null))
   (api-access-principal-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (membership-status common-lisp:nil :type
    (common-lisp:or permission-group-membership-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-by-permission-group 'make-user-by-permission-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-by-permission-group-list ()
   '(trivial-types:proper-list user-by-permission-group))
 (common-lisp:defun |make-user-by-permission-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-by-permission-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-status () 'common-lisp:string)
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |locationType| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to1024| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to255| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to63| () 'common-lisp:string)
(common-lisp:deftype |stringValueMaxLength1000| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-user-to-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id user-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-user-to-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "AssociateUserToPermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-user-to-permission-group))
(common-lisp:progn
 (common-lisp:defun create-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id change-type
                     source-params format-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id change-type source-params
     format-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "CreateChangeset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-changeset))
(common-lisp:progn
 (common-lisp:defun create-data-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id auto-update
                     sort-columns partition-columns as-of-timestamp
                     destination-type-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id auto-update sort-columns
     partition-columns as-of-timestamp destination-type-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-view-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "CreateDataView"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-view))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-title kind
                     dataset-description owner-info permission-group-params
                     alias schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-title kind dataset-description
     owner-info permission-group-params alias schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasetsv2"
                                                        "CreateDataset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description application-permissions
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description application-permissions
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/permission-group"
                                                        "CreatePermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-permission-group))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address type first-name last-name
                     api-access api-access-principal-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable email-address type first-name last-name api-access
     api-access-principal-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/user" "CreateUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id)
   (common-lisp:declare (common-lisp:ignorable client-token dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "DeleteDataset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "DeletePermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-permission-group))
(common-lisp:progn
 (common-lisp:defun disable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/disable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DisableUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-user))
(common-lisp:progn
 (common-lisp:defun disassociate-user-from-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id user-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-from-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DisassociateUserFromPermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-user-from-permission-group))
(common-lisp:progn
 (common-lisp:defun enable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/enable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "EnableUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-user))
(common-lisp:progn
 (common-lisp:defun get-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id changeset-id)
   (common-lisp:declare (common-lisp:ignorable dataset-id changeset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'changeset-id))))
                                                        "GetChangeset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-changeset))
(common-lisp:progn
 (common-lisp:defun get-data-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-view-id dataset-id)
   (common-lisp:declare (common-lisp:ignorable data-view-id dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-view-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-id))))
                                                        "GetDataView"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-view))
(common-lisp:progn
 (common-lisp:defun get-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id)
   (common-lisp:declare (common-lisp:ignorable dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "GetDataset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dataset))
(common-lisp:progn
 (common-lisp:defun get-external-data-view-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-view-id dataset-id)
   (common-lisp:declare (common-lisp:ignorable data-view-id dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-external-data-view-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2/~A/external-access-details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-id))))
                                                        "GetExternalDataViewAccessDetails"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-external-data-view-access-details))
(common-lisp:progn
 (common-lisp:defun get-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id)
   (common-lisp:declare (common-lisp:ignorable permission-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "GetPermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-permission-group))
(common-lisp:progn
 (common-lisp:defun get-programmatic-access-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key duration-in-minutes environment-id)
   (common-lisp:declare
    (common-lisp:ignorable duration-in-minutes environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-programmatic-access-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/credentials/programmatic"
                                                        "GetProgrammaticAccessCredentials"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-programmatic-access-credentials))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id)
   (common-lisp:declare (common-lisp:ignorable user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-working-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location-type)
   (common-lisp:declare (common-lisp:ignorable location-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-working-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/workingLocationV1"
                                                        "GetWorkingLocation"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-working-location))
(common-lisp:progn
 (common-lisp:defun list-changesets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dataset-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-changesets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "ListChangesets"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-changesets))
(common-lisp:progn
 (common-lisp:defun list-data-views
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable dataset-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-views-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "ListDataViews"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-views))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/datasetsv2"
                                                        "ListDatasets"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-permission-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permission-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/permission-group"
                                                        "ListPermissionGroups"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-permission-groups))
(common-lisp:progn
 (common-lisp:defun list-permission-groups-by-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable user-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-permission-groups-by-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/permission-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ListPermissionGroupsByUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-permission-groups-by-user))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/user" "ListUsers"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-users-by-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-users-by-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "ListUsersByPermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users-by-permission-group))
(common-lisp:progn
 (common-lisp:defun reset-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-user-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/password"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ResetUserPassword"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-user-password))
(common-lisp:progn
 (common-lisp:defun update-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id changeset-id
                     source-params format-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id changeset-id source-params
     format-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'changeset-id))))
                                                        "UpdateChangeset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-changeset))
(common-lisp:progn
 (common-lisp:defun update-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id dataset-title
                     kind dataset-description alias schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id dataset-title kind
     dataset-description alias schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "UpdateDataset"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dataset))
(common-lisp:progn
 (common-lisp:defun update-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id name description
                     application-permissions client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id name description
     application-permissions client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "UpdatePermissionGroup"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-permission-group))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id type first-name last-name
                     api-access api-access-principal-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable user-id type first-name last-name api-access
     api-access-principal-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"
                                                        "2020-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
