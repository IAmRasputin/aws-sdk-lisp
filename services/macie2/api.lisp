;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/macie2/api
  (:use)
  (:nicknames #:aws/macie2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/macie2/api)
(common-lisp:progn
 (common-lisp:defclass macie2-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "macie2" :protocol
                        :rest-json))
 (common-lisp:export 'macie2-request))
(common-lisp:progn
 (common-lisp:define-condition macie2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'macie2-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-request common-lisp:nil
                       ((master-account :initarg :|masterAccount| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %accept-invitation-request-master-account :initform
                         common-lisp:nil)
                        (invitation-id :initarg :|invitationId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %accept-invitation-request-invitation-id :initform
                         (common-lisp:error ":invitationid is required"))
                        (administrator-account-id :initarg
                         :|administratorAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %accept-invitation-request-administrator-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defun make-accept-invitation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master-account invitation-id
                     administrator-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "invitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account))
      (common-lisp:list
       (common-lisp:cons "masterAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-invitation-response
                    'make-accept-invitation-response))
 (common-lisp:defun make-accept-invitation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control-list common-lisp:nil
                       ((allows-public-write-access :initarg
                         :|allowsPublicWriteAccess| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %access-control-list-allows-public-write-access
                         :initform common-lisp:nil)
                        (allows-public-read-access :initarg
                         :|allowsPublicReadAccess| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %access-control-list-allows-public-read-access
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'access-control-list 'make-access-control-list))
 (common-lisp:defun make-access-control-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allows-public-write-access
                     allows-public-read-access)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass account-detail common-lisp:nil
                       ((email :initarg :|email| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %account-detail-email :initform
                         (common-lisp:error ":email is required"))
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %account-detail-account-id :initform
                         (common-lisp:error ":accountid is required"))))
 (common-lisp:export (common-lisp:list 'account-detail 'make-account-detail))
 (common-lisp:defun make-account-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key email account-id)
   (common-lisp:apply #'common-lisp:make-instance 'account-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-level-permissions common-lisp:nil
                       ((block-public-access :initarg :|blockPublicAccess|
                         :type
                         (common-lisp:or block-public-access common-lisp:null)
                         :accessor
                         %account-level-permissions-block-public-access
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-level-permissions
                    'make-account-level-permissions))
 (common-lisp:defun make-account-level-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block-public-access)
   (common-lisp:apply #'common-lisp:make-instance 'account-level-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "blockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-account common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or admin-status common-lisp:null)
                         :accessor %admin-account-status :initform
                         common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %admin-account-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'admin-account 'make-admin-account))
 (common-lisp:defun make-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status account-id)
   (common-lisp:apply #'common-lisp:make-instance 'admin-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-account))
   common-lisp:nil))
(common-lisp:deftype admin-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass allow-list-criteria common-lisp:nil
                       ((s3words-list :initarg :|s3WordsList| :type
                         (common-lisp:or s3words-list common-lisp:null)
                         :accessor %allow-list-criteria-s3words-list :initform
                         common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or |__stringMin1Max512PatternSS|
                                         common-lisp:null)
                         :accessor %allow-list-criteria-regex :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'allow-list-criteria 'make-allow-list-criteria))
 (common-lisp:defun make-allow-list-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3words-list regex)
   (common-lisp:apply #'common-lisp:make-instance 'allow-list-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3words-list))
      (common-lisp:list
       (common-lisp:cons "s3WordsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allow-list-status common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |__stringMin1Max1024PatternSS|
                                         common-lisp:null)
                         :accessor %allow-list-status-description :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or allow-list-status-code
                                         common-lisp:null)
                         :accessor %allow-list-status-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export
  (common-lisp:list 'allow-list-status 'make-allow-list-status))
 (common-lisp:defun make-allow-list-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description code)
   (common-lisp:apply #'common-lisp:make-instance 'allow-list-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-status))
   common-lisp:nil))
(common-lisp:deftype allow-list-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass allow-list-summary common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %allow-list-summary-updated-at :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__stringMin1Max128Pattern|
                                         common-lisp:null)
                         :accessor %allow-list-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__stringMin22Max22PatternAZ0922|
                                         common-lisp:null)
                         :accessor %allow-list-summary-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__stringMin1Max512PatternSS|
                                         common-lisp:null)
                         :accessor %allow-list-summary-description :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %allow-list-summary-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or
                          |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                          common-lisp:null)
                         :accessor %allow-list-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'allow-list-summary 'make-allow-list-summary))
 (common-lisp:defun make-allow-list-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at name id description created-at
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'allow-list-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-summary))
   common-lisp:nil))
(common-lisp:deftype allows-unencrypted-object-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass api-call-details common-lisp:nil
                       ((last-seen :initarg :|lastSeen| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %api-call-details-last-seen :initform
                         common-lisp:nil)
                        (first-seen :initarg :|firstSeen| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %api-call-details-first-seen :initform
                         common-lisp:nil)
                        (api-service-name :initarg :|apiServiceName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-call-details-api-service-name :initform
                         common-lisp:nil)
                        (api :initarg :|api| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-call-details-api :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'api-call-details 'make-api-call-details))
 (common-lisp:defun make-api-call-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-seen first-seen api-service-name
                     api)
   (common-lisp:apply #'common-lisp:make-instance 'api-call-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-call-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-call-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api))
      (common-lisp:list
       (common-lisp:cons "api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-service-name))
      (common-lisp:list
       (common-lisp:cons "apiServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "firstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "lastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-call-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assumed-role common-lisp:nil
                       ((session-context :initarg :|sessionContext| :type
                         (common-lisp:or session-context common-lisp:null)
                         :accessor %assumed-role-session-context :initform
                         common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %assumed-role-principal-id :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %assumed-role-arn :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %assumed-role-account-id :initform common-lisp:nil)
                        (access-key-id :initarg :|accessKeyId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %assumed-role-access-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'assumed-role 'make-assumed-role))
 (common-lisp:defun make-assumed-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-context principal-id arn
                     account-id access-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'assumed-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assumed-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assumed-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "sessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assumed-role))
   common-lisp:nil))
(common-lisp:deftype automated-discovery-status () 'common-lisp:string)
(common-lisp:deftype availability-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-account common-lisp:nil
                       ((principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %aws-account-principal-id :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %aws-account-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-account 'make-aws-account))
 (common-lisp:defun make-aws-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-service common-lisp:nil
                       ((invoked-by :initarg :|invokedBy| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %aws-service-invoked-by :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-service 'make-aws-service))
 (common-lisp:defun make-aws-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invoked-by)
   (common-lisp:apply #'common-lisp:make-instance 'aws-service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoked-by))
      (common-lisp:list
       (common-lisp:cons "invokedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-custom-data-identifier-summary common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-get-custom-data-identifier-summary-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-get-custom-data-identifier-summary-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-get-custom-data-identifier-summary-description
                         :initform common-lisp:nil)
                        (deleted :initarg :|deleted| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %batch-get-custom-data-identifier-summary-deleted
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %batch-get-custom-data-identifier-summary-created-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-get-custom-data-identifier-summary-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifier-summary
                    'make-batch-get-custom-data-identifier-summary))
 (common-lisp:defun make-batch-get-custom-data-identifier-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id description deleted created-at
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-custom-data-identifier-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-custom-data-identifiers-request
                       common-lisp:nil
                       ((ids :initarg :|ids| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-get-custom-data-identifiers-request-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifiers-request
                    'make-batch-get-custom-data-identifiers-request))
 (common-lisp:defun make-batch-get-custom-data-identifiers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-custom-data-identifiers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-custom-data-identifiers-response
                       common-lisp:nil
                       ((not-found-identifier-ids :initarg
                         :|notFoundIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-get-custom-data-identifiers-response-not-found-identifier-ids
                         :initform common-lisp:nil)
                        (custom-data-identifiers :initarg
                         :|customDataIdentifiers| :type
                         (common-lisp:or
                          |__listOfBatchGetCustomDataIdentifierSummary|
                          common-lisp:null)
                         :accessor
                         %batch-get-custom-data-identifiers-response-custom-data-identifiers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifiers-response
                    'make-batch-get-custom-data-identifiers-response))
 (common-lisp:defun make-batch-get-custom-data-identifiers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key not-found-identifier-ids
                     custom-data-identifiers)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-custom-data-identifiers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-found-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "notFoundIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass block-public-access common-lisp:nil
                       ((restrict-public-buckets :initarg
                         :|restrictPublicBuckets| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %block-public-access-restrict-public-buckets
                         :initform common-lisp:nil)
                        (ignore-public-acls :initarg :|ignorePublicAcls| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %block-public-access-ignore-public-acls
                         :initform common-lisp:nil)
                        (block-public-policy :initarg :|blockPublicPolicy|
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %block-public-access-block-public-policy
                         :initform common-lisp:nil)
                        (block-public-acls :initarg :|blockPublicAcls| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %block-public-access-block-public-acls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'block-public-access 'make-block-public-access))
 (common-lisp:defun make-block-public-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrict-public-buckets
                     ignore-public-acls block-public-policy block-public-acls)
   (common-lisp:apply #'common-lisp:make-instance 'block-public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "blockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "blockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "ignorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "restrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-count-by-effective-permission common-lisp:nil
                       ((unknown :initarg :|unknown| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-effective-permission-unknown
                         :initform common-lisp:nil)
                        (publicly-writable :initarg :|publiclyWritable| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-effective-permission-publicly-writable
                         :initform common-lisp:nil)
                        (publicly-readable :initarg :|publiclyReadable| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-effective-permission-publicly-readable
                         :initform common-lisp:nil)
                        (publicly-accessible :initarg :|publiclyAccessible|
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor
                         %bucket-count-by-effective-permission-publicly-accessible
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-effective-permission
                    'make-bucket-count-by-effective-permission))
 (common-lisp:defun make-bucket-count-by-effective-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unknown publicly-writable
                     publicly-readable publicly-accessible)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-count-by-effective-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-readable))
      (common-lisp:list
       (common-lisp:cons "publiclyReadable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-writable))
      (common-lisp:list
       (common-lisp:cons "publiclyWritable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-count-by-encryption-type common-lisp:nil
                       ((unknown :initarg :|unknown| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-encryption-type-unknown :initform
                         common-lisp:nil)
                        (unencrypted :initarg :|unencrypted| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-encryption-type-unencrypted :initform
                         common-lisp:nil)
                        (s3managed :initarg :|s3Managed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-encryption-type-s3managed :initform
                         common-lisp:nil)
                        (kms-managed :initarg :|kmsManaged| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-encryption-type-kms-managed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-encryption-type
                    'make-bucket-count-by-encryption-type))
 (common-lisp:defun make-bucket-count-by-encryption-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unknown unencrypted s3managed
                     kms-managed)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-count-by-encryption-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-managed))
      (common-lisp:list
       (common-lisp:cons "kmsManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3managed))
      (common-lisp:list
       (common-lisp:cons "s3Managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unencrypted))
      (common-lisp:list
       (common-lisp:cons "unencrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-count-by-shared-access-type common-lisp:nil
                       ((unknown :initarg :|unknown| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-shared-access-type-unknown :initform
                         common-lisp:nil)
                        (not-shared :initarg :|notShared| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-shared-access-type-not-shared
                         :initform common-lisp:nil)
                        (internal :initarg :|internal| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-shared-access-type-internal :initform
                         common-lisp:nil)
                        (external :initarg :|external| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-by-shared-access-type-external :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-shared-access-type
                    'make-bucket-count-by-shared-access-type))
 (common-lisp:defun make-bucket-count-by-shared-access-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unknown not-shared internal external)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-count-by-shared-access-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external))
      (common-lisp:list
       (common-lisp:cons "external"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internal))
      (common-lisp:list
       (common-lisp:cons "internal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-shared))
      (common-lisp:list
       (common-lisp:cons "notShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-count-policy-allows-unencrypted-object-uploads
                       common-lisp:nil
                       ((unknown :initarg :|unknown| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-policy-allows-unencrypted-object-uploads-unknown
                         :initform common-lisp:nil)
                        (denies-unencrypted-object-uploads :initarg
                         :|deniesUnencryptedObjectUploads| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-policy-allows-unencrypted-object-uploads-denies-unencrypted-object-uploads
                         :initform common-lisp:nil)
                        (allows-unencrypted-object-uploads :initarg
                         :|allowsUnencryptedObjectUploads| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-count-policy-allows-unencrypted-object-uploads-allows-unencrypted-object-uploads
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-policy-allows-unencrypted-object-uploads
                    'make-bucket-count-policy-allows-unencrypted-object-uploads))
 (common-lisp:defun make-bucket-count-policy-allows-unencrypted-object-uploads
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unknown denies-unencrypted-object-uploads
                     allows-unencrypted-object-uploads)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-count-policy-allows-unencrypted-object-uploads
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'denies-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "deniesUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-criteria () 'common-lisp:hash-table)
 (common-lisp:defun |make-bucket-criteria|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass bucket-criteria-additional-properties common-lisp:nil
                       ((prefix :initarg :|prefix| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-criteria-additional-properties-prefix
                         :initform common-lisp:nil)
                        (neq :initarg :|neq| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %bucket-criteria-additional-properties-neq
                         :initform common-lisp:nil)
                        (lte :initarg :|lte| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-criteria-additional-properties-lte :initform
                         common-lisp:nil)
                        (lt :initarg :|lt| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-criteria-additional-properties-lt :initform
                         common-lisp:nil)
                        (gte :initarg :|gte| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-criteria-additional-properties-gte :initform
                         common-lisp:nil)
                        (gt :initarg :|gt| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-criteria-additional-properties-gt :initform
                         common-lisp:nil)
                        (eq :initarg :|eq| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %bucket-criteria-additional-properties-eq
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-criteria-additional-properties
                    'make-bucket-criteria-additional-properties))
 (common-lisp:defun make-bucket-criteria-additional-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix neq lte lt gte gt eq)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-criteria-additional-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "gt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "lt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-level-permissions common-lisp:nil
                       ((bucket-policy :initarg :|bucketPolicy| :type
                         (common-lisp:or bucket-policy common-lisp:null)
                         :accessor %bucket-level-permissions-bucket-policy
                         :initform common-lisp:nil)
                        (block-public-access :initarg :|blockPublicAccess|
                         :type
                         (common-lisp:or block-public-access common-lisp:null)
                         :accessor
                         %bucket-level-permissions-block-public-access
                         :initform common-lisp:nil)
                        (access-control-list :initarg :|accessControlList|
                         :type
                         (common-lisp:or access-control-list common-lisp:null)
                         :accessor
                         %bucket-level-permissions-access-control-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-level-permissions 'make-bucket-level-permissions))
 (common-lisp:defun make-bucket-level-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-policy block-public-access
                     access-control-list)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-level-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "accessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "blockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-metadata common-lisp:nil
                       ((versioning :initarg :|versioning| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %bucket-metadata-versioning :initform
                         common-lisp:nil)
                        (unclassifiable-object-size-in-bytes :initarg
                         :|unclassifiableObjectSizeInBytes| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor
                         %bucket-metadata-unclassifiable-object-size-in-bytes
                         :initform common-lisp:nil)
                        (unclassifiable-object-count :initarg
                         :|unclassifiableObjectCount| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor %bucket-metadata-unclassifiable-object-count
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or |__listOfKeyValuePair|
                                         common-lisp:null)
                         :accessor %bucket-metadata-tags :initform
                         common-lisp:nil)
                        (size-in-bytes-compressed :initarg
                         :|sizeInBytesCompressed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-metadata-size-in-bytes-compressed :initform
                         common-lisp:nil)
                        (size-in-bytes :initarg :|sizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-metadata-size-in-bytes :initform
                         common-lisp:nil)
                        (shared-access :initarg :|sharedAccess| :type
                         (common-lisp:or shared-access common-lisp:null)
                         :accessor %bucket-metadata-shared-access :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :|serverSideEncryption| :type
                         (common-lisp:or bucket-server-side-encryption
                                         common-lisp:null)
                         :accessor %bucket-metadata-server-side-encryption
                         :initform common-lisp:nil)
                        (sensitivity-score :initarg :|sensitivityScore| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %bucket-metadata-sensitivity-score :initform
                         common-lisp:nil)
                        (replication-details :initarg :|replicationDetails|
                         :type
                         (common-lisp:or replication-details common-lisp:null)
                         :accessor %bucket-metadata-replication-details
                         :initform common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-metadata-region :initform common-lisp:nil)
                        (public-access :initarg :|publicAccess| :type
                         (common-lisp:or bucket-public-access common-lisp:null)
                         :accessor %bucket-metadata-public-access :initform
                         common-lisp:nil)
                        (object-count-by-encryption-type :initarg
                         :|objectCountByEncryptionType| :type
                         (common-lisp:or object-count-by-encryption-type
                                         common-lisp:null)
                         :accessor
                         %bucket-metadata-object-count-by-encryption-type
                         :initform common-lisp:nil)
                        (object-count :initarg :|objectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-metadata-object-count :initform
                         common-lisp:nil)
                        (last-updated :initarg :|lastUpdated| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %bucket-metadata-last-updated :initform
                         common-lisp:nil)
                        (last-automated-discovery-time :initarg
                         :|lastAutomatedDiscoveryTime| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %bucket-metadata-last-automated-discovery-time
                         :initform common-lisp:nil)
                        (job-details :initarg :|jobDetails| :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor %bucket-metadata-job-details :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-metadata-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or bucket-metadata-error-code
                                         common-lisp:null)
                         :accessor %bucket-metadata-error-code :initform
                         common-lisp:nil)
                        (classifiable-size-in-bytes :initarg
                         :|classifiableSizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-metadata-classifiable-size-in-bytes :initform
                         common-lisp:nil)
                        (classifiable-object-count :initarg
                         :|classifiableObjectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %bucket-metadata-classifiable-object-count :initform
                         common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-metadata-bucket-name :initform
                         common-lisp:nil)
                        (bucket-created-at :initarg :|bucketCreatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %bucket-metadata-bucket-created-at :initform
                         common-lisp:nil)
                        (bucket-arn :initarg :|bucketArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-metadata-bucket-arn :initform common-lisp:nil)
                        (allows-unencrypted-object-uploads :initarg
                         :|allowsUnencryptedObjectUploads| :type
                         (common-lisp:or allows-unencrypted-object-uploads
                                         common-lisp:null)
                         :accessor
                         %bucket-metadata-allows-unencrypted-object-uploads
                         :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-metadata-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bucket-metadata 'make-bucket-metadata))
 (common-lisp:defun make-bucket-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key versioning
                     unclassifiable-object-size-in-bytes
                     unclassifiable-object-count tags size-in-bytes-compressed
                     size-in-bytes shared-access server-side-encryption
                     sensitivity-score replication-details region public-access
                     object-count-by-encryption-type object-count last-updated
                     last-automated-discovery-time job-details error-message
                     error-code classifiable-size-in-bytes
                     classifiable-object-count bucket-name bucket-created-at
                     bucket-arn allows-unencrypted-object-uploads account-id)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-created-at))
      (common-lisp:list
       (common-lisp:cons "bucketCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-automated-discovery-time))
      (common-lisp:list
       (common-lisp:cons "lastAutomatedDiscoveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "objectCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-details))
      (common-lisp:list
       (common-lisp:cons "replicationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-access))
      (common-lisp:list
       (common-lisp:cons "sharedAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioning))
      (common-lisp:list
       (common-lisp:cons "versioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-metadata))
   common-lisp:nil))
(common-lisp:deftype bucket-metadata-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-permission-configuration common-lisp:nil
                       ((bucket-level-permissions :initarg
                         :|bucketLevelPermissions| :type
                         (common-lisp:or bucket-level-permissions
                                         common-lisp:null)
                         :accessor
                         %bucket-permission-configuration-bucket-level-permissions
                         :initform common-lisp:nil)
                        (account-level-permissions :initarg
                         :|accountLevelPermissions| :type
                         (common-lisp:or account-level-permissions
                                         common-lisp:null)
                         :accessor
                         %bucket-permission-configuration-account-level-permissions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-permission-configuration
                    'make-bucket-permission-configuration))
 (common-lisp:defun make-bucket-permission-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-level-permissions
                     account-level-permissions)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-permission-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-level-permissions))
      (common-lisp:list
       (common-lisp:cons "accountLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-level-permissions))
      (common-lisp:list
       (common-lisp:cons "bucketLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-policy common-lisp:nil
                       ((allows-public-write-access :initarg
                         :|allowsPublicWriteAccess| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %bucket-policy-allows-public-write-access
                         :initform common-lisp:nil)
                        (allows-public-read-access :initarg
                         :|allowsPublicReadAccess| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %bucket-policy-allows-public-read-access
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bucket-policy 'make-bucket-policy))
 (common-lisp:defun make-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allows-public-write-access
                     allows-public-read-access)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-public-access common-lisp:nil
                       ((permission-configuration :initarg
                         :|permissionConfiguration| :type
                         (common-lisp:or bucket-permission-configuration
                                         common-lisp:null)
                         :accessor
                         %bucket-public-access-permission-configuration
                         :initform common-lisp:nil)
                        (effective-permission :initarg :|effectivePermission|
                         :type
                         (common-lisp:or effective-permission common-lisp:null)
                         :accessor %bucket-public-access-effective-permission
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-public-access 'make-bucket-public-access))
 (common-lisp:defun make-bucket-public-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permission-configuration
                     effective-permission)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'effective-permission))
      (common-lisp:list
       (common-lisp:cons "effectivePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permission-configuration))
      (common-lisp:list
       (common-lisp:cons "permissionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-server-side-encryption common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %bucket-server-side-encryption-type :initform
                         common-lisp:nil)
                        (kms-master-key-id :initarg :|kmsMasterKeyId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-server-side-encryption-kms-master-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-server-side-encryption
                    'make-bucket-server-side-encryption))
 (common-lisp:defun make-bucket-server-side-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type kms-master-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-server-side-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %bucket-sort-criteria-order-by :initform
                         common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bucket-sort-criteria-attribute-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-sort-criteria 'make-bucket-sort-criteria))
 (common-lisp:defun make-bucket-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-statistics-by-sensitivity common-lisp:nil
                       ((sensitive :initarg :|sensitive| :type
                         (common-lisp:or sensitivity-aggregations
                                         common-lisp:null)
                         :accessor %bucket-statistics-by-sensitivity-sensitive
                         :initform common-lisp:nil)
                        (not-sensitive :initarg :|notSensitive| :type
                         (common-lisp:or sensitivity-aggregations
                                         common-lisp:null)
                         :accessor
                         %bucket-statistics-by-sensitivity-not-sensitive
                         :initform common-lisp:nil)
                        (not-classified :initarg :|notClassified| :type
                         (common-lisp:or sensitivity-aggregations
                                         common-lisp:null)
                         :accessor
                         %bucket-statistics-by-sensitivity-not-classified
                         :initform common-lisp:nil)
                        (classification-error :initarg :|classificationError|
                         :type
                         (common-lisp:or sensitivity-aggregations
                                         common-lisp:null)
                         :accessor
                         %bucket-statistics-by-sensitivity-classification-error
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-statistics-by-sensitivity
                    'make-bucket-statistics-by-sensitivity))
 (common-lisp:defun make-bucket-statistics-by-sensitivity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sensitive not-sensitive not-classified
                     classification-error)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-statistics-by-sensitivity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-error))
      (common-lisp:list
       (common-lisp:cons "classificationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-classified))
      (common-lisp:list
       (common-lisp:cons "notClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-sensitive))
      (common-lisp:list
       (common-lisp:cons "notSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive))
      (common-lisp:list
       (common-lisp:cons "sensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cell common-lisp:nil
                       ((row :initarg :|row| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %cell-row :initform common-lisp:nil)
                        (column-name :initarg :|columnName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cell-column-name :initform common-lisp:nil)
                        (column :initarg :|column| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %cell-column :initform common-lisp:nil)
                        (cell-reference :initarg :|cellReference| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cell-cell-reference :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cell 'make-cell))
 (common-lisp:defun make-cell
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row column-name column cell-reference)
   (common-lisp:apply #'common-lisp:make-instance 'cell
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-reference))
      (common-lisp:list
       (common-lisp:cons "cellReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cells () '(trivial-types:proper-list cell))
 (common-lisp:defun |make-cells|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cell))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass classification-details common-lisp:nil
                       ((result :initarg :|result| :type
                         (common-lisp:or classification-result
                                         common-lisp:null)
                         :accessor %classification-details-result :initform
                         common-lisp:nil)
                        (origin-type :initarg :|originType| :type
                         (common-lisp:or origin-type common-lisp:null)
                         :accessor %classification-details-origin-type
                         :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-details-job-id :initform
                         common-lisp:nil)
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-details-job-arn :initform
                         common-lisp:nil)
                        (detailed-results-location :initarg
                         :|detailedResultsLocation| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-details-detailed-results-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-details 'make-classification-details))
 (common-lisp:defun make-classification-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result origin-type job-id job-arn
                     detailed-results-location)
   (common-lisp:apply #'common-lisp:make-instance 'classification-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-results-location))
      (common-lisp:list
       (common-lisp:cons "detailedResultsLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-type))
      (common-lisp:list
       (common-lisp:cons "originType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass classification-export-configuration common-lisp:nil
                       ((s3destination :initarg :|s3Destination| :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor
                         %classification-export-configuration-s3destination
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-export-configuration
                    'make-classification-export-configuration))
 (common-lisp:defun make-classification-export-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3destination)
   (common-lisp:apply #'common-lisp:make-instance
                      'classification-export-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass classification-result common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or classification-result-status
                                         common-lisp:null)
                         :accessor %classification-result-status :initform
                         common-lisp:nil)
                        (size-classified :initarg :|sizeClassified| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %classification-result-size-classified :initform
                         common-lisp:nil)
                        (sensitive-data :initarg :|sensitiveData| :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor %classification-result-sensitive-data
                         :initform common-lisp:nil)
                        (mime-type :initarg :|mimeType| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-result-mime-type :initform
                         common-lisp:nil)
                        (custom-data-identifiers :initarg
                         :|customDataIdentifiers| :type
                         (common-lisp:or custom-data-identifiers
                                         common-lisp:null)
                         :accessor
                         %classification-result-custom-data-identifiers
                         :initform common-lisp:nil)
                        (additional-occurrences :initarg
                         :|additionalOccurrences| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %classification-result-additional-occurrences
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-result 'make-classification-result))
 (common-lisp:defun make-classification-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status size-classified sensitive-data
                     mime-type custom-data-identifiers additional-occurrences)
   (common-lisp:apply #'common-lisp:make-instance 'classification-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-occurrences))
      (common-lisp:list
       (common-lisp:cons "additionalOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mime-type))
      (common-lisp:list
       (common-lisp:cons "mimeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive-data))
      (common-lisp:list
       (common-lisp:cons "sensitiveData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-classified))
      (common-lisp:list
       (common-lisp:cons "sizeClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass classification-result-status common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-result-status-reason :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %classification-result-status-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-result-status
                    'make-classification-result-status))
 (common-lisp:defun make-classification-result-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason code)
   (common-lisp:apply #'common-lisp:make-instance 'classification-result-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   common-lisp:nil))
(common-lisp:deftype classification-scope-id () 'common-lisp:string)
(common-lisp:deftype classification-scope-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass classification-scope-summary common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or classification-scope-name
                                         common-lisp:null)
                         :accessor %classification-scope-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or classification-scope-id
                                         common-lisp:null)
                         :accessor %classification-scope-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-scope-summary
                    'make-classification-scope-summary))
 (common-lisp:defun make-classification-scope-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'classification-scope-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   common-lisp:nil))
(common-lisp:deftype classification-scope-update-operation ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-allow-list-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-allow-list-request-tags :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__stringMin1Max128Pattern|
                                         common-lisp:null)
                         :accessor %create-allow-list-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |__stringMin1Max512PatternSS|
                                         common-lisp:null)
                         :accessor %create-allow-list-request-description
                         :initform common-lisp:nil)
                        (criteria :initarg :|criteria| :type
                         (common-lisp:or allow-list-criteria common-lisp:null)
                         :accessor %create-allow-list-request-criteria
                         :initform (common-lisp:error ":criteria is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-allow-list-request-client-token :initform
                         (common-lisp:error ":clienttoken is required"))))
 (common-lisp:export
  (common-lisp:list 'create-allow-list-request
                    'make-create-allow-list-request))
 (common-lisp:defun make-create-allow-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name description criteria
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-allow-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-allow-list-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__stringMin22Max22PatternAZ0922|
                                         common-lisp:null)
                         :accessor %create-allow-list-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or
                          |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                          common-lisp:null)
                         :accessor %create-allow-list-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-allow-list-response
                    'make-create-allow-list-response))
 (common-lisp:defun make-create-allow-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-allow-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-classification-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-classification-job-request-tags :initform
                         common-lisp:nil)
                        (schedule-frequency :initarg :|scheduleFrequency| :type
                         (common-lisp:or job-schedule-frequency
                                         common-lisp:null)
                         :accessor
                         %create-classification-job-request-schedule-frequency
                         :initform common-lisp:nil)
                        (sampling-percentage :initarg :|samplingPercentage|
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %create-classification-job-request-sampling-percentage
                         :initform common-lisp:nil)
                        (s3job-definition :initarg :|s3JobDefinition| :type
                         (common-lisp:or s3job-definition common-lisp:null)
                         :accessor
                         %create-classification-job-request-s3job-definition
                         :initform
                         (common-lisp:error ":s3jobdefinition is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-classification-job-request-name :initform
                         (common-lisp:error ":name is required"))
                        (managed-data-identifier-selector :initarg
                         :|managedDataIdentifierSelector| :type
                         (common-lisp:or managed-data-identifier-selector
                                         common-lisp:null)
                         :accessor
                         %create-classification-job-request-managed-data-identifier-selector
                         :initform common-lisp:nil)
                        (managed-data-identifier-ids :initarg
                         :|managedDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-classification-job-request-managed-data-identifier-ids
                         :initform common-lisp:nil)
                        (job-type :initarg :|jobType| :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %create-classification-job-request-job-type :initform
                         (common-lisp:error ":jobtype is required"))
                        (initial-run :initarg :|initialRun| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %create-classification-job-request-initial-run
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-classification-job-request-description
                         :initform common-lisp:nil)
                        (custom-data-identifier-ids :initarg
                         :|customDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-classification-job-request-custom-data-identifier-ids
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-classification-job-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (allow-list-ids :initarg :|allowListIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-classification-job-request-allow-list-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-classification-job-request
                    'make-create-classification-job-request))
 (common-lisp:defun make-create-classification-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags schedule-frequency
                     sampling-percentage s3job-definition name
                     managed-data-identifier-selector
                     managed-data-identifier-ids job-type initial-run
                     description custom-data-identifier-ids client-token
                     allow-list-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-classification-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-run))
      (common-lisp:list
       (common-lisp:cons "initialRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-selector))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3job-definition))
      (common-lisp:list
       (common-lisp:cons "s3JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "samplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-frequency))
      (common-lisp:list
       (common-lisp:cons "scheduleFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-classification-job-response common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-classification-job-response-job-id :initform
                         common-lisp:nil)
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-classification-job-response-job-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-classification-job-response
                    'make-create-classification-job-response))
 (common-lisp:defun make-create-classification-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id job-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-classification-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-data-identifier-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-custom-data-identifier-request-tags :initform
                         common-lisp:nil)
                        (severity-levels :initarg :|severityLevels| :type
                         (common-lisp:or severity-level-list common-lisp:null)
                         :accessor
                         %create-custom-data-identifier-request-severity-levels
                         :initform common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-custom-data-identifier-request-regex :initform
                         (common-lisp:error ":regex is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-custom-data-identifier-request-name :initform
                         (common-lisp:error ":name is required"))
                        (maximum-match-distance :initarg
                         :|maximumMatchDistance| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %create-custom-data-identifier-request-maximum-match-distance
                         :initform common-lisp:nil)
                        (keywords :initarg :|keywords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-custom-data-identifier-request-keywords
                         :initform common-lisp:nil)
                        (ignore-words :initarg :|ignoreWords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-custom-data-identifier-request-ignore-words
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-custom-data-identifier-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-custom-data-identifier-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-custom-data-identifier-request
                    'make-create-custom-data-identifier-request))
 (common-lisp:defun make-create-custom-data-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags severity-levels regex name
                     maximum-match-distance keywords ignore-words description
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-data-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-levels))
      (common-lisp:list
       (common-lisp:cons "severityLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-data-identifier-response common-lisp:nil
                       ((custom-data-identifier-id :initarg
                         :|customDataIdentifierId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-custom-data-identifier-response-custom-data-identifier-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-custom-data-identifier-response
                    'make-create-custom-data-identifier-response))
 (common-lisp:defun make-create-custom-data-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-data-identifier-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-data-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-id))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-findings-filter-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-findings-filter-request-tags :initform
                         common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %create-findings-filter-request-position
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-findings-filter-request-name :initform
                         (common-lisp:error ":name is required"))
                        (finding-criteria :initarg :|findingCriteria| :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         %create-findings-filter-request-finding-criteria
                         :initform
                         (common-lisp:error ":findingcriteria is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-findings-filter-request-description :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-findings-filter-request-client-token :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or findings-filter-action
                                         common-lisp:null)
                         :accessor %create-findings-filter-request-action
                         :initform (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'create-findings-filter-request
                    'make-create-findings-filter-request))
 (common-lisp:defun make-create-findings-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags position name finding-criteria
                     description client-token action)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-findings-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-findings-filter-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-findings-filter-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-findings-filter-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-findings-filter-response
                    'make-create-findings-filter-response))
 (common-lisp:defun make-create-findings-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-findings-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-invitations-request common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-invitations-request-message :initform
                         common-lisp:nil)
                        (disable-email-notification :initarg
                         :|disableEmailNotification| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %create-invitations-request-disable-email-notification
                         :initform common-lisp:nil)
                        (account-ids :initarg :|accountIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-invitations-request-account-ids
                         :initform
                         (common-lisp:error ":accountids is required"))))
 (common-lisp:export
  (common-lisp:list 'create-invitations-request
                    'make-create-invitations-request))
 (common-lisp:defun make-create-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message disable-email-notification
                     account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'create-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-email-notification))
      (common-lisp:list
       (common-lisp:cons "disableEmailNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :|unprocessedAccounts|
                         :type
                         (common-lisp:or |__listOfUnprocessedAccount|
                                         common-lisp:null)
                         :accessor
                         %create-invitations-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-invitations-response
                    'make-create-invitations-response))
 (common-lisp:defun make-create-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'create-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-member-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-member-request-tags :initform common-lisp:nil)
                        (account :initarg :|account| :type
                         (common-lisp:or account-detail common-lisp:null)
                         :accessor %create-member-request-account :initform
                         (common-lisp:error ":account is required"))))
 (common-lisp:export
  (common-lisp:list 'create-member-request 'make-create-member-request))
 (common-lisp:defun make-create-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags account)
   (common-lisp:apply #'common-lisp:make-instance 'create-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-member-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-member-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-member-response 'make-create-member-response))
 (common-lisp:defun make-create-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sample-findings-request common-lisp:nil
                       ((finding-types :initarg :|findingTypes| :type
                         (common-lisp:or |__listOfFindingType|
                                         common-lisp:null)
                         :accessor
                         %create-sample-findings-request-finding-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-request
                    'make-create-sample-findings-request))
 (common-lisp:defun make-create-sample-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sample-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-types))
      (common-lisp:list
       (common-lisp:cons "findingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sample-findings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-response
                    'make-create-sample-findings-response))
 (common-lisp:defun make-create-sample-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sample-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass criteria-block-for-job common-lisp:nil
                       ((and :initarg :|and| :type
                         (common-lisp:or |__listOfCriteriaForJob|
                                         common-lisp:null)
                         :accessor %criteria-block-for-job-and :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'criteria-block-for-job 'make-criteria-block-for-job))
 (common-lisp:defun make-criteria-block-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and)
   (common-lisp:apply #'common-lisp:make-instance 'criteria-block-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass criteria-for-job common-lisp:nil
                       ((tag-criterion :initarg :|tagCriterion| :type
                         (common-lisp:or tag-criterion-for-job
                                         common-lisp:null)
                         :accessor %criteria-for-job-tag-criterion :initform
                         common-lisp:nil)
                        (simple-criterion :initarg :|simpleCriterion| :type
                         (common-lisp:or simple-criterion-for-job
                                         common-lisp:null)
                         :accessor %criteria-for-job-simple-criterion :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'criteria-for-job 'make-criteria-for-job))
 (common-lisp:defun make-criteria-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-criterion simple-criterion)
   (common-lisp:apply #'common-lisp:make-instance 'criteria-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input criteria-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input criteria-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-criterion))
      (common-lisp:list
       (common-lisp:cons "simpleCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-criterion))
      (common-lisp:list
       (common-lisp:cons "tagCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input criteria-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype criterion () 'common-lisp:hash-table)
 (common-lisp:defun |make-criterion| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass criterion-additional-properties common-lisp:nil
                       ((neq :initarg :|neq| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %criterion-additional-properties-neq
                         :initform common-lisp:nil)
                        (lte :initarg :|lte| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %criterion-additional-properties-lte :initform
                         common-lisp:nil)
                        (lt :initarg :|lt| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %criterion-additional-properties-lt :initform
                         common-lisp:nil)
                        (gte :initarg :|gte| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %criterion-additional-properties-gte :initform
                         common-lisp:nil)
                        (gt :initarg :|gt| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %criterion-additional-properties-gt :initform
                         common-lisp:nil)
                        (eq-exact-match :initarg :|eqExactMatch| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %criterion-additional-properties-eq-exact-match
                         :initform common-lisp:nil)
                        (eq :initarg :|eq| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %criterion-additional-properties-eq
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'criterion-additional-properties
                    'make-criterion-additional-properties))
 (common-lisp:defun make-criterion-additional-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key neq lte lt gte gt eq-exact-match eq)
   (common-lisp:apply #'common-lisp:make-instance
                      'criterion-additional-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq-exact-match))
      (common-lisp:list
       (common-lisp:cons "eqExactMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "gt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "lt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   common-lisp:nil))
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-data-identifier-summary common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-data-identifier-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-data-identifier-summary-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-data-identifier-summary-description :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %custom-data-identifier-summary-created-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-data-identifier-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifier-summary
                    'make-custom-data-identifier-summary))
 (common-lisp:defun make-custom-data-identifier-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id description created-at arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-data-identifier-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-data-identifiers common-lisp:nil
                       ((total-count :initarg :|totalCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %custom-data-identifiers-total-count :initform
                         common-lisp:nil)
                        (detections :initarg :|detections| :type
                         (common-lisp:or custom-detections common-lisp:null)
                         :accessor %custom-data-identifiers-detections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers 'make-custom-data-identifiers))
 (common-lisp:defun make-custom-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-count detections)
   (common-lisp:apply #'common-lisp:make-instance 'custom-data-identifiers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-detection common-lisp:nil
                       ((occurrences :initarg :|occurrences| :type
                         (common-lisp:or occurrences common-lisp:null)
                         :accessor %custom-detection-occurrences :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-detection-name :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %custom-detection-count :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %custom-detection-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-detection 'make-custom-detection))
 (common-lisp:defun make-custom-detection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key occurrences name count arn)
   (common-lisp:apply #'common-lisp:make-instance 'custom-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-detections ()
   '(trivial-types:proper-list custom-detection))
 (common-lisp:defun |make-custom-detections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass daily-schedule common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'daily-schedule 'make-daily-schedule))
 (common-lisp:defun make-daily-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'daily-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input daily-schedule))
   common-lisp:nil))
(common-lisp:deftype data-identifier-severity () 'common-lisp:string)
(common-lisp:deftype data-identifier-type () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decline-invitations-request common-lisp:nil
                       ((account-ids :initarg :|accountIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %decline-invitations-request-account-ids
                         :initform
                         (common-lisp:error ":accountids is required"))))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-request
                    'make-decline-invitations-request))
 (common-lisp:defun make-decline-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :|unprocessedAccounts|
                         :type
                         (common-lisp:or |__listOfUnprocessedAccount|
                                         common-lisp:null)
                         :accessor
                         %decline-invitations-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-response
                    'make-decline-invitations-response))
 (common-lisp:defun make-decline-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-detection common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %default-detection-type :initform common-lisp:nil)
                        (occurrences :initarg :|occurrences| :type
                         (common-lisp:or occurrences common-lisp:null)
                         :accessor %default-detection-occurrences :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %default-detection-count :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-detection 'make-default-detection))
 (common-lisp:defun make-default-detection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type occurrences count)
   (common-lisp:apply #'common-lisp:make-instance 'default-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype default-detections ()
   '(trivial-types:proper-list default-detection))
 (common-lisp:defun |make-default-detections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list default-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-allow-list-request common-lisp:nil
                       ((ignore-job-checks :initarg :|ignoreJobChecks| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-allow-list-request-ignore-job-checks :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-allow-list-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-allow-list-request
                    'make-delete-allow-list-request))
 (common-lisp:defun make-delete-allow-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ignore-job-checks id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-allow-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-allow-list-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-allow-list-response
                    'make-delete-allow-list-response))
 (common-lisp:defun make-delete-allow-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-allow-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-data-identifier-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-custom-data-identifier-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-custom-data-identifier-request
                    'make-delete-custom-data-identifier-request))
 (common-lisp:defun make-delete-custom-data-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-data-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-data-identifier-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-custom-data-identifier-response
                    'make-delete-custom-data-identifier-response))
 (common-lisp:defun make-delete-custom-data-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-data-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-findings-filter-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-findings-filter-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-findings-filter-request
                    'make-delete-findings-filter-request))
 (common-lisp:defun make-delete-findings-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-findings-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-findings-filter-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-findings-filter-response
                    'make-delete-findings-filter-response))
 (common-lisp:defun make-delete-findings-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-findings-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-request common-lisp:nil
                       ((account-ids :initarg :|accountIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %delete-invitations-request-account-ids
                         :initform
                         (common-lisp:error ":accountids is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-request
                    'make-delete-invitations-request))
 (common-lisp:defun make-delete-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :|unprocessedAccounts|
                         :type
                         (common-lisp:or |__listOfUnprocessedAccount|
                                         common-lisp:null)
                         :accessor
                         %delete-invitations-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-response
                    'make-delete-invitations-response))
 (common-lisp:defun make-delete-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-member-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-member-request 'make-delete-member-request))
 (common-lisp:defun make-delete-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-member-response 'make-delete-member-response))
 (common-lisp:defun make-delete-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-buckets-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or bucket-sort-criteria common-lisp:null)
                         :accessor %describe-buckets-request-sort-criteria
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-buckets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-buckets-request-max-results
                         :initform common-lisp:nil)
                        (criteria :initarg :|criteria| :type
                         (common-lisp:or bucket-criteria common-lisp:null)
                         :accessor %describe-buckets-request-criteria :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-buckets-request 'make-describe-buckets-request))
 (common-lisp:defun make-describe-buckets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria next-token max-results
                     criteria)
   (common-lisp:apply #'common-lisp:make-instance 'describe-buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-buckets-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-buckets-response-next-token :initform
                         common-lisp:nil)
                        (buckets :initarg :|buckets| :type
                         (common-lisp:or |__listOfBucketMetadata|
                                         common-lisp:null)
                         :accessor %describe-buckets-response-buckets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-buckets-response
                    'make-describe-buckets-response))
 (common-lisp:defun make-describe-buckets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token buckets)
   (common-lisp:apply #'common-lisp:make-instance 'describe-buckets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-classification-job-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-request-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-classification-job-request
                    'make-describe-classification-job-request))
 (common-lisp:defun make-describe-classification-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-classification-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-classification-job-response common-lisp:nil
                       ((user-paused-details :initarg :|userPausedDetails|
                         :type
                         (common-lisp:or user-paused-details common-lisp:null)
                         :accessor
                         %describe-classification-job-response-user-paused-details
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-classification-job-response-tags :initform
                         common-lisp:nil)
                        (statistics :initarg :|statistics| :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         %describe-classification-job-response-statistics
                         :initform common-lisp:nil)
                        (schedule-frequency :initarg :|scheduleFrequency| :type
                         (common-lisp:or job-schedule-frequency
                                         common-lisp:null)
                         :accessor
                         %describe-classification-job-response-schedule-frequency
                         :initform common-lisp:nil)
                        (sampling-percentage :initarg :|samplingPercentage|
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-sampling-percentage
                         :initform common-lisp:nil)
                        (s3job-definition :initarg :|s3JobDefinition| :type
                         (common-lisp:or s3job-definition common-lisp:null)
                         :accessor
                         %describe-classification-job-response-s3job-definition
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-response-name :initform
                         common-lisp:nil)
                        (managed-data-identifier-selector :initarg
                         :|managedDataIdentifierSelector| :type
                         (common-lisp:or managed-data-identifier-selector
                                         common-lisp:null)
                         :accessor
                         %describe-classification-job-response-managed-data-identifier-selector
                         :initform common-lisp:nil)
                        (managed-data-identifier-ids :initarg
                         :|managedDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-managed-data-identifier-ids
                         :initform common-lisp:nil)
                        (last-run-time :initarg :|lastRunTime| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-last-run-time
                         :initform common-lisp:nil)
                        (last-run-error-status :initarg :|lastRunErrorStatus|
                         :type
                         (common-lisp:or last-run-error-status
                                         common-lisp:null)
                         :accessor
                         %describe-classification-job-response-last-run-error-status
                         :initform common-lisp:nil)
                        (job-type :initarg :|jobType| :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %describe-classification-job-response-job-type
                         :initform common-lisp:nil)
                        (job-status :initarg :|jobStatus| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %describe-classification-job-response-job-status
                         :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-response-job-id :initform
                         common-lisp:nil)
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-response-job-arn
                         :initform common-lisp:nil)
                        (initial-run :initarg :|initialRun| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-initial-run
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-response-description
                         :initform common-lisp:nil)
                        (custom-data-identifier-ids :initarg
                         :|customDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-custom-data-identifier-ids
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-created-at
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-classification-job-response-client-token
                         :initform common-lisp:nil)
                        (allow-list-ids :initarg :|allowListIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-classification-job-response-allow-list-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-classification-job-response
                    'make-describe-classification-job-response))
 (common-lisp:defun make-describe-classification-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-paused-details tags statistics
                     schedule-frequency sampling-percentage s3job-definition
                     name managed-data-identifier-selector
                     managed-data-identifier-ids last-run-time
                     last-run-error-status job-type job-status job-id job-arn
                     initial-run description custom-data-identifier-ids
                     created-at client-token allow-list-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-classification-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-run))
      (common-lisp:list
       (common-lisp:cons "initialRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-status))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "lastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-selector))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3job-definition))
      (common-lisp:list
       (common-lisp:cons "s3JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "samplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-frequency))
      (common-lisp:list
       (common-lisp:cons "scheduleFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-paused-details))
      (common-lisp:list
       (common-lisp:cons "userPausedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defun make-describe-organization-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-response
                       common-lisp:nil
                       ((max-account-limit-reached :initarg
                         :|maxAccountLimitReached| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %describe-organization-configuration-response-max-account-limit-reached
                         :initform common-lisp:nil)
                        (auto-enable :initarg :|autoEnable| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %describe-organization-configuration-response-auto-enable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defun make-describe-organization-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-account-limit-reached auto-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "maxAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-data-details common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__stringMin1Max128| common-lisp:null)
                         :accessor %detected-data-details-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'detected-data-details 'make-detected-data-details))
 (common-lisp:defun make-detected-data-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'detected-data-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detection common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or data-identifier-type common-lisp:null)
                         :accessor %detection-type :initform common-lisp:nil)
                        (suppressed :initarg :|suppressed| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %detection-suppressed :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %detection-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %detection-id :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %detection-count :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %detection-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'detection 'make-detection))
 (common-lisp:defun make-detection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type suppressed name id count arn)
   (common-lisp:apply #'common-lisp:make-instance 'detection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressed))
      (common-lisp:list
       (common-lisp:cons "suppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-macie-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-macie-request 'make-disable-macie-request))
 (common-lisp:defun make-disable-macie-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-macie-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-macie-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-macie-response 'make-disable-macie-response))
 (common-lisp:defun make-disable-macie-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-macie-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :|adminAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %disable-organization-admin-account-request-admin-account-id
                         :initform
                         (common-lisp:error ":adminaccountid is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-request
                    'make-disable-organization-admin-account-request))
 (common-lisp:defun make-disable-organization-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-response
                    'make-disable-organization-admin-account-response))
 (common-lisp:defun make-disable-organization-admin-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-request
                    'make-disassociate-from-administrator-account-request))
 (common-lisp:defun make-disassociate-from-administrator-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-response
                    'make-disassociate-from-administrator-account-response))
 (common-lisp:defun make-disassociate-from-administrator-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-request
                    'make-disassociate-from-master-account-request))
 (common-lisp:defun make-disassociate-from-master-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-response
                    'make-disassociate-from-master-account-response))
 (common-lisp:defun make-disassociate-from-master-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-member-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %disassociate-member-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-request
                    'make-disassociate-member-request))
 (common-lisp:defun make-disassociate-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-member-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-member-response
                    'make-disassociate-member-response))
 (common-lisp:defun make-disassociate-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-details common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %domain-details-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-details 'make-domain-details))
 (common-lisp:defun make-domain-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-details))
   common-lisp:nil))
(common-lisp:deftype effective-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass empty common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'empty 'make-empty))
 (common-lisp:defun make-empty
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'empty
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-macie-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or macie-status common-lisp:null)
                         :accessor %enable-macie-request-status :initform
                         common-lisp:nil)
                        (finding-publishing-frequency :initarg
                         :|findingPublishingFrequency| :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         %enable-macie-request-finding-publishing-frequency
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %enable-macie-request-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-macie-request 'make-enable-macie-request))
 (common-lisp:defun make-enable-macie-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status finding-publishing-frequency
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'enable-macie-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-macie-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-macie-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-macie-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-macie-response 'make-enable-macie-response))
 (common-lisp:defun make-enable-macie-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-macie-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-request
                       common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %enable-organization-admin-account-request-client-token
                         :initform common-lisp:nil)
                        (admin-account-id :initarg :|adminAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %enable-organization-admin-account-request-admin-account-id
                         :initform
                         (common-lisp:error ":adminaccountid is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defun make-enable-organization-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token admin-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-response
                    'make-enable-organization-admin-account-response))
 (common-lisp:defun make-enable-organization-admin-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass federated-user common-lisp:nil
                       ((session-context :initarg :|sessionContext| :type
                         (common-lisp:or session-context common-lisp:null)
                         :accessor %federated-user-session-context :initform
                         common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %federated-user-principal-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %federated-user-arn :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %federated-user-account-id :initform common-lisp:nil)
                        (access-key-id :initarg :|accessKeyId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %federated-user-access-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'federated-user 'make-federated-user))
 (common-lisp:defun make-federated-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-context principal-id arn
                     account-id access-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'federated-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "sessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %finding-updated-at :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or finding-type common-lisp:null)
                         :accessor %finding-type :initform common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-title :initform common-lisp:nil)
                        (severity :initarg :|severity| :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         %finding-severity :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-schema-version :initform common-lisp:nil)
                        (sample :initarg :|sample| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %finding-sample :initform common-lisp:nil)
                        (resources-affected :initarg :|resourcesAffected| :type
                         (common-lisp:or resources-affected common-lisp:null)
                         :accessor %finding-resources-affected :initform
                         common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-region :initform common-lisp:nil)
                        (policy-details :initarg :|policyDetails| :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor %finding-policy-details :initform
                         common-lisp:nil)
                        (partition :initarg :|partition| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-partition :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-id :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-description :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %finding-created-at :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %finding-count :initform common-lisp:nil)
                        (classification-details :initarg
                         :|classificationDetails| :type
                         (common-lisp:or classification-details
                                         common-lisp:null)
                         :accessor %finding-classification-details :initform
                         common-lisp:nil)
                        (category :initarg :|category| :type
                         (common-lisp:or finding-category common-lisp:null)
                         :accessor %finding-category :initform common-lisp:nil)
                        (archived :initarg :|archived| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %finding-archived :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %finding-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defun make-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at type title severity
                     schema-version sample resources-affected region
                     policy-details partition id description created-at count
                     classification-details category archived account-id)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archived))
      (common-lisp:list
       (common-lisp:cons "archived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-details))
      (common-lisp:list
       (common-lisp:cons "classificationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "policyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-affected))
      (common-lisp:list
       (common-lisp:cons "resourcesAffected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-action common-lisp:nil
                       ((api-call-details :initarg :|apiCallDetails| :type
                         (common-lisp:or api-call-details common-lisp:null)
                         :accessor %finding-action-api-call-details :initform
                         common-lisp:nil)
                        (action-type :initarg :|actionType| :type
                         (common-lisp:or finding-action-type common-lisp:null)
                         :accessor %finding-action-action-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'finding-action 'make-finding-action))
 (common-lisp:defun make-finding-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-call-details action-type)
   (common-lisp:apply #'common-lisp:make-instance 'finding-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-details))
      (common-lisp:list
       (common-lisp:cons "apiCallDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-action))
   common-lisp:nil))
(common-lisp:deftype finding-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-actor common-lisp:nil
                       ((user-identity :initarg :|userIdentity| :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor %finding-actor-user-identity :initform
                         common-lisp:nil)
                        (ip-address-details :initarg :|ipAddressDetails| :type
                         (common-lisp:or ip-address-details common-lisp:null)
                         :accessor %finding-actor-ip-address-details :initform
                         common-lisp:nil)
                        (domain-details :initarg :|domainDetails| :type
                         (common-lisp:or domain-details common-lisp:null)
                         :accessor %finding-actor-domain-details :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'finding-actor 'make-finding-actor))
 (common-lisp:defun make-finding-actor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-identity ip-address-details
                     domain-details)
   (common-lisp:apply #'common-lisp:make-instance 'finding-actor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-actor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-actor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-details))
      (common-lisp:list
       (common-lisp:cons "domainDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-details))
      (common-lisp:list
       (common-lisp:cons "ipAddressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "userIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-actor))
   common-lisp:nil))
(common-lisp:deftype finding-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-criteria common-lisp:nil
                       ((criterion :initarg :|criterion| :type
                         (common-lisp:or criterion common-lisp:null) :accessor
                         %finding-criteria-criterion :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-criteria 'make-finding-criteria))
 (common-lisp:defun make-finding-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key criterion)
   (common-lisp:apply #'common-lisp:make-instance 'finding-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criterion))
      (common-lisp:list
       (common-lisp:cons "criterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-criteria))
   common-lisp:nil))
(common-lisp:deftype finding-publishing-frequency () 'common-lisp:string)
(common-lisp:deftype finding-statistics-sort-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-statistics-sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %finding-statistics-sort-criteria-order-by :initform
                         common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or finding-statistics-sort-attribute-name
                                         common-lisp:null)
                         :accessor
                         %finding-statistics-sort-criteria-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-statistics-sort-criteria
                    'make-finding-statistics-sort-criteria))
 (common-lisp:defun make-finding-statistics-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'finding-statistics-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype finding-type () 'common-lisp:string)
(common-lisp:deftype findings-filter-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass findings-filter-list-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %findings-filter-list-item-tags :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %findings-filter-list-item-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %findings-filter-list-item-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %findings-filter-list-item-arn :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or findings-filter-action
                                         common-lisp:null)
                         :accessor %findings-filter-list-item-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'findings-filter-list-item
                    'make-findings-filter-list-item))
 (common-lisp:defun make-findings-filter-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name id arn action)
   (common-lisp:apply #'common-lisp:make-instance 'findings-filter-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-request
                    'make-get-administrator-account-request))
 (common-lisp:defun make-get-administrator-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-response common-lisp:nil
                       ((administrator :initarg :|administrator| :type
                         (common-lisp:or invitation common-lisp:null) :accessor
                         %get-administrator-account-response-administrator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-response
                    'make-get-administrator-account-response))
 (common-lisp:defun make-get-administrator-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key administrator)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator))
      (common-lisp:list
       (common-lisp:cons "administrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-allow-list-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-allow-list-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-allow-list-request 'make-get-allow-list-request))
 (common-lisp:defun make-get-allow-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-allow-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-allow-list-response common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-allow-list-response-updated-at
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-allow-list-response-tags :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or allow-list-status common-lisp:null)
                         :accessor %get-allow-list-response-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__stringMin1Max128Pattern|
                                         common-lisp:null)
                         :accessor %get-allow-list-response-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__stringMin22Max22PatternAZ0922|
                                         common-lisp:null)
                         :accessor %get-allow-list-response-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__stringMin1Max512PatternSS|
                                         common-lisp:null)
                         :accessor %get-allow-list-response-description
                         :initform common-lisp:nil)
                        (criteria :initarg :|criteria| :type
                         (common-lisp:or allow-list-criteria common-lisp:null)
                         :accessor %get-allow-list-response-criteria :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-allow-list-response-created-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or
                          |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                          common-lisp:null)
                         :accessor %get-allow-list-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-allow-list-response 'make-get-allow-list-response))
 (common-lisp:defun make-get-allow-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags status name id
                     description criteria created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-allow-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-automated-discovery-configuration-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-automated-discovery-configuration-request
                    'make-get-automated-discovery-configuration-request))
 (common-lisp:defun make-get-automated-discovery-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-automated-discovery-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-automated-discovery-configuration-response
                       common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or automated-discovery-status
                                         common-lisp:null)
                         :accessor
                         %get-automated-discovery-configuration-response-status
                         :initform common-lisp:nil)
                        (sensitivity-inspection-template-id :initarg
                         :|sensitivityInspectionTemplateId| :type
                         (common-lisp:or sensitivity-inspection-template-id
                                         common-lisp:null)
                         :accessor
                         %get-automated-discovery-configuration-response-sensitivity-inspection-template-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-automated-discovery-configuration-response-last-updated-at
                         :initform common-lisp:nil)
                        (first-enabled-at :initarg :|firstEnabledAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-automated-discovery-configuration-response-first-enabled-at
                         :initform common-lisp:nil)
                        (disabled-at :initarg :|disabledAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-automated-discovery-configuration-response-disabled-at
                         :initform common-lisp:nil)
                        (classification-scope-id :initarg
                         :|classificationScopeId| :type
                         (common-lisp:or classification-scope-id
                                         common-lisp:null)
                         :accessor
                         %get-automated-discovery-configuration-response-classification-scope-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-automated-discovery-configuration-response
                    'make-get-automated-discovery-configuration-response))
 (common-lisp:defun make-get-automated-discovery-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sensitivity-inspection-template-id
                     last-updated-at first-enabled-at disabled-at
                     classification-scope-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-automated-discovery-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-scope-id))
      (common-lisp:list
       (common-lisp:cons "classificationScopeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-at))
      (common-lisp:list
       (common-lisp:cons "disabledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-enabled-at))
      (common-lisp:list
       (common-lisp:cons "firstEnabledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-template-id))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-statistics-request common-lisp:nil
                       ((account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bucket-statistics-request-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-statistics-request
                    'make-get-bucket-statistics-request))
 (common-lisp:defun make-get-bucket-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-statistics-response common-lisp:nil
                       ((unclassifiable-object-size-in-bytes :initarg
                         :|unclassifiableObjectSizeInBytes| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-unclassifiable-object-size-in-bytes
                         :initform common-lisp:nil)
                        (unclassifiable-object-count :initarg
                         :|unclassifiableObjectCount| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-unclassifiable-object-count
                         :initform common-lisp:nil)
                        (size-in-bytes-compressed :initarg
                         :|sizeInBytesCompressed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-size-in-bytes-compressed
                         :initform common-lisp:nil)
                        (size-in-bytes :initarg :|sizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-size-in-bytes
                         :initform common-lisp:nil)
                        (object-count :initarg :|objectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-object-count :initform
                         common-lisp:nil)
                        (last-updated :initarg :|lastUpdated| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-bucket-statistics-response-last-updated
                         :initform common-lisp:nil)
                        (classifiable-size-in-bytes :initarg
                         :|classifiableSizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-classifiable-size-in-bytes
                         :initform common-lisp:nil)
                        (classifiable-object-count :initarg
                         :|classifiableObjectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-classifiable-object-count
                         :initform common-lisp:nil)
                        (bucket-statistics-by-sensitivity :initarg
                         :|bucketStatisticsBySensitivity| :type
                         (common-lisp:or bucket-statistics-by-sensitivity
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-bucket-statistics-by-sensitivity
                         :initform common-lisp:nil)
                        (bucket-count-by-shared-access-type :initarg
                         :|bucketCountBySharedAccessType| :type
                         (common-lisp:or bucket-count-by-shared-access-type
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-bucket-count-by-shared-access-type
                         :initform common-lisp:nil)
                        (bucket-count-by-object-encryption-requirement :initarg
                         :|bucketCountByObjectEncryptionRequirement| :type
                         (common-lisp:or
                          bucket-count-policy-allows-unencrypted-object-uploads
                          common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-bucket-count-by-object-encryption-requirement
                         :initform common-lisp:nil)
                        (bucket-count-by-encryption-type :initarg
                         :|bucketCountByEncryptionType| :type
                         (common-lisp:or bucket-count-by-encryption-type
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-bucket-count-by-encryption-type
                         :initform common-lisp:nil)
                        (bucket-count-by-effective-permission :initarg
                         :|bucketCountByEffectivePermission| :type
                         (common-lisp:or bucket-count-by-effective-permission
                                         common-lisp:null)
                         :accessor
                         %get-bucket-statistics-response-bucket-count-by-effective-permission
                         :initform common-lisp:nil)
                        (bucket-count :initarg :|bucketCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-bucket-statistics-response-bucket-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-statistics-response
                    'make-get-bucket-statistics-response))
 (common-lisp:defun make-get-bucket-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unclassifiable-object-size-in-bytes
                     unclassifiable-object-count size-in-bytes-compressed
                     size-in-bytes object-count last-updated
                     classifiable-size-in-bytes classifiable-object-count
                     bucket-statistics-by-sensitivity
                     bucket-count-by-shared-access-type
                     bucket-count-by-object-encryption-requirement
                     bucket-count-by-encryption-type
                     bucket-count-by-effective-permission bucket-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-count))
      (common-lisp:list
       (common-lisp:cons "bucketCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-effective-permission))
      (common-lisp:list
       (common-lisp:cons "bucketCountByEffectivePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "bucketCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-object-encryption-requirement))
      (common-lisp:list
       (common-lisp:cons "bucketCountByObjectEncryptionRequirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-shared-access-type))
      (common-lisp:list
       (common-lisp:cons "bucketCountBySharedAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-statistics-by-sensitivity))
      (common-lisp:list
       (common-lisp:cons "bucketStatisticsBySensitivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classification-export-configuration-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-classification-export-configuration-request
                    'make-get-classification-export-configuration-request))
 (common-lisp:defun make-get-classification-export-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-classification-export-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classification-export-configuration-response
                       common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or classification-export-configuration
                                         common-lisp:null)
                         :accessor
                         %get-classification-export-configuration-response-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-classification-export-configuration-response
                    'make-get-classification-export-configuration-response))
 (common-lisp:defun make-get-classification-export-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-classification-export-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classification-scope-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-classification-scope-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-classification-scope-request
                    'make-get-classification-scope-request))
 (common-lisp:defun make-get-classification-scope-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-classification-scope-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classification-scope-response common-lisp:nil
                       ((s3 :initarg :|s3| :type
                         (common-lisp:or s3classification-scope
                                         common-lisp:null)
                         :accessor %get-classification-scope-response-s3
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or classification-scope-name
                                         common-lisp:null)
                         :accessor %get-classification-scope-response-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or classification-scope-id
                                         common-lisp:null)
                         :accessor %get-classification-scope-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-classification-scope-response
                    'make-get-classification-scope-response))
 (common-lisp:defun make-get-classification-scope-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3 name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-classification-scope-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-data-identifier-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-custom-data-identifier-request
                    'make-get-custom-data-identifier-request))
 (common-lisp:defun make-get-custom-data-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-data-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-data-identifier-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-custom-data-identifier-response-tags :initform
                         common-lisp:nil)
                        (severity-levels :initarg :|severityLevels| :type
                         (common-lisp:or severity-level-list common-lisp:null)
                         :accessor
                         %get-custom-data-identifier-response-severity-levels
                         :initform common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-response-regex :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-response-name :initform
                         common-lisp:nil)
                        (maximum-match-distance :initarg
                         :|maximumMatchDistance| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %get-custom-data-identifier-response-maximum-match-distance
                         :initform common-lisp:nil)
                        (keywords :initarg :|keywords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %get-custom-data-identifier-response-keywords
                         :initform common-lisp:nil)
                        (ignore-words :initarg :|ignoreWords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %get-custom-data-identifier-response-ignore-words
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-response-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-response-description
                         :initform common-lisp:nil)
                        (deleted :initarg :|deleted| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %get-custom-data-identifier-response-deleted
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %get-custom-data-identifier-response-created-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-custom-data-identifier-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-custom-data-identifier-response
                    'make-get-custom-data-identifier-response))
 (common-lisp:defun make-get-custom-data-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags severity-levels regex name
                     maximum-match-distance keywords ignore-words id
                     description deleted created-at arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-data-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-levels))
      (common-lisp:list
       (common-lisp:cons "severityLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-statistics-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or finding-statistics-sort-criteria
                                         common-lisp:null)
                         :accessor
                         %get-finding-statistics-request-sort-criteria
                         :initform common-lisp:nil)
                        (size :initarg :|size| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %get-finding-statistics-request-size
                         :initform common-lisp:nil)
                        (group-by :initarg :|groupBy| :type
                         (common-lisp:or group-by common-lisp:null) :accessor
                         %get-finding-statistics-request-group-by :initform
                         (common-lisp:error ":groupby is required"))
                        (finding-criteria :initarg :|findingCriteria| :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         %get-finding-statistics-request-finding-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-finding-statistics-request
                    'make-get-finding-statistics-request))
 (common-lisp:defun make-get-finding-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria size group-by
                     finding-criteria)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-finding-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-statistics-response common-lisp:nil
                       ((counts-by-group :initarg :|countsByGroup| :type
                         (common-lisp:or |__listOfGroupCount| common-lisp:null)
                         :accessor
                         %get-finding-statistics-response-counts-by-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-finding-statistics-response
                    'make-get-finding-statistics-response))
 (common-lisp:defun make-get-finding-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key counts-by-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-finding-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counts-by-group))
      (common-lisp:list
       (common-lisp:cons "countsByGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-filter-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-findings-filter-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-findings-filter-request
                    'make-get-findings-filter-request))
 (common-lisp:defun make-get-findings-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-filter-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-findings-filter-response-tags :initform
                         common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %get-findings-filter-response-position
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-findings-filter-response-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-findings-filter-response-id :initform
                         common-lisp:nil)
                        (finding-criteria :initarg :|findingCriteria| :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         %get-findings-filter-response-finding-criteria
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-findings-filter-response-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-findings-filter-response-arn :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or findings-filter-action
                                         common-lisp:null)
                         :accessor %get-findings-filter-response-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-filter-response
                    'make-get-findings-filter-response))
 (common-lisp:defun make-get-findings-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags position name id finding-criteria
                     description arn action)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-publication-configuration-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-findings-publication-configuration-request
                    'make-get-findings-publication-configuration-request))
 (common-lisp:defun make-get-findings-publication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-publication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-publication-configuration-response
                       common-lisp:nil
                       ((security-hub-configuration :initarg
                         :|securityHubConfiguration| :type
                         (common-lisp:or security-hub-configuration
                                         common-lisp:null)
                         :accessor
                         %get-findings-publication-configuration-response-security-hub-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-publication-configuration-response
                    'make-get-findings-publication-configuration-response))
 (common-lisp:defun make-get-findings-publication-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-hub-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-publication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-hub-configuration))
      (common-lisp:list
       (common-lisp:cons "securityHubConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor %get-findings-request-sort-criteria
                         :initform common-lisp:nil)
                        (finding-ids :initarg :|findingIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %get-findings-request-finding-ids :initform
                         (common-lisp:error ":findingids is required"))))
 (common-lisp:export
  (common-lisp:list 'get-findings-request 'make-get-findings-request))
 (common-lisp:defun make-get-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria finding-ids)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-response common-lisp:nil
                       ((findings :initarg :|findings| :type
                         (common-lisp:or |__listOfFinding| common-lisp:null)
                         :accessor %get-findings-response-findings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-response 'make-get-findings-response))
 (common-lisp:defun make-get-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key findings)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-request
                    'make-get-invitations-count-request))
 (common-lisp:defun make-get-invitations-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-response common-lisp:nil
                       ((invitations-count :initarg :|invitationsCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %get-invitations-count-response-invitations-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-response
                    'make-get-invitations-count-response))
 (common-lisp:defun make-get-invitations-count-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invitations-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations-count))
      (common-lisp:list
       (common-lisp:cons "invitationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-macie-session-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-macie-session-request
                    'make-get-macie-session-request))
 (common-lisp:defun make-get-macie-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-macie-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-macie-session-response common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-macie-session-response-updated-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or macie-status common-lisp:null)
                         :accessor %get-macie-session-response-status :initform
                         common-lisp:nil)
                        (service-role :initarg :|serviceRole| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-macie-session-response-service-role :initform
                         common-lisp:nil)
                        (finding-publishing-frequency :initarg
                         :|findingPublishingFrequency| :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         %get-macie-session-response-finding-publishing-frequency
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-macie-session-response-created-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-macie-session-response
                    'make-get-macie-session-response))
 (common-lisp:defun make-get-macie-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at status service-role
                     finding-publishing-frequency created-at)
   (common-lisp:apply #'common-lisp:make-instance 'get-macie-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "serviceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-master-account-request
                    'make-get-master-account-request))
 (common-lisp:defun make-get-master-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-response common-lisp:nil
                       ((master :initarg :|master| :type
                         (common-lisp:or invitation common-lisp:null) :accessor
                         %get-master-account-response-master :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-master-account-response
                    'make-get-master-account-response))
 (common-lisp:defun make-get-master-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master))
      (common-lisp:list
       (common-lisp:cons "master"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-member-request 'make-get-member-request))
 (common-lisp:defun make-get-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-response common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-member-response-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-member-response-tags :initform common-lisp:nil)
                        (relationship-status :initarg :|relationshipStatus|
                         :type
                         (common-lisp:or relationship-status common-lisp:null)
                         :accessor %get-member-response-relationship-status
                         :initform common-lisp:nil)
                        (master-account-id :initarg :|masterAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-response-master-account-id :initform
                         common-lisp:nil)
                        (invited-at :initarg :|invitedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-member-response-invited-at :initform
                         common-lisp:nil)
                        (email :initarg :|email| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-response-email :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-response-arn :initform common-lisp:nil)
                        (administrator-account-id :initarg
                         :|administratorAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-response-administrator-account-id
                         :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-member-response-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-member-response 'make-get-member-response))
 (common-lisp:defun make-get-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags relationship-status
                     master-account-id invited-at email arn
                     administrator-account-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-id))
      (common-lisp:list
       (common-lisp:cons "masterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-profile-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-resource-profile-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-profile-request
                    'make-get-resource-profile-request))
 (common-lisp:defun make-get-resource-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-profile-response common-lisp:nil
                       ((statistics :initarg :|statistics| :type
                         (common-lisp:or resource-statistics common-lisp:null)
                         :accessor %get-resource-profile-response-statistics
                         :initform common-lisp:nil)
                        (sensitivity-score-overridden :initarg
                         :|sensitivityScoreOverridden| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %get-resource-profile-response-sensitivity-score-overridden
                         :initform common-lisp:nil)
                        (sensitivity-score :initarg :|sensitivityScore| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %get-resource-profile-response-sensitivity-score
                         :initform common-lisp:nil)
                        (profile-updated-at :initarg :|profileUpdatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %get-resource-profile-response-profile-updated-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-profile-response
                    'make-get-resource-profile-response))
 (common-lisp:defun make-get-resource-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statistics sensitivity-score-overridden
                     sensitivity-score profile-updated-at)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-updated-at))
      (common-lisp:list
       (common-lisp:cons "profileUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-score-overridden))
      (common-lisp:list
       (common-lisp:cons "sensitivityScoreOverridden"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reveal-configuration-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-reveal-configuration-request
                    'make-get-reveal-configuration-request))
 (common-lisp:defun make-get-reveal-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reveal-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reveal-configuration-response common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or reveal-configuration common-lisp:null)
                         :accessor
                         %get-reveal-configuration-response-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-reveal-configuration-response
                    'make-get-reveal-configuration-response))
 (common-lisp:defun make-get-reveal-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reveal-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitive-data-occurrences-availability-request
                       common-lisp:nil
                       ((finding-id :initarg :|findingId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitive-data-occurrences-availability-request-finding-id
                         :initform
                         (common-lisp:error ":findingid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-availability-request
                    'make-get-sensitive-data-occurrences-availability-request))
 (common-lisp:defun make-get-sensitive-data-occurrences-availability-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitive-data-occurrences-availability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitive-data-occurrences-availability-response
                       common-lisp:nil
                       ((reasons :initarg :|reasons| :type
                         (common-lisp:or |__listOfUnavailabilityReasonCode|
                                         common-lisp:null)
                         :accessor
                         %get-sensitive-data-occurrences-availability-response-reasons
                         :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or availability-code common-lisp:null)
                         :accessor
                         %get-sensitive-data-occurrences-availability-response-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-availability-response
                    'make-get-sensitive-data-occurrences-availability-response))
 (common-lisp:defun make-get-sensitive-data-occurrences-availability-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reasons code)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitive-data-occurrences-availability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitive-data-occurrences-request common-lisp:nil
                       ((finding-id :initarg :|findingId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitive-data-occurrences-request-finding-id
                         :initform
                         (common-lisp:error ":findingid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-request
                    'make-get-sensitive-data-occurrences-request))
 (common-lisp:defun make-get-sensitive-data-occurrences-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitive-data-occurrences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitive-data-occurrences-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reveal-request-status
                                         common-lisp:null)
                         :accessor
                         %get-sensitive-data-occurrences-response-status
                         :initform common-lisp:nil)
                        (sensitive-data-occurrences :initarg
                         :|sensitiveDataOccurrences| :type
                         (common-lisp:or sensitive-data-occurrences
                                         common-lisp:null)
                         :accessor
                         %get-sensitive-data-occurrences-response-sensitive-data-occurrences
                         :initform common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitive-data-occurrences-response-error
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-response
                    'make-get-sensitive-data-occurrences-response))
 (common-lisp:defun make-get-sensitive-data-occurrences-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sensitive-data-occurrences error)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitive-data-occurrences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitive-data-occurrences))
      (common-lisp:list
       (common-lisp:cons "sensitiveDataOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitivity-inspection-template-request
                       common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitivity-inspection-template-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sensitivity-inspection-template-request
                    'make-get-sensitivity-inspection-template-request))
 (common-lisp:defun make-get-sensitivity-inspection-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitivity-inspection-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sensitivity-inspection-template-response
                       common-lisp:nil
                       ((sensitivity-inspection-template-id :initarg
                         :|sensitivityInspectionTemplateId| :type
                         (common-lisp:or sensitivity-inspection-template-id
                                         common-lisp:null)
                         :accessor
                         %get-sensitivity-inspection-template-response-sensitivity-inspection-template-id
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitivity-inspection-template-response-name
                         :initform common-lisp:nil)
                        (includes :initarg :|includes| :type
                         (common-lisp:or
                          sensitivity-inspection-template-includes
                          common-lisp:null)
                         :accessor
                         %get-sensitivity-inspection-template-response-includes
                         :initform common-lisp:nil)
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or
                          sensitivity-inspection-template-excludes
                          common-lisp:null)
                         :accessor
                         %get-sensitivity-inspection-template-response-excludes
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-sensitivity-inspection-template-response-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-sensitivity-inspection-template-response
                    'make-get-sensitivity-inspection-template-response))
 (common-lisp:defun make-get-sensitivity-inspection-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sensitivity-inspection-template-id name
                     includes excludes description)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sensitivity-inspection-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-template-id))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-statistics-request common-lisp:nil
                       ((time-range :initarg :|timeRange| :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %get-usage-statistics-request-time-range :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or usage-statistics-sort-by
                                         common-lisp:null)
                         :accessor %get-usage-statistics-request-sort-by
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-usage-statistics-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %get-usage-statistics-request-max-results
                         :initform common-lisp:nil)
                        (filter-by :initarg :|filterBy| :type
                         (common-lisp:or |__listOfUsageStatisticsFilter|
                                         common-lisp:null)
                         :accessor %get-usage-statistics-request-filter-by
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-request
                    'make-get-usage-statistics-request))
 (common-lisp:defun make-get-usage-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range sort-by next-token max-results
                     filter-by)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-by))
      (common-lisp:list
       (common-lisp:cons "filterBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-statistics-response common-lisp:nil
                       ((time-range :initarg :|timeRange| :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %get-usage-statistics-response-time-range :initform
                         common-lisp:nil)
                        (records :initarg :|records| :type
                         (common-lisp:or |__listOfUsageRecord|
                                         common-lisp:null)
                         :accessor %get-usage-statistics-response-records
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-usage-statistics-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-response
                    'make-get-usage-statistics-response))
 (common-lisp:defun make-get-usage-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range records next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-usage-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-totals-request common-lisp:nil
                       ((time-range :initarg :|timeRange| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-usage-totals-request-time-range :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-usage-totals-request 'make-get-usage-totals-request))
 (common-lisp:defun make-get-usage-totals-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-totals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-totals-response common-lisp:nil
                       ((usage-totals :initarg :|usageTotals| :type
                         (common-lisp:or |__listOfUsageTotal| common-lisp:null)
                         :accessor %get-usage-totals-response-usage-totals
                         :initform common-lisp:nil)
                        (time-range :initarg :|timeRange| :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %get-usage-totals-response-time-range :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-usage-totals-response
                    'make-get-usage-totals-response))
 (common-lisp:defun make-get-usage-totals-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-totals time-range)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-totals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-totals))
      (common-lisp:list
       (common-lisp:cons "usageTotals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   common-lisp:nil))
(common-lisp:deftype group-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group-count common-lisp:nil
                       ((group-key :initarg :|groupKey| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %group-count-group-key :initform common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %group-count-count :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'group-count 'make-group-count))
 (common-lisp:defun make-group-count
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-key count)
   (common-lisp:apply #'common-lisp:make-instance 'group-count
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-key))
      (common-lisp:list
       (common-lisp:cons "groupKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam-user common-lisp:nil
                       ((user-name :initarg :|userName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %iam-user-user-name :initform common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %iam-user-principal-id :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %iam-user-arn :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %iam-user-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'iam-user 'make-iam-user))
 (common-lisp:defun make-iam-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name principal-id arn account-id)
   (common-lisp:apply #'common-lisp:make-instance 'iam-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invitation common-lisp:nil
                       ((relationship-status :initarg :|relationshipStatus|
                         :type
                         (common-lisp:or relationship-status common-lisp:null)
                         :accessor %invitation-relationship-status :initform
                         common-lisp:nil)
                        (invited-at :initarg :|invitedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %invitation-invited-at :initform
                         common-lisp:nil)
                        (invitation-id :initarg :|invitationId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %invitation-invitation-id :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %invitation-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defun make-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relationship-status invited-at
                     invitation-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'invitation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "invitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-address-details common-lisp:nil
                       ((ip-owner :initarg :|ipOwner| :type
                         (common-lisp:or ip-owner common-lisp:null) :accessor
                         %ip-address-details-ip-owner :initform
                         common-lisp:nil)
                        (ip-geo-location :initarg :|ipGeoLocation| :type
                         (common-lisp:or ip-geo-location common-lisp:null)
                         :accessor %ip-address-details-ip-geo-location
                         :initform common-lisp:nil)
                        (ip-country :initarg :|ipCountry| :type
                         (common-lisp:or ip-country common-lisp:null) :accessor
                         %ip-address-details-ip-country :initform
                         common-lisp:nil)
                        (ip-city :initarg :|ipCity| :type
                         (common-lisp:or ip-city common-lisp:null) :accessor
                         %ip-address-details-ip-city :initform common-lisp:nil)
                        (ip-address-v4 :initarg :|ipAddressV4| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-address-details-ip-address-v4 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ip-address-details 'make-ip-address-details))
 (common-lisp:defun make-ip-address-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-owner ip-geo-location ip-country
                     ip-city ip-address-v4)
   (common-lisp:apply #'common-lisp:make-instance 'ip-address-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "ipAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-city))
      (common-lisp:list
       (common-lisp:cons "ipCity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-country))
      (common-lisp:list
       (common-lisp:cons "ipCountry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-geo-location))
      (common-lisp:list
       (common-lisp:cons "ipGeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-owner))
      (common-lisp:list
       (common-lisp:cons "ipOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-city common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-city-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-city 'make-ip-city))
 (common-lisp:defun make-ip-city
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'ip-city
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-city))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-city))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-city))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-country common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-country-name :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-country-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-country 'make-ip-country))
 (common-lisp:defun make-ip-country
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name code)
   (common-lisp:apply #'common-lisp:make-instance 'ip-country
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-geo-location common-lisp:nil
                       ((lon :initarg :|lon| :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %ip-geo-location-lon :initform common-lisp:nil)
                        (lat :initarg :|lat| :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %ip-geo-location-lat :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-geo-location 'make-ip-geo-location))
 (common-lisp:defun make-ip-geo-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lon lat)
   (common-lisp:apply #'common-lisp:make-instance 'ip-geo-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat))
      (common-lisp:list
       (common-lisp:cons "lat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lon))
      (common-lisp:list
       (common-lisp:cons "lon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-geo-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-owner common-lisp:nil
                       ((org :initarg :|org| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-owner-org :initform common-lisp:nil)
                        (isp :initarg :|isp| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-owner-isp :initform common-lisp:nil)
                        (asn-org :initarg :|asnOrg| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-owner-asn-org :initform common-lisp:nil)
                        (asn :initarg :|asn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ip-owner-asn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-owner 'make-ip-owner))
 (common-lisp:defun make-ip-owner
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key org isp asn-org asn)
   (common-lisp:apply #'common-lisp:make-instance 'ip-owner
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn-org))
      (common-lisp:list
       (common-lisp:cons "asnOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'isp))
      (common-lisp:list
       (common-lisp:cons "isp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-owner))
   common-lisp:nil))
(common-lisp:deftype is-defined-in-job () 'common-lisp:string)
(common-lisp:deftype is-monitored-by-job () 'common-lisp:string)
(common-lisp:deftype job-comparator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-details common-lisp:nil
                       ((last-job-run-time :initarg :|lastJobRunTime| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %job-details-last-job-run-time :initform
                         common-lisp:nil)
                        (last-job-id :initarg :|lastJobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-details-last-job-id :initform common-lisp:nil)
                        (is-monitored-by-job :initarg :|isMonitoredByJob| :type
                         (common-lisp:or is-monitored-by-job common-lisp:null)
                         :accessor %job-details-is-monitored-by-job :initform
                         common-lisp:nil)
                        (is-defined-in-job :initarg :|isDefinedInJob| :type
                         (common-lisp:or is-defined-in-job common-lisp:null)
                         :accessor %job-details-is-defined-in-job :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defun make-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-job-run-time last-job-id
                     is-monitored-by-job is-defined-in-job)
   (common-lisp:apply #'common-lisp:make-instance 'job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-defined-in-job))
      (common-lisp:list
       (common-lisp:cons "isDefinedInJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-monitored-by-job))
      (common-lisp:list
       (common-lisp:cons "isMonitoredByJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-job-id))
      (common-lisp:list
       (common-lisp:cons "lastJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-job-run-time))
      (common-lisp:list
       (common-lisp:cons "lastJobRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-schedule-frequency common-lisp:nil
                       ((weekly-schedule :initarg :|weeklySchedule| :type
                         (common-lisp:or weekly-schedule common-lisp:null)
                         :accessor %job-schedule-frequency-weekly-schedule
                         :initform common-lisp:nil)
                        (monthly-schedule :initarg :|monthlySchedule| :type
                         (common-lisp:or monthly-schedule common-lisp:null)
                         :accessor %job-schedule-frequency-monthly-schedule
                         :initform common-lisp:nil)
                        (daily-schedule :initarg :|dailySchedule| :type
                         (common-lisp:or daily-schedule common-lisp:null)
                         :accessor %job-schedule-frequency-daily-schedule
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-schedule-frequency 'make-job-schedule-frequency))
 (common-lisp:defun make-job-schedule-frequency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weekly-schedule monthly-schedule
                     daily-schedule)
   (common-lisp:apply #'common-lisp:make-instance 'job-schedule-frequency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-schedule))
      (common-lisp:list
       (common-lisp:cons "dailySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-schedule))
      (common-lisp:list
       (common-lisp:cons "monthlySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weekly-schedule))
      (common-lisp:list
       (common-lisp:cons "weeklySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-scope-term common-lisp:nil
                       ((tag-scope-term :initarg :|tagScopeTerm| :type
                         (common-lisp:or tag-scope-term common-lisp:null)
                         :accessor %job-scope-term-tag-scope-term :initform
                         common-lisp:nil)
                        (simple-scope-term :initarg :|simpleScopeTerm| :type
                         (common-lisp:or simple-scope-term common-lisp:null)
                         :accessor %job-scope-term-simple-scope-term :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-scope-term 'make-job-scope-term))
 (common-lisp:defun make-job-scope-term
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-scope-term simple-scope-term)
   (common-lisp:apply #'common-lisp:make-instance 'job-scope-term
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-scope-term))
      (common-lisp:list
       (common-lisp:cons "simpleScopeTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-scope-term))
      (common-lisp:list
       (common-lisp:cons "tagScopeTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-scope-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-scoping-block common-lisp:nil
                       ((and :initarg :|and| :type
                         (common-lisp:or |__listOfJobScopeTerm|
                                         common-lisp:null)
                         :accessor %job-scoping-block-and :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-scoping-block 'make-job-scoping-block))
 (common-lisp:defun make-job-scoping-block
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and)
   (common-lisp:apply #'common-lisp:make-instance 'job-scoping-block
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-scoping-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-scoping-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-scoping-block))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-summary common-lisp:nil
                       ((user-paused-details :initarg :|userPausedDetails|
                         :type
                         (common-lisp:or user-paused-details common-lisp:null)
                         :accessor %job-summary-user-paused-details :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-summary-name :initform common-lisp:nil)
                        (last-run-error-status :initarg :|lastRunErrorStatus|
                         :type
                         (common-lisp:or last-run-error-status
                                         common-lisp:null)
                         :accessor %job-summary-last-run-error-status :initform
                         common-lisp:nil)
                        (job-type :initarg :|jobType| :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %job-summary-job-type :initform common-lisp:nil)
                        (job-status :initarg :|jobStatus| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-summary-job-status :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-summary-job-id :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %job-summary-created-at :initform
                         common-lisp:nil)
                        (bucket-definitions :initarg :|bucketDefinitions| :type
                         (common-lisp:or |__listOfS3BucketDefinitionForJob|
                                         common-lisp:null)
                         :accessor %job-summary-bucket-definitions :initform
                         common-lisp:nil)
                        (bucket-criteria :initarg :|bucketCriteria| :type
                         (common-lisp:or s3bucket-criteria-for-job
                                         common-lisp:null)
                         :accessor %job-summary-bucket-criteria :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defun make-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-paused-details name
                     last-run-error-status job-type job-status job-id
                     created-at bucket-definitions bucket-criteria)
   (common-lisp:apply #'common-lisp:make-instance 'job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-definitions))
      (common-lisp:list
       (common-lisp:cons "bucketDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-status))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-paused-details))
      (common-lisp:list
       (common-lisp:cons "userPausedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-value-pair common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %key-value-pair-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %key-value-pair-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'key-value-pair 'make-key-value-pair))
 (common-lisp:defun make-key-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-value-pair-list ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-key-value-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass last-run-error-status common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or last-run-error-status-code
                                         common-lisp:null)
                         :accessor %last-run-error-status-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'last-run-error-status 'make-last-run-error-status))
 (common-lisp:defun make-last-run-error-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code)
   (common-lisp:apply #'common-lisp:make-instance 'last-run-error-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   common-lisp:nil))
(common-lisp:deftype last-run-error-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-allow-lists-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-allow-lists-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-allow-lists-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-allow-lists-request 'make-list-allow-lists-request))
 (common-lisp:defun make-list-allow-lists-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-allow-lists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-allow-lists-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-allow-lists-response-next-token :initform
                         common-lisp:nil)
                        (allow-lists :initarg :|allowLists| :type
                         (common-lisp:or |__listOfAllowListSummary|
                                         common-lisp:null)
                         :accessor %list-allow-lists-response-allow-lists
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-allow-lists-response
                    'make-list-allow-lists-response))
 (common-lisp:defun make-list-allow-lists-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token allow-lists)
   (common-lisp:apply #'common-lisp:make-instance 'list-allow-lists-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-lists))
      (common-lisp:list
       (common-lisp:cons "allowLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-classification-jobs-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or list-jobs-sort-criteria
                                         common-lisp:null)
                         :accessor
                         %list-classification-jobs-request-sort-criteria
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-classification-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %list-classification-jobs-request-max-results
                         :initform common-lisp:nil)
                        (filter-criteria :initarg :|filterCriteria| :type
                         (common-lisp:or list-jobs-filter-criteria
                                         common-lisp:null)
                         :accessor
                         %list-classification-jobs-request-filter-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-classification-jobs-request
                    'make-list-classification-jobs-request))
 (common-lisp:defun make-list-classification-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria next-token max-results
                     filter-criteria)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-classification-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-classification-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-classification-jobs-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or |__listOfJobSummary| common-lisp:null)
                         :accessor %list-classification-jobs-response-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-classification-jobs-response
                    'make-list-classification-jobs-response))
 (common-lisp:defun make-list-classification-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-classification-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-classification-scopes-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-classification-scopes-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-classification-scopes-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-classification-scopes-request
                    'make-list-classification-scopes-request))
 (common-lisp:defun make-list-classification-scopes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-classification-scopes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-classification-scopes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-classification-scopes-response-next-token
                         :initform common-lisp:nil)
                        (classification-scopes :initarg :|classificationScopes|
                         :type
                         (common-lisp:or |__listOfClassificationScopeSummary|
                                         common-lisp:null)
                         :accessor
                         %list-classification-scopes-response-classification-scopes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-classification-scopes-response
                    'make-list-classification-scopes-response))
 (common-lisp:defun make-list-classification-scopes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token classification-scopes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-classification-scopes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-scopes))
      (common-lisp:list
       (common-lisp:cons "classificationScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-data-identifiers-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-custom-data-identifiers-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %list-custom-data-identifiers-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-custom-data-identifiers-request
                    'make-list-custom-data-identifiers-request))
 (common-lisp:defun make-list-custom-data-identifiers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-data-identifiers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-data-identifiers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-custom-data-identifiers-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or |__listOfCustomDataIdentifierSummary|
                                         common-lisp:null)
                         :accessor %list-custom-data-identifiers-response-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-custom-data-identifiers-response
                    'make-list-custom-data-identifiers-response))
 (common-lisp:defun make-list-custom-data-identifiers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-data-identifiers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-filters-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-findings-filters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-findings-filters-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-filters-request
                    'make-list-findings-filters-request))
 (common-lisp:defun make-list-findings-filters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-filters-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-findings-filters-response-next-token :initform
                         common-lisp:nil)
                        (findings-filter-list-items :initarg
                         :|findingsFilterListItems| :type
                         (common-lisp:or |__listOfFindingsFilterListItem|
                                         common-lisp:null)
                         :accessor
                         %list-findings-filters-response-findings-filter-list-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-filters-response
                    'make-list-findings-filters-response))
 (common-lisp:defun make-list-findings-filters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings-filter-list-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'findings-filter-list-items))
      (common-lisp:list
       (common-lisp:cons "findingsFilterListItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor %list-findings-request-sort-criteria
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-findings-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %list-findings-request-max-results :initform
                         common-lisp:nil)
                        (finding-criteria :initarg :|findingCriteria| :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor %list-findings-request-finding-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defun make-list-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria next-token max-results
                     finding-criteria)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-findings-response-next-token :initform
                         common-lisp:nil)
                        (finding-ids :initarg :|findingIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %list-findings-response-finding-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defun make-list-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token finding-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-invitations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-invitations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defun make-list-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-invitations-response-next-token :initform
                         common-lisp:nil)
                        (invitations :initarg :|invitations| :type
                         (common-lisp:or |__listOfInvitation| common-lisp:null)
                         :accessor %list-invitations-response-invitations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defun make-list-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token invitations)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-filter-criteria common-lisp:nil
                       ((includes :initarg :|includes| :type
                         (common-lisp:or |__listOfListJobsFilterTerm|
                                         common-lisp:null)
                         :accessor %list-jobs-filter-criteria-includes
                         :initform common-lisp:nil)
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or |__listOfListJobsFilterTerm|
                                         common-lisp:null)
                         :accessor %list-jobs-filter-criteria-excludes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-filter-criteria
                    'make-list-jobs-filter-criteria))
 (common-lisp:defun make-list-jobs-filter-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key includes excludes)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype list-jobs-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-jobs-filter-term common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %list-jobs-filter-term-values :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or list-jobs-filter-key common-lisp:null)
                         :accessor %list-jobs-filter-term-key :initform
                         common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or job-comparator common-lisp:null)
                         :accessor %list-jobs-filter-term-comparator :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-filter-term 'make-list-jobs-filter-term))
 (common-lisp:defun make-list-jobs-filter-term
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key comparator)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-filter-term
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   common-lisp:nil))
(common-lisp:deftype list-jobs-sort-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-jobs-sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %list-jobs-sort-criteria-order-by :initform
                         common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or list-jobs-sort-attribute-name
                                         common-lisp:null)
                         :accessor %list-jobs-sort-criteria-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-sort-criteria 'make-list-jobs-sort-criteria))
 (common-lisp:defun make-list-jobs-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-data-identifiers-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-managed-data-identifiers-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-managed-data-identifiers-request
                    'make-list-managed-data-identifiers-request))
 (common-lisp:defun make-list-managed-data-identifiers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-data-identifiers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-data-identifiers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-managed-data-identifiers-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or |__listOfManagedDataIdentifierSummary|
                                         common-lisp:null)
                         :accessor
                         %list-managed-data-identifiers-response-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-managed-data-identifiers-response
                    'make-list-managed-data-identifiers-response))
 (common-lisp:defun make-list-managed-data-identifiers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-data-identifiers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-request common-lisp:nil
                       ((only-associated :initarg :|onlyAssociated| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-members-request-only-associated :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-members-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-members-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defun make-list-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key only-associated next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-members-response-next-token :initform
                         common-lisp:nil)
                        (members :initarg :|members| :type
                         (common-lisp:or |__listOfMember| common-lisp:null)
                         :accessor %list-members-response-members :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defun make-list-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token members)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-organization-admin-accounts-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-organization-admin-accounts-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defun make-list-organization-admin-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-organization-admin-accounts-response-next-token
                         :initform common-lisp:nil)
                        (admin-accounts :initarg :|adminAccounts| :type
                         (common-lisp:or |__listOfAdminAccount|
                                         common-lisp:null)
                         :accessor
                         %list-organization-admin-accounts-response-admin-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defun make-list-organization-admin-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token admin-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "adminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-profile-artifacts-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-artifacts-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-artifacts-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-artifacts-request
                    'make-list-resource-profile-artifacts-request))
 (common-lisp:defun make-list-resource-profile-artifacts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-profile-artifacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-profile-artifacts-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-artifacts-response-next-token
                         :initform common-lisp:nil)
                        (artifacts :initarg :|artifacts| :type
                         (common-lisp:or |__listOfResourceProfileArtifact|
                                         common-lisp:null)
                         :accessor
                         %list-resource-profile-artifacts-response-artifacts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-artifacts-response
                    'make-list-resource-profile-artifacts-response))
 (common-lisp:defun make-list-resource-profile-artifacts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token artifacts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-profile-artifacts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-profile-detections-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-detections-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-detections-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-resource-profile-detections-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-detections-request
                    'make-list-resource-profile-detections-request))
 (common-lisp:defun make-list-resource-profile-detections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-profile-detections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-profile-detections-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-resource-profile-detections-response-next-token
                         :initform common-lisp:nil)
                        (detections :initarg :|detections| :type
                         (common-lisp:or |__listOfDetection| common-lisp:null)
                         :accessor
                         %list-resource-profile-detections-response-detections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-detections-response
                    'make-list-resource-profile-detections-response))
 (common-lisp:defun make-list-resource-profile-detections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token detections)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-profile-detections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sensitivity-inspection-templates-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-sensitivity-inspection-templates-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-sensitivity-inspection-templates-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sensitivity-inspection-templates-request
                    'make-list-sensitivity-inspection-templates-request))
 (common-lisp:defun make-list-sensitivity-inspection-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sensitivity-inspection-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sensitivity-inspection-templates-response
                       common-lisp:nil
                       ((sensitivity-inspection-templates :initarg
                         :|sensitivityInspectionTemplates| :type
                         (common-lisp:or
                          |__listOfSensitivityInspectionTemplatesEntry|
                          common-lisp:null)
                         :accessor
                         %list-sensitivity-inspection-templates-response-sensitivity-inspection-templates
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-sensitivity-inspection-templates-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sensitivity-inspection-templates-response
                    'make-list-sensitivity-inspection-templates-response))
 (common-lisp:defun make-list-sensitivity-inspection-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sensitivity-inspection-templates
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sensitivity-inspection-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-templates))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype macie-status () 'common-lisp:string)
(common-lisp:deftype managed-data-identifier-selector () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-data-identifier-summary common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %managed-data-identifier-summary-id :initform
                         common-lisp:nil)
                        (category :initarg :|category| :type
                         (common-lisp:or sensitive-data-item-category
                                         common-lisp:null)
                         :accessor %managed-data-identifier-summary-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'managed-data-identifier-summary
                    'make-managed-data-identifier-summary))
 (common-lisp:defun make-managed-data-identifier-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id category)
   (common-lisp:apply #'common-lisp:make-instance
                      'managed-data-identifier-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass matching-bucket common-lisp:nil
                       ((unclassifiable-object-size-in-bytes :initarg
                         :|unclassifiableObjectSizeInBytes| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor
                         %matching-bucket-unclassifiable-object-size-in-bytes
                         :initform common-lisp:nil)
                        (unclassifiable-object-count :initarg
                         :|unclassifiableObjectCount| :type
                         (common-lisp:or object-level-statistics
                                         common-lisp:null)
                         :accessor %matching-bucket-unclassifiable-object-count
                         :initform common-lisp:nil)
                        (size-in-bytes-compressed :initarg
                         :|sizeInBytesCompressed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %matching-bucket-size-in-bytes-compressed :initform
                         common-lisp:nil)
                        (size-in-bytes :initarg :|sizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %matching-bucket-size-in-bytes :initform
                         common-lisp:nil)
                        (sensitivity-score :initarg :|sensitivityScore| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %matching-bucket-sensitivity-score :initform
                         common-lisp:nil)
                        (object-count-by-encryption-type :initarg
                         :|objectCountByEncryptionType| :type
                         (common-lisp:or object-count-by-encryption-type
                                         common-lisp:null)
                         :accessor
                         %matching-bucket-object-count-by-encryption-type
                         :initform common-lisp:nil)
                        (object-count :initarg :|objectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %matching-bucket-object-count :initform
                         common-lisp:nil)
                        (last-automated-discovery-time :initarg
                         :|lastAutomatedDiscoveryTime| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %matching-bucket-last-automated-discovery-time
                         :initform common-lisp:nil)
                        (job-details :initarg :|jobDetails| :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor %matching-bucket-job-details :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %matching-bucket-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or bucket-metadata-error-code
                                         common-lisp:null)
                         :accessor %matching-bucket-error-code :initform
                         common-lisp:nil)
                        (classifiable-size-in-bytes :initarg
                         :|classifiableSizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %matching-bucket-classifiable-size-in-bytes :initform
                         common-lisp:nil)
                        (classifiable-object-count :initarg
                         :|classifiableObjectCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %matching-bucket-classifiable-object-count :initform
                         common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %matching-bucket-bucket-name :initform
                         common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %matching-bucket-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'matching-bucket 'make-matching-bucket))
 (common-lisp:defun make-matching-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unclassifiable-object-size-in-bytes
                     unclassifiable-object-count size-in-bytes-compressed
                     size-in-bytes sensitivity-score
                     object-count-by-encryption-type object-count
                     last-automated-discovery-time job-details error-message
                     error-code classifiable-size-in-bytes
                     classifiable-object-count bucket-name account-id)
   (common-lisp:apply #'common-lisp:make-instance 'matching-bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-automated-discovery-time))
      (common-lisp:list
       (common-lisp:cons "lastAutomatedDiscoveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "objectCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass matching-resource common-lisp:nil
                       ((matching-bucket :initarg :|matchingBucket| :type
                         (common-lisp:or matching-bucket common-lisp:null)
                         :accessor %matching-resource-matching-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'matching-resource 'make-matching-resource))
 (common-lisp:defun make-matching-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matching-bucket)
   (common-lisp:apply #'common-lisp:make-instance 'matching-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-bucket))
      (common-lisp:list
       (common-lisp:cons "matchingBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-resource))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %member-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %member-tags :initform common-lisp:nil)
                        (relationship-status :initarg :|relationshipStatus|
                         :type
                         (common-lisp:or relationship-status common-lisp:null)
                         :accessor %member-relationship-status :initform
                         common-lisp:nil)
                        (master-account-id :initarg :|masterAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %member-master-account-id :initform common-lisp:nil)
                        (invited-at :initarg :|invitedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %member-invited-at :initform
                         common-lisp:nil)
                        (email :initarg :|email| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %member-email :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %member-arn :initform common-lisp:nil)
                        (administrator-account-id :initarg
                         :|administratorAccountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %member-administrator-account-id :initform
                         common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %member-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defun make-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags relationship-status
                     master-account-id invited-at email arn
                     administrator-account-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-id))
      (common-lisp:list
       (common-lisp:cons "masterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monthly-schedule common-lisp:nil
                       ((day-of-month :initarg :|dayOfMonth| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %monthly-schedule-day-of-month :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'monthly-schedule 'make-monthly-schedule))
 (common-lisp:defun make-monthly-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key day-of-month)
   (common-lisp:apply #'common-lisp:make-instance 'monthly-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-schedule))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-count-by-encryption-type common-lisp:nil
                       ((unknown :initarg :|unknown| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-count-by-encryption-type-unknown :initform
                         common-lisp:nil)
                        (unencrypted :initarg :|unencrypted| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-count-by-encryption-type-unencrypted :initform
                         common-lisp:nil)
                        (s3managed :initarg :|s3Managed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-count-by-encryption-type-s3managed :initform
                         common-lisp:nil)
                        (kms-managed :initarg :|kmsManaged| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-count-by-encryption-type-kms-managed :initform
                         common-lisp:nil)
                        (customer-managed :initarg :|customerManaged| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-count-by-encryption-type-customer-managed
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-count-by-encryption-type
                    'make-object-count-by-encryption-type))
 (common-lisp:defun make-object-count-by-encryption-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unknown unencrypted s3managed kms-managed
                     customer-managed)
   (common-lisp:apply #'common-lisp:make-instance
                      'object-count-by-encryption-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed))
      (common-lisp:list
       (common-lisp:cons "customerManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-managed))
      (common-lisp:list
       (common-lisp:cons "kmsManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3managed))
      (common-lisp:list
       (common-lisp:cons "s3Managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unencrypted))
      (common-lisp:list
       (common-lisp:cons "unencrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass object-level-statistics common-lisp:nil
                       ((total :initarg :|total| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-level-statistics-total :initform
                         common-lisp:nil)
                        (storage-class :initarg :|storageClass| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-level-statistics-storage-class :initform
                         common-lisp:nil)
                        (file-type :initarg :|fileType| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %object-level-statistics-file-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-level-statistics 'make-object-level-statistics))
 (common-lisp:defun make-object-level-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total storage-class file-type)
   (common-lisp:apply #'common-lisp:make-instance 'object-level-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass occurrences common-lisp:nil
                       ((records :initarg :|records| :type
                         (common-lisp:or records common-lisp:null) :accessor
                         %occurrences-records :initform common-lisp:nil)
                        (pages :initarg :|pages| :type
                         (common-lisp:or pages common-lisp:null) :accessor
                         %occurrences-pages :initform common-lisp:nil)
                        (offset-ranges :initarg :|offsetRanges| :type
                         (common-lisp:or ranges common-lisp:null) :accessor
                         %occurrences-offset-ranges :initform common-lisp:nil)
                        (line-ranges :initarg :|lineRanges| :type
                         (common-lisp:or ranges common-lisp:null) :accessor
                         %occurrences-line-ranges :initform common-lisp:nil)
                        (cells :initarg :|cells| :type
                         (common-lisp:or cells common-lisp:null) :accessor
                         %occurrences-cells :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'occurrences 'make-occurrences))
 (common-lisp:defun make-occurrences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key records pages offset-ranges line-ranges
                     cells)
   (common-lisp:apply #'common-lisp:make-instance 'occurrences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-ranges))
      (common-lisp:list
       (common-lisp:cons "lineRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-ranges))
      (common-lisp:list
       (common-lisp:cons "offsetRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input occurrences))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype origin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass page common-lisp:nil
                       ((page-number :initarg :|pageNumber| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %page-page-number :initform common-lisp:nil)
                        (offset-range :initarg :|offsetRange| :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %page-offset-range :initform common-lisp:nil)
                        (line-range :initarg :|lineRange| :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %page-line-range :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defun make-page
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-number offset-range line-range)
   (common-lisp:apply #'common-lisp:make-instance 'page
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-range))
      (common-lisp:list
       (common-lisp:cons "lineRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-range))
      (common-lisp:list
       (common-lisp:cons "offsetRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "pageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-details common-lisp:nil
                       ((actor :initarg :|actor| :type
                         (common-lisp:or finding-actor common-lisp:null)
                         :accessor %policy-details-actor :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or finding-action common-lisp:null)
                         :accessor %policy-details-action :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-details 'make-policy-details))
 (common-lisp:defun make-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actor action)
   (common-lisp:apply #'common-lisp:make-instance 'policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actor))
      (common-lisp:list
       (common-lisp:cons "actor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-classification-export-configuration-request
                       common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or classification-export-configuration
                                         common-lisp:null)
                         :accessor
                         %put-classification-export-configuration-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'put-classification-export-configuration-request
                    'make-put-classification-export-configuration-request))
 (common-lisp:defun make-put-classification-export-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-classification-export-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-classification-export-configuration-response
                       common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or classification-export-configuration
                                         common-lisp:null)
                         :accessor
                         %put-classification-export-configuration-response-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-classification-export-configuration-response
                    'make-put-classification-export-configuration-response))
 (common-lisp:defun make-put-classification-export-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-classification-export-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-findings-publication-configuration-request
                       common-lisp:nil
                       ((security-hub-configuration :initarg
                         :|securityHubConfiguration| :type
                         (common-lisp:or security-hub-configuration
                                         common-lisp:null)
                         :accessor
                         %put-findings-publication-configuration-request-security-hub-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %put-findings-publication-configuration-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-findings-publication-configuration-request
                    'make-put-findings-publication-configuration-request))
 (common-lisp:defun make-put-findings-publication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-hub-configuration client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-findings-publication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-hub-configuration))
      (common-lisp:list
       (common-lisp:cons "securityHubConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-findings-publication-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-findings-publication-configuration-response
                    'make-put-findings-publication-configuration-response))
 (common-lisp:defun make-put-findings-publication-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-findings-publication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass range common-lisp:nil
                       ((start-column :initarg :|startColumn| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %range-start-column :initform common-lisp:nil)
                        (start :initarg :|start| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %range-start :initform common-lisp:nil)
                        (end :initarg :|end| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %range-end :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defun make-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-column start end)
   (common-lisp:apply #'common-lisp:make-instance 'range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-column))
      (common-lisp:list
       (common-lisp:cons "startColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ranges () '(trivial-types:proper-list range))
 (common-lisp:defun |make-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((record-index :initarg :|recordIndex| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %record-record-index :initform common-lisp:nil)
                        (json-path :initarg :|jsonPath| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %record-json-path :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defun make-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-index json-path)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "jsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-index))
      (common-lisp:list
       (common-lisp:cons "recordIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun |make-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relationship-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-details common-lisp:nil
                       ((replication-accounts :initarg :|replicationAccounts|
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %replication-details-replication-accounts
                         :initform common-lisp:nil)
                        (replicated-externally :initarg :|replicatedExternally|
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %replication-details-replicated-externally
                         :initform common-lisp:nil)
                        (replicated :initarg :|replicated| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %replication-details-replicated :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-details 'make-replication-details))
 (common-lisp:defun make-replication-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-accounts
                     replicated-externally replicated)
   (common-lisp:apply #'common-lisp:make-instance 'replication-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated))
      (common-lisp:list
       (common-lisp:cons "replicated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicated-externally))
      (common-lisp:list
       (common-lisp:cons "replicatedExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-accounts))
      (common-lisp:list
       (common-lisp:cons "replicationAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-profile-artifact common-lisp:nil
                       ((sensitive :initarg :|sensitive| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %resource-profile-artifact-sensitive
                         :initform common-lisp:nil)
                        (classification-result-status :initarg
                         :|classificationResultStatus| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %resource-profile-artifact-classification-result-status
                         :initform
                         (common-lisp:error
                          ":classificationresultstatus is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %resource-profile-artifact-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-profile-artifact
                    'make-resource-profile-artifact))
 (common-lisp:defun make-resource-profile-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sensitive classification-result-status
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-profile-artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-result-status))
      (common-lisp:list
       (common-lisp:cons "classificationResultStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive))
      (common-lisp:list
       (common-lisp:cons "sensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-statistics common-lisp:nil
                       ((total-items-skipped-permission-denied :initarg
                         :|totalItemsSkippedPermissionDenied| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-items-skipped-permission-denied
                         :initform common-lisp:nil)
                        (total-items-skipped-invalid-kms :initarg
                         :|totalItemsSkippedInvalidKms| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-items-skipped-invalid-kms
                         :initform common-lisp:nil)
                        (total-items-skipped-invalid-encryption :initarg
                         :|totalItemsSkippedInvalidEncryption| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-items-skipped-invalid-encryption
                         :initform common-lisp:nil)
                        (total-items-skipped :initarg :|totalItemsSkipped|
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor %resource-statistics-total-items-skipped
                         :initform common-lisp:nil)
                        (total-items-sensitive :initarg :|totalItemsSensitive|
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor %resource-statistics-total-items-sensitive
                         :initform common-lisp:nil)
                        (total-items-classified :initarg
                         :|totalItemsClassified| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-items-classified :initform
                         common-lisp:nil)
                        (total-detections-suppressed :initarg
                         :|totalDetectionsSuppressed| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-detections-suppressed
                         :initform common-lisp:nil)
                        (total-detections :initarg :|totalDetections| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-detections :initform
                         common-lisp:nil)
                        (total-bytes-classified :initarg
                         :|totalBytesClassified| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %resource-statistics-total-bytes-classified :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-statistics 'make-resource-statistics))
 (common-lisp:defun make-resource-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-items-skipped-permission-denied
                     total-items-skipped-invalid-kms
                     total-items-skipped-invalid-encryption total-items-skipped
                     total-items-sensitive total-items-classified
                     total-detections-suppressed total-detections
                     total-bytes-classified)
   (common-lisp:apply #'common-lisp:make-instance 'resource-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-bytes-classified))
      (common-lisp:list
       (common-lisp:cons "totalBytesClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-detections))
      (common-lisp:list
       (common-lisp:cons "totalDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-detections-suppressed))
      (common-lisp:list
       (common-lisp:cons "totalDetectionsSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-classified))
      (common-lisp:list
       (common-lisp:cons "totalItemsClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-sensitive))
      (common-lisp:list
       (common-lisp:cons "totalItemsSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-items-skipped))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-invalid-encryption))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedInvalidEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-invalid-kms))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedInvalidKms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-permission-denied))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedPermissionDenied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resources-affected common-lisp:nil
                       ((s3object :initarg :|s3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %resources-affected-s3object :initform
                         common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %resources-affected-s3bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resources-affected 'make-resources-affected))
 (common-lisp:defun make-resources-affected
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3object s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'resources-affected
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resources-affected))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resources-affected))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resources-affected))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reveal-configuration common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reveal-status common-lisp:null)
                         :accessor %reveal-configuration-status :initform
                         (common-lisp:error ":status is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or |__stringMin1Max2048|
                                         common-lisp:null)
                         :accessor %reveal-configuration-kms-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reveal-configuration 'make-reveal-configuration))
 (common-lisp:defun make-reveal-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'reveal-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reveal-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reveal-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reveal-configuration))
   common-lisp:nil))
(common-lisp:deftype reveal-request-status () 'common-lisp:string)
(common-lisp:deftype reveal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or key-value-pair-list common-lisp:null)
                         :accessor %s3bucket-tags :initform common-lisp:nil)
                        (public-access :initarg :|publicAccess| :type
                         (common-lisp:or bucket-public-access common-lisp:null)
                         :accessor %s3bucket-public-access :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or s3bucket-owner common-lisp:null)
                         :accessor %s3bucket-owner :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-name :initform common-lisp:nil)
                        (default-server-side-encryption :initarg
                         :|defaultServerSideEncryption| :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %s3bucket-default-server-side-encryption
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %s3bucket-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-arn :initform common-lisp:nil)
                        (allows-unencrypted-object-uploads :initarg
                         :|allowsUnencryptedObjectUploads| :type
                         (common-lisp:or allows-unencrypted-object-uploads
                                         common-lisp:null)
                         :accessor %s3bucket-allows-unencrypted-object-uploads
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3bucket 'make-s3bucket))
 (common-lisp:defun make-s3bucket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags public-access owner name
                     default-server-side-encryption created-at arn
                     allows-unencrypted-object-uploads)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "defaultServerSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3bucket-criteria-for-job common-lisp:nil
                       ((includes :initarg :|includes| :type
                         (common-lisp:or criteria-block-for-job
                                         common-lisp:null)
                         :accessor %s3bucket-criteria-for-job-includes
                         :initform common-lisp:nil)
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or criteria-block-for-job
                                         common-lisp:null)
                         :accessor %s3bucket-criteria-for-job-excludes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3bucket-criteria-for-job
                    'make-s3bucket-criteria-for-job))
 (common-lisp:defun make-s3bucket-criteria-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key includes excludes)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-criteria-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3bucket-definition-for-job common-lisp:nil
                       ((buckets :initarg :|buckets| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %s3bucket-definition-for-job-buckets
                         :initform (common-lisp:error ":buckets is required"))
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-definition-for-job-account-id :initform
                         (common-lisp:error ":accountid is required"))))
 (common-lisp:export
  (common-lisp:list 's3bucket-definition-for-job
                    'make-s3bucket-definition-for-job))
 (common-lisp:defun make-s3bucket-definition-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key buckets account-id)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-definition-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-owner common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-owner-id :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-owner-display-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3bucket-owner 'make-s3bucket-owner))
 (common-lisp:defun make-s3bucket-owner
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id display-name)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-owner
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3classification-scope common-lisp:nil
                       ((excludes :initarg :|excludes| :type
                         (common-lisp:or s3classification-scope-exclusion
                                         common-lisp:null)
                         :accessor %s3classification-scope-excludes :initform
                         (common-lisp:error ":excludes is required"))))
 (common-lisp:export
  (common-lisp:list 's3classification-scope 'make-s3classification-scope))
 (common-lisp:defun make-s3classification-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key excludes)
   (common-lisp:apply #'common-lisp:make-instance 's3classification-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3classification-scope-exclusion common-lisp:nil
                       ((bucket-names :initarg :|bucketNames| :type
                         (common-lisp:or |__listOfS3BucketName|
                                         common-lisp:null)
                         :accessor
                         %s3classification-scope-exclusion-bucket-names
                         :initform
                         (common-lisp:error ":bucketnames is required"))))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-exclusion
                    'make-s3classification-scope-exclusion))
 (common-lisp:defun make-s3classification-scope-exclusion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-names)
   (common-lisp:apply #'common-lisp:make-instance
                      's3classification-scope-exclusion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-names))
      (common-lisp:list
       (common-lisp:cons "bucketNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3classification-scope-exclusion-update common-lisp:nil
                       ((operation :initarg :|operation| :type
                         (common-lisp:or classification-scope-update-operation
                                         common-lisp:null)
                         :accessor
                         %s3classification-scope-exclusion-update-operation
                         :initform
                         (common-lisp:error ":operation is required"))
                        (bucket-names :initarg :|bucketNames| :type
                         (common-lisp:or |__listOfS3BucketName|
                                         common-lisp:null)
                         :accessor
                         %s3classification-scope-exclusion-update-bucket-names
                         :initform
                         (common-lisp:error ":bucketnames is required"))))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-exclusion-update
                    'make-s3classification-scope-exclusion-update))
 (common-lisp:defun make-s3classification-scope-exclusion-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation bucket-names)
   (common-lisp:apply #'common-lisp:make-instance
                      's3classification-scope-exclusion-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-names))
      (common-lisp:list
       (common-lisp:cons "bucketNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3classification-scope-update common-lisp:nil
                       ((excludes :initarg :|excludes| :type
                         (common-lisp:or
                          s3classification-scope-exclusion-update
                          common-lisp:null)
                         :accessor %s3classification-scope-update-excludes
                         :initform
                         (common-lisp:error ":excludes is required"))))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-update
                    'make-s3classification-scope-update))
 (common-lisp:defun make-s3classification-scope-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key excludes)
   (common-lisp:apply #'common-lisp:make-instance
                      's3classification-scope-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3destination common-lisp:nil
                       ((kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3destination-kms-key-arn :initform
                         (common-lisp:error ":kmskeyarn is required"))
                        (key-prefix :initarg :|keyPrefix| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3destination-key-prefix :initform common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3destination-bucket-name :initform
                         (common-lisp:error ":bucketname is required"))))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defun make-s3destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn key-prefix bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3job-definition common-lisp:nil
                       ((scoping :initarg :|scoping| :type
                         (common-lisp:or scoping common-lisp:null) :accessor
                         %s3job-definition-scoping :initform common-lisp:nil)
                        (bucket-definitions :initarg :|bucketDefinitions| :type
                         (common-lisp:or |__listOfS3BucketDefinitionForJob|
                                         common-lisp:null)
                         :accessor %s3job-definition-bucket-definitions
                         :initform common-lisp:nil)
                        (bucket-criteria :initarg :|bucketCriteria| :type
                         (common-lisp:or s3bucket-criteria-for-job
                                         common-lisp:null)
                         :accessor %s3job-definition-bucket-criteria :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3job-definition 'make-s3job-definition))
 (common-lisp:defun make-s3job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scoping bucket-definitions
                     bucket-criteria)
   (common-lisp:apply #'common-lisp:make-instance 's3job-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-definitions))
      (common-lisp:list
       (common-lisp:cons "bucketDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoping))
      (common-lisp:list
       (common-lisp:cons "scoping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3job-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3object common-lisp:nil
                       ((version-id :initarg :|versionId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-version-id :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or key-value-pair-list common-lisp:null)
                         :accessor %s3object-tags :initform common-lisp:nil)
                        (storage-class :initarg :|storageClass| :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %s3object-storage-class :initform
                         common-lisp:nil)
                        (size :initarg :|size| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %s3object-size :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :|serverSideEncryption| :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %s3object-server-side-encryption :initform
                         common-lisp:nil)
                        (public-access :initarg :|publicAccess| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %s3object-public-access :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-path :initform common-lisp:nil)
                        (last-modified :initarg :|lastModified| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %s3object-last-modified :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-key :initform common-lisp:nil)
                        (extension :initarg :|extension| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-extension :initform common-lisp:nil)
                        (e-tag :initarg :|eTag| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-e-tag :initform common-lisp:nil)
                        (bucket-arn :initarg :|bucketArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3object-bucket-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defun make-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id tags storage-class size
                     server-side-encryption public-access path last-modified
                     key extension e-tag bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'e-tag))
      (common-lisp:list
       (common-lisp:cons "eTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3words-list common-lisp:nil
                       ((object-key :initarg :|objectKey| :type
                         (common-lisp:or |__stringMin1Max1024PatternSS|
                                         common-lisp:null)
                         :accessor %s3words-list-object-key :initform
                         (common-lisp:error ":objectkey is required"))
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or |__stringMin3Max255PatternAZaZ093255|
                                         common-lisp:null)
                         :accessor %s3words-list-bucket-name :initform
                         (common-lisp:error ":bucketname is required"))))
 (common-lisp:export (common-lisp:list 's3words-list 'make-s3words-list))
 (common-lisp:defun make-s3words-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-key bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3words-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3words-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3words-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "objectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3words-list))
   common-lisp:nil))
(common-lisp:deftype scope-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scoping common-lisp:nil
                       ((includes :initarg :|includes| :type
                         (common-lisp:or job-scoping-block common-lisp:null)
                         :accessor %scoping-includes :initform common-lisp:nil)
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or job-scoping-block common-lisp:null)
                         :accessor %scoping-excludes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scoping 'make-scoping))
 (common-lisp:defun make-scoping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key includes excludes)
   (common-lisp:apply #'common-lisp:make-instance 'scoping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scoping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scoping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scoping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-bucket-criteria common-lisp:nil
                       ((includes :initarg :|includes| :type
                         (common-lisp:or search-resources-criteria-block
                                         common-lisp:null)
                         :accessor %search-resources-bucket-criteria-includes
                         :initform common-lisp:nil)
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or search-resources-criteria-block
                                         common-lisp:null)
                         :accessor %search-resources-bucket-criteria-excludes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-bucket-criteria
                    'make-search-resources-bucket-criteria))
 (common-lisp:defun make-search-resources-bucket-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key includes excludes)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-bucket-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   common-lisp:nil))
(common-lisp:deftype search-resources-comparator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-resources-criteria common-lisp:nil
                       ((tag-criterion :initarg :|tagCriterion| :type
                         (common-lisp:or search-resources-tag-criterion
                                         common-lisp:null)
                         :accessor %search-resources-criteria-tag-criterion
                         :initform common-lisp:nil)
                        (simple-criterion :initarg :|simpleCriterion| :type
                         (common-lisp:or search-resources-simple-criterion
                                         common-lisp:null)
                         :accessor %search-resources-criteria-simple-criterion
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-criteria
                    'make-search-resources-criteria))
 (common-lisp:defun make-search-resources-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-criterion simple-criterion)
   (common-lisp:apply #'common-lisp:make-instance 'search-resources-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-criterion))
      (common-lisp:list
       (common-lisp:cons "simpleCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-criterion))
      (common-lisp:list
       (common-lisp:cons "tagCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-criteria-block common-lisp:nil
                       ((and :initarg :|and| :type
                         (common-lisp:or |__listOfSearchResourcesCriteria|
                                         common-lisp:null)
                         :accessor %search-resources-criteria-block-and
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-criteria-block
                    'make-search-resources-criteria-block))
 (common-lisp:defun make-search-resources-criteria-block
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-criteria-block
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-request common-lisp:nil
                       ((sort-criteria :initarg :|sortCriteria| :type
                         (common-lisp:or search-resources-sort-criteria
                                         common-lisp:null)
                         :accessor %search-resources-request-sort-criteria
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %search-resources-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %search-resources-request-max-results
                         :initform common-lisp:nil)
                        (bucket-criteria :initarg :|bucketCriteria| :type
                         (common-lisp:or search-resources-bucket-criteria
                                         common-lisp:null)
                         :accessor %search-resources-request-bucket-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-request 'make-search-resources-request))
 (common-lisp:defun make-search-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-criteria next-token max-results
                     bucket-criteria)
   (common-lisp:apply #'common-lisp:make-instance 'search-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %search-resources-response-next-token :initform
                         common-lisp:nil)
                        (matching-resources :initarg :|matchingResources| :type
                         (common-lisp:or |__listOfMatchingResource|
                                         common-lisp:null)
                         :accessor
                         %search-resources-response-matching-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-response
                    'make-search-resources-response))
 (common-lisp:defun make-search-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token matching-resources)
   (common-lisp:apply #'common-lisp:make-instance 'search-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-resources))
      (common-lisp:list
       (common-lisp:cons "matchingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-simple-criterion common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %search-resources-simple-criterion-values
                         :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or search-resources-simple-criterion-key
                                         common-lisp:null)
                         :accessor %search-resources-simple-criterion-key
                         :initform common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or search-resources-comparator
                                         common-lisp:null)
                         :accessor
                         %search-resources-simple-criterion-comparator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-simple-criterion
                    'make-search-resources-simple-criterion))
 (common-lisp:defun make-search-resources-simple-criterion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key comparator)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-simple-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   common-lisp:nil))
(common-lisp:deftype search-resources-simple-criterion-key ()
  'common-lisp:string)
(common-lisp:deftype search-resources-sort-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-resources-sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %search-resources-sort-criteria-order-by :initform
                         common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or search-resources-sort-attribute-name
                                         common-lisp:null)
                         :accessor
                         %search-resources-sort-criteria-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-sort-criteria
                    'make-search-resources-sort-criteria))
 (common-lisp:defun make-search-resources-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-tag-criterion common-lisp:nil
                       ((tag-values :initarg :|tagValues| :type
                         (common-lisp:or
                          |__listOfSearchResourcesTagCriterionPair|
                          common-lisp:null)
                         :accessor %search-resources-tag-criterion-tag-values
                         :initform common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or search-resources-comparator
                                         common-lisp:null)
                         :accessor %search-resources-tag-criterion-comparator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-tag-criterion
                    'make-search-resources-tag-criterion))
 (common-lisp:defun make-search-resources-tag-criterion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values comparator)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-tag-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-tag-criterion-pair common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %search-resources-tag-criterion-pair-value :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %search-resources-tag-criterion-pair-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-tag-criterion-pair
                    'make-search-resources-tag-criterion-pair))
 (common-lisp:defun make-search-resources-tag-criterion-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-resources-tag-criterion-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-hub-configuration common-lisp:nil
                       ((publish-policy-findings :initarg
                         :|publishPolicyFindings| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %security-hub-configuration-publish-policy-findings
                         :initform
                         (common-lisp:error
                          ":publishpolicyfindings is required"))
                        (publish-classification-findings :initarg
                         :|publishClassificationFindings| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %security-hub-configuration-publish-classification-findings
                         :initform
                         (common-lisp:error
                          ":publishclassificationfindings is required"))))
 (common-lisp:export
  (common-lisp:list 'security-hub-configuration
                    'make-security-hub-configuration))
 (common-lisp:defun make-security-hub-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publish-policy-findings
                     publish-classification-findings)
   (common-lisp:apply #'common-lisp:make-instance 'security-hub-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-classification-findings))
      (common-lisp:list
       (common-lisp:cons "publishClassificationFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-policy-findings))
      (common-lisp:list
       (common-lisp:cons "publishPolicyFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data ()
   '(trivial-types:proper-list sensitive-data-item))
 (common-lisp:defun |make-sensitive-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-data-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sensitive-data-item common-lisp:nil
                       ((total-count :initarg :|totalCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %sensitive-data-item-total-count :initform
                         common-lisp:nil)
                        (detections :initarg :|detections| :type
                         (common-lisp:or default-detections common-lisp:null)
                         :accessor %sensitive-data-item-detections :initform
                         common-lisp:nil)
                        (category :initarg :|category| :type
                         (common-lisp:or sensitive-data-item-category
                                         common-lisp:null)
                         :accessor %sensitive-data-item-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-item 'make-sensitive-data-item))
 (common-lisp:defun make-sensitive-data-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-count detections category)
   (common-lisp:apply #'common-lisp:make-instance 'sensitive-data-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   common-lisp:nil))
(common-lisp:deftype sensitive-data-item-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-data-occurrences () 'common-lisp:hash-table)
 (common-lisp:defun |make-sensitive-data-occurrences|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass sensitivity-aggregations common-lisp:nil
                       ((total-size-in-bytes :initarg :|totalSizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %sensitivity-aggregations-total-size-in-bytes
                         :initform common-lisp:nil)
                        (total-count :initarg :|totalCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %sensitivity-aggregations-total-count :initform
                         common-lisp:nil)
                        (publicly-accessible-count :initarg
                         :|publiclyAccessibleCount| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %sensitivity-aggregations-publicly-accessible-count
                         :initform common-lisp:nil)
                        (classifiable-size-in-bytes :initarg
                         :|classifiableSizeInBytes| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %sensitivity-aggregations-classifiable-size-in-bytes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-aggregations 'make-sensitivity-aggregations))
 (common-lisp:defun make-sensitivity-aggregations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-size-in-bytes total-count
                     publicly-accessible-count classifiable-size-in-bytes)
   (common-lisp:apply #'common-lisp:make-instance 'sensitivity-aggregations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publicly-accessible-count))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessibleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "totalSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sensitivity-inspection-template-excludes common-lisp:nil
                       ((managed-data-identifier-ids :initarg
                         :|managedDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %sensitivity-inspection-template-excludes-managed-data-identifier-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-template-excludes
                    'make-sensitivity-inspection-template-excludes))
 (common-lisp:defun make-sensitivity-inspection-template-excludes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-data-identifier-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'sensitivity-inspection-template-excludes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   common-lisp:nil))
(common-lisp:deftype sensitivity-inspection-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sensitivity-inspection-template-includes common-lisp:nil
                       ((managed-data-identifier-ids :initarg
                         :|managedDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %sensitivity-inspection-template-includes-managed-data-identifier-ids
                         :initform common-lisp:nil)
                        (custom-data-identifier-ids :initarg
                         :|customDataIdentifierIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %sensitivity-inspection-template-includes-custom-data-identifier-ids
                         :initform common-lisp:nil)
                        (allow-list-ids :initarg :|allowListIds| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %sensitivity-inspection-template-includes-allow-list-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-template-includes
                    'make-sensitivity-inspection-template-includes))
 (common-lisp:defun make-sensitivity-inspection-template-includes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-data-identifier-ids
                     custom-data-identifier-ids allow-list-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'sensitivity-inspection-template-includes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sensitivity-inspection-templates-entry common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %sensitivity-inspection-templates-entry-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %sensitivity-inspection-templates-entry-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-templates-entry
                    'make-sensitivity-inspection-templates-entry))
 (common-lisp:defun make-sensitivity-inspection-templates-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'sensitivity-inspection-templates-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption common-lisp:nil
                       ((kms-master-key-id :initarg :|kmsMasterKeyId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %server-side-encryption-kms-master-key-id :initform
                         common-lisp:nil)
                        (encryption-type :initarg :|encryptionType| :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor %server-side-encryption-encryption-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption 'make-server-side-encryption))
 (common-lisp:defun make-server-side-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-master-key-id encryption-type)
   (common-lisp:apply #'common-lisp:make-instance 'server-side-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-limit common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %service-limit-value :initform common-lisp:nil)
                        (unit :initarg :|unit| :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         %service-limit-unit :initform common-lisp:nil)
                        (is-service-limited :initarg :|isServiceLimited| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %service-limit-is-service-limited :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-limit 'make-service-limit))
 (common-lisp:defun make-service-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value unit is-service-limited)
   (common-lisp:apply #'common-lisp:make-instance 'service-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-service-limited))
      (common-lisp:list
       (common-lisp:cons "isServiceLimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass session-context common-lisp:nil
                       ((session-issuer :initarg :|sessionIssuer| :type
                         (common-lisp:or session-issuer common-lisp:null)
                         :accessor %session-context-session-issuer :initform
                         common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or session-context-attributes
                                         common-lisp:null)
                         :accessor %session-context-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session-context 'make-session-context))
 (common-lisp:defun make-session-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-issuer attributes)
   (common-lisp:apply #'common-lisp:make-instance 'session-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-issuer))
      (common-lisp:list
       (common-lisp:cons "sessionIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-context-attributes common-lisp:nil
                       ((mfa-authenticated :initarg :|mfaAuthenticated| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %session-context-attributes-mfa-authenticated
                         :initform common-lisp:nil)
                        (creation-date :initarg :|creationDate| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %session-context-attributes-creation-date
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-context-attributes
                    'make-session-context-attributes))
 (common-lisp:defun make-session-context-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mfa-authenticated creation-date)
   (common-lisp:apply #'common-lisp:make-instance 'session-context-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-authenticated))
      (common-lisp:list
       (common-lisp:cons "mfaAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-issuer common-lisp:nil
                       ((user-name :initarg :|userName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %session-issuer-user-name :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %session-issuer-type :initform common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %session-issuer-principal-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %session-issuer-arn :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %session-issuer-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session-issuer 'make-session-issuer))
 (common-lisp:defun make-session-issuer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name type principal-id arn
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance 'session-issuer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-issuer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass severity common-lisp:nil
                       ((score :initarg :|score| :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %severity-score :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or severity-description common-lisp:null)
                         :accessor %severity-description :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'severity 'make-severity))
 (common-lisp:defun make-severity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key score description)
   (common-lisp:apply #'common-lisp:make-instance 'severity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity))
   common-lisp:nil))
(common-lisp:deftype severity-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass severity-level common-lisp:nil
                       ((severity :initarg :|severity| :type
                         (common-lisp:or data-identifier-severity
                                         common-lisp:null)
                         :accessor %severity-level-severity :initform
                         (common-lisp:error ":severity is required"))
                        (occurrences-threshold :initarg :|occurrencesThreshold|
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor %severity-level-occurrences-threshold
                         :initform
                         (common-lisp:error
                          ":occurrencesthreshold is required"))))
 (common-lisp:export (common-lisp:list 'severity-level 'make-severity-level))
 (common-lisp:defun make-severity-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity occurrences-threshold)
   (common-lisp:apply #'common-lisp:make-instance 'severity-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'occurrences-threshold))
      (common-lisp:list
       (common-lisp:cons "occurrencesThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype severity-level-list ()
   '(trivial-types:proper-list severity-level))
 (common-lisp:defun |make-severity-level-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list severity-level))
   aws-sdk/generator/shape::members))
(common-lisp:deftype shared-access () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass simple-criterion-for-job common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %simple-criterion-for-job-values :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or simple-criterion-key-for-job
                                         common-lisp:null)
                         :accessor %simple-criterion-for-job-key :initform
                         common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or job-comparator common-lisp:null)
                         :accessor %simple-criterion-for-job-comparator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simple-criterion-for-job 'make-simple-criterion-for-job))
 (common-lisp:defun make-simple-criterion-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key comparator)
   (common-lisp:apply #'common-lisp:make-instance 'simple-criterion-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   common-lisp:nil))
(common-lisp:deftype simple-criterion-key-for-job () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass simple-scope-term common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %simple-scope-term-values :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or scope-filter-key common-lisp:null)
                         :accessor %simple-scope-term-key :initform
                         common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or job-comparator common-lisp:null)
                         :accessor %simple-scope-term-comparator :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simple-scope-term 'make-simple-scope-term))
 (common-lisp:defun make-simple-scope-term
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key comparator)
   (common-lisp:apply #'common-lisp:make-instance 'simple-scope-term
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-scope-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %sort-criteria-order-by :initform common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %sort-criteria-attribute-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defun make-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass statistics common-lisp:nil
                       ((number-of-runs :initarg :|numberOfRuns| :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %statistics-number-of-runs :initform common-lisp:nil)
                        (approximate-number-of-objects-to-process :initarg
                         :|approximateNumberOfObjectsToProcess| :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %statistics-approximate-number-of-objects-to-process
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defun make-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-runs
                     approximate-number-of-objects-to-process)
   (common-lisp:apply #'common-lisp:make-instance 'statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-number-of-objects-to-process))
      (common-lisp:list
       (common-lisp:cons "approximateNumberOfObjectsToProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-runs))
      (common-lisp:list
       (common-lisp:cons "numberOfRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suppress-data-identifier common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or data-identifier-type common-lisp:null)
                         :accessor %suppress-data-identifier-type :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %suppress-data-identifier-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'suppress-data-identifier 'make-suppress-data-identifier))
 (common-lisp:defun make-suppress-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'suppress-data-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-criterion-for-job common-lisp:nil
                       ((tag-values :initarg :|tagValues| :type
                         (common-lisp:or |__listOfTagCriterionPairForJob|
                                         common-lisp:null)
                         :accessor %tag-criterion-for-job-tag-values :initform
                         common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or job-comparator common-lisp:null)
                         :accessor %tag-criterion-for-job-comparator :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-criterion-for-job 'make-tag-criterion-for-job))
 (common-lisp:defun make-tag-criterion-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values comparator)
   (common-lisp:apply #'common-lisp:make-instance 'tag-criterion-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-criterion-pair-for-job common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-criterion-pair-for-job-value :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-criterion-pair-for-job-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-criterion-pair-for-job
                    'make-tag-criterion-pair-for-job))
 (common-lisp:defun make-tag-criterion-pair-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-criterion-pair-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-scope-term common-lisp:nil
                       ((target :initarg :|target| :type
                         (common-lisp:or tag-target common-lisp:null) :accessor
                         %tag-scope-term-target :initform common-lisp:nil)
                        (tag-values :initarg :|tagValues| :type
                         (common-lisp:or |__listOfTagValuePair|
                                         common-lisp:null)
                         :accessor %tag-scope-term-tag-values :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-scope-term-key :initform common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or job-comparator common-lisp:null)
                         :accessor %tag-scope-term-comparator :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-scope-term 'make-tag-scope-term))
 (common-lisp:defun make-tag-scope-term
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target tag-values key comparator)
   (common-lisp:apply #'common-lisp:make-instance 'tag-scope-term
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-scope-term))
   common-lisp:nil))
(common-lisp:deftype tag-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-value-pair common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-value-pair-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-value-pair-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-value-pair 'make-tag-value-pair))
 (common-lisp:defun make-tag-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-custom-data-identifier-request common-lisp:nil
                       ((sample-text :initarg :|sampleText| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %test-custom-data-identifier-request-sample-text
                         :initform
                         (common-lisp:error ":sampletext is required"))
                        (regex :initarg :|regex| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %test-custom-data-identifier-request-regex :initform
                         (common-lisp:error ":regex is required"))
                        (maximum-match-distance :initarg
                         :|maximumMatchDistance| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %test-custom-data-identifier-request-maximum-match-distance
                         :initform common-lisp:nil)
                        (keywords :initarg :|keywords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %test-custom-data-identifier-request-keywords
                         :initform common-lisp:nil)
                        (ignore-words :initarg :|ignoreWords| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %test-custom-data-identifier-request-ignore-words
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-custom-data-identifier-request
                    'make-test-custom-data-identifier-request))
 (common-lisp:defun make-test-custom-data-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-text regex maximum-match-distance
                     keywords ignore-words)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-custom-data-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-text))
      (common-lisp:list
       (common-lisp:cons "sampleText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-custom-data-identifier-response common-lisp:nil
                       ((match-count :initarg :|matchCount| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %test-custom-data-identifier-response-match-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-custom-data-identifier-response
                    'make-test-custom-data-identifier-response))
 (common-lisp:defun make-test-custom-data-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-custom-data-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-count))
      (common-lisp:list
       (common-lisp:cons "matchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-range () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype unavailability-reason-code () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unprocessed-account common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %unprocessed-account-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %unprocessed-account-error-code :initform
                         common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %unprocessed-account-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-account 'make-unprocessed-account))
 (common-lisp:defun make-unprocessed-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code account-id)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-allow-list-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |__stringMin1Max128Pattern|
                                         common-lisp:null)
                         :accessor %update-allow-list-request-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-allow-list-request-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |__stringMin1Max512PatternSS|
                                         common-lisp:null)
                         :accessor %update-allow-list-request-description
                         :initform common-lisp:nil)
                        (criteria :initarg :|criteria| :type
                         (common-lisp:or allow-list-criteria common-lisp:null)
                         :accessor %update-allow-list-request-criteria
                         :initform
                         (common-lisp:error ":criteria is required"))))
 (common-lisp:export
  (common-lisp:list 'update-allow-list-request
                    'make-update-allow-list-request))
 (common-lisp:defun make-update-allow-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id description criteria)
   (common-lisp:apply #'common-lisp:make-instance 'update-allow-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-allow-list-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__stringMin22Max22PatternAZ0922|
                                         common-lisp:null)
                         :accessor %update-allow-list-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or
                          |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                          common-lisp:null)
                         :accessor %update-allow-list-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-allow-list-response
                    'make-update-allow-list-response))
 (common-lisp:defun make-update-allow-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-allow-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-automated-discovery-configuration-request
                       common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or automated-discovery-status
                                         common-lisp:null)
                         :accessor
                         %update-automated-discovery-configuration-request-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'update-automated-discovery-configuration-request
                    'make-update-automated-discovery-configuration-request))
 (common-lisp:defun make-update-automated-discovery-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-automated-discovery-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-automated-discovery-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-automated-discovery-configuration-response
                    'make-update-automated-discovery-configuration-response))
 (common-lisp:defun make-update-automated-discovery-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-automated-discovery-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-classification-job-request common-lisp:nil
                       ((job-status :initarg :|jobStatus| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %update-classification-job-request-job-status
                         :initform
                         (common-lisp:error ":jobstatus is required"))
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-classification-job-request-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-classification-job-request
                    'make-update-classification-job-request))
 (common-lisp:defun make-update-classification-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-status job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-classification-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-classification-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-classification-job-response
                    'make-update-classification-job-response))
 (common-lisp:defun make-update-classification-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-classification-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-classification-scope-request common-lisp:nil
                       ((s3 :initarg :|s3| :type
                         (common-lisp:or s3classification-scope-update
                                         common-lisp:null)
                         :accessor %update-classification-scope-request-s3
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-classification-scope-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-classification-scope-request
                    'make-update-classification-scope-request))
 (common-lisp:defun make-update-classification-scope-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3 id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-classification-scope-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-classification-scope-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-classification-scope-response
                    'make-update-classification-scope-response))
 (common-lisp:defun make-update-classification-scope-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-classification-scope-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-filter-request common-lisp:nil
                       ((position :initarg :|position| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-findings-filter-request-position
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-request-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-request-id :initform
                         (common-lisp:error ":id is required"))
                        (finding-criteria :initarg :|findingCriteria| :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         %update-findings-filter-request-finding-criteria
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-request-description :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-request-client-token :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or findings-filter-action
                                         common-lisp:null)
                         :accessor %update-findings-filter-request-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-findings-filter-request
                    'make-update-findings-filter-request))
 (common-lisp:defun make-update-findings-filter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key position name id finding-criteria
                     description client-token action)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-findings-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-filter-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-findings-filter-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-findings-filter-response
                    'make-update-findings-filter-response))
 (common-lisp:defun make-update-findings-filter-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-findings-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-macie-session-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or macie-status common-lisp:null)
                         :accessor %update-macie-session-request-status
                         :initform common-lisp:nil)
                        (finding-publishing-frequency :initarg
                         :|findingPublishingFrequency| :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         %update-macie-session-request-finding-publishing-frequency
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-macie-session-request
                    'make-update-macie-session-request))
 (common-lisp:defun make-update-macie-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status finding-publishing-frequency)
   (common-lisp:apply #'common-lisp:make-instance 'update-macie-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-macie-session-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-macie-session-response
                    'make-update-macie-session-response))
 (common-lisp:defun make-update-macie-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-macie-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-session-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or macie-status common-lisp:null)
                         :accessor %update-member-session-request-status
                         :initform (common-lisp:error ":status is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-member-session-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-member-session-request
                    'make-update-member-session-request))
 (common-lisp:defun make-update-member-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-member-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-session-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-member-session-response
                    'make-update-member-session-response))
 (common-lisp:defun make-update-member-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-member-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-request
                       common-lisp:nil
                       ((auto-enable :initarg :|autoEnable| :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %update-organization-configuration-request-auto-enable
                         :initform
                         (common-lisp:error ":autoenable is required"))))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defun make-update-organization-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defun make-update-organization-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-profile-detections-request
                       common-lisp:nil
                       ((suppress-data-identifiers :initarg
                         :|suppressDataIdentifiers| :type
                         (common-lisp:or |__listOfSuppressDataIdentifier|
                                         common-lisp:null)
                         :accessor
                         %update-resource-profile-detections-request-suppress-data-identifiers
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-resource-profile-detections-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-detections-request
                    'make-update-resource-profile-detections-request))
 (common-lisp:defun make-update-resource-profile-detections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suppress-data-identifiers resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-profile-detections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "suppressDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-profile-detections-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-detections-response
                    'make-update-resource-profile-detections-response))
 (common-lisp:defun make-update-resource-profile-detections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-profile-detections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-profile-request common-lisp:nil
                       ((sensitivity-score-override :initarg
                         :|sensitivityScoreOverride| :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-resource-profile-request-sensitivity-score-override
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-resource-profile-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-request
                    'make-update-resource-profile-request))
 (common-lisp:defun make-update-resource-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sensitivity-score-override resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-score-override))
      (common-lisp:list
       (common-lisp:cons "sensitivityScoreOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-profile-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-response
                    'make-update-resource-profile-response))
 (common-lisp:defun make-update-resource-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reveal-configuration-request common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or reveal-configuration common-lisp:null)
                         :accessor
                         %update-reveal-configuration-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'update-reveal-configuration-request
                    'make-update-reveal-configuration-request))
 (common-lisp:defun make-update-reveal-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-reveal-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reveal-configuration-response common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or reveal-configuration common-lisp:null)
                         :accessor
                         %update-reveal-configuration-response-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-reveal-configuration-response
                    'make-update-reveal-configuration-response))
 (common-lisp:defun make-update-reveal-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-reveal-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sensitivity-inspection-template-request
                       common-lisp:nil
                       ((includes :initarg :|includes| :type
                         (common-lisp:or
                          sensitivity-inspection-template-includes
                          common-lisp:null)
                         :accessor
                         %update-sensitivity-inspection-template-request-includes
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-sensitivity-inspection-template-request-id
                         :initform (common-lisp:error ":id is required"))
                        (excludes :initarg :|excludes| :type
                         (common-lisp:or
                          sensitivity-inspection-template-excludes
                          common-lisp:null)
                         :accessor
                         %update-sensitivity-inspection-template-request-excludes
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-sensitivity-inspection-template-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-sensitivity-inspection-template-request
                    'make-update-sensitivity-inspection-template-request))
 (common-lisp:defun make-update-sensitivity-inspection-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key includes id excludes description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sensitivity-inspection-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sensitivity-inspection-template-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-sensitivity-inspection-template-response
                    'make-update-sensitivity-inspection-template-response))
 (common-lisp:defun make-update-sensitivity-inspection-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sensitivity-inspection-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-by-account common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or usage-type common-lisp:null) :accessor
                         %usage-by-account-type :initform common-lisp:nil)
                        (service-limit :initarg :|serviceLimit| :type
                         (common-lisp:or service-limit common-lisp:null)
                         :accessor %usage-by-account-service-limit :initform
                         common-lisp:nil)
                        (estimated-cost :initarg :|estimatedCost| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %usage-by-account-estimated-cost :initform
                         common-lisp:nil)
                        (currency :initarg :|currency| :type
                         (common-lisp:or currency common-lisp:null) :accessor
                         %usage-by-account-currency :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-by-account 'make-usage-by-account))
 (common-lisp:defun make-usage-by-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type service-limit estimated-cost
                     currency)
   (common-lisp:apply #'common-lisp:make-instance 'usage-by-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-by-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-by-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-limit))
      (common-lisp:list
       (common-lisp:cons "serviceLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-by-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-record common-lisp:nil
                       ((usage :initarg :|usage| :type
                         (common-lisp:or |__listOfUsageByAccount|
                                         common-lisp:null)
                         :accessor %usage-record-usage :initform
                         common-lisp:nil)
                        (free-trial-start-date :initarg :|freeTrialStartDate|
                         :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %usage-record-free-trial-start-date
                         :initform common-lisp:nil)
                        (automated-discovery-free-trial-start-date :initarg
                         :|automatedDiscoveryFreeTrialStartDate| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %usage-record-automated-discovery-free-trial-start-date
                         :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %usage-record-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'usage-record 'make-usage-record))
 (common-lisp:defun make-usage-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage free-trial-start-date
                     automated-discovery-free-trial-start-date account-id)
   (common-lisp:apply #'common-lisp:make-instance 'usage-record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-free-trial-start-date))
      (common-lisp:list
       (common-lisp:cons "automatedDiscoveryFreeTrialStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-start-date))
      (common-lisp:list
       (common-lisp:cons "freeTrialStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-statistics-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %usage-statistics-filter-values :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or usage-statistics-filter-key
                                         common-lisp:null)
                         :accessor %usage-statistics-filter-key :initform
                         common-lisp:nil)
                        (comparator :initarg :|comparator| :type
                         (common-lisp:or usage-statistics-filter-comparator
                                         common-lisp:null)
                         :accessor %usage-statistics-filter-comparator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-statistics-filter 'make-usage-statistics-filter))
 (common-lisp:defun make-usage-statistics-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key comparator)
   (common-lisp:apply #'common-lisp:make-instance 'usage-statistics-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   common-lisp:nil))
(common-lisp:deftype usage-statistics-filter-comparator () 'common-lisp:string)
(common-lisp:deftype usage-statistics-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-statistics-sort-by common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %usage-statistics-sort-by-order-by :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or usage-statistics-sort-key
                                         common-lisp:null)
                         :accessor %usage-statistics-sort-by-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-statistics-sort-by 'make-usage-statistics-sort-by))
 (common-lisp:defun make-usage-statistics-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by key)
   (common-lisp:apply #'common-lisp:make-instance 'usage-statistics-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   common-lisp:nil))
(common-lisp:deftype usage-statistics-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-total common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or usage-type common-lisp:null) :accessor
                         %usage-total-type :initform common-lisp:nil)
                        (estimated-cost :initarg :|estimatedCost| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %usage-total-estimated-cost :initform common-lisp:nil)
                        (currency :initarg :|currency| :type
                         (common-lisp:or currency common-lisp:null) :accessor
                         %usage-total-currency :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'usage-total 'make-usage-total))
 (common-lisp:defun make-usage-total
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type estimated-cost currency)
   (common-lisp:apply #'common-lisp:make-instance 'usage-total
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-total))
   common-lisp:nil))
(common-lisp:deftype usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-identity common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or user-identity-type common-lisp:null)
                         :accessor %user-identity-type :initform
                         common-lisp:nil)
                        (root :initarg :|root| :type
                         (common-lisp:or user-identity-root common-lisp:null)
                         :accessor %user-identity-root :initform
                         common-lisp:nil)
                        (iam-user :initarg :|iamUser| :type
                         (common-lisp:or iam-user common-lisp:null) :accessor
                         %user-identity-iam-user :initform common-lisp:nil)
                        (federated-user :initarg :|federatedUser| :type
                         (common-lisp:or federated-user common-lisp:null)
                         :accessor %user-identity-federated-user :initform
                         common-lisp:nil)
                        (aws-service :initarg :|awsService| :type
                         (common-lisp:or aws-service common-lisp:null)
                         :accessor %user-identity-aws-service :initform
                         common-lisp:nil)
                        (aws-account :initarg :|awsAccount| :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor %user-identity-aws-account :initform
                         common-lisp:nil)
                        (assumed-role :initarg :|assumedRole| :type
                         (common-lisp:or assumed-role common-lisp:null)
                         :accessor %user-identity-assumed-role :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defun make-user-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type root iam-user federated-user
                     aws-service aws-account assumed-role)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role))
      (common-lisp:list
       (common-lisp:cons "assumedRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account))
      (common-lisp:list
       (common-lisp:cons "awsAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-service))
      (common-lisp:list
       (common-lisp:cons "awsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user))
      (common-lisp:list
       (common-lisp:cons "federatedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user))
      (common-lisp:list
       (common-lisp:cons "iamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-identity-root common-lisp:nil
                       ((principal-id :initarg :|principalId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %user-identity-root-principal-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %user-identity-root-arn :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %user-identity-root-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-identity-root 'make-user-identity-root))
 (common-lisp:defun make-user-identity-root
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id arn account-id)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity-root
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity-root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity-root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity-root))
   common-lisp:nil))
(common-lisp:deftype user-identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-paused-details common-lisp:nil
                       ((job-paused-at :initarg :|jobPausedAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %user-paused-details-job-paused-at :initform
                         common-lisp:nil)
                        (job-imminent-expiration-health-event-arn :initarg
                         :|jobImminentExpirationHealthEventArn| :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %user-paused-details-job-imminent-expiration-health-event-arn
                         :initform common-lisp:nil)
                        (job-expires-at :initarg :|jobExpiresAt| :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %user-paused-details-job-expires-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-paused-details 'make-user-paused-details))
 (common-lisp:defun make-user-paused-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-paused-at
                     job-imminent-expiration-health-event-arn job-expires-at)
   (common-lisp:apply #'common-lisp:make-instance 'user-paused-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-paused-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-paused-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-expires-at))
      (common-lisp:list
       (common-lisp:cons "jobExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-imminent-expiration-health-event-arn))
      (common-lisp:list
       (common-lisp:cons "jobImminentExpirationHealthEventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-paused-at))
      (common-lisp:list
       (common-lisp:cons "jobPausedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-paused-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (macie2-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass weekly-schedule common-lisp:nil
                       ((day-of-week :initarg :|dayOfWeek| :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor %weekly-schedule-day-of-week :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'weekly-schedule 'make-weekly-schedule))
 (common-lisp:defun make-weekly-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key day-of-week)
   (common-lisp:apply #'common-lisp:make-instance 'weekly-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weekly-schedule))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAdminAccount| ()
   '(trivial-types:proper-list admin-account))
 (common-lisp:defun |make-__listofadminaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAllowListSummary| ()
   '(trivial-types:proper-list allow-list-summary))
 (common-lisp:defun |make-__listofallowlistsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allow-list-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchGetCustomDataIdentifierSummary| ()
   '(trivial-types:proper-list batch-get-custom-data-identifier-summary))
 (common-lisp:defun |make-__listofbatchgetcustomdataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-custom-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBucketMetadata| ()
   '(trivial-types:proper-list bucket-metadata))
 (common-lisp:defun |make-__listofbucketmetadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClassificationScopeSummary| ()
   '(trivial-types:proper-list classification-scope-summary))
 (common-lisp:defun |make-__listofclassificationscopesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            classification-scope-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCriteriaForJob| ()
   '(trivial-types:proper-list criteria-for-job))
 (common-lisp:defun |make-__listofcriteriaforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list criteria-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCustomDataIdentifierSummary| ()
   '(trivial-types:proper-list custom-data-identifier-summary))
 (common-lisp:defun |make-__listofcustomdataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDetectedDataDetails| ()
   '(trivial-types:proper-list detected-data-details))
 (common-lisp:defun |make-__listofdetecteddatadetails|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detected-data-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDetection| ()
   '(trivial-types:proper-list detection))
 (common-lisp:defun |make-__listofdetection|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFinding| ()
   '(trivial-types:proper-list finding))
 (common-lisp:defun |make-__listoffinding|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFindingType| ()
   '(trivial-types:proper-list finding-type))
 (common-lisp:defun |make-__listoffindingtype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFindingsFilterListItem| ()
   '(trivial-types:proper-list findings-filter-list-item))
 (common-lisp:defun |make-__listoffindingsfilterlistitem|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            findings-filter-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGroupCount| ()
   '(trivial-types:proper-list group-count))
 (common-lisp:defun |make-__listofgroupcount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInvitation| ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun |make-__listofinvitation|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJobScopeTerm| ()
   '(trivial-types:proper-list job-scope-term))
 (common-lisp:defun |make-__listofjobscopeterm|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-scope-term))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJobSummary| ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun |make-__listofjobsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKeyValuePair| ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-__listofkeyvaluepair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListJobsFilterTerm| ()
   '(trivial-types:proper-list list-jobs-filter-term))
 (common-lisp:defun |make-__listoflistjobsfilterterm|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-jobs-filter-term))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfManagedDataIdentifierSummary| ()
   '(trivial-types:proper-list managed-data-identifier-summary))
 (common-lisp:defun |make-__listofmanageddataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMatchingResource| ()
   '(trivial-types:proper-list matching-resource))
 (common-lisp:defun |make-__listofmatchingresource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matching-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMember| () '(trivial-types:proper-list member))
 (common-lisp:defun |make-__listofmember|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfResourceProfileArtifact| ()
   '(trivial-types:proper-list resource-profile-artifact))
 (common-lisp:defun |make-__listofresourceprofileartifact|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-profile-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfS3BucketDefinitionForJob| ()
   '(trivial-types:proper-list s3bucket-definition-for-job))
 (common-lisp:defun |make-__listofs3bucketdefinitionforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            s3bucket-definition-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfS3BucketName| ()
   '(trivial-types:proper-list s3bucket-name))
 (common-lisp:defun |make-__listofs3bucketname|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSearchResourcesCriteria| ()
   '(trivial-types:proper-list search-resources-criteria))
 (common-lisp:defun |make-__listofsearchresourcescriteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-resources-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSearchResourcesTagCriterionPair| ()
   '(trivial-types:proper-list search-resources-tag-criterion-pair))
 (common-lisp:defun |make-__listofsearchresourcestagcriterionpair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-resources-tag-criterion-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSensitivityInspectionTemplatesEntry| ()
   '(trivial-types:proper-list sensitivity-inspection-templates-entry))
 (common-lisp:defun |make-__listofsensitivityinspectiontemplatesentry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sensitivity-inspection-templates-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSuppressDataIdentifier| ()
   '(trivial-types:proper-list suppress-data-identifier))
 (common-lisp:defun |make-__listofsuppressdataidentifier|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            suppress-data-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTagCriterionPairForJob| ()
   '(trivial-types:proper-list tag-criterion-pair-for-job))
 (common-lisp:defun |make-__listoftagcriterionpairforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tag-criterion-pair-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTagValuePair| ()
   '(trivial-types:proper-list tag-value-pair))
 (common-lisp:defun |make-__listoftagvaluepair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnavailabilityReasonCode| ()
   '(trivial-types:proper-list unavailability-reason-code))
 (common-lisp:defun |make-__listofunavailabilityreasoncode|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unavailability-reason-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnprocessedAccount| ()
   '(trivial-types:proper-list unprocessed-account))
 (common-lisp:defun |make-__listofunprocessedaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageByAccount| ()
   '(trivial-types:proper-list usage-by-account))
 (common-lisp:defun |make-__listofusagebyaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-by-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageRecord| ()
   '(trivial-types:proper-list usage-record))
 (common-lisp:defun |make-__listofusagerecord|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageStatisticsFilter| ()
   '(trivial-types:proper-list usage-statistics-filter))
 (common-lisp:defun |make-__listofusagestatisticsfilter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-statistics-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageTotal| ()
   '(trivial-types:proper-list usage-total))
 (common-lisp:defun |make-__listofusagetotal|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-total))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max1024PatternSS| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128Pattern| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max2048| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max512PatternSS| () 'common-lisp:string)
(common-lisp:deftype |__stringMin22Max22PatternAZ0922| () 'common-lisp:string)
(common-lisp:deftype |__stringMin3Max255PatternAZaZ093255| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key administrator-account-id invitation-id
                     master-account)
   (common-lisp:declare
    (common-lisp:ignorable administrator-account-id invitation-id
     master-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/accept"
                                                        "AcceptInvitation"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun batch-get-custom-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ids)
   (common-lisp:declare (common-lisp:ignorable ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-custom-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/get"
                                                        "BatchGetCustomDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-custom-data-identifiers))
(common-lisp:progn
 (common-lisp:defun create-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token criteria description name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token criteria description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/allow-lists"
                                                        "CreateAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-allow-list))
(common-lisp:progn
 (common-lisp:defun create-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allow-list-ids client-token
                     custom-data-identifier-ids description initial-run
                     job-type managed-data-identifier-ids
                     managed-data-identifier-selector name s3job-definition
                     sampling-percentage schedule-frequency tags)
   (common-lisp:declare
    (common-lisp:ignorable allow-list-ids client-token
     custom-data-identifier-ids description initial-run job-type
     managed-data-identifier-ids managed-data-identifier-selector name
     s3job-definition sampling-percentage schedule-frequency tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs"
                                                        "CreateClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-classification-job))
(common-lisp:progn
 (common-lisp:defun create-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ignore-words
                     keywords maximum-match-distance name regex severity-levels
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ignore-words keywords
     maximum-match-distance name regex severity-levels tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers"
                                                        "CreateCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun create-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token description
                     finding-criteria name position tags)
   (common-lisp:declare
    (common-lisp:ignorable action client-token description finding-criteria
     name position tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findingsfilters"
                                                        "CreateFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-findings-filter))
(common-lisp:progn
 (common-lisp:defun create-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids disable-email-notification
                     message)
   (common-lisp:declare
    (common-lisp:ignorable account-ids disable-email-notification message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations"
                                                        "CreateInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-invitations))
(common-lisp:progn
 (common-lisp:defun create-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account tags)
   (common-lisp:declare (common-lisp:ignorable account tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members"
                                                        "CreateMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-member))
(common-lisp:progn
 (common-lisp:defun create-sample-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-types)
   (common-lisp:declare (common-lisp:ignorable finding-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sample-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/sample"
                                                        "CreateSampleFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sample-findings))
(common-lisp:progn
 (common-lisp:defun decline-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/decline"
                                                        "DeclineInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decline-invitations))
(common-lisp:progn
 (common-lisp:defun delete-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id ignore-job-checks)
   (common-lisp:declare (common-lisp:ignorable id ignore-job-checks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-allow-list))
(common-lisp:progn
 (common-lisp:defun delete-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-data-identifiers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun delete-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-findings-filter))
(common-lisp:progn
 (common-lisp:defun delete-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/delete"
                                                        "DeleteInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-invitations))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun describe-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable criteria max-results next-token sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/s3"
                                                        "DescribeBuckets"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-buckets))
(common-lisp:progn
 (common-lisp:defun describe-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-classification-job))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/admin/configuration" :protocol :rest-json
                                :operation "DescribeOrganizationConfiguration"
                                :params
                                `(("Action"
                                   ,@"DescribeOrganizationConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun disable-macie ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "DELETE" :path "/macie"
                                :protocol :rest-json :operation "DisableMacie"
                                :params
                                `(("Action" ,@"DisableMacie")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-macie))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/admin"
                                                        "DisableOrganizationAdminAccount"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "POST" :path
                                "/administrator/disassociate" :protocol
                                :rest-json :operation
                                "DisassociateFromAdministratorAccount" :params
                                `(("Action"
                                   ,@"DisassociateFromAdministratorAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-administrator-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "POST" :path
                                "/master/disassociate" :protocol :rest-json
                                :operation "DisassociateFromMasterAccount"
                                :params
                                `(("Action" ,@"DisassociateFromMasterAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-master-account))
(common-lisp:progn
 (common-lisp:defun disassociate-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/disassociate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-member))
(common-lisp:progn
 (common-lisp:defun enable-macie
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token finding-publishing-frequency
                     status)
   (common-lisp:declare
    (common-lisp:ignorable client-token finding-publishing-frequency status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-macie-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/macie" "EnableMacie"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-macie))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id client-token)
   (common-lisp:declare (common-lisp:ignorable admin-account-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/admin"
                                                        "EnableOrganizationAdminAccount"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/administrator" :protocol :rest-json
                                :operation "GetAdministratorAccount" :params
                                `(("Action" ,@"GetAdministratorAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-administrator-account))
(common-lisp:progn
 (common-lisp:defun get-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-allow-list))
(common-lisp:progn
 (common-lisp:defun get-automated-discovery-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/automated-discovery/configuration" :protocol
                                :rest-json :operation
                                "GetAutomatedDiscoveryConfiguration" :params
                                `(("Action"
                                   ,@"GetAutomatedDiscoveryConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-automated-discovery-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/s3/statistics"
                                                        "GetBucketStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-statistics))
(common-lisp:progn
 (common-lisp:defun get-classification-export-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/classification-export-configuration"
                                :protocol :rest-json :operation
                                "GetClassificationExportConfiguration" :params
                                `(("Action"
                                   ,@"GetClassificationExportConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-classification-export-configuration))
(common-lisp:progn
 (common-lisp:defun get-classification-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classification-scope-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/classification-scopes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetClassificationScope"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-classification-scope))
(common-lisp:progn
 (common-lisp:defun get-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-data-identifiers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun get-finding-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-criteria group-by size
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable finding-criteria group-by size sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/statistics"
                                                        "GetFindingStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding-statistics))
(common-lisp:progn
 (common-lisp:defun get-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-ids sort-criteria)
   (common-lisp:declare (common-lisp:ignorable finding-ids sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/describe"
                                                        "GetFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings))
(common-lisp:progn
 (common-lisp:defun get-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings-filter))
(common-lisp:progn
 (common-lisp:defun get-findings-publication-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/findings-publication-configuration" :protocol
                                :rest-json :operation
                                "GetFindingsPublicationConfiguration" :params
                                `(("Action"
                                   ,@"GetFindingsPublicationConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-findings-publication-configuration))
(common-lisp:progn
 (common-lisp:defun get-invitations-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/invitations/count" :protocol :rest-json
                                :operation "GetInvitationsCount" :params
                                `(("Action" ,@"GetInvitationsCount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitations-count))
(common-lisp:progn
 (common-lisp:defun get-macie-session ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path "/macie"
                                :protocol :rest-json :operation
                                "GetMacieSession" :params
                                `(("Action" ,@"GetMacieSession")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-macie-session))
(common-lisp:progn
 (common-lisp:defun get-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path "/master"
                                :protocol :rest-json :operation
                                "GetMasterAccount" :params
                                `(("Action" ,@"GetMasterAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-master-account))
(common-lisp:progn
 (common-lisp:defun get-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-member))
(common-lisp:progn
 (common-lisp:defun get-resource-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles"
                                                        "GetResourceProfile"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-profile))
(common-lisp:progn
 (common-lisp:defun get-reveal-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/reveal-configuration" :protocol :rest-json
                                :operation "GetRevealConfiguration" :params
                                `(("Action" ,@"GetRevealConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-reveal-configuration))
(common-lisp:progn
 (common-lisp:defun get-sensitive-data-occurrences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitive-data-occurrences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findings/~A/reveal"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "GetSensitiveDataOccurrences"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitive-data-occurrences))
(common-lisp:progn
 (common-lisp:defun get-sensitive-data-occurrences-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitive-data-occurrences-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findings/~A/reveal/availability"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "GetSensitiveDataOccurrencesAvailability"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitive-data-occurrences-availability))
(common-lisp:progn
 (common-lisp:defun get-sensitivity-inspection-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitivity-inspection-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/templates/sensitivity-inspections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetSensitivityInspectionTemplate"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitivity-inspection-template))
(common-lisp:progn
 (common-lisp:defun get-usage-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-by max-results next-token sort-by
                     time-range)
   (common-lisp:declare
    (common-lisp:ignorable filter-by max-results next-token sort-by
     time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/usage/statistics"
                                                        "GetUsageStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-statistics))
(common-lisp:progn
 (common-lisp:defun get-usage-totals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-range)
   (common-lisp:declare (common-lisp:ignorable time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-totals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/usage"
                                                        "GetUsageTotals"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-totals))
(common-lisp:progn
 (common-lisp:defun list-allow-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-allow-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/allow-lists"
                                                        "ListAllowLists"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-allow-lists))
(common-lisp:progn
 (common-lisp:defun list-classification-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-classification-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs/list"
                                                        "ListClassificationJobs"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-classification-jobs))
(common-lisp:progn
 (common-lisp:defun list-classification-scopes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token)
   (common-lisp:declare (common-lisp:ignorable name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-classification-scopes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/classification-scopes"
                                                        "ListClassificationScopes"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-classification-scopes))
(common-lisp:progn
 (common-lisp:defun list-custom-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/list"
                                                        "ListCustomDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-data-identifiers))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable finding-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings"
                                                        "ListFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-findings-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/findingsfilters"
                                                        "ListFindingsFilters"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings-filters))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/invitations"
                                                        "ListInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-managed-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-managed-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/managed-data-identifiers/list"
                                                        "ListManagedDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-data-identifiers))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token only-associated)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token only-associated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/members"
                                                        "ListMembers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/admin"
                                                        "ListOrganizationAdminAccounts"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-resource-profile-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token resource-arn)
   (common-lisp:declare (common-lisp:ignorable next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-profile-artifacts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles/artifacts"
                                                        "ListResourceProfileArtifacts"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-profile-artifacts))
(common-lisp:progn
 (common-lisp:defun list-resource-profile-detections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-profile-detections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles/detections"
                                                        "ListResourceProfileDetections"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-profile-detections))
(common-lisp:progn
 (common-lisp:defun list-sensitivity-inspection-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sensitivity-inspection-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/templates/sensitivity-inspections"
                                                        "ListSensitivityInspectionTemplates"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sensitivity-inspection-templates))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-classification-export-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration)
   (common-lisp:declare (common-lisp:ignorable configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-classification-export-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/classification-export-configuration"
                                                        "PutClassificationExportConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-classification-export-configuration))
(common-lisp:progn
 (common-lisp:defun put-findings-publication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token security-hub-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-token security-hub-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-findings-publication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/findings-publication-configuration"
                                                        "PutFindingsPublicationConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-findings-publication-configuration))
(common-lisp:progn
 (common-lisp:defun search-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable bucket-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/search-resources"
                                                        "SearchResources"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-resources))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ignore-words keywords
                     maximum-match-distance regex sample-text)
   (common-lisp:declare
    (common-lisp:ignorable ignore-words keywords maximum-match-distance regex
     sample-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-test-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/test"
                                                        "TestCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key criteria description id name)
   (common-lisp:declare (common-lisp:ignorable criteria description id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-allow-list))
(common-lisp:progn
 (common-lisp:defun update-automated-discovery-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status)
   (common-lisp:declare (common-lisp:ignorable status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-automated-discovery-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/automated-discovery/configuration"
                                                        "UpdateAutomatedDiscoveryConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-automated-discovery-configuration))
(common-lisp:progn
 (common-lisp:defun update-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id job-status)
   (common-lisp:declare (common-lisp:ignorable job-id job-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-classification-job))
(common-lisp:progn
 (common-lisp:defun update-classification-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id s3)
   (common-lisp:declare (common-lisp:ignorable id s3))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-classification-scope-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/classification-scopes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateClassificationScope"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-classification-scope))
(common-lisp:progn
 (common-lisp:defun update-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token description
                     finding-criteria id name position)
   (common-lisp:declare
    (common-lisp:ignorable action client-token description finding-criteria id
     name position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings-filter))
(common-lisp:progn
 (common-lisp:defun update-macie-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-publishing-frequency status)
   (common-lisp:declare
    (common-lisp:ignorable finding-publishing-frequency status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-macie-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/macie"
                                                        "UpdateMacieSession"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-macie-session))
(common-lisp:progn
 (common-lisp:defun update-member-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id status)
   (common-lisp:declare (common-lisp:ignorable id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-member-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/macie/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateMemberSession"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-member-session))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable)
   (common-lisp:declare (common-lisp:ignorable auto-enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/admin/configuration"
                                                        "UpdateOrganizationConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organization-configuration))
(common-lisp:progn
 (common-lisp:defun update-resource-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn sensitivity-score-override)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn sensitivity-score-override))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/resource-profiles"
                                                        "UpdateResourceProfile"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-profile))
(common-lisp:progn
 (common-lisp:defun update-resource-profile-detections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn suppress-data-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn suppress-data-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resource-profile-detections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/resource-profiles/detections"
                                                        "UpdateResourceProfileDetections"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-profile-detections))
(common-lisp:progn
 (common-lisp:defun update-reveal-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration)
   (common-lisp:declare (common-lisp:ignorable configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-reveal-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/reveal-configuration"
                                                        "UpdateRevealConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-reveal-configuration))
(common-lisp:progn
 (common-lisp:defun update-sensitivity-inspection-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description excludes id includes)
   (common-lisp:declare
    (common-lisp:ignorable description excludes id includes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sensitivity-inspection-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/templates/sensitivity-inspections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateSensitivityInspectionTemplate"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sensitivity-inspection-template))
