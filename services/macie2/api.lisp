;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/macie2/api
  (:use)
  (:nicknames #:aws/macie2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/macie2/api)
(common-lisp:progn
 (common-lisp:defclass macie2-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "macie2" :protocol
                        :rest-json))
 (common-lisp:export 'macie2-request))
(common-lisp:progn
 (common-lisp:define-condition macie2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'macie2-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-invitation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-invitation-request-"))
   (administrator-account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (invitation-id (common-lisp:error ":invitationid is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (master-account common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "invitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account))
      (common-lisp:list
       (common-lisp:cons "masterAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-invitation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-invitation-response-")))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-response
                    'make-accept-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-list-"))
   (allows-public-read-access common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (allows-public-write-access common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-list 'make-access-control-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-detail-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-detail 'make-account-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-level-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-level-permissions-"))
   (block-public-access common-lisp:nil :type
    (common-lisp:or block-public-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-level-permissions
                    'make-account-level-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "blockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (admin-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-admin-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or admin-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'admin-account 'make-admin-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-account))
   common-lisp:nil))
(common-lisp:deftype admin-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allow-list-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-list-criteria-"))
   (regex common-lisp:nil :type
    (common-lisp:or |__stringMin1Max512PatternSS| common-lisp:null))
   (s3words-list common-lisp:nil :type
    (common-lisp:or s3words-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allow-list-criteria 'make-allow-list-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3words-list))
      (common-lisp:list
       (common-lisp:cons "s3WordsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allow-list-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-list-status-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or allow-list-status-code common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMin1Max1024PatternSS| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allow-list-status 'make-allow-list-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-status))
   common-lisp:nil))
(common-lisp:deftype allow-list-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allow-list-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-list-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or
     |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
     common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMin1Max512PatternSS| common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or |__stringMin22Max22PatternAZ0922| common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or |__stringMin1Max128Pattern| common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allow-list-summary 'make-allow-list-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-list-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-list-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-list-summary))
   common-lisp:nil))
(common-lisp:deftype allows-unencrypted-object-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (api-call-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-api-call-details-"))
   (api common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (api-service-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (first-seen common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (last-seen common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'api-call-details 'make-api-call-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-call-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-call-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api))
      (common-lisp:list
       (common-lisp:cons "api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-service-name))
      (common-lisp:list
       (common-lisp:cons "apiServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "firstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "lastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-call-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assumed-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-assumed-role-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (session-context common-lisp:nil :type
    (common-lisp:or session-context common-lisp:null)))
 (common-lisp:export (common-lisp:list 'assumed-role 'make-assumed-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assumed-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assumed-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "sessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assumed-role))
   common-lisp:nil))
(common-lisp:deftype automated-discovery-status () 'common-lisp:string)
(common-lisp:deftype availability-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aws-account 'make-aws-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-service-"))
   (invoked-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aws-service 'make-aws-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoked-by))
      (common-lisp:list
       (common-lisp:cons "invokedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-custom-data-identifier-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-custom-data-identifier-summary-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (deleted common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifier-summary
                    'make-batch-get-custom-data-identifier-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-custom-data-identifiers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-custom-data-identifiers-request-"))
   (ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifiers-request
                    'make-batch-get-custom-data-identifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-custom-data-identifiers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-custom-data-identifiers-response-"))
   (custom-data-identifiers common-lisp:nil :type
    (common-lisp:or |__listOfBatchGetCustomDataIdentifierSummary|
                    common-lisp:null))
   (not-found-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-data-identifiers-response
                    'make-batch-get-custom-data-identifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-found-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "notFoundIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (block-public-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-block-public-access-"))
   (block-public-acls common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (block-public-policy common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (ignore-public-acls common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (restrict-public-buckets common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'block-public-access 'make-block-public-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "blockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "blockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "ignorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "restrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-count-by-effective-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-count-by-effective-permission-"))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (publicly-readable common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (publicly-writable common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unknown common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-effective-permission
                    'make-bucket-count-by-effective-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-readable))
      (common-lisp:list
       (common-lisp:cons "publiclyReadable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-writable))
      (common-lisp:list
       (common-lisp:cons "publiclyWritable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-effective-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-count-by-encryption-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-count-by-encryption-type-"))
   (kms-managed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (s3managed common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (unencrypted common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unknown common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-encryption-type
                    'make-bucket-count-by-encryption-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-managed))
      (common-lisp:list
       (common-lisp:cons "kmsManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3managed))
      (common-lisp:list
       (common-lisp:cons "s3Managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unencrypted))
      (common-lisp:list
       (common-lisp:cons "unencrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-encryption-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-count-by-shared-access-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-count-by-shared-access-type-"))
   (external common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (internal common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (not-shared common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unknown common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-by-shared-access-type
                    'make-bucket-count-by-shared-access-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external))
      (common-lisp:list
       (common-lisp:cons "external"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internal))
      (common-lisp:list
       (common-lisp:cons "internal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-shared))
      (common-lisp:list
       (common-lisp:cons "notShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-by-shared-access-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-count-policy-allows-unencrypted-object-uploads
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-bucket-count-policy-allows-unencrypted-object-uploads-"))
   (allows-unencrypted-object-uploads common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (denies-unencrypted-object-uploads common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unknown common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-count-policy-allows-unencrypted-object-uploads
                    'make-bucket-count-policy-allows-unencrypted-object-uploads))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'denies-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "deniesUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-count-policy-allows-unencrypted-object-uploads))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-criteria () 'common-lisp:hash-table)
 (common-lisp:defun |make-bucket-criteria|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-criteria-additional-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-criteria-additional-properties-"))
   (eq common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (gt common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (gte common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (lt common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (lte common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (neq common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-criteria-additional-properties
                    'make-bucket-criteria-additional-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "gt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "lt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-criteria-additional-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-level-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-level-permissions-"))
   (access-control-list common-lisp:nil :type
    (common-lisp:or access-control-list common-lisp:null))
   (block-public-access common-lisp:nil :type
    (common-lisp:or block-public-access common-lisp:null))
   (bucket-policy common-lisp:nil :type
    (common-lisp:or bucket-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-level-permissions 'make-bucket-level-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "accessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "blockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-metadata-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (allows-unencrypted-object-uploads common-lisp:nil :type
    (common-lisp:or allows-unencrypted-object-uploads common-lisp:null))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (bucket-created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (bucket-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (classifiable-object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (classifiable-size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or bucket-metadata-error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (job-details common-lisp:nil :type
    (common-lisp:or job-details common-lisp:null))
   (last-automated-discovery-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (object-count-by-encryption-type common-lisp:nil :type
    (common-lisp:or object-count-by-encryption-type common-lisp:null))
   (public-access common-lisp:nil :type
    (common-lisp:or bucket-public-access common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (replication-details common-lisp:nil :type
    (common-lisp:or replication-details common-lisp:null))
   (sensitivity-score common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or bucket-server-side-encryption common-lisp:null))
   (shared-access common-lisp:nil :type
    (common-lisp:or shared-access common-lisp:null))
   (size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (size-in-bytes-compressed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |__listOfKeyValuePair| common-lisp:null))
   (unclassifiable-object-count common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null))
   (unclassifiable-object-size-in-bytes common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null))
   (versioning common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-metadata 'make-bucket-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-created-at))
      (common-lisp:list
       (common-lisp:cons "bucketCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-automated-discovery-time))
      (common-lisp:list
       (common-lisp:cons "lastAutomatedDiscoveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "objectCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-details))
      (common-lisp:list
       (common-lisp:cons "replicationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-access))
      (common-lisp:list
       (common-lisp:cons "sharedAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioning))
      (common-lisp:list
       (common-lisp:cons "versioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-metadata))
   common-lisp:nil))
(common-lisp:deftype bucket-metadata-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-permission-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-permission-configuration-"))
   (account-level-permissions common-lisp:nil :type
    (common-lisp:or account-level-permissions common-lisp:null))
   (bucket-level-permissions common-lisp:nil :type
    (common-lisp:or bucket-level-permissions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-permission-configuration
                    'make-bucket-permission-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-level-permissions))
      (common-lisp:list
       (common-lisp:cons "accountLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-level-permissions))
      (common-lisp:list
       (common-lisp:cons "bucketLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-permission-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-policy-"))
   (allows-public-read-access common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (allows-public-write-access common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-policy 'make-bucket-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "allowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-public-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-public-access-"))
   (effective-permission common-lisp:nil :type
    (common-lisp:or effective-permission common-lisp:null))
   (permission-configuration common-lisp:nil :type
    (common-lisp:or bucket-permission-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-public-access 'make-bucket-public-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'effective-permission))
      (common-lisp:list
       (common-lisp:cons "effectivePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permission-configuration))
      (common-lisp:list
       (common-lisp:cons "permissionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-server-side-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-server-side-encryption-"))
   (kms-master-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-server-side-encryption
                    'make-bucket-server-side-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-sort-criteria 'make-bucket-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-statistics-by-sensitivity (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-statistics-by-sensitivity-"))
   (classification-error common-lisp:nil :type
    (common-lisp:or sensitivity-aggregations common-lisp:null))
   (not-classified common-lisp:nil :type
    (common-lisp:or sensitivity-aggregations common-lisp:null))
   (not-sensitive common-lisp:nil :type
    (common-lisp:or sensitivity-aggregations common-lisp:null))
   (sensitive common-lisp:nil :type
    (common-lisp:or sensitivity-aggregations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-statistics-by-sensitivity
                    'make-bucket-statistics-by-sensitivity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-error))
      (common-lisp:list
       (common-lisp:cons "classificationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-classified))
      (common-lisp:list
       (common-lisp:cons "notClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-sensitive))
      (common-lisp:list
       (common-lisp:cons "notSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive))
      (common-lisp:list
       (common-lisp:cons "sensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-statistics-by-sensitivity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cell (:copier common-lisp:nil) (:conc-name "struct-shape-cell-"))
   (cell-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (column common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (column-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (row common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cell 'make-cell))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-reference))
      (common-lisp:list
       (common-lisp:cons "cellReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cells () '(trivial-types:proper-list cell))
 (common-lisp:defun |make-cells|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cell))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-details-"))
   (detailed-results-location common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (job-arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (origin-type common-lisp:nil :type
    (common-lisp:or origin-type common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or classification-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-details 'make-classification-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-results-location))
      (common-lisp:list
       (common-lisp:cons "detailedResultsLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-type))
      (common-lisp:list
       (common-lisp:cons "originType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-export-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-export-configuration-"))
   (s3destination common-lisp:nil :type
    (common-lisp:or s3destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-export-configuration
                    'make-classification-export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-result-"))
   (additional-occurrences common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (custom-data-identifiers common-lisp:nil :type
    (common-lisp:or custom-data-identifiers common-lisp:null))
   (mime-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sensitive-data common-lisp:nil :type
    (common-lisp:or sensitive-data common-lisp:null))
   (size-classified common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or classification-result-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-result 'make-classification-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-occurrences))
      (common-lisp:list
       (common-lisp:cons "additionalOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mime-type))
      (common-lisp:list
       (common-lisp:cons "mimeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive-data))
      (common-lisp:list
       (common-lisp:cons "sensitiveData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-classified))
      (common-lisp:list
       (common-lisp:cons "sizeClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-result-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-result-status-"))
   (code common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (reason common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-result-status
                    'make-classification-result-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result-status))
   common-lisp:nil))
(common-lisp:deftype classification-scope-id () 'common-lisp:string)
(common-lisp:deftype classification-scope-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (classification-scope-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-scope-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or classification-scope-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or classification-scope-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-scope-summary
                    'make-classification-scope-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-scope-summary))
   common-lisp:nil))
(common-lisp:deftype classification-scope-update-operation ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-allow-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-allow-list-request-"))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (criteria (common-lisp:error ":criteria is required") :type
    (common-lisp:or allow-list-criteria common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMin1Max512PatternSS| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1Max128Pattern| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-allow-list-request
                    'make-create-allow-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-allow-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-allow-list-response-"))
   (arn common-lisp:nil :type
    (common-lisp:or
     |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
     common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or |__stringMin22Max22PatternAZ0922| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-allow-list-response
                    'make-create-allow-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-classification-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-classification-job-request-"))
   (allow-list-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (initial-run common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (job-type (common-lisp:error ":jobtype is required") :type
    (common-lisp:or job-type common-lisp:null))
   (managed-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (managed-data-identifier-selector common-lisp:nil :type
    (common-lisp:or managed-data-identifier-selector common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3job-definition (common-lisp:error ":s3jobdefinition is required") :type
    (common-lisp:or s3job-definition common-lisp:null))
   (sampling-percentage common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (schedule-frequency common-lisp:nil :type
    (common-lisp:or job-schedule-frequency common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-classification-job-request
                    'make-create-classification-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-run))
      (common-lisp:list
       (common-lisp:cons "initialRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-selector))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3job-definition))
      (common-lisp:list
       (common-lisp:cons "s3JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "samplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-frequency))
      (common-lisp:list
       (common-lisp:cons "scheduleFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-classification-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-classification-job-response-"))
   (job-arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-classification-job-response
                    'make-create-classification-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-data-identifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-data-identifier-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (ignore-words common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (keywords common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (maximum-match-distance common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (regex (common-lisp:error ":regex is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (severity-levels common-lisp:nil :type
    (common-lisp:or severity-level-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-data-identifier-request
                    'make-create-custom-data-identifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-levels))
      (common-lisp:list
       (common-lisp:cons "severityLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-data-identifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-data-identifier-response-"))
   (custom-data-identifier-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-data-identifier-response
                    'make-create-custom-data-identifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-id))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-findings-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-findings-filter-request-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or findings-filter-action common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (finding-criteria (common-lisp:error ":findingcriteria is required") :type
    (common-lisp:or finding-criteria common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-findings-filter-request
                    'make-create-findings-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-findings-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-findings-filter-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-findings-filter-response
                    'make-create-findings-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-invitations-request-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (disable-email-notification common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-invitations-request
                    'make-create-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-email-notification))
      (common-lisp:list
       (common-lisp:cons "disableEmailNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-invitations-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or |__listOfUnprocessedAccount| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-invitations-response
                    'make-create-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-member-request-"))
   (account (common-lisp:error ":account is required") :type
    (common-lisp:or account-detail common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-member-request 'make-create-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-member-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-member-response 'make-create-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sample-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sample-findings-request-"))
   (finding-types common-lisp:nil :type
    (common-lisp:or |__listOfFindingType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-request
                    'make-create-sample-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-types))
      (common-lisp:list
       (common-lisp:cons "findingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sample-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sample-findings-response-")))
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-response
                    'make-create-sample-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (criteria-block-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-criteria-block-for-job-"))
   (and common-lisp:nil :type
    (common-lisp:or |__listOfCriteriaForJob| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'criteria-block-for-job 'make-criteria-block-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          criteria-block-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (criteria-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-criteria-for-job-"))
   (simple-criterion common-lisp:nil :type
    (common-lisp:or simple-criterion-for-job common-lisp:null))
   (tag-criterion common-lisp:nil :type
    (common-lisp:or tag-criterion-for-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'criteria-for-job 'make-criteria-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input criteria-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input criteria-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-criterion))
      (common-lisp:list
       (common-lisp:cons "simpleCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-criterion))
      (common-lisp:list
       (common-lisp:cons "tagCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input criteria-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype criterion () 'common-lisp:hash-table)
 (common-lisp:defun |make-criterion| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (criterion-additional-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-criterion-additional-properties-"))
   (eq common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (eq-exact-match common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (gt common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (gte common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (lt common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (lte common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (neq common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'criterion-additional-properties
                    'make-criterion-additional-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq-exact-match))
      (common-lisp:list
       (common-lisp:cons "eqExactMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "gt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "lt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          criterion-additional-properties))
   common-lisp:nil))
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-data-identifier-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-data-identifier-summary-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifier-summary
                    'make-custom-data-identifier-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-data-identifiers (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-data-identifiers-"))
   (detections common-lisp:nil :type
    (common-lisp:or custom-detections common-lisp:null))
   (total-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers 'make-custom-data-identifiers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-detection-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (occurrences common-lisp:nil :type
    (common-lisp:or occurrences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-detection 'make-custom-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-detections ()
   '(trivial-types:proper-list custom-detection))
 (common-lisp:defun |make-custom-detections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (daily-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-daily-schedule-")))
 (common-lisp:export (common-lisp:list 'daily-schedule 'make-daily-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input daily-schedule))
   common-lisp:nil))
(common-lisp:deftype data-identifier-severity () 'common-lisp:string)
(common-lisp:deftype data-identifier-type () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decline-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-decline-invitations-request-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-request
                    'make-decline-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decline-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-decline-invitations-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or |__listOfUnprocessedAccount| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-response
                    'make-decline-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-detection-"))
   (count common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (occurrences common-lisp:nil :type
    (common-lisp:or occurrences common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-detection 'make-default-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype default-detections ()
   '(trivial-types:proper-list default-detection))
 (common-lisp:defun |make-default-detections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list default-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-allow-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-allow-list-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (ignore-job-checks common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-allow-list-request
                    'make-delete-allow-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-allow-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-allow-list-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-allow-list-response
                    'make-delete-allow-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-data-identifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-data-identifier-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-data-identifier-request
                    'make-delete-custom-data-identifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-data-identifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-data-identifier-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-custom-data-identifier-response
                    'make-delete-custom-data-identifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-findings-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-findings-filter-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-findings-filter-request
                    'make-delete-findings-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-findings-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-findings-filter-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-findings-filter-response
                    'make-delete-findings-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-invitations-request-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-request
                    'make-delete-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-invitations-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or |__listOfUnprocessedAccount| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-response
                    'make-delete-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "unprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-member-request 'make-delete-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-member-response 'make-delete-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-buckets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-buckets-request-"))
   (criteria common-lisp:nil :type
    (common-lisp:or bucket-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or bucket-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-buckets-request 'make-describe-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-buckets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-buckets-response-"))
   (buckets common-lisp:nil :type
    (common-lisp:or |__listOfBucketMetadata| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-buckets-response
                    'make-describe-buckets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-buckets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-classification-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-classification-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-classification-job-request
                    'make-describe-classification-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-classification-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-classification-job-response-"))
   (allow-list-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (custom-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (initial-run common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (job-arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (last-run-error-status common-lisp:nil :type
    (common-lisp:or last-run-error-status common-lisp:null))
   (last-run-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (managed-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (managed-data-identifier-selector common-lisp:nil :type
    (common-lisp:or managed-data-identifier-selector common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (s3job-definition common-lisp:nil :type
    (common-lisp:or s3job-definition common-lisp:null))
   (sampling-percentage common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (schedule-frequency common-lisp:nil :type
    (common-lisp:or job-schedule-frequency common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or statistics common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (user-paused-details common-lisp:nil :type
    (common-lisp:or user-paused-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-classification-job-response
                    'make-describe-classification-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-run))
      (common-lisp:list
       (common-lisp:cons "initialRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-status))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "lastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-selector))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3job-definition))
      (common-lisp:list
       (common-lisp:cons "s3JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "samplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-frequency))
      (common-lisp:list
       (common-lisp:cons "scheduleFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-paused-details))
      (common-lisp:list
       (common-lisp:cons "userPausedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-response-"))
   (auto-enable common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (max-account-limit-reached common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "maxAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detected-data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-detected-data-details-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |__stringMin1Max128| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detected-data-details 'make-detected-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-detection-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (suppressed common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-identifier-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'detection 'make-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressed))
      (common-lisp:list
       (common-lisp:cons "suppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-macie-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-macie-request-")))
 (common-lisp:export
  (common-lisp:list 'disable-macie-request 'make-disable-macie-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-macie-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-macie-response-")))
 (common-lisp:export
  (common-lisp:list 'disable-macie-response 'make-disable-macie-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-macie-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-organization-admin-account-request-"))
   (admin-account-id (common-lisp:error ":adminaccountid is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-request
                    'make-disable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-organization-admin-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-response
                    'make-disable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-administrator-account-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-from-administrator-account-request-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-request
                    'make-disassociate-from-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-administrator-account-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-from-administrator-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-response
                    'make-disassociate-from-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-master-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-from-master-account-request-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-request
                    'make-disassociate-from-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-master-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-from-master-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-response
                    'make-disassociate-from-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-request
                    'make-disassociate-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-response
                    'make-disassociate-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-details-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-details 'make-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-details))
   common-lisp:nil))
(common-lisp:deftype effective-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (empty (:copier common-lisp:nil) (:conc-name "struct-shape-empty-")))
 (common-lisp:export (common-lisp:list 'empty 'make-empty))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-macie-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-macie-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (finding-publishing-frequency common-lisp:nil :type
    (common-lisp:or finding-publishing-frequency common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or macie-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-macie-request 'make-enable-macie-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-macie-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-macie-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-macie-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-macie-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-macie-response-")))
 (common-lisp:export
  (common-lisp:list 'enable-macie-response 'make-enable-macie-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-macie-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-organization-admin-account-request-"))
   (admin-account-id (common-lisp:error ":adminaccountid is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-organization-admin-account-response-")))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-response
                    'make-enable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (federated-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-federated-user-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (session-context common-lisp:nil :type
    (common-lisp:or session-context common-lisp:null)))
 (common-lisp:export (common-lisp:list 'federated-user 'make-federated-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "sessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding (:copier common-lisp:nil) (:conc-name "struct-shape-finding-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or finding-category common-lisp:null))
   (classification-details common-lisp:nil :type
    (common-lisp:or classification-details common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (partition common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (policy-details common-lisp:nil :type
    (common-lisp:or policy-details common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (resources-affected common-lisp:nil :type
    (common-lisp:or resources-affected common-lisp:null))
   (sample common-lisp:nil :type (common-lisp:or |__boolean| common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or severity common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or finding-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archived))
      (common-lisp:list
       (common-lisp:cons "archived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-details))
      (common-lisp:list
       (common-lisp:cons "classificationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "policyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-affected))
      (common-lisp:list
       (common-lisp:cons "resourcesAffected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-action-"))
   (action-type common-lisp:nil :type
    (common-lisp:or finding-action-type common-lisp:null))
   (api-call-details common-lisp:nil :type
    (common-lisp:or api-call-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-action 'make-finding-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-details))
      (common-lisp:list
       (common-lisp:cons "apiCallDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-action))
   common-lisp:nil))
(common-lisp:deftype finding-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-actor (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-actor-"))
   (domain-details common-lisp:nil :type
    (common-lisp:or domain-details common-lisp:null))
   (ip-address-details common-lisp:nil :type
    (common-lisp:or ip-address-details common-lisp:null))
   (user-identity common-lisp:nil :type
    (common-lisp:or user-identity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-actor 'make-finding-actor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-actor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-actor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-details))
      (common-lisp:list
       (common-lisp:cons "domainDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-details))
      (common-lisp:list
       (common-lisp:cons "ipAddressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "userIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-actor))
   common-lisp:nil))
(common-lisp:deftype finding-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-criteria-"))
   (criterion common-lisp:nil :type
    (common-lisp:or criterion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-criteria 'make-finding-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criterion))
      (common-lisp:list
       (common-lisp:cons "criterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-criteria))
   common-lisp:nil))
(common-lisp:deftype finding-publishing-frequency () 'common-lisp:string)
(common-lisp:deftype finding-statistics-sort-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-statistics-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-statistics-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or finding-statistics-sort-attribute-name common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-statistics-sort-criteria
                    'make-finding-statistics-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-statistics-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype finding-type () 'common-lisp:string)
(common-lisp:deftype findings-filter-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (findings-filter-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-findings-filter-list-item-"))
   (action common-lisp:nil :type
    (common-lisp:or findings-filter-action common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'findings-filter-list-item
                    'make-findings-filter-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          findings-filter-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-administrator-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-administrator-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-request
                    'make-get-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-administrator-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-administrator-account-response-"))
   (administrator common-lisp:nil :type
    (common-lisp:or invitation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-response
                    'make-get-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator))
      (common-lisp:list
       (common-lisp:cons "administrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-allow-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-allow-list-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-allow-list-request 'make-get-allow-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-allow-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-allow-list-response-"))
   (arn common-lisp:nil :type
    (common-lisp:or
     |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
     common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (criteria common-lisp:nil :type
    (common-lisp:or allow-list-criteria common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMin1Max512PatternSS| common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or |__stringMin22Max22PatternAZ0922| common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or |__stringMin1Max128Pattern| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or allow-list-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-allow-list-response 'make-get-allow-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-automated-discovery-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-automated-discovery-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-automated-discovery-configuration-request
                    'make-get-automated-discovery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-automated-discovery-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-automated-discovery-configuration-response-"))
   (classification-scope-id common-lisp:nil :type
    (common-lisp:or classification-scope-id common-lisp:null))
   (disabled-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (first-enabled-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sensitivity-inspection-template-id common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or automated-discovery-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-automated-discovery-configuration-response
                    'make-get-automated-discovery-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-scope-id))
      (common-lisp:list
       (common-lisp:cons "classificationScopeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-at))
      (common-lisp:list
       (common-lisp:cons "disabledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-enabled-at))
      (common-lisp:list
       (common-lisp:cons "firstEnabledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-template-id))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automated-discovery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-statistics-request-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-statistics-request
                    'make-get-bucket-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-statistics-response-"))
   (bucket-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (bucket-count-by-effective-permission common-lisp:nil :type
    (common-lisp:or bucket-count-by-effective-permission common-lisp:null))
   (bucket-count-by-encryption-type common-lisp:nil :type
    (common-lisp:or bucket-count-by-encryption-type common-lisp:null))
   (bucket-count-by-object-encryption-requirement common-lisp:nil :type
    (common-lisp:or bucket-count-policy-allows-unencrypted-object-uploads
                    common-lisp:null))
   (bucket-count-by-shared-access-type common-lisp:nil :type
    (common-lisp:or bucket-count-by-shared-access-type common-lisp:null))
   (bucket-statistics-by-sensitivity common-lisp:nil :type
    (common-lisp:or bucket-statistics-by-sensitivity common-lisp:null))
   (classifiable-object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (classifiable-size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (size-in-bytes-compressed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unclassifiable-object-count common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null))
   (unclassifiable-object-size-in-bytes common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-statistics-response
                    'make-get-bucket-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-count))
      (common-lisp:list
       (common-lisp:cons "bucketCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-effective-permission))
      (common-lisp:list
       (common-lisp:cons "bucketCountByEffectivePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "bucketCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-object-encryption-requirement))
      (common-lisp:list
       (common-lisp:cons "bucketCountByObjectEncryptionRequirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-count-by-shared-access-type))
      (common-lisp:list
       (common-lisp:cons "bucketCountBySharedAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-statistics-by-sensitivity))
      (common-lisp:list
       (common-lisp:cons "bucketStatisticsBySensitivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classification-export-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-classification-export-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-classification-export-configuration-request
                    'make-get-classification-export-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classification-export-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-classification-export-configuration-response-"))
   (configuration common-lisp:nil :type
    (common-lisp:or classification-export-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classification-export-configuration-response
                    'make-get-classification-export-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-export-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classification-scope-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classification-scope-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classification-scope-request
                    'make-get-classification-scope-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classification-scope-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classification-scope-response-"))
   (id common-lisp:nil :type
    (common-lisp:or classification-scope-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or classification-scope-name common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3classification-scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classification-scope-response
                    'make-get-classification-scope-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classification-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-data-identifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-data-identifier-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-data-identifier-request
                    'make-get-custom-data-identifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-data-identifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-data-identifier-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (deleted common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (ignore-words common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (keywords common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (maximum-match-distance common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (regex common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (severity-levels common-lisp:nil :type
    (common-lisp:or severity-level-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-data-identifier-response
                    'make-get-custom-data-identifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-levels))
      (common-lisp:list
       (common-lisp:cons "severityLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-statistics-request-"))
   (finding-criteria common-lisp:nil :type
    (common-lisp:or finding-criteria common-lisp:null))
   (group-by (common-lisp:error ":groupby is required") :type
    (common-lisp:or group-by common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or finding-statistics-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-statistics-request
                    'make-get-finding-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-statistics-response-"))
   (counts-by-group common-lisp:nil :type
    (common-lisp:or |__listOfGroupCount| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-statistics-response
                    'make-get-finding-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counts-by-group))
      (common-lisp:list
       (common-lisp:cons "countsByGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-filter-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-filter-request
                    'make-get-findings-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-filter-response-"))
   (action common-lisp:nil :type
    (common-lisp:or findings-filter-action common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (finding-criteria common-lisp:nil :type
    (common-lisp:or finding-criteria common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-filter-response
                    'make-get-findings-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-publication-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-findings-publication-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-findings-publication-configuration-request
                    'make-get-findings-publication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-publication-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-findings-publication-configuration-response-"))
   (security-hub-configuration common-lisp:nil :type
    (common-lisp:or security-hub-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-publication-configuration-response
                    'make-get-findings-publication-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-hub-configuration))
      (common-lisp:list
       (common-lisp:cons "securityHubConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-publication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-request-"))
   (finding-ids (common-lisp:error ":findingids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-request 'make-get-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-response-"))
   (findings common-lisp:nil :type
    (common-lisp:or |__listOfFinding| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-response 'make-get-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-invitations-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-invitations-count-request-")))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-request
                    'make-get-invitations-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-invitations-count-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-invitations-count-response-"))
   (invitations-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-response
                    'make-get-invitations-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations-count))
      (common-lisp:list
       (common-lisp:cons "invitationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-macie-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-macie-session-request-")))
 (common-lisp:export
  (common-lisp:list 'get-macie-session-request
                    'make-get-macie-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-macie-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-macie-session-response-"))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (finding-publishing-frequency common-lisp:nil :type
    (common-lisp:or finding-publishing-frequency common-lisp:null))
   (service-role common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or macie-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-macie-session-response
                    'make-get-macie-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "serviceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-macie-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-master-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-master-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-master-account-request
                    'make-get-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-master-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-master-account-response-"))
   (master common-lisp:nil :type (common-lisp:or invitation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-master-account-response
                    'make-get-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master))
      (common-lisp:list
       (common-lisp:cons "master"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-request 'make-get-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (administrator-account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (invited-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (master-account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (relationship-status common-lisp:nil :type
    (common-lisp:or relationship-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-response 'make-get-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-id))
      (common-lisp:list
       (common-lisp:cons "masterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-profile-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-profile-request
                    'make-get-resource-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-profile-response-"))
   (profile-updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (sensitivity-score common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (sensitivity-score-overridden common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or resource-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-profile-response
                    'make-get-resource-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-updated-at))
      (common-lisp:list
       (common-lisp:cons "profileUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-score-overridden))
      (common-lisp:list
       (common-lisp:cons "sensitivityScoreOverridden"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reveal-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reveal-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-reveal-configuration-request
                    'make-get-reveal-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reveal-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reveal-configuration-response-"))
   (configuration common-lisp:nil :type
    (common-lisp:or reveal-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reveal-configuration-response
                    'make-get-reveal-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reveal-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitive-data-occurrences-availability-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-sensitive-data-occurrences-availability-request-"))
   (finding-id (common-lisp:error ":findingid is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-availability-request
                    'make-get-sensitive-data-occurrences-availability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitive-data-occurrences-availability-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-sensitive-data-occurrences-availability-response-"))
   (code common-lisp:nil :type
    (common-lisp:or availability-code common-lisp:null))
   (reasons common-lisp:nil :type
    (common-lisp:or |__listOfUnavailabilityReasonCode| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-availability-response
                    'make-get-sensitive-data-occurrences-availability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-availability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitive-data-occurrences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sensitive-data-occurrences-request-"))
   (finding-id (common-lisp:error ":findingid is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-request
                    'make-get-sensitive-data-occurrences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitive-data-occurrences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sensitive-data-occurrences-response-"))
   (error common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (sensitive-data-occurrences common-lisp:nil :type
    (common-lisp:or sensitive-data-occurrences common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or reveal-request-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitive-data-occurrences-response
                    'make-get-sensitive-data-occurrences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitive-data-occurrences))
      (common-lisp:list
       (common-lisp:cons "sensitiveDataOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitive-data-occurrences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitivity-inspection-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sensitivity-inspection-template-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitivity-inspection-template-request
                    'make-get-sensitivity-inspection-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sensitivity-inspection-template-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-sensitivity-inspection-template-response-"))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (excludes common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-excludes common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-includes common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (sensitivity-inspection-template-id common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sensitivity-inspection-template-response
                    'make-get-sensitivity-inspection-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-template-id))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sensitivity-inspection-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-statistics-request-"))
   (filter-by common-lisp:nil :type
    (common-lisp:or |__listOfUsageStatisticsFilter| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or usage-statistics-sort-by common-lisp:null))
   (time-range common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-request
                    'make-get-usage-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-by))
      (common-lisp:list
       (common-lisp:cons "filterBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-statistics-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (records common-lisp:nil :type
    (common-lisp:or |__listOfUsageRecord| common-lisp:null))
   (time-range common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-response
                    'make-get-usage-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-totals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-totals-request-"))
   (time-range common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-totals-request 'make-get-usage-totals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-totals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-totals-response-"))
   (time-range common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null))
   (usage-totals common-lisp:nil :type
    (common-lisp:or |__listOfUsageTotal| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-totals-response
                    'make-get-usage-totals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "timeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-totals))
      (common-lisp:list
       (common-lisp:cons "usageTotals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-totals-response))
   common-lisp:nil))
(common-lisp:deftype group-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (group-count (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-count-"))
   (count common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (group-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-count 'make-group-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-key))
      (common-lisp:list
       (common-lisp:cons "groupKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iam-user (:copier common-lisp:nil) (:conc-name "struct-shape-iam-user-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'iam-user 'make-iam-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invitation (:copier common-lisp:nil)
      (:conc-name "struct-shape-invitation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (invitation-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (invited-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (relationship-status common-lisp:nil :type
    (common-lisp:or relationship-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "invitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-address-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-address-details-"))
   (ip-address-v4 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (ip-city common-lisp:nil :type (common-lisp:or ip-city common-lisp:null))
   (ip-country common-lisp:nil :type
    (common-lisp:or ip-country common-lisp:null))
   (ip-geo-location common-lisp:nil :type
    (common-lisp:or ip-geo-location common-lisp:null))
   (ip-owner common-lisp:nil :type (common-lisp:or ip-owner common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-address-details 'make-ip-address-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "ipAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-city))
      (common-lisp:list
       (common-lisp:cons "ipCity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-country))
      (common-lisp:list
       (common-lisp:cons "ipCountry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-geo-location))
      (common-lisp:list
       (common-lisp:cons "ipGeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-owner))
      (common-lisp:list
       (common-lisp:cons "ipOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-city (:copier common-lisp:nil) (:conc-name "struct-shape-ip-city-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-city 'make-ip-city))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-city))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-city))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-city))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-country (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-country-"))
   (code common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-country 'make-ip-country))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-geo-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-geo-location-"))
   (lat common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (lon common-lisp:nil :type (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-geo-location 'make-ip-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat))
      (common-lisp:list
       (common-lisp:cons "lat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lon))
      (common-lisp:list
       (common-lisp:cons "lon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-geo-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-owner (:copier common-lisp:nil) (:conc-name "struct-shape-ip-owner-"))
   (asn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (asn-org common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (isp common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (org common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-owner 'make-ip-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn-org))
      (common-lisp:list
       (common-lisp:cons "asnOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'isp))
      (common-lisp:list
       (common-lisp:cons "isp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-owner))
   common-lisp:nil))
(common-lisp:deftype is-defined-in-job () 'common-lisp:string)
(common-lisp:deftype is-monitored-by-job () 'common-lisp:string)
(common-lisp:deftype job-comparator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-details-"))
   (is-defined-in-job common-lisp:nil :type
    (common-lisp:or is-defined-in-job common-lisp:null))
   (is-monitored-by-job common-lisp:nil :type
    (common-lisp:or is-monitored-by-job common-lisp:null))
   (last-job-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-job-run-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-defined-in-job))
      (common-lisp:list
       (common-lisp:cons "isDefinedInJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-monitored-by-job))
      (common-lisp:list
       (common-lisp:cons "isMonitoredByJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-job-id))
      (common-lisp:list
       (common-lisp:cons "lastJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-job-run-time))
      (common-lisp:list
       (common-lisp:cons "lastJobRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-schedule-frequency (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-schedule-frequency-"))
   (daily-schedule common-lisp:nil :type
    (common-lisp:or daily-schedule common-lisp:null))
   (monthly-schedule common-lisp:nil :type
    (common-lisp:or monthly-schedule common-lisp:null))
   (weekly-schedule common-lisp:nil :type
    (common-lisp:or weekly-schedule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-schedule-frequency 'make-job-schedule-frequency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-schedule))
      (common-lisp:list
       (common-lisp:cons "dailySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-schedule))
      (common-lisp:list
       (common-lisp:cons "monthlySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weekly-schedule))
      (common-lisp:list
       (common-lisp:cons "weeklySchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-schedule-frequency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-scope-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-scope-term-"))
   (simple-scope-term common-lisp:nil :type
    (common-lisp:or simple-scope-term common-lisp:null))
   (tag-scope-term common-lisp:nil :type
    (common-lisp:or tag-scope-term common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-scope-term 'make-job-scope-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-scope-term))
      (common-lisp:list
       (common-lisp:cons "simpleScopeTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-scope-term))
      (common-lisp:list
       (common-lisp:cons "tagScopeTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-scope-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-scoping-block (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-scoping-block-"))
   (and common-lisp:nil :type
    (common-lisp:or |__listOfJobScopeTerm| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-scoping-block 'make-job-scoping-block))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-scoping-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-scoping-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-scoping-block))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (bucket-criteria common-lisp:nil :type
    (common-lisp:or s3bucket-criteria-for-job common-lisp:null))
   (bucket-definitions common-lisp:nil :type
    (common-lisp:or |__listOfS3BucketDefinitionForJob| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (last-run-error-status common-lisp:nil :type
    (common-lisp:or last-run-error-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (user-paused-details common-lisp:nil :type
    (common-lisp:or user-paused-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-definitions))
      (common-lisp:list
       (common-lisp:cons "bucketDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-status))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-paused-details))
      (common-lisp:list
       (common-lisp:cons "userPausedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-value-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-value-pair-"))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-value-pair 'make-key-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-value-pair-list ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-key-value-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (last-run-error-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-last-run-error-status-"))
   (code common-lisp:nil :type
    (common-lisp:or last-run-error-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'last-run-error-status 'make-last-run-error-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          last-run-error-status))
   common-lisp:nil))
(common-lisp:deftype last-run-error-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-allow-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-allow-lists-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-allow-lists-request 'make-list-allow-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-allow-lists-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-allow-lists-response-"))
   (allow-lists common-lisp:nil :type
    (common-lisp:or |__listOfAllowListSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-allow-lists-response
                    'make-list-allow-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-lists))
      (common-lisp:list
       (common-lisp:cons "allowLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allow-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-classification-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-classification-jobs-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or list-jobs-filter-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or list-jobs-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-classification-jobs-request
                    'make-list-classification-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-classification-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-classification-jobs-response-"))
   (items common-lisp:nil :type
    (common-lisp:or |__listOfJobSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-classification-jobs-response
                    'make-list-classification-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-classification-scopes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-classification-scopes-request-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-classification-scopes-request
                    'make-list-classification-scopes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-classification-scopes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-classification-scopes-response-"))
   (classification-scopes common-lisp:nil :type
    (common-lisp:or |__listOfClassificationScopeSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-classification-scopes-response
                    'make-list-classification-scopes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-scopes))
      (common-lisp:list
       (common-lisp:cons "classificationScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-classification-scopes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-data-identifiers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-data-identifiers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-data-identifiers-request
                    'make-list-custom-data-identifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-data-identifiers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-data-identifiers-response-"))
   (items common-lisp:nil :type
    (common-lisp:or |__listOfCustomDataIdentifierSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-data-identifiers-response
                    'make-list-custom-data-identifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-filters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-filters-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-filters-request
                    'make-list-findings-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-filters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-filters-response-"))
   (findings-filter-list-items common-lisp:nil :type
    (common-lisp:or |__listOfFindingsFilterListItem| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-filters-response
                    'make-list-findings-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'findings-filter-list-items))
      (common-lisp:list
       (common-lisp:cons "findingsFilterListItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-request-"))
   (finding-criteria common-lisp:nil :type
    (common-lisp:or finding-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-response-"))
   (finding-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-response-"))
   (invitations common-lisp:nil :type
    (common-lisp:or |__listOfInvitation| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-filter-criteria-"))
   (excludes common-lisp:nil :type
    (common-lisp:or |__listOfListJobsFilterTerm| common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or |__listOfListJobsFilterTerm| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-filter-criteria
                    'make-list-jobs-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype list-jobs-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-filter-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-filter-term-"))
   (comparator common-lisp:nil :type
    (common-lisp:or job-comparator common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or list-jobs-filter-key common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-filter-term 'make-list-jobs-filter-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-filter-term))
   common-lisp:nil))
(common-lisp:deftype list-jobs-sort-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or list-jobs-sort-attribute-name common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-sort-criteria 'make-list-jobs-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-data-identifiers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-data-identifiers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-data-identifiers-request
                    'make-list-managed-data-identifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-data-identifiers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-data-identifiers-response-"))
   (items common-lisp:nil :type
    (common-lisp:or |__listOfManagedDataIdentifierSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-data-identifiers-response
                    'make-list-managed-data-identifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-data-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (only-associated common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or |__listOfMember| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-admin-accounts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-admin-accounts-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-admin-accounts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-admin-accounts-response-"))
   (admin-accounts common-lisp:nil :type
    (common-lisp:or |__listOfAdminAccount| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "adminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-profile-artifacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-profile-artifacts-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-artifacts-request
                    'make-list-resource-profile-artifacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-profile-artifacts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-profile-artifacts-response-"))
   (artifacts common-lisp:nil :type
    (common-lisp:or |__listOfResourceProfileArtifact| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-artifacts-response
                    'make-list-resource-profile-artifacts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-artifacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-profile-detections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-profile-detections-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-detections-request
                    'make-list-resource-profile-detections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-profile-detections-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-profile-detections-response-"))
   (detections common-lisp:nil :type
    (common-lisp:or |__listOfDetection| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-profile-detections-response
                    'make-list-resource-profile-detections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-profile-detections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sensitivity-inspection-templates-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-sensitivity-inspection-templates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sensitivity-inspection-templates-request
                    'make-list-sensitivity-inspection-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sensitivity-inspection-templates-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-sensitivity-inspection-templates-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sensitivity-inspection-templates common-lisp:nil :type
    (common-lisp:or |__listOfSensitivityInspectionTemplatesEntry|
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sensitivity-inspection-templates-response
                    'make-list-sensitivity-inspection-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-inspection-templates))
      (common-lisp:list
       (common-lisp:cons "sensitivityInspectionTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensitivity-inspection-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype macie-status () 'common-lisp:string)
(common-lisp:deftype managed-data-identifier-selector () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-data-identifier-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-data-identifier-summary-"))
   (category common-lisp:nil :type
    (common-lisp:or sensitive-data-item-category common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-data-identifier-summary
                    'make-managed-data-identifier-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-data-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (matching-bucket (:copier common-lisp:nil)
      (:conc-name "struct-shape-matching-bucket-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (bucket-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (classifiable-object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (classifiable-size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or bucket-metadata-error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (job-details common-lisp:nil :type
    (common-lisp:or job-details common-lisp:null))
   (last-automated-discovery-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (object-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (object-count-by-encryption-type common-lisp:nil :type
    (common-lisp:or object-count-by-encryption-type common-lisp:null))
   (sensitivity-score common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (size-in-bytes-compressed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unclassifiable-object-count common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null))
   (unclassifiable-object-size-in-bytes common-lisp:nil :type
    (common-lisp:or object-level-statistics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'matching-bucket 'make-matching-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "classifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-automated-discovery-time))
      (common-lisp:list
       (common-lisp:cons "lastAutomatedDiscoveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "objectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-count-by-encryption-type))
      (common-lisp:list
       (common-lisp:cons "objectCountByEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-score))
      (common-lisp:list
       (common-lisp:cons "sensitivityScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "sizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-in-bytes-compressed))
      (common-lisp:list
       (common-lisp:cons "sizeInBytesCompressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-count))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unclassifiable-object-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "unclassifiableObjectSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (matching-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-matching-resource-"))
   (matching-bucket common-lisp:nil :type
    (common-lisp:or matching-bucket common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'matching-resource 'make-matching-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-bucket))
      (common-lisp:list
       (common-lisp:cons "matchingBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-resource))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (administrator-account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (invited-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (master-account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (relationship-status common-lisp:nil :type
    (common-lisp:or relationship-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account-id))
      (common-lisp:list
       (common-lisp:cons "administratorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "invitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-id))
      (common-lisp:list
       (common-lisp:cons "masterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monthly-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-monthly-schedule-"))
   (day-of-month common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monthly-schedule 'make-monthly-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-schedule))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-count-by-encryption-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-count-by-encryption-type-"))
   (customer-managed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (kms-managed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (s3managed common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (unencrypted common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (unknown common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-count-by-encryption-type
                    'make-object-count-by-encryption-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed))
      (common-lisp:list
       (common-lisp:cons "customerManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-managed))
      (common-lisp:list
       (common-lisp:cons "kmsManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3managed))
      (common-lisp:list
       (common-lisp:cons "s3Managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unencrypted))
      (common-lisp:list
       (common-lisp:cons "unencrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-count-by-encryption-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-level-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-level-statistics-"))
   (file-type common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-level-statistics 'make-object-level-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-level-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (occurrences (:copier common-lisp:nil)
      (:conc-name "struct-shape-occurrences-"))
   (cells common-lisp:nil :type (common-lisp:or cells common-lisp:null))
   (line-ranges common-lisp:nil :type (common-lisp:or ranges common-lisp:null))
   (offset-ranges common-lisp:nil :type
    (common-lisp:or ranges common-lisp:null))
   (pages common-lisp:nil :type (common-lisp:or pages common-lisp:null))
   (records common-lisp:nil :type (common-lisp:or records common-lisp:null)))
 (common-lisp:export (common-lisp:list 'occurrences 'make-occurrences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-ranges))
      (common-lisp:list
       (common-lisp:cons "lineRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-ranges))
      (common-lisp:list
       (common-lisp:cons "offsetRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input occurrences))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype origin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (page (:copier common-lisp:nil) (:conc-name "struct-shape-page-"))
   (line-range common-lisp:nil :type (common-lisp:or range common-lisp:null))
   (offset-range common-lisp:nil :type (common-lisp:or range common-lisp:null))
   (page-number common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-range))
      (common-lisp:list
       (common-lisp:cons "lineRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-range))
      (common-lisp:list
       (common-lisp:cons "offsetRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "pageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-details-"))
   (action common-lisp:nil :type
    (common-lisp:or finding-action common-lisp:null))
   (actor common-lisp:nil :type
    (common-lisp:or finding-actor common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-details 'make-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actor))
      (common-lisp:list
       (common-lisp:cons "actor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-classification-export-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-classification-export-configuration-request-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or classification-export-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-classification-export-configuration-request
                    'make-put-classification-export-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-classification-export-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-classification-export-configuration-response-"))
   (configuration common-lisp:nil :type
    (common-lisp:or classification-export-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-classification-export-configuration-response
                    'make-put-classification-export-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-classification-export-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-findings-publication-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-findings-publication-configuration-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (security-hub-configuration common-lisp:nil :type
    (common-lisp:or security-hub-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-findings-publication-configuration-request
                    'make-put-findings-publication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-hub-configuration))
      (common-lisp:list
       (common-lisp:cons "securityHubConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-findings-publication-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-findings-publication-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'put-findings-publication-configuration-response
                    'make-put-findings-publication-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-findings-publication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (range (:copier common-lisp:nil) (:conc-name "struct-shape-range-"))
   (end common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (start-column common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-column))
      (common-lisp:list
       (common-lisp:cons "startColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ranges () '(trivial-types:proper-list range))
 (common-lisp:defun |make-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (record (:copier common-lisp:nil) (:conc-name "struct-shape-record-"))
   (json-path common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (record-index common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "jsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-index))
      (common-lisp:list
       (common-lisp:cons "recordIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun |make-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relationship-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-details-"))
   (replicated common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (replicated-externally common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (replication-accounts common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-details 'make-replication-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated))
      (common-lisp:list
       (common-lisp:cons "replicated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicated-externally))
      (common-lisp:list
       (common-lisp:cons "replicatedExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-accounts))
      (common-lisp:list
       (common-lisp:cons "replicationAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-profile-artifact (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-profile-artifact-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (classification-result-status
    (common-lisp:error ":classificationresultstatus is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (sensitive common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-profile-artifact
                    'make-resource-profile-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classification-result-status))
      (common-lisp:list
       (common-lisp:cons "classificationResultStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive))
      (common-lisp:list
       (common-lisp:cons "sensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-profile-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-statistics-"))
   (total-bytes-classified common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-detections common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-detections-suppressed common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-classified common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-sensitive common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-skipped common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-skipped-invalid-encryption common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-skipped-invalid-kms common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-items-skipped-permission-denied common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-statistics 'make-resource-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-bytes-classified))
      (common-lisp:list
       (common-lisp:cons "totalBytesClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-detections))
      (common-lisp:list
       (common-lisp:cons "totalDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-detections-suppressed))
      (common-lisp:list
       (common-lisp:cons "totalDetectionsSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-classified))
      (common-lisp:list
       (common-lisp:cons "totalItemsClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-sensitive))
      (common-lisp:list
       (common-lisp:cons "totalItemsSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-items-skipped))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-invalid-encryption))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedInvalidEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-invalid-kms))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedInvalidKms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-items-skipped-permission-denied))
      (common-lisp:list
       (common-lisp:cons "totalItemsSkippedPermissionDenied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resources-affected (:copier common-lisp:nil)
      (:conc-name "struct-shape-resources-affected-"))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resources-affected 'make-resources-affected))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resources-affected))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resources-affected))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resources-affected))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reveal-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reveal-configuration-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or |__stringMin1Max2048| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or reveal-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reveal-configuration 'make-reveal-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reveal-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reveal-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reveal-configuration))
   common-lisp:nil))
(common-lisp:deftype reveal-request-status () 'common-lisp:string)
(common-lisp:deftype reveal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket (:copier common-lisp:nil) (:conc-name "struct-shape-s3bucket-"))
   (allows-unencrypted-object-uploads common-lisp:nil :type
    (common-lisp:or allows-unencrypted-object-uploads common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (default-server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or s3bucket-owner common-lisp:null))
   (public-access common-lisp:nil :type
    (common-lisp:or bucket-public-access common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or key-value-pair-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3bucket 'make-s3bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-unencrypted-object-uploads))
      (common-lisp:list
       (common-lisp:cons "allowsUnencryptedObjectUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "defaultServerSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-criteria-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-criteria-for-job-"))
   (excludes common-lisp:nil :type
    (common-lisp:or criteria-block-for-job common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or criteria-block-for-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-criteria-for-job
                    'make-s3bucket-criteria-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-criteria-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-definition-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-definition-for-job-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (buckets (common-lisp:error ":buckets is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-definition-for-job
                    'make-s3bucket-definition-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-definition-for-job))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-owner (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-owner-"))
   (display-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3bucket-owner 'make-s3bucket-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-owner))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3classification-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3classification-scope-"))
   (excludes (common-lisp:error ":excludes is required") :type
    (common-lisp:or s3classification-scope-exclusion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3classification-scope 'make-s3classification-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3classification-scope-exclusion (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3classification-scope-exclusion-"))
   (bucket-names (common-lisp:error ":bucketnames is required") :type
    (common-lisp:or |__listOfS3BucketName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-exclusion
                    'make-s3classification-scope-exclusion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-names))
      (common-lisp:list
       (common-lisp:cons "bucketNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3classification-scope-exclusion-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3classification-scope-exclusion-update-"))
   (bucket-names (common-lisp:error ":bucketnames is required") :type
    (common-lisp:or |__listOfS3BucketName| common-lisp:null))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or classification-scope-update-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-exclusion-update
                    'make-s3classification-scope-exclusion-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-names))
      (common-lisp:list
       (common-lisp:cons "bucketNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-exclusion-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3classification-scope-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3classification-scope-update-"))
   (excludes (common-lisp:error ":excludes is required") :type
    (common-lisp:or s3classification-scope-exclusion-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3classification-scope-update
                    'make-s3classification-scope-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3classification-scope-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3destination-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (key-prefix common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (kms-key-arn (common-lisp:error ":kmskeyarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3job-definition-"))
   (bucket-criteria common-lisp:nil :type
    (common-lisp:or s3bucket-criteria-for-job common-lisp:null))
   (bucket-definitions common-lisp:nil :type
    (common-lisp:or |__listOfS3BucketDefinitionForJob| common-lisp:null))
   (scoping common-lisp:nil :type (common-lisp:or scoping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3job-definition 'make-s3job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-definitions))
      (common-lisp:list
       (common-lisp:cons "bucketDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoping))
      (common-lisp:list
       (common-lisp:cons "scoping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3job-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3object (:copier common-lisp:nil) (:conc-name "struct-shape-s3object-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (e-tag common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (extension common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (public-access common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or key-value-pair-list common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'e-tag))
      (common-lisp:list
       (common-lisp:cons "eTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "publicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3words-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3words-list-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or |__stringMin3Max255PatternAZaZ093255| common-lisp:null))
   (object-key (common-lisp:error ":objectkey is required") :type
    (common-lisp:or |__stringMin1Max1024PatternSS| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3words-list 'make-s3words-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3words-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3words-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "objectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3words-list))
   common-lisp:nil))
(common-lisp:deftype scope-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scoping (:copier common-lisp:nil) (:conc-name "struct-shape-scoping-"))
   (excludes common-lisp:nil :type
    (common-lisp:or job-scoping-block common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or job-scoping-block common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scoping 'make-scoping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scoping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scoping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scoping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-bucket-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-bucket-criteria-"))
   (excludes common-lisp:nil :type
    (common-lisp:or search-resources-criteria-block common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or search-resources-criteria-block common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-bucket-criteria
                    'make-search-resources-bucket-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-bucket-criteria))
   common-lisp:nil))
(common-lisp:deftype search-resources-comparator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-criteria-"))
   (simple-criterion common-lisp:nil :type
    (common-lisp:or search-resources-simple-criterion common-lisp:null))
   (tag-criterion common-lisp:nil :type
    (common-lisp:or search-resources-tag-criterion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-criteria
                    'make-search-resources-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-criterion))
      (common-lisp:list
       (common-lisp:cons "simpleCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-criterion))
      (common-lisp:list
       (common-lisp:cons "tagCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-criteria-block (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-criteria-block-"))
   (and common-lisp:nil :type
    (common-lisp:or |__listOfSearchResourcesCriteria| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-criteria-block
                    'make-search-resources-criteria-block))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-criteria-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-request-"))
   (bucket-criteria common-lisp:nil :type
    (common-lisp:or search-resources-bucket-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or search-resources-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-request 'make-search-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-criteria))
      (common-lisp:list
       (common-lisp:cons "bucketCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-response-"))
   (matching-resources common-lisp:nil :type
    (common-lisp:or |__listOfMatchingResource| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-response
                    'make-search-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-resources))
      (common-lisp:list
       (common-lisp:cons "matchingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-simple-criterion (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-simple-criterion-"))
   (comparator common-lisp:nil :type
    (common-lisp:or search-resources-comparator common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or search-resources-simple-criterion-key common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-simple-criterion
                    'make-search-resources-simple-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-simple-criterion))
   common-lisp:nil))
(common-lisp:deftype search-resources-simple-criterion-key ()
  'common-lisp:string)
(common-lisp:deftype search-resources-sort-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or search-resources-sort-attribute-name common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-sort-criteria
                    'make-search-resources-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-tag-criterion (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-tag-criterion-"))
   (comparator common-lisp:nil :type
    (common-lisp:or search-resources-comparator common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or |__listOfSearchResourcesTagCriterionPair|
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-tag-criterion
                    'make-search-resources-tag-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-tag-criterion-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-tag-criterion-pair-"))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-tag-criterion-pair
                    'make-search-resources-tag-criterion-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-tag-criterion-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-hub-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-hub-configuration-"))
   (publish-classification-findings
    (common-lisp:error ":publishclassificationfindings is required") :type
    (common-lisp:or |__boolean| common-lisp:null))
   (publish-policy-findings
    (common-lisp:error ":publishpolicyfindings is required") :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-hub-configuration
                    'make-security-hub-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-classification-findings))
      (common-lisp:list
       (common-lisp:cons "publishClassificationFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-policy-findings))
      (common-lisp:list
       (common-lisp:cons "publishPolicyFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-hub-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data ()
   '(trivial-types:proper-list sensitive-data-item))
 (common-lisp:defun |make-sensitive-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-data-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitive-data-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitive-data-item-"))
   (category common-lisp:nil :type
    (common-lisp:or sensitive-data-item-category common-lisp:null))
   (detections common-lisp:nil :type
    (common-lisp:or default-detections common-lisp:null))
   (total-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-item 'make-sensitive-data-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sensitive-data-item))
   common-lisp:nil))
(common-lisp:deftype sensitive-data-item-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-data-occurrences () 'common-lisp:hash-table)
 (common-lisp:defun |make-sensitive-data-occurrences|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitivity-aggregations (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitivity-aggregations-"))
   (classifiable-size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (publicly-accessible-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-count common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (total-size-in-bytes common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-aggregations 'make-sensitivity-aggregations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classifiable-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "classifiableSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publicly-accessible-count))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessibleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "totalSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-aggregations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitivity-inspection-template-excludes (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitivity-inspection-template-excludes-"))
   (managed-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-template-excludes
                    'make-sensitivity-inspection-template-excludes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-excludes))
   common-lisp:nil))
(common-lisp:deftype sensitivity-inspection-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sensitivity-inspection-template-includes (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitivity-inspection-template-includes-"))
   (allow-list-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (custom-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (managed-data-identifier-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-template-includes
                    'make-sensitivity-inspection-template-includes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-list-ids))
      (common-lisp:list
       (common-lisp:cons "allowListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "customDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-data-identifier-ids))
      (common-lisp:list
       (common-lisp:cons "managedDataIdentifierIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-template-includes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitivity-inspection-templates-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitivity-inspection-templates-entry-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitivity-inspection-templates-entry
                    'make-sensitivity-inspection-templates-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitivity-inspection-templates-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-"))
   (encryption-type common-lisp:nil :type
    (common-lisp:or encryption-type common-lisp:null))
   (kms-master-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption 'make-server-side-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-limit-"))
   (is-service-limited common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or unit common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-limit 'make-service-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-service-limited))
      (common-lisp:list
       (common-lisp:cons "isServiceLimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (session-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-context-"))
   (attributes common-lisp:nil :type
    (common-lisp:or session-context-attributes common-lisp:null))
   (session-issuer common-lisp:nil :type
    (common-lisp:or session-issuer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-context 'make-session-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-issuer))
      (common-lisp:list
       (common-lisp:cons "sessionIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-context-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-context-attributes-"))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (mfa-authenticated common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-context-attributes
                    'make-session-context-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-authenticated))
      (common-lisp:list
       (common-lisp:cons "mfaAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-context-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-issuer (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-issuer-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-issuer 'make-session-issuer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-issuer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (severity (:copier common-lisp:nil) (:conc-name "struct-shape-severity-"))
   (description common-lisp:nil :type
    (common-lisp:or severity-description common-lisp:null))
   (score common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity 'make-severity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity))
   common-lisp:nil))
(common-lisp:deftype severity-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (severity-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-severity-level-"))
   (occurrences-threshold
    (common-lisp:error ":occurrencesthreshold is required") :type
    (common-lisp:or |__long| common-lisp:null))
   (severity (common-lisp:error ":severity is required") :type
    (common-lisp:or data-identifier-severity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity-level 'make-severity-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'occurrences-threshold))
      (common-lisp:list
       (common-lisp:cons "occurrencesThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype severity-level-list ()
   '(trivial-types:proper-list severity-level))
 (common-lisp:defun |make-severity-level-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list severity-level))
   aws-sdk/generator/shape::members))
(common-lisp:deftype shared-access () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (simple-criterion-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-criterion-for-job-"))
   (comparator common-lisp:nil :type
    (common-lisp:or job-comparator common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or simple-criterion-key-for-job common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simple-criterion-for-job 'make-simple-criterion-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simple-criterion-for-job))
   common-lisp:nil))
(common-lisp:deftype simple-criterion-key-for-job () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (simple-scope-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-scope-term-"))
   (comparator common-lisp:nil :type
    (common-lisp:or job-comparator common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or scope-filter-key common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simple-scope-term 'make-simple-scope-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-scope-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-statistics-"))
   (approximate-number-of-objects-to-process common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (number-of-runs common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-number-of-objects-to-process))
      (common-lisp:list
       (common-lisp:cons "approximateNumberOfObjectsToProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-runs))
      (common-lisp:list
       (common-lisp:cons "numberOfRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (suppress-data-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-suppress-data-identifier-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-identifier-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suppress-data-identifier 'make-suppress-data-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suppress-data-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-criterion-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-criterion-for-job-"))
   (comparator common-lisp:nil :type
    (common-lisp:or job-comparator common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or |__listOfTagCriterionPairForJob| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-criterion-for-job 'make-tag-criterion-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-criterion-pair-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-criterion-pair-for-job-"))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-criterion-pair-for-job
                    'make-tag-criterion-pair-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-criterion-pair-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-scope-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-scope-term-"))
   (comparator common-lisp:nil :type
    (common-lisp:or job-comparator common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or |__listOfTagValuePair| common-lisp:null))
   (target common-lisp:nil :type (common-lisp:or tag-target common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-scope-term 'make-tag-scope-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-scope-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-scope-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "tagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-scope-term))
   common-lisp:nil))
(common-lisp:deftype tag-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-value-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-value-pair-"))
   (key common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-value-pair 'make-tag-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-custom-data-identifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-custom-data-identifier-request-"))
   (ignore-words common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (keywords common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (maximum-match-distance common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (regex (common-lisp:error ":regex is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (sample-text (common-lisp:error ":sampletext is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-custom-data-identifier-request
                    'make-test-custom-data-identifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-words))
      (common-lisp:list
       (common-lisp:cons "ignoreWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-match-distance))
      (common-lisp:list
       (common-lisp:cons "maximumMatchDistance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-text))
      (common-lisp:list
       (common-lisp:cons "sampleText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-custom-data-identifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-custom-data-identifier-response-"))
   (match-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-custom-data-identifier-response
                    'make-test-custom-data-identifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-count))
      (common-lisp:list
       (common-lisp:cons "matchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-custom-data-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-range () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype unavailability-reason-code () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (unprocessed-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-unprocessed-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-account 'make-unprocessed-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-allow-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-allow-list-request-"))
   (criteria (common-lisp:error ":criteria is required") :type
    (common-lisp:or allow-list-criteria common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMin1Max512PatternSS| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1Max128Pattern| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-allow-list-request
                    'make-update-allow-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-allow-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-allow-list-response-"))
   (arn common-lisp:nil :type
    (common-lisp:or
     |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
     common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or |__stringMin22Max22PatternAZ0922| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-allow-list-response
                    'make-update-allow-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-allow-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-automated-discovery-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-automated-discovery-configuration-request-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or automated-discovery-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-automated-discovery-configuration-request
                    'make-update-automated-discovery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-automated-discovery-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-automated-discovery-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-automated-discovery-configuration-response
                    'make-update-automated-discovery-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-automated-discovery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-classification-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classification-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-classification-job-request
                    'make-update-classification-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-classification-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classification-job-response-")))
 (common-lisp:export
  (common-lisp:list 'update-classification-job-response
                    'make-update-classification-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-classification-scope-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classification-scope-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3classification-scope-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-classification-scope-request
                    'make-update-classification-scope-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-classification-scope-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classification-scope-response-")))
 (common-lisp:export
  (common-lisp:list 'update-classification-scope-response
                    'make-update-classification-scope-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classification-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-findings-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-findings-filter-request-"))
   (action common-lisp:nil :type
    (common-lisp:or findings-filter-action common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (finding-criteria common-lisp:nil :type
    (common-lisp:or finding-criteria common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-findings-filter-request
                    'make-update-findings-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "findingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-findings-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-findings-filter-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-findings-filter-response
                    'make-update-findings-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-macie-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-macie-session-request-"))
   (finding-publishing-frequency common-lisp:nil :type
    (common-lisp:or finding-publishing-frequency common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or macie-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-macie-session-request
                    'make-update-macie-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "findingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-macie-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-macie-session-response-")))
 (common-lisp:export
  (common-lisp:list 'update-macie-session-response
                    'make-update-macie-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-macie-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-member-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-member-session-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or macie-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-member-session-request
                    'make-update-member-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-member-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-member-session-response-")))
 (common-lisp:export
  (common-lisp:list 'update-member-session-response
                    'make-update-member-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-request-"))
   (auto-enable (common-lisp:error ":autoenable is required") :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-profile-detections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-profile-detections-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (suppress-data-identifiers common-lisp:nil :type
    (common-lisp:or |__listOfSuppressDataIdentifier| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-detections-request
                    'make-update-resource-profile-detections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "suppressDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-profile-detections-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-resource-profile-detections-response-")))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-detections-response
                    'make-update-resource-profile-detections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-detections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-profile-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (sensitivity-score-override common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-request
                    'make-update-resource-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-score-override))
      (common-lisp:list
       (common-lisp:cons "sensitivityScoreOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-profile-response-")))
 (common-lisp:export
  (common-lisp:list 'update-resource-profile-response
                    'make-update-resource-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reveal-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reveal-configuration-request-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or reveal-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reveal-configuration-request
                    'make-update-reveal-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reveal-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reveal-configuration-response-"))
   (configuration common-lisp:nil :type
    (common-lisp:or reveal-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reveal-configuration-response
                    'make-update-reveal-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reveal-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sensitivity-inspection-template-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-sensitivity-inspection-template-request-"))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (excludes common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-excludes common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (includes common-lisp:nil :type
    (common-lisp:or sensitivity-inspection-template-includes
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sensitivity-inspection-template-request
                    'make-update-sensitivity-inspection-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excludes))
      (common-lisp:list
       (common-lisp:cons "excludes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'includes))
      (common-lisp:list
       (common-lisp:cons "includes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sensitivity-inspection-template-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-sensitivity-inspection-template-response-")))
 (common-lisp:export
  (common-lisp:list 'update-sensitivity-inspection-template-response
                    'make-update-sensitivity-inspection-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sensitivity-inspection-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage-by-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-by-account-"))
   (currency common-lisp:nil :type (common-lisp:or currency common-lisp:null))
   (estimated-cost common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (service-limit common-lisp:nil :type
    (common-lisp:or service-limit common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or usage-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'usage-by-account 'make-usage-by-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-by-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-by-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-limit))
      (common-lisp:list
       (common-lisp:cons "serviceLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-by-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-record-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (automated-discovery-free-trial-start-date common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (free-trial-start-date common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (usage common-lisp:nil :type
    (common-lisp:or |__listOfUsageByAccount| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage-record 'make-usage-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-free-trial-start-date))
      (common-lisp:list
       (common-lisp:cons "automatedDiscoveryFreeTrialStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-start-date))
      (common-lisp:list
       (common-lisp:cons "freeTrialStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage-statistics-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-statistics-filter-"))
   (comparator common-lisp:nil :type
    (common-lisp:or usage-statistics-filter-comparator common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or usage-statistics-filter-key common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'usage-statistics-filter 'make-usage-statistics-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-filter))
   common-lisp:nil))
(common-lisp:deftype usage-statistics-filter-comparator () 'common-lisp:string)
(common-lisp:deftype usage-statistics-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (usage-statistics-sort-by (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-statistics-sort-by-"))
   (key common-lisp:nil :type
    (common-lisp:or usage-statistics-sort-key common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'usage-statistics-sort-by 'make-usage-statistics-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-statistics-sort-by))
   common-lisp:nil))
(common-lisp:deftype usage-statistics-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (usage-total (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-total-"))
   (currency common-lisp:nil :type (common-lisp:or currency common-lisp:null))
   (estimated-cost common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or usage-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage-total 'make-usage-total))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-total))
   common-lisp:nil))
(common-lisp:deftype usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-"))
   (assumed-role common-lisp:nil :type
    (common-lisp:or assumed-role common-lisp:null))
   (aws-account common-lisp:nil :type
    (common-lisp:or aws-account common-lisp:null))
   (aws-service common-lisp:nil :type
    (common-lisp:or aws-service common-lisp:null))
   (federated-user common-lisp:nil :type
    (common-lisp:or federated-user common-lisp:null))
   (iam-user common-lisp:nil :type (common-lisp:or iam-user common-lisp:null))
   (root common-lisp:nil :type
    (common-lisp:or user-identity-root common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-identity-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role))
      (common-lisp:list
       (common-lisp:cons "assumedRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account))
      (common-lisp:list
       (common-lisp:cons "awsAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-service))
      (common-lisp:list
       (common-lisp:cons "awsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user))
      (common-lisp:list
       (common-lisp:cons "federatedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user))
      (common-lisp:list
       (common-lisp:cons "iamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity-root (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-root-"))
   (account-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-identity-root 'make-user-identity-root))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity-root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity-root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity-root))
   common-lisp:nil))
(common-lisp:deftype user-identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-paused-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-paused-details-"))
   (job-expires-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (job-imminent-expiration-health-event-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (job-paused-at common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-paused-details 'make-user-paused-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-paused-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-paused-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-expires-at))
      (common-lisp:list
       (common-lisp:cons "jobExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-imminent-expiration-health-event-arn))
      (common-lisp:list
       (common-lisp:cons "jobImminentExpirationHealthEventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-paused-at))
      (common-lisp:list
       (common-lisp:cons "jobPausedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-paused-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (macie2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (weekly-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-weekly-schedule-"))
   (day-of-week common-lisp:nil :type
    (common-lisp:or day-of-week common-lisp:null)))
 (common-lisp:export (common-lisp:list 'weekly-schedule 'make-weekly-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weekly-schedule))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAdminAccount| ()
   '(trivial-types:proper-list admin-account))
 (common-lisp:defun |make-__listofadminaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAllowListSummary| ()
   '(trivial-types:proper-list allow-list-summary))
 (common-lisp:defun |make-__listofallowlistsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allow-list-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchGetCustomDataIdentifierSummary| ()
   '(trivial-types:proper-list batch-get-custom-data-identifier-summary))
 (common-lisp:defun |make-__listofbatchgetcustomdataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-custom-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBucketMetadata| ()
   '(trivial-types:proper-list bucket-metadata))
 (common-lisp:defun |make-__listofbucketmetadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClassificationScopeSummary| ()
   '(trivial-types:proper-list classification-scope-summary))
 (common-lisp:defun |make-__listofclassificationscopesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            classification-scope-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCriteriaForJob| ()
   '(trivial-types:proper-list criteria-for-job))
 (common-lisp:defun |make-__listofcriteriaforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list criteria-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCustomDataIdentifierSummary| ()
   '(trivial-types:proper-list custom-data-identifier-summary))
 (common-lisp:defun |make-__listofcustomdataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDetectedDataDetails| ()
   '(trivial-types:proper-list detected-data-details))
 (common-lisp:defun |make-__listofdetecteddatadetails|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detected-data-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDetection| ()
   '(trivial-types:proper-list detection))
 (common-lisp:defun |make-__listofdetection|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFinding| ()
   '(trivial-types:proper-list finding))
 (common-lisp:defun |make-__listoffinding|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFindingType| ()
   '(trivial-types:proper-list finding-type))
 (common-lisp:defun |make-__listoffindingtype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFindingsFilterListItem| ()
   '(trivial-types:proper-list findings-filter-list-item))
 (common-lisp:defun |make-__listoffindingsfilterlistitem|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            findings-filter-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGroupCount| ()
   '(trivial-types:proper-list group-count))
 (common-lisp:defun |make-__listofgroupcount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInvitation| ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun |make-__listofinvitation|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJobScopeTerm| ()
   '(trivial-types:proper-list job-scope-term))
 (common-lisp:defun |make-__listofjobscopeterm|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-scope-term))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJobSummary| ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun |make-__listofjobsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKeyValuePair| ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-__listofkeyvaluepair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListJobsFilterTerm| ()
   '(trivial-types:proper-list list-jobs-filter-term))
 (common-lisp:defun |make-__listoflistjobsfilterterm|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-jobs-filter-term))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfManagedDataIdentifierSummary| ()
   '(trivial-types:proper-list managed-data-identifier-summary))
 (common-lisp:defun |make-__listofmanageddataidentifiersummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-data-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMatchingResource| ()
   '(trivial-types:proper-list matching-resource))
 (common-lisp:defun |make-__listofmatchingresource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matching-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMember| () '(trivial-types:proper-list member))
 (common-lisp:defun |make-__listofmember|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfResourceProfileArtifact| ()
   '(trivial-types:proper-list resource-profile-artifact))
 (common-lisp:defun |make-__listofresourceprofileartifact|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-profile-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfS3BucketDefinitionForJob| ()
   '(trivial-types:proper-list s3bucket-definition-for-job))
 (common-lisp:defun |make-__listofs3bucketdefinitionforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            s3bucket-definition-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfS3BucketName| ()
   '(trivial-types:proper-list s3bucket-name))
 (common-lisp:defun |make-__listofs3bucketname|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSearchResourcesCriteria| ()
   '(trivial-types:proper-list search-resources-criteria))
 (common-lisp:defun |make-__listofsearchresourcescriteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-resources-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSearchResourcesTagCriterionPair| ()
   '(trivial-types:proper-list search-resources-tag-criterion-pair))
 (common-lisp:defun |make-__listofsearchresourcestagcriterionpair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-resources-tag-criterion-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSensitivityInspectionTemplatesEntry| ()
   '(trivial-types:proper-list sensitivity-inspection-templates-entry))
 (common-lisp:defun |make-__listofsensitivityinspectiontemplatesentry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sensitivity-inspection-templates-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSuppressDataIdentifier| ()
   '(trivial-types:proper-list suppress-data-identifier))
 (common-lisp:defun |make-__listofsuppressdataidentifier|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            suppress-data-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTagCriterionPairForJob| ()
   '(trivial-types:proper-list tag-criterion-pair-for-job))
 (common-lisp:defun |make-__listoftagcriterionpairforjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tag-criterion-pair-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTagValuePair| ()
   '(trivial-types:proper-list tag-value-pair))
 (common-lisp:defun |make-__listoftagvaluepair|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnavailabilityReasonCode| ()
   '(trivial-types:proper-list unavailability-reason-code))
 (common-lisp:defun |make-__listofunavailabilityreasoncode|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unavailability-reason-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnprocessedAccount| ()
   '(trivial-types:proper-list unprocessed-account))
 (common-lisp:defun |make-__listofunprocessedaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageByAccount| ()
   '(trivial-types:proper-list usage-by-account))
 (common-lisp:defun |make-__listofusagebyaccount|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-by-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageRecord| ()
   '(trivial-types:proper-list usage-record))
 (common-lisp:defun |make-__listofusagerecord|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageStatisticsFilter| ()
   '(trivial-types:proper-list usage-statistics-filter))
 (common-lisp:defun |make-__listofusagestatisticsfilter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-statistics-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUsageTotal| ()
   '(trivial-types:proper-list usage-total))
 (common-lisp:defun |make-__listofusagetotal|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-total))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max1024PatternSS| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128Pattern| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max2048| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max512PatternSS| () 'common-lisp:string)
(common-lisp:deftype |__stringMin22Max22PatternAZ0922| () 'common-lisp:string)
(common-lisp:deftype |__stringMin3Max255PatternAZaZ093255| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin71Max89PatternArnAwsAwsCnAwsUsGovMacie2AZ19920D12AllowListAZ0922|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key administrator-account-id invitation-id
                     master-account)
   (common-lisp:declare
    (common-lisp:ignorable administrator-account-id invitation-id
     master-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/accept"
                                                        "AcceptInvitation"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun batch-get-custom-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ids)
   (common-lisp:declare (common-lisp:ignorable ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-custom-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/get"
                                                        "BatchGetCustomDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-custom-data-identifiers))
(common-lisp:progn
 (common-lisp:defun create-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token criteria description name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token criteria description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/allow-lists"
                                                        "CreateAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-allow-list))
(common-lisp:progn
 (common-lisp:defun create-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allow-list-ids client-token
                     custom-data-identifier-ids description initial-run
                     job-type managed-data-identifier-ids
                     managed-data-identifier-selector name s3job-definition
                     sampling-percentage schedule-frequency tags)
   (common-lisp:declare
    (common-lisp:ignorable allow-list-ids client-token
     custom-data-identifier-ids description initial-run job-type
     managed-data-identifier-ids managed-data-identifier-selector name
     s3job-definition sampling-percentage schedule-frequency tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs"
                                                        "CreateClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-classification-job))
(common-lisp:progn
 (common-lisp:defun create-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ignore-words
                     keywords maximum-match-distance name regex severity-levels
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ignore-words keywords
     maximum-match-distance name regex severity-levels tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers"
                                                        "CreateCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun create-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token description
                     finding-criteria name position tags)
   (common-lisp:declare
    (common-lisp:ignorable action client-token description finding-criteria
     name position tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findingsfilters"
                                                        "CreateFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-findings-filter))
(common-lisp:progn
 (common-lisp:defun create-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids disable-email-notification
                     message)
   (common-lisp:declare
    (common-lisp:ignorable account-ids disable-email-notification message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations"
                                                        "CreateInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-invitations))
(common-lisp:progn
 (common-lisp:defun create-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account tags)
   (common-lisp:declare (common-lisp:ignorable account tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members"
                                                        "CreateMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-member))
(common-lisp:progn
 (common-lisp:defun create-sample-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-types)
   (common-lisp:declare (common-lisp:ignorable finding-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sample-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/sample"
                                                        "CreateSampleFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sample-findings))
(common-lisp:progn
 (common-lisp:defun decline-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/decline"
                                                        "DeclineInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decline-invitations))
(common-lisp:progn
 (common-lisp:defun delete-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id ignore-job-checks)
   (common-lisp:declare (common-lisp:ignorable id ignore-job-checks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-allow-list))
(common-lisp:progn
 (common-lisp:defun delete-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-data-identifiers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun delete-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-findings-filter))
(common-lisp:progn
 (common-lisp:defun delete-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/delete"
                                                        "DeleteInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-invitations))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun describe-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable criteria max-results next-token sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/s3"
                                                        "DescribeBuckets"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-buckets))
(common-lisp:progn
 (common-lisp:defun describe-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-classification-job))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/admin/configuration" :protocol :rest-json
                                :operation "DescribeOrganizationConfiguration"
                                :params
                                `(("Action"
                                   ,@"DescribeOrganizationConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun disable-macie ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "DELETE" :path "/macie"
                                :protocol :rest-json :operation "DisableMacie"
                                :params
                                `(("Action" ,@"DisableMacie")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-macie))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/admin"
                                                        "DisableOrganizationAdminAccount"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "POST" :path
                                "/administrator/disassociate" :protocol
                                :rest-json :operation
                                "DisassociateFromAdministratorAccount" :params
                                `(("Action"
                                   ,@"DisassociateFromAdministratorAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-administrator-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "POST" :path
                                "/master/disassociate" :protocol :rest-json
                                :operation "DisassociateFromMasterAccount"
                                :params
                                `(("Action" ,@"DisassociateFromMasterAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-master-account))
(common-lisp:progn
 (common-lisp:defun disassociate-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/disassociate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-member))
(common-lisp:progn
 (common-lisp:defun enable-macie
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token finding-publishing-frequency
                     status)
   (common-lisp:declare
    (common-lisp:ignorable client-token finding-publishing-frequency status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-macie-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/macie" "EnableMacie"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-macie))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id client-token)
   (common-lisp:declare (common-lisp:ignorable admin-account-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/admin"
                                                        "EnableOrganizationAdminAccount"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/administrator" :protocol :rest-json
                                :operation "GetAdministratorAccount" :params
                                `(("Action" ,@"GetAdministratorAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-administrator-account))
(common-lisp:progn
 (common-lisp:defun get-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-allow-list))
(common-lisp:progn
 (common-lisp:defun get-automated-discovery-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/automated-discovery/configuration" :protocol
                                :rest-json :operation
                                "GetAutomatedDiscoveryConfiguration" :params
                                `(("Action"
                                   ,@"GetAutomatedDiscoveryConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-automated-discovery-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/s3/statistics"
                                                        "GetBucketStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-statistics))
(common-lisp:progn
 (common-lisp:defun get-classification-export-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/classification-export-configuration"
                                :protocol :rest-json :operation
                                "GetClassificationExportConfiguration" :params
                                `(("Action"
                                   ,@"GetClassificationExportConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-classification-export-configuration))
(common-lisp:progn
 (common-lisp:defun get-classification-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classification-scope-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/classification-scopes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetClassificationScope"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-classification-scope))
(common-lisp:progn
 (common-lisp:defun get-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-data-identifiers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun get-finding-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-criteria group-by size
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable finding-criteria group-by size sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/statistics"
                                                        "GetFindingStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding-statistics))
(common-lisp:progn
 (common-lisp:defun get-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-ids sort-criteria)
   (common-lisp:declare (common-lisp:ignorable finding-ids sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/describe"
                                                        "GetFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings))
(common-lisp:progn
 (common-lisp:defun get-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings-filter))
(common-lisp:progn
 (common-lisp:defun get-findings-publication-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/findings-publication-configuration" :protocol
                                :rest-json :operation
                                "GetFindingsPublicationConfiguration" :params
                                `(("Action"
                                   ,@"GetFindingsPublicationConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-findings-publication-configuration))
(common-lisp:progn
 (common-lisp:defun get-invitations-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/invitations/count" :protocol :rest-json
                                :operation "GetInvitationsCount" :params
                                `(("Action" ,@"GetInvitationsCount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitations-count))
(common-lisp:progn
 (common-lisp:defun get-macie-session ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path "/macie"
                                :protocol :rest-json :operation
                                "GetMacieSession" :params
                                `(("Action" ,@"GetMacieSession")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-macie-session))
(common-lisp:progn
 (common-lisp:defun get-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path "/master"
                                :protocol :rest-json :operation
                                "GetMasterAccount" :params
                                `(("Action" ,@"GetMasterAccount")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-master-account))
(common-lisp:progn
 (common-lisp:defun get-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMember"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-member))
(common-lisp:progn
 (common-lisp:defun get-resource-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles"
                                                        "GetResourceProfile"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-profile))
(common-lisp:progn
 (common-lisp:defun get-reveal-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'macie2-request :method "GET" :path
                                "/reveal-configuration" :protocol :rest-json
                                :operation "GetRevealConfiguration" :params
                                `(("Action" ,@"GetRevealConfiguration")
                                  ("Version" ,@"2020-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-reveal-configuration))
(common-lisp:progn
 (common-lisp:defun get-sensitive-data-occurrences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitive-data-occurrences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findings/~A/reveal"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "GetSensitiveDataOccurrences"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitive-data-occurrences))
(common-lisp:progn
 (common-lisp:defun get-sensitive-data-occurrences-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitive-data-occurrences-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findings/~A/reveal/availability"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "GetSensitiveDataOccurrencesAvailability"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitive-data-occurrences-availability))
(common-lisp:progn
 (common-lisp:defun get-sensitivity-inspection-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sensitivity-inspection-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/templates/sensitivity-inspections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetSensitivityInspectionTemplate"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sensitivity-inspection-template))
(common-lisp:progn
 (common-lisp:defun get-usage-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-by max-results next-token sort-by
                     time-range)
   (common-lisp:declare
    (common-lisp:ignorable filter-by max-results next-token sort-by
     time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/usage/statistics"
                                                        "GetUsageStatistics"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-statistics))
(common-lisp:progn
 (common-lisp:defun get-usage-totals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-range)
   (common-lisp:declare (common-lisp:ignorable time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-totals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/usage"
                                                        "GetUsageTotals"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-totals))
(common-lisp:progn
 (common-lisp:defun list-allow-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-allow-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/allow-lists"
                                                        "ListAllowLists"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-allow-lists))
(common-lisp:progn
 (common-lisp:defun list-classification-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-classification-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs/list"
                                                        "ListClassificationJobs"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-classification-jobs))
(common-lisp:progn
 (common-lisp:defun list-classification-scopes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token)
   (common-lisp:declare (common-lisp:ignorable name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-classification-scopes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/classification-scopes"
                                                        "ListClassificationScopes"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-classification-scopes))
(common-lisp:progn
 (common-lisp:defun list-custom-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/list"
                                                        "ListCustomDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-data-identifiers))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable finding-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings"
                                                        "ListFindings"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-findings-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/findingsfilters"
                                                        "ListFindingsFilters"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings-filters))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/invitations"
                                                        "ListInvitations"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-managed-data-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-managed-data-identifiers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/managed-data-identifiers/list"
                                                        "ListManagedDataIdentifiers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-data-identifiers))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token only-associated)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token only-associated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/members"
                                                        "ListMembers"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/admin"
                                                        "ListOrganizationAdminAccounts"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-resource-profile-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token resource-arn)
   (common-lisp:declare (common-lisp:ignorable next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-profile-artifacts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles/artifacts"
                                                        "ListResourceProfileArtifacts"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-profile-artifacts))
(common-lisp:progn
 (common-lisp:defun list-resource-profile-detections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-profile-detections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resource-profiles/detections"
                                                        "ListResourceProfileDetections"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-profile-detections))
(common-lisp:progn
 (common-lisp:defun list-sensitivity-inspection-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sensitivity-inspection-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/templates/sensitivity-inspections"
                                                        "ListSensitivityInspectionTemplates"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sensitivity-inspection-templates))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-classification-export-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration)
   (common-lisp:declare (common-lisp:ignorable configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-classification-export-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/classification-export-configuration"
                                                        "PutClassificationExportConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-classification-export-configuration))
(common-lisp:progn
 (common-lisp:defun put-findings-publication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token security-hub-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-token security-hub-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-findings-publication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/findings-publication-configuration"
                                                        "PutFindingsPublicationConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-findings-publication-configuration))
(common-lisp:progn
 (common-lisp:defun search-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable bucket-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/datasources/search-resources"
                                                        "SearchResources"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-resources))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-custom-data-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ignore-words keywords
                     maximum-match-distance regex sample-text)
   (common-lisp:declare
    (common-lisp:ignorable ignore-words keywords maximum-match-distance regex
     sample-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-test-custom-data-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/custom-data-identifiers/test"
                                                        "TestCustomDataIdentifier"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-custom-data-identifier))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-allow-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key criteria description id name)
   (common-lisp:declare (common-lisp:ignorable criteria description id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-allow-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/allow-lists/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateAllowList"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-allow-list))
(common-lisp:progn
 (common-lisp:defun update-automated-discovery-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status)
   (common-lisp:declare (common-lisp:ignorable status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-automated-discovery-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/automated-discovery/configuration"
                                                        "UpdateAutomatedDiscoveryConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-automated-discovery-configuration))
(common-lisp:progn
 (common-lisp:defun update-classification-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id job-status)
   (common-lisp:declare (common-lisp:ignorable job-id job-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-classification-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateClassificationJob"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-classification-job))
(common-lisp:progn
 (common-lisp:defun update-classification-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id s3)
   (common-lisp:declare (common-lisp:ignorable id s3))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-classification-scope-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/classification-scopes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateClassificationScope"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-classification-scope))
(common-lisp:progn
 (common-lisp:defun update-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token description
                     finding-criteria id name position)
   (common-lisp:declare
    (common-lisp:ignorable action client-token description finding-criteria id
     name position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingsfilters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateFindingsFilter"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings-filter))
(common-lisp:progn
 (common-lisp:defun update-macie-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-publishing-frequency status)
   (common-lisp:declare
    (common-lisp:ignorable finding-publishing-frequency status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-macie-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/macie"
                                                        "UpdateMacieSession"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-macie-session))
(common-lisp:progn
 (common-lisp:defun update-member-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id status)
   (common-lisp:declare (common-lisp:ignorable id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-member-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/macie/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateMemberSession"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-member-session))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable)
   (common-lisp:declare (common-lisp:ignorable auto-enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/admin/configuration"
                                                        "UpdateOrganizationConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organization-configuration))
(common-lisp:progn
 (common-lisp:defun update-resource-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn sensitivity-score-override)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn sensitivity-score-override))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/resource-profiles"
                                                        "UpdateResourceProfile"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-profile))
(common-lisp:progn
 (common-lisp:defun update-resource-profile-detections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn suppress-data-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn suppress-data-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resource-profile-detections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/resource-profiles/detections"
                                                        "UpdateResourceProfileDetections"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-profile-detections))
(common-lisp:progn
 (common-lisp:defun update-reveal-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration)
   (common-lisp:declare (common-lisp:ignorable configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-reveal-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/reveal-configuration"
                                                        "UpdateRevealConfiguration"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-reveal-configuration))
(common-lisp:progn
 (common-lisp:defun update-sensitivity-inspection-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description excludes id includes)
   (common-lisp:declare
    (common-lisp:ignorable description excludes id includes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sensitivity-inspection-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'macie2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/templates/sensitivity-inspections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateSensitivityInspectionTemplate"
                                                        "2020-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sensitivity-inspection-template))
