;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codestar-notifications/api
  (:use)
  (:nicknames #:aws/codestar-notifications)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codestar-notifications/api)
(common-lisp:progn
 (common-lisp:defclass codestar-notifications-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codestar-notifications"
                        :protocol :rest-json))
 (common-lisp:export 'codestar-notifications-request))
(common-lisp:progn
 (common-lisp:define-condition codestar-notifications-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codestar-notifications-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConfigurationException" . configuration-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition configuration-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'configuration-exception 'configuration-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-notification-rule-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or notification-rule-status
                                         common-lisp:null)
                         :accessor %create-notification-rule-request-status
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-notification-rule-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-notification-rule-request-client-request-token
                         :initform common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or detail-type common-lisp:null)
                         :accessor
                         %create-notification-rule-request-detail-type
                         :initform
                         (common-lisp:error ":detail-type is required"))
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %create-notification-rule-request-targets :initform
                         (common-lisp:error ":targets is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or notification-rule-resource
                                         common-lisp:null)
                         :accessor %create-notification-rule-request-resource
                         :initform (common-lisp:error ":resource is required"))
                        (event-type-ids :initarg :event-type-ids :type
                         (common-lisp:or event-type-ids common-lisp:null)
                         :accessor
                         %create-notification-rule-request-event-type-ids
                         :initform
                         (common-lisp:error ":event-type-ids is required"))
                        (name :initarg :name :type
                         (common-lisp:or notification-rule-name
                                         common-lisp:null)
                         :accessor %create-notification-rule-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-notification-rule-request
                    'make-create-notification-rule-request))
 (common-lisp:defun make-create-notification-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status tags client-request-token
                     detail-type targets resource event-type-ids name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-notification-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-ids))
      (common-lisp:list
       (common-lisp:cons "EventTypeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notification-rule-result common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %create-notification-rule-result-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-notification-rule-result
                    'make-create-notification-rule-result))
 (common-lisp:defun make-create-notification-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-notification-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-rule-result))
   common-lisp:nil))
(common-lisp:deftype created-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-notification-rule-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %delete-notification-rule-request-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-notification-rule-request
                    'make-delete-notification-rule-request))
 (common-lisp:defun make-delete-notification-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-notification-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notification-rule-result common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %delete-notification-rule-result-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-notification-rule-result
                    'make-delete-notification-rule-result))
 (common-lisp:defun make-delete-notification-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-notification-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-request common-lisp:nil
                       ((force-unsubscribe-all :initarg :force-unsubscribe-all
                         :type
                         (common-lisp:or force-unsubscribe-all
                                         common-lisp:null)
                         :accessor %delete-target-request-force-unsubscribe-all
                         :initform common-lisp:nil)
                        (target-address :initarg :target-address :type
                         (common-lisp:or target-address common-lisp:null)
                         :accessor %delete-target-request-target-address
                         :initform
                         (common-lisp:error ":target-address is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-target-request 'make-delete-target-request))
 (common-lisp:defun make-delete-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-unsubscribe-all target-address)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-address))
      (common-lisp:list
       (common-lisp:cons "TargetAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-unsubscribe-all))
      (common-lisp:list
       (common-lisp:cons "ForceUnsubscribeAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-target-result 'make-delete-target-result))
 (common-lisp:defun make-delete-target-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-target-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-target-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-target-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-rule-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %describe-notification-rule-request-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-notification-rule-request
                    'make-describe-notification-rule-request))
 (common-lisp:defun make-describe-notification-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-rule-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-notification-rule-result-tags :initform
                         common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :type
                         (common-lisp:or last-modified-timestamp
                                         common-lisp:null)
                         :accessor
                         %describe-notification-rule-result-last-modified-timestamp
                         :initform common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         %describe-notification-rule-result-created-timestamp
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or notification-rule-status
                                         common-lisp:null)
                         :accessor %describe-notification-rule-result-status
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or notification-rule-created-by
                                         common-lisp:null)
                         :accessor
                         %describe-notification-rule-result-created-by
                         :initform common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or detail-type common-lisp:null)
                         :accessor
                         %describe-notification-rule-result-detail-type
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets-batch common-lisp:null)
                         :accessor %describe-notification-rule-result-targets
                         :initform common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or notification-rule-resource
                                         common-lisp:null)
                         :accessor %describe-notification-rule-result-resource
                         :initform common-lisp:nil)
                        (event-types :initarg :event-types :type
                         (common-lisp:or event-type-batch common-lisp:null)
                         :accessor
                         %describe-notification-rule-result-event-types
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or notification-rule-name
                                         common-lisp:null)
                         :accessor %describe-notification-rule-result-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %describe-notification-rule-result-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-notification-rule-result
                    'make-describe-notification-rule-result))
 (common-lisp:defun make-describe-notification-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-modified-timestamp
                     created-timestamp status created-by detail-type targets
                     resource event-types name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-types))
      (common-lisp:list
       (common-lisp:cons "EventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-rule-result))
   common-lisp:nil))
(common-lisp:deftype detail-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-type-batch ()
   '(trivial-types:proper-list event-type-summary))
 (common-lisp:defun |make-event-type-batch|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-type-ids ()
   '(trivial-types:proper-list event-type-id))
 (common-lisp:defun |make-event-type-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-type-summary common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %event-type-summary-resource-type :initform
                         common-lisp:nil)
                        (event-type-name :initarg :event-type-name :type
                         (common-lisp:or event-type-name common-lisp:null)
                         :accessor %event-type-summary-event-type-name
                         :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %event-type-summary-service-name :initform
                         common-lisp:nil)
                        (event-type-id :initarg :event-type-id :type
                         (common-lisp:or event-type-id common-lisp:null)
                         :accessor %event-type-summary-event-type-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-type-summary 'make-event-type-summary))
 (common-lisp:defun make-event-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type event-type-name
                     service-name event-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'event-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-id))
      (common-lisp:list
       (common-lisp:cons "EventTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-name))
      (common-lisp:list
       (common-lisp:cons "EventTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-type-summary))
   common-lisp:nil))
(common-lisp:deftype force-unsubscribe-all () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:deftype last-modified-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-event-types-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or list-event-types-filter-value
                                         common-lisp:null)
                         :accessor %list-event-types-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or list-event-types-filter-name
                                         common-lisp:null)
                         :accessor %list-event-types-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-event-types-filter 'make-list-event-types-filter))
 (common-lisp:defun make-list-event-types-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-types-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-filter))
   common-lisp:nil))
(common-lisp:deftype list-event-types-filter-name () 'common-lisp:string)
(common-lisp:deftype list-event-types-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-event-types-filters ()
   '(trivial-types:proper-list list-event-types-filter))
 (common-lisp:defun |make-list-event-types-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-event-types-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-event-types-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-event-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-types-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or list-event-types-filters
                                         common-lisp:null)
                         :accessor %list-event-types-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-types-request 'make-list-event-types-request))
 (common-lisp:defun make-list-event-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-types-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-types-result-next-token :initform
                         common-lisp:nil)
                        (event-types :initarg :event-types :type
                         (common-lisp:or event-type-batch common-lisp:null)
                         :accessor %list-event-types-result-event-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-types-result 'make-list-event-types-result))
 (common-lisp:defun make-list-event-types-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-types)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-types-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-types))
      (common-lisp:list
       (common-lisp:cons "EventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-types-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notification-rules-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or list-notification-rules-filter-value
                                         common-lisp:null)
                         :accessor %list-notification-rules-filter-value
                         :initform (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or list-notification-rules-filter-name
                                         common-lisp:null)
                         :accessor %list-notification-rules-filter-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-notification-rules-filter
                    'make-list-notification-rules-filter))
 (common-lisp:defun make-list-notification-rules-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notification-rules-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-filter))
   common-lisp:nil))
(common-lisp:deftype list-notification-rules-filter-name () 'common-lisp:string)
(common-lisp:deftype list-notification-rules-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-notification-rules-filters ()
   '(trivial-types:proper-list list-notification-rules-filter))
 (common-lisp:defun |make-list-notification-rules-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-notification-rules-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-notification-rules-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-notification-rules-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-notification-rules-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or list-notification-rules-filters
                                         common-lisp:null)
                         :accessor %list-notification-rules-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-notification-rules-request
                    'make-list-notification-rules-request))
 (common-lisp:defun make-list-notification-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notification-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notification-rules-result common-lisp:nil
                       ((notification-rules :initarg :notification-rules :type
                         (common-lisp:or notification-rule-batch
                                         common-lisp:null)
                         :accessor
                         %list-notification-rules-result-notification-rules
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-notification-rules-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-notification-rules-result
                    'make-list-notification-rules-result))
 (common-lisp:defun make-list-notification-rules-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-rules next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notification-rules-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-rules))
      (common-lisp:list
       (common-lisp:cons "NotificationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-rules-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-request-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or list-targets-filter-value
                                         common-lisp:null)
                         :accessor %list-targets-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or list-targets-filter-name
                                         common-lisp:null)
                         :accessor %list-targets-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-targets-filter 'make-list-targets-filter))
 (common-lisp:defun make-list-targets-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'list-targets-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-targets-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-targets-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-targets-filter))
   common-lisp:nil))
(common-lisp:deftype list-targets-filter-name () 'common-lisp:string)
(common-lisp:deftype list-targets-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-targets-filters ()
   '(trivial-types:proper-list list-targets-filter))
 (common-lisp:defun |make-list-targets-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-targets-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-targets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-targets-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or list-targets-filters common-lisp:null)
                         :accessor %list-targets-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-targets-request 'make-list-targets-request))
 (common-lisp:defun make-list-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-result-next-token :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets-batch common-lisp:null)
                         :accessor %list-targets-result-targets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-targets-result 'make-list-targets-result))
 (common-lisp:defun make-list-targets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token targets)
   (common-lisp:apply #'common-lisp:make-instance 'list-targets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-targets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-targets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-targets-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype notification-rule-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-rule-batch ()
   '(trivial-types:proper-list notification-rule-summary))
 (common-lisp:defun |make-notification-rule-batch|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-rule-created-by () 'common-lisp:string)
(common-lisp:deftype notification-rule-id () 'common-lisp:string)
(common-lisp:deftype notification-rule-name () 'common-lisp:string)
(common-lisp:deftype notification-rule-resource () 'common-lisp:string)
(common-lisp:deftype notification-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-rule-summary common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %notification-rule-summary-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or notification-rule-id common-lisp:null)
                         :accessor %notification-rule-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-rule-summary
                    'make-notification-rule-summary))
 (common-lisp:defun make-notification-rule-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance 'notification-rule-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscribe-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %subscribe-request-client-request-token
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or target common-lisp:null) :accessor
                         %subscribe-request-target :initform
                         (common-lisp:error ":target is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %subscribe-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'subscribe-request 'make-subscribe-request))
 (common-lisp:defun make-subscribe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token target arn)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-result common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %subscribe-result-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'subscribe-result 'make-subscribe-result))
 (common-lisp:defun make-subscribe-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribe-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribe-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribe-result))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %tag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-result-tags :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defun make-tag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass target common-lisp:nil
                       ((target-address :initarg :target-address :type
                         (common-lisp:or target-address common-lisp:null)
                         :accessor %target-target-address :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %target-target-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defun make-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-address target-type)
   (common-lisp:apply #'common-lisp:make-instance 'target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-address))
      (common-lisp:list
       (common-lisp:cons "TargetAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:deftype target-address () 'common-lisp:string)
(common-lisp:deftype target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-summary common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or target-status common-lisp:null)
                         :accessor %target-summary-target-status :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %target-summary-target-type :initform
                         common-lisp:nil)
                        (target-address :initarg :target-address :type
                         (common-lisp:or target-address common-lisp:null)
                         :accessor %target-summary-target-address :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target-summary 'make-target-summary))
 (common-lisp:defun make-target-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status target-type target-address)
   (common-lisp:apply #'common-lisp:make-instance 'target-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-address))
      (common-lisp:list
       (common-lisp:cons "TargetAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-summary))
   common-lisp:nil))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype targets () '(trivial-types:proper-list target))
 (common-lisp:defun |make-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype targets-batch ()
   '(trivial-types:proper-list target-summary))
 (common-lisp:defun |make-targets-batch|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unsubscribe-request common-lisp:nil
                       ((target-address :initarg :target-address :type
                         (common-lisp:or target-address common-lisp:null)
                         :accessor %unsubscribe-request-target-address
                         :initform
                         (common-lisp:error ":target-address is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %unsubscribe-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'unsubscribe-request 'make-unsubscribe-request))
 (common-lisp:defun make-unsubscribe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-address arn)
   (common-lisp:apply #'common-lisp:make-instance 'unsubscribe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unsubscribe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unsubscribe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-address))
      (common-lisp:list
       (common-lisp:cons "TargetAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unsubscribe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unsubscribe-result common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %unsubscribe-result-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'unsubscribe-result 'make-unsubscribe-result))
 (common-lisp:defun make-unsubscribe-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'unsubscribe-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unsubscribe-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unsubscribe-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unsubscribe-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %untag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defun make-untag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notification-rule-request common-lisp:nil
                       ((detail-type :initarg :detail-type :type
                         (common-lisp:or detail-type common-lisp:null)
                         :accessor
                         %update-notification-rule-request-detail-type
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-notification-rule-request-targets :initform
                         common-lisp:nil)
                        (event-type-ids :initarg :event-type-ids :type
                         (common-lisp:or event-type-ids common-lisp:null)
                         :accessor
                         %update-notification-rule-request-event-type-ids
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or notification-rule-status
                                         common-lisp:null)
                         :accessor %update-notification-rule-request-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or notification-rule-name
                                         common-lisp:null)
                         :accessor %update-notification-rule-request-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or notification-rule-arn
                                         common-lisp:null)
                         :accessor %update-notification-rule-request-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-notification-rule-request
                    'make-update-notification-rule-request))
 (common-lisp:defun make-update-notification-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detail-type targets event-type-ids status
                     name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notification-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type-ids))
      (common-lisp:list
       (common-lisp:cons "EventTypeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notification-rule-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-notification-rule-result
                    'make-update-notification-rule-result))
 (common-lisp:defun make-update-notification-rule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notification-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codestar-notifications-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-notification-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-type-ids resource targets
                     detail-type client-request-token tags status)
   (common-lisp:declare
    (common-lisp:ignorable name event-type-ids resource targets detail-type
     client-request-token tags status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-notification-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/createNotificationRule" "CreateNotificationRule"
        "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notification-rule))
(common-lisp:progn
 (common-lisp:defun delete-notification-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-notification-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/deleteNotificationRule" "DeleteNotificationRule"
        "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notification-rule))
(common-lisp:progn
 (common-lisp:defun delete-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-address force-unsubscribe-all)
   (common-lisp:declare
    (common-lisp:ignorable target-address force-unsubscribe-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/deleteTarget" "DeleteTarget" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-target))
(common-lisp:progn
 (common-lisp:defun describe-notification-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notification-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/describeNotificationRule"
        "DescribeNotificationRule" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-notification-rule))
(common-lisp:progn
 (common-lisp:defun list-event-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/listEventTypes" "ListEventTypes" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-types))
(common-lisp:progn
 (common-lisp:defun list-notification-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notification-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/listNotificationRules" "ListNotificationRules"
        "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notification-rules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/listTagsForResource" "ListTagsForResource"
        "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/listTargets" "ListTargets" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-targets))
(common-lisp:progn
 (common-lisp:defun subscribe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn target client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable arn target client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-subscribe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/subscribe" "Subscribe" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'subscribe))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/tagResource" "TagResource" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun unsubscribe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn target-address)
   (common-lisp:declare (common-lisp:ignorable arn target-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unsubscribe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/unsubscribe" "Unsubscribe" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unsubscribe))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/untagResource/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-notification-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name status event-type-ids targets
                     detail-type)
   (common-lisp:declare
    (common-lisp:ignorable arn name status event-type-ids targets detail-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notification-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-notifications-request aws-sdk/generator/operation::input
        "POST" :rest-json "/updateNotificationRule" "UpdateNotificationRule"
        "2019-10-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-notification-rule))
