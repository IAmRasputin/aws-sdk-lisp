;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pi/api
  (:use)
  (:nicknames #:aws/pi)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pi/api)
(common-lisp:progn
 (common-lisp:defclass pi-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "pi" :protocol :json))
 (common-lisp:export 'pi-request))
(common-lisp:progn
 (common-lisp:define-condition pi-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pi-error))
(common-lisp:defvar *error-map*
  '(("InternalServiceError" . internal-service-error)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("NotAuthorizedException" . not-authorized-exception)))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-list ()
   '(trivial-types:proper-list request-string))
 (common-lisp:defun |make-additional-metrics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list request-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-additional-metrics-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass data-point common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %data-point-value :initform
                         (common-lisp:error ":value is required"))
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor %data-point-timestamp :initform
                         (common-lisp:error ":timestamp is required"))))
 (common-lisp:export (common-lisp:list 'data-point 'make-data-point))
 (common-lisp:defun make-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-points-list ()
   '(trivial-types:proper-list data-point))
 (common-lisp:defun |make-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-dimension-keys-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-dimension-keys-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-dimension-keys-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or metric-query-filter-map
                                         common-lisp:null)
                         :accessor %describe-dimension-keys-request-filter
                         :initform common-lisp:nil)
                        (partition-by :initarg :partition-by :type
                         (common-lisp:or dimension-group common-lisp:null)
                         :accessor
                         %describe-dimension-keys-request-partition-by
                         :initform common-lisp:nil)
                        (additional-metrics :initarg :additional-metrics :type
                         (common-lisp:or additional-metrics-list
                                         common-lisp:null)
                         :accessor
                         %describe-dimension-keys-request-additional-metrics
                         :initform common-lisp:nil)
                        (group-by :initarg :group-by :type
                         (common-lisp:or dimension-group common-lisp:null)
                         :accessor %describe-dimension-keys-request-group-by
                         :initform (common-lisp:error ":group-by is required"))
                        (period-in-seconds :initarg :period-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-dimension-keys-request-period-in-seconds
                         :initform common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %describe-dimension-keys-request-metric
                         :initform (common-lisp:error ":metric is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor %describe-dimension-keys-request-end-time
                         :initform (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor %describe-dimension-keys-request-start-time
                         :initform
                         (common-lisp:error ":start-time is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %describe-dimension-keys-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         %describe-dimension-keys-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-keys-request
                    'make-describe-dimension-keys-request))
 (common-lisp:defun make-describe-dimension-keys-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter
                     partition-by additional-metrics group-by period-in-seconds
                     metric end-time start-time identifier service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dimension-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "PeriodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metrics))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-by))
      (common-lisp:list
       (common-lisp:cons "PartitionBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dimension-keys-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-dimension-keys-response-next-token :initform
                         common-lisp:nil)
                        (keys :initarg :keys :type
                         (common-lisp:or dimension-key-description-list
                                         common-lisp:null)
                         :accessor %describe-dimension-keys-response-keys
                         :initform common-lisp:nil)
                        (partition-keys :initarg :partition-keys :type
                         (common-lisp:or response-partition-key-list
                                         common-lisp:null)
                         :accessor
                         %describe-dimension-keys-response-partition-keys
                         :initform common-lisp:nil)
                        (aligned-end-time :initarg :aligned-end-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor
                         %describe-dimension-keys-response-aligned-end-time
                         :initform common-lisp:nil)
                        (aligned-start-time :initarg :aligned-start-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor
                         %describe-dimension-keys-response-aligned-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-keys-response
                    'make-describe-dimension-keys-response))
 (common-lisp:defun make-describe-dimension-keys-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token keys partition-keys
                     aligned-end-time aligned-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dimension-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aligned-start-time))
      (common-lisp:list
       (common-lisp:cons "AlignedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aligned-end-time))
      (common-lisp:list
       (common-lisp:cons "AlignedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-keys-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype detail-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dimension-detail common-lisp:nil
                       ((identifier :initarg :identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dimension-detail-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-detail 'make-dimension-detail))
 (common-lisp:defun make-dimension-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-detail-list ()
   '(trivial-types:proper-list dimension-detail))
 (common-lisp:defun |make-dimension-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dimension-group common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %dimension-group-limit :initform common-lisp:nil)
                        (dimensions :initarg :dimensions :type
                         (common-lisp:or request-string-list common-lisp:null)
                         :accessor %dimension-group-dimensions :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %dimension-group-group :initform
                         (common-lisp:error ":group is required"))))
 (common-lisp:export (common-lisp:list 'dimension-group 'make-dimension-group))
 (common-lisp:defun make-dimension-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit dimensions group)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-group-detail common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or dimension-detail-list
                                         common-lisp:null)
                         :accessor %dimension-group-detail-dimensions :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dimension-group-detail-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-group-detail 'make-dimension-group-detail))
 (common-lisp:defun make-dimension-group-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions group)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-group-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-group-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-group-detail-list ()
   '(trivial-types:proper-list dimension-group-detail))
 (common-lisp:defun |make-dimension-group-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dimension-key-description common-lisp:nil
                       ((partitions :initarg :partitions :type
                         (common-lisp:or metric-values-list common-lisp:null)
                         :accessor %dimension-key-description-partitions
                         :initform common-lisp:nil)
                        (additional-metrics :initarg :additional-metrics :type
                         (common-lisp:or additional-metrics-map
                                         common-lisp:null)
                         :accessor
                         %dimension-key-description-additional-metrics
                         :initform common-lisp:nil)
                        (total :initarg :total :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %dimension-key-description-total :initform
                         common-lisp:nil)
                        (dimensions :initarg :dimensions :type
                         (common-lisp:or dimension-map common-lisp:null)
                         :accessor %dimension-key-description-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-key-description
                    'make-dimension-key-description))
 (common-lisp:defun make-dimension-key-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partitions additional-metrics total
                     dimensions)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-key-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-key-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-key-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metrics))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-key-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-key-description-list ()
   '(trivial-types:proper-list dimension-key-description))
 (common-lisp:defun |make-dimension-key-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dimension-key-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dimension-key-detail common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or detail-status common-lisp:null)
                         :accessor %dimension-key-detail-status :initform
                         common-lisp:nil)
                        (dimension :initarg :dimension :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dimension-key-detail-dimension :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dimension-key-detail-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-key-detail 'make-dimension-key-detail))
 (common-lisp:defun make-dimension-key-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status dimension value)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-key-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-key-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-key-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-key-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-key-detail-list ()
   '(trivial-types:proper-list dimension-key-detail))
 (common-lisp:defun |make-dimension-key-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-key-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dimension-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-dimension-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype dimensions-metric-list ()
   '(trivial-types:proper-list request-string))
 (common-lisp:defun |make-dimensions-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list request-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass feature-metadata common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or feature-status common-lisp:null)
                         :accessor %feature-metadata-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'feature-metadata 'make-feature-metadata))
 (common-lisp:defun make-feature-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'feature-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype feature-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-feature-metadata-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype feature-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-dimension-key-details-request common-lisp:nil
                       ((requested-dimensions :initarg :requested-dimensions
                         :type
                         (common-lisp:or requested-dimension-list
                                         common-lisp:null)
                         :accessor
                         %get-dimension-key-details-request-requested-dimensions
                         :initform common-lisp:nil)
                        (group-identifier :initarg :group-identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor
                         %get-dimension-key-details-request-group-identifier
                         :initform
                         (common-lisp:error ":group-identifier is required"))
                        (group :initarg :group :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %get-dimension-key-details-request-group
                         :initform (common-lisp:error ":group is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier-string common-lisp:null)
                         :accessor
                         %get-dimension-key-details-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         %get-dimension-key-details-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dimension-key-details-request
                    'make-get-dimension-key-details-request))
 (common-lisp:defun make-get-dimension-key-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key requested-dimensions group-identifier
                     group identifier service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dimension-key-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-dimensions))
      (common-lisp:list
       (common-lisp:cons "RequestedDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dimension-key-details-response common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or dimension-key-detail-list
                                         common-lisp:null)
                         :accessor
                         %get-dimension-key-details-response-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dimension-key-details-response
                    'make-get-dimension-key-details-response))
 (common-lisp:defun make-get-dimension-key-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dimension-key-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-key-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-metadata-request common-lisp:nil
                       ((identifier :initarg :identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %get-resource-metadata-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor %get-resource-metadata-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-metadata-request
                    'make-get-resource-metadata-request))
 (common-lisp:defun make-get-resource-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-metadata-response common-lisp:nil
                       ((features :initarg :features :type
                         (common-lisp:or feature-metadata-map common-lisp:null)
                         :accessor %get-resource-metadata-response-features
                         :initform common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-resource-metadata-response-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-metadata-response
                    'make-get-resource-metadata-response))
 (common-lisp:defun make-get-resource-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key features identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-metrics-request common-lisp:nil
                       ((period-alignment :initarg :period-alignment :type
                         (common-lisp:or period-alignment common-lisp:null)
                         :accessor
                         %get-resource-metrics-request-period-alignment
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-resource-metrics-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-resource-metrics-request-max-results
                         :initform common-lisp:nil)
                        (period-in-seconds :initarg :period-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-resource-metrics-request-period-in-seconds
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor %get-resource-metrics-request-end-time
                         :initform (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor %get-resource-metrics-request-start-time
                         :initform
                         (common-lisp:error ":start-time is required"))
                        (metric-queries :initarg :metric-queries :type
                         (common-lisp:or metric-query-list common-lisp:null)
                         :accessor %get-resource-metrics-request-metric-queries
                         :initform
                         (common-lisp:error ":metric-queries is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %get-resource-metrics-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor %get-resource-metrics-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-metrics-request
                    'make-get-resource-metrics-request))
 (common-lisp:defun make-get-resource-metrics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key period-alignment next-token max-results
                     period-in-seconds end-time start-time metric-queries
                     identifier service-type)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-queries))
      (common-lisp:list
       (common-lisp:cons "MetricQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "PeriodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-alignment))
      (common-lisp:list
       (common-lisp:cons "PeriodAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-metrics-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-resource-metrics-response-next-token :initform
                         common-lisp:nil)
                        (metric-list :initarg :metric-list :type
                         (common-lisp:or metric-key-data-points-list
                                         common-lisp:null)
                         :accessor %get-resource-metrics-response-metric-list
                         :initform common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-resource-metrics-response-identifier :initform
                         common-lisp:nil)
                        (aligned-end-time :initarg :aligned-end-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor
                         %get-resource-metrics-response-aligned-end-time
                         :initform common-lisp:nil)
                        (aligned-start-time :initarg :aligned-start-time :type
                         (common-lisp:or isotimestamp common-lisp:null)
                         :accessor
                         %get-resource-metrics-response-aligned-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-metrics-response
                    'make-get-resource-metrics-response))
 (common-lisp:defun make-get-resource-metrics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metric-list identifier
                     aligned-end-time aligned-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aligned-start-time))
      (common-lisp:list
       (common-lisp:cons "AlignedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aligned-end-time))
      (common-lisp:list
       (common-lisp:cons "AlignedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-metrics-response))
   common-lisp:nil))
(common-lisp:deftype isotimestamp () 'common-lisp:string)
(common-lisp:deftype identifier-string () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error
     (pi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'internal-service-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (pi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-available-resource-dimensions-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-available-resource-dimensions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-available-resource-dimensions-request-max-results
                         :initform common-lisp:nil)
                        (metrics :initarg :metrics :type
                         (common-lisp:or dimensions-metric-list
                                         common-lisp:null)
                         :accessor
                         %list-available-resource-dimensions-request-metrics
                         :initform (common-lisp:error ":metrics is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor
                         %list-available-resource-dimensions-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         %list-available-resource-dimensions-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'list-available-resource-dimensions-request
                    'make-list-available-resource-dimensions-request))
 (common-lisp:defun make-list-available-resource-dimensions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results metrics identifier
                     service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-resource-dimensions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-available-resource-dimensions-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-available-resource-dimensions-response-next-token
                         :initform common-lisp:nil)
                        (metric-dimensions :initarg :metric-dimensions :type
                         (common-lisp:or metric-dimensions-list
                                         common-lisp:null)
                         :accessor
                         %list-available-resource-dimensions-response-metric-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-available-resource-dimensions-response
                    'make-list-available-resource-dimensions-response))
 (common-lisp:defun make-list-available-resource-dimensions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metric-dimensions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-resource-dimensions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-dimensions))
      (common-lisp:list
       (common-lisp:cons "MetricDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-dimensions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-available-resource-metrics-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-available-resource-metrics-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-available-resource-metrics-request-next-token
                         :initform common-lisp:nil)
                        (metric-types :initarg :metric-types :type
                         (common-lisp:or metric-type-list common-lisp:null)
                         :accessor
                         %list-available-resource-metrics-request-metric-types
                         :initform
                         (common-lisp:error ":metric-types is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor
                         %list-available-resource-metrics-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))
                        (service-type :initarg :service-type :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         %list-available-resource-metrics-request-service-type
                         :initform
                         (common-lisp:error ":service-type is required"))))
 (common-lisp:export
  (common-lisp:list 'list-available-resource-metrics-request
                    'make-list-available-resource-metrics-request))
 (common-lisp:defun make-list-available-resource-metrics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token metric-types
                     identifier service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-resource-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-types))
      (common-lisp:list
       (common-lisp:cons "MetricTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-available-resource-metrics-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-available-resource-metrics-response-next-token
                         :initform common-lisp:nil)
                        (metrics :initarg :metrics :type
                         (common-lisp:or response-resource-metric-list
                                         common-lisp:null)
                         :accessor
                         %list-available-resource-metrics-response-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-available-resource-metrics-response
                    'make-list-available-resource-metrics-response))
 (common-lisp:defun make-list-available-resource-metrics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metrics)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-resource-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-resource-metrics-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metric-dimension-groups common-lisp:nil
                       ((groups :initarg :groups :type
                         (common-lisp:or dimension-group-detail-list
                                         common-lisp:null)
                         :accessor %metric-dimension-groups-groups :initform
                         common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %metric-dimension-groups-metric :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-dimension-groups 'make-metric-dimension-groups))
 (common-lisp:defun make-metric-dimension-groups
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key groups metric)
   (common-lisp:apply #'common-lisp:make-instance 'metric-dimension-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-dimension-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-dimension-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-dimension-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-dimensions-list ()
   '(trivial-types:proper-list metric-dimension-groups))
 (common-lisp:defun |make-metric-dimensions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension-groups))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-key-data-points common-lisp:nil
                       ((data-points :initarg :data-points :type
                         (common-lisp:or data-points-list common-lisp:null)
                         :accessor %metric-key-data-points-data-points
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or response-resource-metric-key
                                         common-lisp:null)
                         :accessor %metric-key-data-points-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-key-data-points 'make-metric-key-data-points))
 (common-lisp:defun make-metric-key-data-points
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-points key)
   (common-lisp:apply #'common-lisp:make-instance 'metric-key-data-points
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-key-data-points))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-key-data-points))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-points))
      (common-lisp:list
       (common-lisp:cons "DataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-key-data-points))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-key-data-points-list ()
   '(trivial-types:proper-list metric-key-data-points))
 (common-lisp:defun |make-metric-key-data-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-key-data-points))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-query common-lisp:nil
                       ((filter :initarg :filter :type
                         (common-lisp:or metric-query-filter-map
                                         common-lisp:null)
                         :accessor %metric-query-filter :initform
                         common-lisp:nil)
                        (group-by :initarg :group-by :type
                         (common-lisp:or dimension-group common-lisp:null)
                         :accessor %metric-query-group-by :initform
                         common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or request-string common-lisp:null)
                         :accessor %metric-query-metric :initform
                         (common-lisp:error ":metric is required"))))
 (common-lisp:export (common-lisp:list 'metric-query 'make-metric-query))
 (common-lisp:defun make-metric-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter group-by metric)
   (common-lisp:apply #'common-lisp:make-instance 'metric-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-query-filter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-metric-query-filter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype metric-query-list ()
   '(trivial-types:proper-list metric-query))
 (common-lisp:defun |make-metric-query-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-type-list ()
   '(trivial-types:proper-list request-string))
 (common-lisp:defun |make-metric-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list request-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-values-list ()
   '(trivial-types:proper-list double))
 (common-lisp:defun |make-metric-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (pi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:deftype period-alignment () 'common-lisp:string)
(common-lisp:deftype request-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype request-string-list ()
   '(trivial-types:proper-list request-string))
 (common-lisp:defun |make-request-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list request-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype requested-dimension-list ()
   '(trivial-types:proper-list request-string))
 (common-lisp:defun |make-requested-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list request-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass response-partition-key common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or dimension-map common-lisp:null)
                         :accessor %response-partition-key-dimensions :initform
                         (common-lisp:error ":dimensions is required"))))
 (common-lisp:export
  (common-lisp:list 'response-partition-key 'make-response-partition-key))
 (common-lisp:defun make-response-partition-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions)
   (common-lisp:apply #'common-lisp:make-instance 'response-partition-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-partition-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-partition-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-partition-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-partition-key-list ()
   '(trivial-types:proper-list response-partition-key))
 (common-lisp:defun |make-response-partition-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list response-partition-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass response-resource-metric common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %response-resource-metric-unit :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %response-resource-metric-description
                         :initform common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %response-resource-metric-metric :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'response-resource-metric 'make-response-resource-metric))
 (common-lisp:defun make-response-resource-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit description metric)
   (common-lisp:apply #'common-lisp:make-instance 'response-resource-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-resource-metric-key common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or dimension-map common-lisp:null)
                         :accessor %response-resource-metric-key-dimensions
                         :initform common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %response-resource-metric-key-metric :initform
                         (common-lisp:error ":metric is required"))))
 (common-lisp:export
  (common-lisp:list 'response-resource-metric-key
                    'make-response-resource-metric-key))
 (common-lisp:defun make-response-resource-metric-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions metric)
   (common-lisp:apply #'common-lisp:make-instance 'response-resource-metric-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-resource-metric-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-resource-metric-list ()
   '(trivial-types:proper-list response-resource-metric))
 (common-lisp:defun |make-response-resource-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-resource-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun describe-dimension-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier start-time
                     end-time metric period-in-seconds group-by
                     additional-metrics partition-by filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-type identifier start-time end-time metric
     period-in-seconds group-by additional-metrics partition-by filter
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dimension-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDimensionKeys"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dimension-keys))
(common-lisp:progn
 (common-lisp:defun get-dimension-key-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier group
                     group-identifier requested-dimensions)
   (common-lisp:declare
    (common-lisp:ignorable service-type identifier group group-identifier
     requested-dimensions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dimension-key-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDimensionKeyDetails"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dimension-key-details))
(common-lisp:progn
 (common-lisp:defun get-resource-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier)
   (common-lisp:declare (common-lisp:ignorable service-type identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetResourceMetadata"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-metadata))
(common-lisp:progn
 (common-lisp:defun get-resource-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier metric-queries
                     start-time end-time period-in-seconds max-results
                     next-token period-alignment)
   (common-lisp:declare
    (common-lisp:ignorable service-type identifier metric-queries start-time
     end-time period-in-seconds max-results next-token period-alignment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetResourceMetrics"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-metrics))
(common-lisp:progn
 (common-lisp:defun list-available-resource-dimensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier metrics
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-type identifier metrics max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-available-resource-dimensions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAvailableResourceDimensions"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-available-resource-dimensions))
(common-lisp:progn
 (common-lisp:defun list-available-resource-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type identifier metric-types
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-type identifier metric-types next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-available-resource-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAvailableResourceMetrics"
                                                        "2018-02-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-available-resource-metrics))
