;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elasticache/api
  (:use)
  (:nicknames #:aws/elasticache)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticache/api)
(common-lisp:progn
 (common-lisp:defclass elasticache-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "elasticache" :protocol
                        :query))
 (common-lisp:export 'elasticache-request))
(common-lisp:progn
 (common-lisp:define-condition elasticache-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticache-error))
(common-lisp:defvar *error-map*
  '(("APICallRateForCustomerExceededFault"
     . apicall-rate-for-customer-exceeded-fault)
    ("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("CacheClusterAlreadyExistsFault" . cache-cluster-already-exists-fault)
    ("CacheClusterNotFoundFault" . cache-cluster-not-found-fault)
    ("CacheParameterGroupAlreadyExistsFault"
     . cache-parameter-group-already-exists-fault)
    ("CacheParameterGroupNotFoundFault"
     . cache-parameter-group-not-found-fault)
    ("CacheParameterGroupQuotaExceededFault"
     . cache-parameter-group-quota-exceeded-fault)
    ("CacheSecurityGroupAlreadyExistsFault"
     . cache-security-group-already-exists-fault)
    ("CacheSecurityGroupNotFoundFault" . cache-security-group-not-found-fault)
    ("CacheSecurityGroupQuotaExceededFault"
     . cache-security-group-quota-exceeded-fault)
    ("CacheSubnetGroupAlreadyExistsFault"
     . cache-subnet-group-already-exists-fault)
    ("CacheSubnetGroupInUse" . cache-subnet-group-in-use)
    ("CacheSubnetGroupNotFoundFault" . cache-subnet-group-not-found-fault)
    ("CacheSubnetGroupQuotaExceededFault"
     . cache-subnet-group-quota-exceeded-fault)
    ("CacheSubnetQuotaExceededFault" . cache-subnet-quota-exceeded-fault)
    ("ClusterQuotaForCustomerExceededFault"
     . cluster-quota-for-customer-exceeded-fault)
    ("DefaultUserAssociatedToUserGroupFault"
     . default-user-associated-to-user-group-fault)
    ("DefaultUserRequired" . default-user-required)
    ("DuplicateUserNameFault" . duplicate-user-name-fault)
    ("GlobalReplicationGroupAlreadyExistsFault"
     . global-replication-group-already-exists-fault)
    ("GlobalReplicationGroupNotFoundFault"
     . global-replication-group-not-found-fault)
    ("InsufficientCacheClusterCapacityFault"
     . insufficient-cache-cluster-capacity-fault)
    ("InvalidARNFault" . invalid-arnfault)
    ("InvalidCacheClusterStateFault" . invalid-cache-cluster-state-fault)
    ("InvalidCacheParameterGroupStateFault"
     . invalid-cache-parameter-group-state-fault)
    ("InvalidCacheSecurityGroupStateFault"
     . invalid-cache-security-group-state-fault)
    ("InvalidGlobalReplicationGroupStateFault"
     . invalid-global-replication-group-state-fault)
    ("InvalidKMSKeyFault" . invalid-kmskey-fault)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidReplicationGroupStateFault"
     . invalid-replication-group-state-fault)
    ("InvalidSnapshotStateFault" . invalid-snapshot-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidUserGroupStateFault" . invalid-user-group-state-fault)
    ("InvalidUserStateFault" . invalid-user-state-fault)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("NoOperationFault" . no-operation-fault)
    ("NodeGroupNotFoundFault" . node-group-not-found-fault)
    ("NodeGroupsPerReplicationGroupQuotaExceededFault"
     . node-groups-per-replication-group-quota-exceeded-fault)
    ("NodeQuotaForClusterExceededFault"
     . node-quota-for-cluster-exceeded-fault)
    ("NodeQuotaForCustomerExceededFault"
     . node-quota-for-customer-exceeded-fault)
    ("ReplicationGroupAlreadyExistsFault"
     . replication-group-already-exists-fault)
    ("ReplicationGroupAlreadyUnderMigrationFault"
     . replication-group-already-under-migration-fault)
    ("ReplicationGroupNotFoundFault" . replication-group-not-found-fault)
    ("ReplicationGroupNotUnderMigrationFault"
     . replication-group-not-under-migration-fault)
    ("ReservedCacheNodeAlreadyExistsFault"
     . reserved-cache-node-already-exists-fault)
    ("ReservedCacheNodeNotFoundFault" . reserved-cache-node-not-found-fault)
    ("ReservedCacheNodeQuotaExceededFault"
     . reserved-cache-node-quota-exceeded-fault)
    ("ReservedCacheNodesOfferingNotFoundFault"
     . reserved-cache-nodes-offering-not-found-fault)
    ("ServiceLinkedRoleNotFoundFault" . service-linked-role-not-found-fault)
    ("ServiceUpdateNotFoundFault" . service-update-not-found-fault)
    ("SnapshotAlreadyExistsFault" . snapshot-already-exists-fault)
    ("SnapshotFeatureNotSupportedFault" . snapshot-feature-not-supported-fault)
    ("SnapshotNotFoundFault" . snapshot-not-found-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SubnetInUse" . subnet-in-use)
    ("SubnetNotAllowedFault" . subnet-not-allowed-fault)
    ("TagNotFoundFault" . tag-not-found-fault)
    ("TagQuotaPerResourceExceeded" . tag-quota-per-resource-exceeded)
    ("TestFailoverNotAvailableFault" . test-failover-not-available-fault)
    ("UserAlreadyExistsFault" . user-already-exists-fault)
    ("UserGroupAlreadyExistsFault" . user-group-already-exists-fault)
    ("UserGroupNotFoundFault" . user-group-not-found-fault)
    ("UserGroupQuotaExceededFault" . user-group-quota-exceeded-fault)
    ("UserNotFoundFault" . user-not-found-fault)
    ("UserQuotaExceededFault" . user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition apicall-rate-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'apicall-rate-for-customer-exceeded-fault)))
(common-lisp:deftype azmode () 'common-lisp:string)
(common-lisp:deftype access-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype allowed-node-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allowed-node-type-modifications-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-allowed-node-type-modifications-message-"))
   (scale-up-modifications common-lisp:nil :type
    (common-lisp:or node-type-list common-lisp:null))
   (scale-down-modifications common-lisp:nil :type
    (common-lisp:or node-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allowed-node-type-modifications-message
                    'make-allowed-node-type-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-up-modifications))
      (common-lisp:list
       (common-lisp:cons "ScaleUpModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-down-modifications))
      (common-lisp:list
       (common-lisp:cons "ScaleDownModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allowed-node-type-modifications-message))
   common-lisp:nil))
(common-lisp:deftype auth-token-update-status () 'common-lisp:string)
(common-lisp:deftype auth-token-update-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (authentication (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-"))
   (type common-lisp:nil :type
    (common-lisp:or authentication-type common-lisp:null))
   (password-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'authentication 'make-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-count))
      (common-lisp:list
       (common-lisp:cons "PasswordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authentication-mode (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-mode-"))
   (type common-lisp:nil :type
    (common-lisp:or input-authentication-type common-lisp:null))
   (passwords common-lisp:nil :type
    (common-lisp:or password-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authentication-mode 'make-authentication-mode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication-mode))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-cache-security-group-ingress-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-authorize-cache-security-group-ingress-message-"))
   (cache-security-group-name
    (common-lisp:error ":cache-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-name
    (common-lisp:error ":ec2security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id
    (common-lisp:error ":ec2security-group-owner-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-cache-security-group-ingress-message
                    'make-authorize-cache-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-cache-security-group-ingress-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-authorize-cache-security-group-ingress-result-"))
   (cache-security-group common-lisp:nil :type
    (common-lisp:or cache-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-cache-security-group-ingress-result
                    'make-authorize-cache-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cache-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:deftype automatic-failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zones-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-availability-zones-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-query-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-apply-update-action-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-apply-update-action-message-"))
   (replication-group-ids common-lisp:nil :type
    (common-lisp:or replication-group-id-list common-lisp:null))
   (cache-cluster-ids common-lisp:nil :type
    (common-lisp:or cache-cluster-id-list common-lisp:null))
   (service-update-name (common-lisp:error ":service-update-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-apply-update-action-message
                    'make-batch-apply-update-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-apply-update-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-update-action-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-update-action-message-"))
   (replication-group-ids common-lisp:nil :type
    (common-lisp:or replication-group-id-list common-lisp:null))
   (cache-cluster-ids common-lisp:nil :type
    (common-lisp:or cache-cluster-id-list common-lisp:null))
   (service-update-name (common-lisp:error ":service-update-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-update-action-message
                    'make-batch-stop-update-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-update-action-message))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cache-cluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-cluster-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (client-download-landing-page common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (num-cache-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or pending-modified-values common-lisp:null))
   (notification-configuration common-lisp:nil :type
    (common-lisp:or notification-configuration common-lisp:null))
   (cache-security-groups common-lisp:nil :type
    (common-lisp:or cache-security-group-membership-list common-lisp:null))
   (cache-parameter-group common-lisp:nil :type
    (common-lisp:or cache-parameter-group-status common-lisp:null))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-nodes common-lisp:nil :type
    (common-lisp:or cache-node-list common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-membership-list common-lisp:null))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auth-token-last-modified-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (at-rest-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (replication-group-log-delivery-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-list common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or network-type common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cache-cluster 'make-cache-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-endpoint))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-download-landing-page))
      (common-lisp:list
       (common-lisp:cons "ClientDownloadLandingPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-status))
      (common-lisp:list
       (common-lisp:cons "CacheClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-nodes))
      (common-lisp:list
       (common-lisp:cons "CacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "AuthTokenLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-log-delivery-enabled))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupLogDeliveryEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-cluster-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-cluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-cluster-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-cache-cluster-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cache-cluster-list ()
   '(trivial-types:proper-list cache-cluster))
 (common-lisp:defun |make-cache-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-cluster-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-clusters common-lisp:nil :type
    (common-lisp:or cache-cluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-cluster-message 'make-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-clusters))
      (common-lisp:list
       (common-lisp:cons "CacheClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-cluster-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-engine-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-engine-version-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-engine-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-engine-version-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-engine-version 'make-cache-engine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-engine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-engine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-description))
      (common-lisp:list
       (common-lisp:cons "CacheEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-version-description))
      (common-lisp:list
       (common-lisp:cons "CacheEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-engine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-engine-version-list ()
   '(trivial-types:proper-list cache-engine-version))
 (common-lisp:defun |make-cache-engine-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-engine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-engine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-engine-version-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-engine-versions common-lisp:nil :type
    (common-lisp:or cache-engine-version-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-engine-version-message
                    'make-cache-engine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-engine-versions))
      (common-lisp:list
       (common-lisp:cons "CacheEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-engine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-node-"))
   (cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (parameter-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (customer-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (customer-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cache-node 'make-cache-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-status))
      (common-lisp:list
       (common-lisp:cons "CacheNodeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "SourceCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-availability-zone))
      (common-lisp:list
       (common-lisp:cons "CustomerAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "CustomerOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-ids-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-cache-node-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cache-node-list ()
   '(trivial-types:proper-list cache-node))
 (common-lisp:defun |make-cache-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-node-type-specific-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-node-type-specific-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type-specific-values common-lisp:nil :type
    (common-lisp:or cache-node-type-specific-value-list common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-node-type-specific-parameter
                    'make-cache-node-type-specific-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-values))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-type-specific-parameters-list ()
   '(trivial-types:proper-list cache-node-type-specific-parameter))
 (common-lisp:defun |make-cache-node-type-specific-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-type-specific-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-node-type-specific-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-node-type-specific-value-"))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-node-type-specific-value
                    'make-cache-node-type-specific-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-type-specific-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-type-specific-value-list ()
   '(trivial-types:proper-list cache-node-type-specific-value))
 (common-lisp:defun |make-cache-node-type-specific-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-type-specific-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-node-update-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-node-update-status-"))
   (cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-update-status common-lisp:nil :type
    (common-lisp:or node-update-status common-lisp:null))
   (node-deletion-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-start-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-end-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-initiated-by common-lisp:nil :type
    (common-lisp:or node-update-initiated-by common-lisp:null))
   (node-update-initiated-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-status-modified-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-node-update-status 'make-cache-node-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-deletion-date))
      (common-lisp:list
       (common-lisp:cons "NodeDeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-start-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-end-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-by))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-node-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-node-update-status-list ()
   '(trivial-types:proper-list cache-node-update-status))
 (common-lisp:defun |make-cache-node-update-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-node-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-parameter-group-"))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-global common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group 'make-cache-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-global))
      (common-lisp:list
       (common-lisp:cons "IsGlobal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-parameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-parameter-group-details-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (cache-node-type-specific-parameters common-lisp:nil :type
    (common-lisp:or cache-node-type-specific-parameters-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-details
                    'make-cache-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-parameters))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-parameter-group-list ()
   '(trivial-types:proper-list cache-parameter-group))
 (common-lisp:defun |make-cache-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-parameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-parameter-group-name-message-"))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-name-message
                    'make-cache-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-parameter-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-parameter-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-parameter-group-status-"))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-ids-to-reboot common-lisp:nil :type
    (common-lisp:or cache-node-ids-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-group-status
                    'make-cache-parameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-parameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-parameter-groups common-lisp:nil :type
    (common-lisp:or cache-parameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-parameter-groups-message
                    'make-cache-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-security-group-"))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-groups common-lisp:nil :type
    (common-lisp:or ec2security-group-list common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-security-group 'make-cache-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-security-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-security-group-membership-"))
   (cache-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-security-group-membership
                    'make-cache-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-security-group-membership-list ()
   '(trivial-types:proper-list cache-security-group-membership))
 (common-lisp:defun |make-cache-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cache-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-security-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-security-groups common-lisp:nil :type
    (common-lisp:or cache-security-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-security-group-message
                    'make-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-security-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-cache-security-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-security-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-security-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-security-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-security-groups ()
   '(trivial-types:proper-list cache-security-group))
 (common-lisp:defun |make-cache-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-subnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-subnet-group-"))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (supported-network-types common-lisp:nil :type
    (common-lisp:or network-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group 'make-cache-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-in-use
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-group-in-use)))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-subnet-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-subnet-groups common-lisp:nil :type
    (common-lisp:or cache-subnet-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-message
                    'make-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-groups))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cache-subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cache-subnet-groups ()
   '(trivial-types:proper-list cache-subnet-group))
 (common-lisp:defun |make-cache-subnet-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cache-subnet-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cache-subnet-quota-exceeded-fault)))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-destination-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-destination-details-"))
   (log-group common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination-details
                    'make-cloud-watch-logs-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-cluster-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-migration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-migration-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-migration-message
                    'make-complete-migration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-migration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-migration-response-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-migration-response
                    'make-complete-migration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-migration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configure-shard (:copier common-lisp:nil)
      (:conc-name "struct-shape-configure-shard-"))
   (node-group-id (common-lisp:error ":node-group-id is required") :type
    (common-lisp:or allowed-node-group-id common-lisp:null))
   (new-replica-count (common-lisp:error ":new-replica-count is required")
    :type (common-lisp:or integer common-lisp:null))
   (preferred-availability-zones common-lisp:nil :type
    (common-lisp:or preferred-availability-zone-list common-lisp:null))
   (preferred-outpost-arns common-lisp:nil :type
    (common-lisp:or preferred-outpost-arn-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configure-shard 'make-configure-shard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configure-shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configure-shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configure-shard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-message-"))
   (source-snapshot-name
    (common-lisp:error ":source-snapshot-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-snapshot-name
    (common-lisp:error ":target-snapshot-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-bucket common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-message 'make-copy-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-result 'make-copy-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-cluster-message-"))
   (cache-cluster-id (common-lisp:error ":cache-cluster-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (azmode common-lisp:nil :type (common-lisp:or azmode common-lisp:null))
   (preferred-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-availability-zones common-lisp:nil :type
    (common-lisp:or preferred-availability-zone-list common-lisp:null))
   (num-cache-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-security-group-names common-lisp:nil :type
    (common-lisp:or cache-security-group-name-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (snapshot-arns common-lisp:nil :type
    (common-lisp:or snapshot-arns-list common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (outpost-mode common-lisp:nil :type
    (common-lisp:or outpost-mode common-lisp:null))
   (preferred-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-outpost-arns common-lisp:nil :type
    (common-lisp:or preferred-outpost-arn-list common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-request-list common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or network-type common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-cluster-message
                    'make-create-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'azmode))
      (common-lisp:list
       (common-lisp:cons "AZMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arns))
      (common-lisp:list
       (common-lisp:cons "SnapshotArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-mode))
      (common-lisp:list
       (common-lisp:cons "OutpostMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-cluster-result-"))
   (cache-cluster common-lisp:nil :type
    (common-lisp:or cache-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-cluster-result
                    'make-create-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-parameter-group-message-"))
   (cache-parameter-group-name
    (common-lisp:error ":cache-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-family
    (common-lisp:error ":cache-parameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-parameter-group-message
                    'make-create-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-parameter-group-result-"))
   (cache-parameter-group common-lisp:nil :type
    (common-lisp:or cache-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-parameter-group-result
                    'make-create-cache-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-security-group-message-"))
   (cache-security-group-name
    (common-lisp:error ":cache-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-security-group-message
                    'make-create-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-security-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-security-group-result-"))
   (cache-security-group common-lisp:nil :type
    (common-lisp:or cache-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-security-group-result
                    'make-create-cache-security-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-security-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-subnet-group-message-"))
   (cache-subnet-group-name
    (common-lisp:error ":cache-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-description
    (common-lisp:error ":cache-subnet-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-subnet-group-message
                    'make-create-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cache-subnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cache-subnet-group-result-"))
   (cache-subnet-group common-lisp:nil :type
    (common-lisp:or cache-subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cache-subnet-group-result
                    'make-create-cache-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-group))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-replication-group-message-"))
   (global-replication-group-id-suffix
    (common-lisp:error ":global-replication-group-id-suffix is required") :type
    (common-lisp:or string common-lisp:null))
   (global-replication-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (primary-replication-group-id
    (common-lisp:error ":primary-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-replication-group-message
                    'make-create-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id-suffix))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupIdSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-replication-group-result
                    'make-create-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-replication-group-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-description
    (common-lisp:error ":replication-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (global-replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (primary-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-failover-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (multi-azenabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (num-cache-clusters common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-cache-cluster-azs common-lisp:nil :type
    (common-lisp:or availability-zones-list common-lisp:null))
   (num-node-groups common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (replicas-per-node-group common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (node-group-configuration common-lisp:nil :type
    (common-lisp:or node-group-configuration-list common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-security-group-names common-lisp:nil :type
    (common-lisp:or cache-security-group-name-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (snapshot-arns common-lisp:nil :type
    (common-lisp:or snapshot-arns-list common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (at-rest-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-group-ids common-lisp:nil :type
    (common-lisp:or user-group-id-list-input common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-request-list common-lisp:null))
   (data-tiering-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or network-type common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-replication-group-message
                    'make-create-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azenabled))
      (common-lisp:list
       (common-lisp:cons "MultiAZEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-clusters))
      (common-lisp:list
       (common-lisp:cons "NumCacheClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-cache-cluster-azs))
      (common-lisp:list
       (common-lisp:cons "PreferredCacheClusterAZs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-groups))
      (common-lisp:list
       (common-lisp:cons "NumNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicas-per-node-group))
      (common-lisp:list
       (common-lisp:cons "ReplicasPerNodeGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arns))
      (common-lisp:list
       (common-lisp:cons "SnapshotArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-tiering-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTieringEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-replication-group-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-replication-group-result
                    'make-create-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-message-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-message 'make-create-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-result 'make-create-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-group-message-"))
   (user-group-id (common-lisp:error ":user-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-list-input common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-group-message
                    'make-create-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-message-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (passwords common-lisp:nil :type
    (common-lisp:or password-list-input common-lisp:null))
   (access-string (common-lisp:error ":access-string is required") :type
    (common-lisp:or access-string common-lisp:null))
   (no-password-required common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (authentication-mode common-lisp:nil :type
    (common-lisp:or authentication-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-message 'make-create-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-password-required))
      (common-lisp:list
       (common-lisp:cons "NoPasswordRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-node-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-node-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-node-endpoint 'make-customer-node-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-node-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype customer-node-endpoint-list ()
   '(trivial-types:proper-list customer-node-endpoint))
 (common-lisp:defun |make-customer-node-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-node-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-node-groups-in-global-replication-group-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-decrease-node-groups-in-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (node-group-count (common-lisp:error ":node-group-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (global-node-groups-to-remove common-lisp:nil :type
    (common-lisp:or global-node-group-id-list common-lisp:null))
   (global-node-groups-to-retain common-lisp:nil :type
    (common-lisp:or global-node-group-id-list common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-node-groups-in-global-replication-group-message
                    'make-decrease-node-groups-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-groups-to-retain))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-node-groups-in-global-replication-group-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-decrease-node-groups-in-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-node-groups-in-global-replication-group-result
                    'make-decrease-node-groups-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-node-groups-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-replica-count-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrease-replica-count-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (new-replica-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (replica-configuration common-lisp:nil :type
    (common-lisp:or replica-configuration-list common-lisp:null))
   (replicas-to-remove common-lisp:nil :type
    (common-lisp:or remove-replicas-list common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-replica-count-message
                    'make-decrease-replica-count-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicas-to-remove))
      (common-lisp:list
       (common-lisp:cons "ReplicasToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-replica-count-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrease-replica-count-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-replica-count-result
                    'make-decrease-replica-count-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replica-count-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition default-user-associated-to-user-group-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'default-user-associated-to-user-group-fault)))
(common-lisp:progn
 (common-lisp:define-condition default-user-required
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'default-user-required)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cache-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cache-cluster-message-"))
   (cache-cluster-id (common-lisp:error ":cache-cluster-id is required") :type
    (common-lisp:or string common-lisp:null))
   (final-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cache-cluster-message
                    'make-delete-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cache-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cache-cluster-result-"))
   (cache-cluster common-lisp:nil :type
    (common-lisp:or cache-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cache-cluster-result
                    'make-delete-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cache-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cache-parameter-group-message-"))
   (cache-parameter-group-name
    (common-lisp:error ":cache-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cache-parameter-group-message
                    'make-delete-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cache-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cache-security-group-message-"))
   (cache-security-group-name
    (common-lisp:error ":cache-security-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cache-security-group-message
                    'make-delete-cache-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cache-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cache-subnet-group-message-"))
   (cache-subnet-group-name
    (common-lisp:error ":cache-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cache-subnet-group-message
                    'make-delete-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (retain-primary-replication-group
    (common-lisp:error ":retain-primary-replication-group is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-replication-group-message
                    'make-delete-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-primary-replication-group))
      (common-lisp:list
       (common-lisp:cons "RetainPrimaryReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-replication-group-result
                    'make-delete-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-replication-group-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (retain-primary-cluster common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (final-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-replication-group-message
                    'make-delete-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-primary-cluster))
      (common-lisp:list
       (common-lisp:cons "RetainPrimaryCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-replication-group-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-replication-group-result
                    'make-delete-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-message-"))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-message 'make-delete-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-result 'make-delete-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-group-message-"))
   (user-group-id (common-lisp:error ":user-group-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-group-message
                    'make-delete-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-message-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-message 'make-delete-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-clusters-message-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (show-cache-node-info common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (show-cache-clusters-not-in-replication-groups common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-clusters-message
                    'make-describe-cache-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-cache-node-info))
      (common-lisp:list
       (common-lisp:cons "ShowCacheNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-cache-clusters-not-in-replication-groups))
      (common-lisp:list
       (common-lisp:cons "ShowCacheClustersNotInReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-engine-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-engine-versions-message-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-engine-versions-message
                    'make-describe-cache-engine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-engine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-parameter-groups-message-"))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-parameter-groups-message
                    'make-describe-cache-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-parameters-message-"))
   (cache-parameter-group-name
    (common-lisp:error ":cache-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-parameters-message
                    'make-describe-cache-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-security-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-security-groups-message-"))
   (cache-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-security-groups-message
                    'make-describe-cache-security-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-security-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cache-subnet-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cache-subnet-groups-message-"))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cache-subnet-groups-message
                    'make-describe-cache-subnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cache-subnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-message-"))
   (cache-parameter-group-family
    (common-lisp:error ":cache-parameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-message
                    'make-describe-engine-default-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-result-"))
   (engine-defaults common-lisp:nil :type
    (common-lisp:or engine-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-result
                    'make-describe-engine-default-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-message-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-global-replication-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-global-replication-groups-message-"))
   (global-replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (show-member-info common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-global-replication-groups-message
                    'make-describe-global-replication-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-member-info))
      (common-lisp:list
       (common-lisp:cons "ShowMemberInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-global-replication-groups-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-global-replication-groups-result-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (global-replication-groups common-lisp:nil :type
    (common-lisp:or global-replication-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-global-replication-groups-result
                    'make-describe-global-replication-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-groups))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-replication-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-replication-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-replication-groups-message-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-replication-groups-message
                    'make-describe-replication-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-cache-nodes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-cache-nodes-message-"))
   (reserved-cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-cache-nodes-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-cache-nodes-message
                    'make-describe-reserved-cache-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-cache-nodes-offerings-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-cache-nodes-offerings-message-"))
   (reserved-cache-nodes-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-cache-nodes-offerings-message
                    'make-describe-reserved-cache-nodes-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-cache-nodes-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-service-updates-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-service-updates-message-"))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-status common-lisp:nil :type
    (common-lisp:or service-update-status-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-service-updates-message
                    'make-describe-service-updates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-list-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-list-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshots common-lisp:nil :type
    (common-lisp:or snapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-list-message
                    'make-describe-snapshots-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-message-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (show-node-group-config common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-message
                    'make-describe-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-source))
      (common-lisp:list
       (common-lisp:cons "SnapshotSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-node-group-config))
      (common-lisp:list
       (common-lisp:cons "ShowNodeGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-update-actions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-update-actions-message-"))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-group-ids common-lisp:nil :type
    (common-lisp:or replication-group-id-list common-lisp:null))
   (cache-cluster-ids common-lisp:nil :type
    (common-lisp:or cache-cluster-id-list common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-update-status common-lisp:nil :type
    (common-lisp:or service-update-status-list common-lisp:null))
   (service-update-time-range common-lisp:nil :type
    (common-lisp:or time-range-filter common-lisp:null))
   (update-action-status common-lisp:nil :type
    (common-lisp:or update-action-status-list common-lisp:null))
   (show-node-level-update-status common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-update-actions-message
                    'make-describe-update-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-ids))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-ids))
      (common-lisp:list
       (common-lisp:cons "CacheClusterIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-time-range))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'show-node-level-update-status))
      (common-lisp:list
       (common-lisp:cons "ShowNodeLevelUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-groups-message-"))
   (user-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-groups-message
                    'make-describe-user-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-groups-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-groups-result-"))
   (user-groups common-lisp:nil :type
    (common-lisp:or user-group-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-groups-result
                    'make-describe-user-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "UserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-users-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-users-message-"))
   (engine common-lisp:nil :type (common-lisp:or engine-type common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-users-message 'make-describe-users-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-users-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-users-result-"))
   (users common-lisp:nil :type (common-lisp:or user-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-users-result 'make-describe-users-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-details-"))
   (cloud-watch-logs-details common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination-details common-lisp:null))
   (kinesis-firehose-details common-lisp:nil :type
    (common-lisp:or kinesis-firehose-destination-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-details 'make-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-details))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-details))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-details))
   common-lisp:nil))
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-global-replication-group-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-region
    (common-lisp:error ":replication-group-region is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-global-replication-group-message
                    'make-disassociate-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-global-replication-group-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-global-replication-group-result
                    'make-disassociate-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-global-replication-group-result))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition duplicate-user-name-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-user-name-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2security-group-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun |make-ec2security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (engine-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-engine-defaults-"))
   (cache-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (cache-node-type-specific-parameters common-lisp:nil :type
    (common-lisp:or cache-node-type-specific-parameters-list
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-type-specific-parameters))
      (common-lisp:list
       (common-lisp:cons "CacheNodeTypeSpecificParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (primary-region (common-lisp:error ":primary-region is required") :type
    (common-lisp:or string common-lisp:null))
   (primary-replication-group-id
    (common-lisp:error ":primary-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-replication-group-message
                    'make-failover-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-replication-group-result
                    'make-failover-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-node-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-node-group-"))
   (global-node-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (slots common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-node-group 'make-global-node-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-node-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-node-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-node-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-node-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-node-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-global-node-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype global-node-group-list ()
   '(trivial-types:proper-list global-node-group))
 (common-lisp:defun |make-global-node-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-node-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-replication-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-replication-group-"))
   (global-replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-replication-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (members common-lisp:nil :type
    (common-lisp:or global-replication-group-member-list common-lisp:null))
   (cluster-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (global-node-groups common-lisp:nil :type
    (common-lisp:or global-node-group-list common-lisp:null))
   (auth-token-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (at-rest-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-replication-group 'make-global-replication-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "ClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-node-groups))
      (common-lisp:list
       (common-lisp:cons "GlobalNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-replication-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'global-replication-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (global-replication-group-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-replication-group-info-"))
   (global-replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-replication-group-member-role common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-replication-group-info
                    'make-global-replication-group-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-member-role))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupMemberRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-replication-group-list ()
   '(trivial-types:proper-list global-replication-group))
 (common-lisp:defun |make-global-replication-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-replication-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-replication-group-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-replication-group-member-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-group-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (automatic-failover common-lisp:nil :type
    (common-lisp:or automatic-failover-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-replication-group-member
                    'make-global-replication-group-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-replication-group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-replication-group-member-list ()
   '(trivial-types:proper-list global-replication-group-member))
 (common-lisp:defun |make-global-replication-group-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-replication-group-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition global-replication-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'global-replication-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-node-groups-in-global-replication-group-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-increase-node-groups-in-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (node-group-count (common-lisp:error ":node-group-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (regional-configurations common-lisp:nil :type
    (common-lisp:or regional-configuration-list common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-node-groups-in-global-replication-group-message
                    'make-increase-node-groups-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regional-configurations))
      (common-lisp:list
       (common-lisp:cons "RegionalConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-node-groups-in-global-replication-group-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-increase-node-groups-in-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-node-groups-in-global-replication-group-result
                    'make-increase-node-groups-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-node-groups-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-replica-count-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-increase-replica-count-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (new-replica-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (replica-configuration common-lisp:nil :type
    (common-lisp:or replica-configuration-list common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-replica-count-message
                    'make-increase-replica-count-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-replica-count))
      (common-lisp:list
       (common-lisp:cons "NewReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-replica-count-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-increase-replica-count-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-replica-count-result
                    'make-increase-replica-count-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replica-count-result))
   common-lisp:nil))
(common-lisp:deftype input-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition insufficient-cache-cluster-capacity-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-cache-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-arnfault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arnfault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-cluster-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cache-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-parameter-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cache-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cache-security-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cache-security-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-replication-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-global-replication-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-kmskey-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-kmskey-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (elasticache-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (elasticache-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-replication-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-replication-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snapshot-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-group-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-user-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-user-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:deftype ip-discovery () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-destination-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-destination-details-"))
   (delivery-stream common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-destination-details
                    'make-kinesis-firehose-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "DeliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-allowed-node-type-modifications-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-allowed-node-type-modifications-message-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-allowed-node-type-modifications-message
                    'make-list-allowed-node-type-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-delivery-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-delivery-configuration-"))
   (log-type common-lisp:nil :type (common-lisp:or log-type common-lisp:null))
   (destination-type common-lisp:nil :type
    (common-lisp:or destination-type common-lisp:null))
   (destination-details common-lisp:nil :type
    (common-lisp:or destination-details common-lisp:null))
   (log-format common-lisp:nil :type
    (common-lisp:or log-format common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-status common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-delivery-configuration
                    'make-log-delivery-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-delivery-configuration-list ()
   '(trivial-types:proper-list log-delivery-configuration))
 (common-lisp:defun |make-log-delivery-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-delivery-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (log-delivery-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-delivery-configuration-request-"))
   (log-type common-lisp:nil :type (common-lisp:or log-type common-lisp:null))
   (destination-type common-lisp:nil :type
    (common-lisp:or destination-type common-lisp:null))
   (destination-details common-lisp:nil :type
    (common-lisp:or destination-details common-lisp:null))
   (log-format common-lisp:nil :type
    (common-lisp:or log-format common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-delivery-configuration-request
                    'make-log-delivery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-delivery-configuration-request-list ()
   '(trivial-types:proper-list log-delivery-configuration-request))
 (common-lisp:defun |make-log-delivery-configuration-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-delivery-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-delivery-configuration-status () 'common-lisp:string)
(common-lisp:deftype log-format () 'common-lisp:string)
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cache-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cache-cluster-message-"))
   (cache-cluster-id (common-lisp:error ":cache-cluster-id is required") :type
    (common-lisp:or string common-lisp:null))
   (num-cache-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cache-node-ids-to-remove common-lisp:nil :type
    (common-lisp:or cache-node-ids-list common-lisp:null))
   (azmode common-lisp:nil :type (common-lisp:or azmode common-lisp:null))
   (new-availability-zones common-lisp:nil :type
    (common-lisp:or preferred-availability-zone-list common-lisp:null))
   (cache-security-group-names common-lisp:nil :type
    (common-lisp:or cache-security-group-name-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids-list common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auth-token-update-strategy common-lisp:nil :type
    (common-lisp:or auth-token-update-strategy-type common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-request-list common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cache-cluster-message
                    'make-modify-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'azmode))
      (common-lisp:list
       (common-lisp:cons "AZMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-availability-zones))
      (common-lisp:list
       (common-lisp:cons "NewAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-update-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthTokenUpdateStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cache-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cache-cluster-result-"))
   (cache-cluster common-lisp:nil :type
    (common-lisp:or cache-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cache-cluster-result
                    'make-modify-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cache-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cache-parameter-group-message-"))
   (cache-parameter-group-name
    (common-lisp:error ":cache-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameter-name-values
    (common-lisp:error ":parameter-name-values is required") :type
    (common-lisp:or parameter-name-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cache-parameter-group-message
                    'make-modify-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cache-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cache-subnet-group-message-"))
   (cache-subnet-group-name
    (common-lisp:error ":cache-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cache-subnet-group-message
                    'make-modify-cache-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cache-subnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cache-subnet-group-result-"))
   (cache-subnet-group common-lisp:nil :type
    (common-lisp:or cache-subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cache-subnet-group-result
                    'make-modify-cache-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-subnet-group))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cache-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-replication-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-failover-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-replication-group-message
                    'make-modify-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-description))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-replication-group-result
                    'make-modify-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-replication-group-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (primary-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshotting-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-failover-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (multi-azenabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (node-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-security-group-names common-lisp:nil :type
    (common-lisp:or cache-security-group-name-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids-list common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auth-token-update-strategy common-lisp:nil :type
    (common-lisp:or auth-token-update-strategy-type common-lisp:null))
   (user-group-ids-to-add common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null))
   (user-group-ids-to-remove common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null))
   (remove-user-groups common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-request-list common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-message
                    'make-modify-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshotting-cluster-id))
      (common-lisp:list
       (common-lisp:cons "SnapshottingClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-enabled))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azenabled))
      (common-lisp:list
       (common-lisp:cons "MultiAZEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-names))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-update-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthTokenUpdateStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-user-groups))
      (common-lisp:list
       (common-lisp:cons "RemoveUserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-replication-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-replication-group-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-result
                    'make-modify-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-replication-group-shard-configuration-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-replication-group-shard-configuration-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (node-group-count (common-lisp:error ":node-group-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null))
   (resharding-configuration common-lisp:nil :type
    (common-lisp:or resharding-configuration-list common-lisp:null))
   (node-groups-to-remove common-lisp:nil :type
    (common-lisp:or node-groups-to-remove-list common-lisp:null))
   (node-groups-to-retain common-lisp:nil :type
    (common-lisp:or node-groups-to-retain-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-shard-configuration-message
                    'make-modify-replication-group-shard-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-count))
      (common-lisp:list
       (common-lisp:cons "NodeGroupCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resharding-configuration))
      (common-lisp:list
       (common-lisp:cons "ReshardingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-groups-to-retain))
      (common-lisp:list
       (common-lisp:cons "NodeGroupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-replication-group-shard-configuration-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-replication-group-shard-configuration-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-replication-group-shard-configuration-result
                    'make-modify-replication-group-shard-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-group-shard-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-user-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-user-group-message-"))
   (user-group-id (common-lisp:error ":user-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (user-ids-to-add common-lisp:nil :type
    (common-lisp:or user-id-list-input common-lisp:null))
   (user-ids-to-remove common-lisp:nil :type
    (common-lisp:or user-id-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-user-group-message
                    'make-modify-user-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-user-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-user-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-user-message-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (access-string common-lisp:nil :type
    (common-lisp:or access-string common-lisp:null))
   (append-access-string common-lisp:nil :type
    (common-lisp:or access-string common-lisp:null))
   (passwords common-lisp:nil :type
    (common-lisp:or password-list-input common-lisp:null))
   (no-password-required common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (authentication-mode common-lisp:nil :type
    (common-lisp:or authentication-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-user-message 'make-modify-user-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-user-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-user-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'append-access-string))
      (common-lisp:list
       (common-lisp:cons "AppendAccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-password-required))
      (common-lisp:list
       (common-lisp:cons "NoPasswordRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-user-message))
   common-lisp:nil))
(common-lisp:deftype multi-azstatus () 'common-lisp:string)
(common-lisp:deftype network-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-type-list ()
   '(trivial-types:proper-list network-type))
 (common-lisp:defun |make-network-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-operation-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-operation-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (node-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-group-"))
   (node-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (primary-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (reader-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (slots common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (node-group-members common-lisp:nil :type
    (common-lisp:or node-group-member-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-group 'make-node-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-endpoint))
      (common-lisp:list
       (common-lisp:cons "PrimaryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-members))
      (common-lisp:list
       (common-lisp:cons "NodeGroupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-group-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-group-configuration-"))
   (node-group-id common-lisp:nil :type
    (common-lisp:or allowed-node-group-id common-lisp:null))
   (slots common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (replica-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (primary-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replica-availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones-list common-lisp:null))
   (primary-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replica-outpost-arns common-lisp:nil :type
    (common-lisp:or outpost-arns-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-group-configuration 'make-node-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-count))
      (common-lisp:list
       (common-lisp:cons "ReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PrimaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-availability-zones))
      (common-lisp:list
       (common-lisp:cons "ReplicaAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PrimaryOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "ReplicaOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-configuration-list ()
   '(trivial-types:proper-list node-group-configuration))
 (common-lisp:defun |make-node-group-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-group-list ()
   '(trivial-types:proper-list node-group))
 (common-lisp:defun |make-node-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (node-group-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-group-member-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (read-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (preferred-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-role common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-group-member 'make-node-group-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReadEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-role))
      (common-lisp:list
       (common-lisp:cons "CurrentRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-member-list ()
   '(trivial-types:proper-list node-group-member))
 (common-lisp:defun |make-node-group-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-group-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (node-group-member-update-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-group-member-update-status-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-update-status common-lisp:nil :type
    (common-lisp:or node-update-status common-lisp:null))
   (node-deletion-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-start-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-end-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-initiated-by common-lisp:nil :type
    (common-lisp:or node-update-initiated-by common-lisp:null))
   (node-update-initiated-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (node-update-status-modified-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-group-member-update-status
                    'make-node-group-member-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-deletion-date))
      (common-lisp:list
       (common-lisp:cons "NodeDeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-start-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-end-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-by))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-initiated-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateInitiatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-update-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "NodeUpdateStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-member-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-member-update-status-list ()
   '(trivial-types:proper-list node-group-member-update-status))
 (common-lisp:defun |make-node-group-member-update-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-member-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (node-group-update-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-group-update-status-"))
   (node-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-group-member-update-status common-lisp:nil :type
    (common-lisp:or node-group-member-update-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-group-update-status 'make-node-group-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-member-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeGroupMemberUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-group-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-group-update-status-list ()
   '(trivial-types:proper-list node-group-update-status))
 (common-lisp:defun |make-node-group-update-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-group-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-groups-per-replication-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-groups-per-replication-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype node-groups-to-remove-list ()
   '(trivial-types:proper-list allowed-node-group-id))
 (common-lisp:defun |make-node-groups-to-remove-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-node-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-groups-to-retain-list ()
   '(trivial-types:proper-list allowed-node-group-id))
 (common-lisp:defun |make-node-groups-to-retain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-node-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-cluster-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-quota-for-cluster-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-customer-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (node-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-snapshot-"))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-group-configuration common-lisp:nil :type
    (common-lisp:or node-group-configuration common-lisp:null))
   (cache-size common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cache-node-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-snapshot 'make-node-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-id))
      (common-lisp:list
       (common-lisp:cons "CacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-size))
      (common-lisp:list
       (common-lisp:cons "CacheSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-snapshot-list ()
   '(trivial-types:proper-list node-snapshot))
 (common-lisp:defun |make-node-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-node-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-update-initiated-by () 'common-lisp:string)
(common-lisp:deftype node-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-"))
   (topic-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (topic-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-status))
      (common-lisp:list
       (common-lisp:cons "TopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outpost-arns-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-outpost-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype outpost-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-name-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-name-value-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-name-value 'make-parameter-name-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-name-value-list ()
   '(trivial-types:proper-list parameter-name-value))
 (common-lisp:defun |make-parameter-name-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype password-list-input ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-password-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pending-automatic-failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pending-log-delivery-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-log-delivery-configuration-"))
   (log-type common-lisp:nil :type (common-lisp:or log-type common-lisp:null))
   (destination-type common-lisp:nil :type
    (common-lisp:or destination-type common-lisp:null))
   (destination-details common-lisp:nil :type
    (common-lisp:or destination-details common-lisp:null))
   (log-format common-lisp:nil :type
    (common-lisp:or log-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-log-delivery-configuration
                    'make-pending-log-delivery-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "LogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-log-delivery-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-log-delivery-configuration-list ()
   '(trivial-types:proper-list pending-log-delivery-configuration))
 (common-lisp:defun |make-pending-log-delivery-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-log-delivery-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-modified-values-"))
   (num-cache-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cache-node-ids-to-remove common-lisp:nil :type
    (common-lisp:or cache-node-ids-list common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token-status common-lisp:nil :type
    (common-lisp:or auth-token-update-status common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or pending-log-delivery-configuration-list common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-status))
      (common-lisp:list
       (common-lisp:cons "AuthTokenStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype preferred-availability-zone-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-preferred-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype preferred-outpost-arn-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-preferred-outpost-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (processed-update-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-processed-update-action-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (update-action-status common-lisp:nil :type
    (common-lisp:or update-action-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processed-update-action 'make-processed-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processed-update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processed-update-action-list ()
   '(trivial-types:proper-list processed-update-action))
 (common-lisp:defun |make-processed-update-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processed-update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-cache-nodes-offering-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-purchase-reserved-cache-nodes-offering-message-"))
   (reserved-cache-nodes-offering-id
    (common-lisp:error ":reserved-cache-nodes-offering-id is required") :type
    (common-lisp:or string common-lisp:null))
   (reserved-cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-cache-nodes-offering-message
                    'make-purchase-reserved-cache-nodes-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-count))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-cache-nodes-offering-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-purchase-reserved-cache-nodes-offering-result-"))
   (reserved-cache-node common-lisp:nil :type
    (common-lisp:or reserved-cache-node common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-cache-nodes-offering-result
                    'make-purchase-reserved-cache-nodes-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-cache-node))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-cache-nodes-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rebalance-slots-in-global-replication-group-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rebalance-slots-in-global-replication-group-message-"))
   (global-replication-group-id
    (common-lisp:error ":global-replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately (common-lisp:error ":apply-immediately is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rebalance-slots-in-global-replication-group-message
                    'make-rebalance-slots-in-global-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-id))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rebalance-slots-in-global-replication-group-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rebalance-slots-in-global-replication-group-result-"))
   (global-replication-group common-lisp:nil :type
    (common-lisp:or global-replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rebalance-slots-in-global-replication-group-result
                    'make-rebalance-slots-in-global-replication-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebalance-slots-in-global-replication-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-cache-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-cache-cluster-message-"))
   (cache-cluster-id (common-lisp:error ":cache-cluster-id is required") :type
    (common-lisp:or string common-lisp:null))
   (cache-node-ids-to-reboot
    (common-lisp:error ":cache-node-ids-to-reboot is required") :type
    (common-lisp:or cache-node-ids-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-cache-cluster-message
                    'make-reboot-cache-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "CacheNodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-cache-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-cache-cluster-result-"))
   (cache-cluster common-lisp:nil :type
    (common-lisp:or cache-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-cache-cluster-result
                    'make-reboot-cache-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster))
      (common-lisp:list
       (common-lisp:cons "CacheCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cache-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recurring-charge (:copier common-lisp:nil)
      (:conc-name "struct-shape-recurring-charge-"))
   (recurring-charge-amount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (recurring-charge-frequency common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regional-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-regional-configuration-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (replication-group-region
    (common-lisp:error ":replication-group-region is required") :type
    (common-lisp:or string common-lisp:null))
   (resharding-configuration
    (common-lisp:error ":resharding-configuration is required") :type
    (common-lisp:or resharding-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regional-configuration 'make-regional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-region))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resharding-configuration))
      (common-lisp:list
       (common-lisp:cons "ReshardingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regional-configuration-list ()
   '(trivial-types:proper-list regional-configuration))
 (common-lisp:defun |make-regional-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype remove-replicas-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-remove-replicas-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replica-configuration-list ()
   '(trivial-types:proper-list configure-shard))
 (common-lisp:defun |make-replica-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configure-shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-group-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (global-replication-group-info common-lisp:nil :type
    (common-lisp:or global-replication-group-info common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or replication-group-pending-modified-values
                    common-lisp:null))
   (member-clusters common-lisp:nil :type
    (common-lisp:or cluster-id-list common-lisp:null))
   (node-groups common-lisp:nil :type
    (common-lisp:or node-group-list common-lisp:null))
   (snapshotting-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-failover common-lisp:nil :type
    (common-lisp:or automatic-failover-status common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or multi-azstatus common-lisp:null))
   (configuration-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth-token-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auth-token-last-modified-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (at-rest-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (member-clusters-outpost-arns common-lisp:nil :type
    (common-lisp:or replication-group-outpost-arn-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-group-ids common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or log-delivery-configuration-list common-lisp:null))
   (replication-group-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (data-tiering common-lisp:nil :type
    (common-lisp:or data-tiering-status common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or network-type common-lisp:null))
   (ip-discovery common-lisp:nil :type
    (common-lisp:or ip-discovery common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-group 'make-replication-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-replication-group-info))
      (common-lisp:list
       (common-lisp:cons "GlobalReplicationGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-clusters))
      (common-lisp:list
       (common-lisp:cons "MemberClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-groups))
      (common-lisp:list
       (common-lisp:cons "NodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshotting-cluster-id))
      (common-lisp:list
       (common-lisp:cons "SnapshottingClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-endpoint))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "ClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-enabled))
      (common-lisp:list
       (common-lisp:cons "AuthTokenEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "AuthTokenLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "AtRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-clusters-outpost-arns))
      (common-lisp:list
       (common-lisp:cons "MemberClustersOutpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-create-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-discovery))
      (common-lisp:list
       (common-lisp:cons "IpDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition replication-group-already-under-migration-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-already-under-migration-fault)))
(common-lisp:progn
 (common-lisp:deftype replication-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-replication-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-group-list ()
   '(trivial-types:proper-list replication-group))
 (common-lisp:defun |make-replication-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (replication-groups common-lisp:nil :type
    (common-lisp:or replication-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-group-message
                    'make-replication-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-groups))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'replication-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition replication-group-not-under-migration-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'replication-group-not-under-migration-fault)))
(common-lisp:progn
 (common-lisp:deftype replication-group-outpost-arn-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-replication-group-outpost-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-group-pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-group-pending-modified-values-"))
   (primary-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-failover-status common-lisp:nil :type
    (common-lisp:or pending-automatic-failover-status common-lisp:null))
   (resharding common-lisp:nil :type
    (common-lisp:or resharding-status common-lisp:null))
   (auth-token-status common-lisp:nil :type
    (common-lisp:or auth-token-update-status common-lisp:null))
   (user-groups common-lisp:nil :type
    (common-lisp:or user-groups-update-status common-lisp:null))
   (log-delivery-configurations common-lisp:nil :type
    (common-lisp:or pending-log-delivery-configuration-list common-lisp:null))
   (transit-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (transit-encryption-mode common-lisp:nil :type
    (common-lisp:or transit-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-group-pending-modified-values
                    'make-replication-group-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-cluster-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-failover-status))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailoverStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resharding))
      (common-lisp:list
       (common-lisp:cons "Resharding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token-status))
      (common-lisp:list
       (common-lisp:cons "AuthTokenStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "UserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configurations))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-group-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-cache-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-cache-node-"))
   (reserved-cache-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-cache-nodes-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (cache-node-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null))
   (reservation-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node 'make-reserved-cache-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-count))
      (common-lisp:list
       (common-lisp:cons "CacheNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-arn))
      (common-lisp:list
       (common-lisp:cons "ReservationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-cache-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-cache-node-list ()
   '(trivial-types:proper-list reserved-cache-node))
 (common-lisp:defun |make-reserved-cache-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-cache-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-cache-node-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-cache-node-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-cache-nodes common-lisp:nil :type
    (common-lisp:or reserved-cache-node-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-message
                    'make-reserved-cache-node-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-node-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-cache-node-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-node-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-node-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-cache-nodes-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-cache-nodes-offering-"))
   (reserved-cache-nodes-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering
                    'make-reserved-cache-nodes-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-cache-nodes-offering-list ()
   '(trivial-types:proper-list reserved-cache-nodes-offering))
 (common-lisp:defun |make-reserved-cache-nodes-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-cache-nodes-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-cache-nodes-offering-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-cache-nodes-offering-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-cache-nodes-offerings common-lisp:nil :type
    (common-lisp:or reserved-cache-nodes-offering-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering-message
                    'make-reserved-cache-nodes-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-cache-nodes-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedCacheNodesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-cache-nodes-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-cache-nodes-offering-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-cache-nodes-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-cache-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-cache-parameter-group-message-"))
   (cache-parameter-group-name
    (common-lisp:error ":cache-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameter-name-values common-lisp:nil :type
    (common-lisp:or parameter-name-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-cache-parameter-group-message
                    'make-reset-cache-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-cache-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resharding-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-resharding-configuration-"))
   (node-group-id common-lisp:nil :type
    (common-lisp:or allowed-node-group-id common-lisp:null))
   (preferred-availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resharding-configuration 'make-resharding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zones))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resharding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resharding-configuration-list ()
   '(trivial-types:proper-list resharding-configuration))
 (common-lisp:defun |make-resharding-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resharding-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resharding-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-resharding-status-"))
   (slot-migration common-lisp:nil :type
    (common-lisp:or slot-migration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resharding-status 'make-resharding-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-migration))
      (common-lisp:list
       (common-lisp:cons "SlotMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resharding-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-cache-security-group-ingress-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-cache-security-group-ingress-message-"))
   (cache-security-group-name
    (common-lisp:error ":cache-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-name
    (common-lisp:error ":ec2security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id
    (common-lisp:error ":ec2security-group-owner-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-cache-security-group-ingress-message
                    'make-revoke-cache-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-cache-security-group-ingress-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-cache-security-group-ingress-result-"))
   (cache-security-group common-lisp:nil :type
    (common-lisp:or cache-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-cache-security-group-ingress-result
                    'make-revoke-cache-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-security-group))
      (common-lisp:list
       (common-lisp:cons "CacheSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cache-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-membership-"))
   (security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-membership
                    'make-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-membership-list ()
   '(trivial-types:proper-list security-group-membership))
 (common-lisp:defun |make-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-linked-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-update-"))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-release-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (service-update-end-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (service-update-severity common-lisp:nil :type
    (common-lisp:or service-update-severity common-lisp:null))
   (service-update-recommended-apply-by-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (service-update-status common-lisp:nil :type
    (common-lisp:or service-update-status common-lisp:null))
   (service-update-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-type common-lisp:nil :type
    (common-lisp:or service-update-type common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-update-after-recommended-apply-by-date common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (estimated-update-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-update 'make-service-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-release-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-end-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-severity))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-description))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-type))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-after-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "AutoUpdateAfterRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-update-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-update-list ()
   '(trivial-types:proper-list service-update))
 (common-lisp:defun |make-service-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-update-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-update-not-found-fault)))
(common-lisp:deftype service-update-severity () 'common-lisp:string)
(common-lisp:deftype service-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-update-status-list ()
   '(trivial-types:proper-list service-update-status))
 (common-lisp:defun |make-service-update-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-updates-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-updates-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-updates common-lisp:nil :type
    (common-lisp:or service-update-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-updates-message 'make-service-updates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-updates))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-updates-message))
   common-lisp:nil))
(common-lisp:deftype sla-met () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slot-migration (:copier common-lisp:nil)
      (:conc-name "struct-shape-slot-migration-"))
   (progress-percentage common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'slot-migration 'make-slot-migration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "ProgressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-migration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot (:copier common-lisp:nil) (:conc-name "struct-shape-snapshot-"))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (num-cache-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (topic-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cache-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (snapshot-retention-limit common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (num-node-groups common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (automatic-failover common-lisp:nil :type
    (common-lisp:or automatic-failover-status common-lisp:null))
   (node-snapshots common-lisp:nil :type
    (common-lisp:or node-snapshot-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-tiering common-lisp:nil :type
    (common-lisp:or data-tiering-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-status))
      (common-lisp:list
       (common-lisp:cons "SnapshotStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-source))
      (common-lisp:list
       (common-lisp:cons "SnapshotSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-node-type))
      (common-lisp:list
       (common-lisp:cons "CacheNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-cache-nodes))
      (common-lisp:list
       (common-lisp:cons "NumCacheNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-availability-zone))
      (common-lisp:list
       (common-lisp:cons "PreferredAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "PreferredOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "CacheClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "CacheSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-groups))
      (common-lisp:list
       (common-lisp:cons "NumNodeGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-failover))
      (common-lisp:list
       (common-lisp:cons "AutomaticFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-snapshots))
      (common-lisp:list
       (common-lisp:cons "NodeSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-arns-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-snapshot-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-feature-not-supported-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-feature-not-supported-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-migration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-migration-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (customer-node-endpoint-list
    (common-lisp:error ":customer-node-endpoint-list is required") :type
    (common-lisp:or customer-node-endpoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-migration-message 'make-start-migration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-node-endpoint-list))
      (common-lisp:list
       (common-lisp:cons "CustomerNodeEndpointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-migration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-migration-response-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-migration-response 'make-start-migration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone common-lisp:null))
   (subnet-outpost common-lisp:nil :type
    (common-lisp:or subnet-outpost common-lisp:null))
   (supported-network-types common-lisp:nil :type
    (common-lisp:or network-type-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-in-use
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-not-allowed-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-allowed-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet-outpost (:copier common-lisp:nil)
      (:conc-name "struct-shape-subnet-outpost-"))
   (subnet-outpost-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet-outpost 'make-subnet-outpost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-outpost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-outpost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-outpost))
   common-lisp:nil))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-list-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-list-message-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition tag-quota-per-resource-exceeded
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:defstruct
     (test-failover-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-failover-message-"))
   (replication-group-id
    (common-lisp:error ":replication-group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (node-group-id (common-lisp:error ":node-group-id is required") :type
    (common-lisp:or allowed-node-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-failover-message 'make-test-failover-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group-id))
      (common-lisp:list
       (common-lisp:cons "NodeGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-failover-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition test-failover-not-available-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'test-failover-not-available-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (test-failover-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-failover-result-"))
   (replication-group common-lisp:nil :type
    (common-lisp:or replication-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-failover-result 'make-test-failover-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-failover-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-failover-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-failover-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-filter-"))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter 'make-time-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range-filter))
   common-lisp:nil))
(common-lisp:deftype transit-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ugreplication-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-ugreplication-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (unprocessed-update-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-unprocessed-update-action-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (error-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-update-action
                    'make-unprocessed-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-update-action-list ()
   '(trivial-types:proper-list unprocessed-update-action))
 (common-lisp:defun |make-unprocessed-update-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-"))
   (replication-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cache-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-update-release-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (service-update-severity common-lisp:nil :type
    (common-lisp:or service-update-severity common-lisp:null))
   (service-update-status common-lisp:nil :type
    (common-lisp:or service-update-status common-lisp:null))
   (service-update-recommended-apply-by-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (service-update-type common-lisp:nil :type
    (common-lisp:or service-update-type common-lisp:null))
   (update-action-available-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (update-action-status common-lisp:nil :type
    (common-lisp:or update-action-status common-lisp:null))
   (nodes-updated common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (update-action-status-modified-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (sla-met common-lisp:nil :type (common-lisp:or sla-met common-lisp:null))
   (node-group-update-status common-lisp:nil :type
    (common-lisp:or node-group-update-status-list common-lisp:null))
   (cache-node-update-status common-lisp:nil :type
    (common-lisp:or cache-node-update-status-list common-lisp:null))
   (estimated-update-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-action 'make-update-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CacheClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-release-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-severity))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-status))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-recommended-apply-by-date))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateRecommendedApplyByDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-type))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-available-date))
      (common-lisp:list
       (common-lisp:cons "UpdateActionAvailableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-updated))
      (common-lisp:list
       (common-lisp:cons "NodesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-action-status-modified-date))
      (common-lisp:list
       (common-lisp:cons "UpdateActionStatusModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sla-met))
      (common-lisp:list
       (common-lisp:cons "SlaMet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-group-update-status))
      (common-lisp:list
       (common-lisp:cons "NodeGroupUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-node-update-status))
      (common-lisp:list
       (common-lisp:cons "CacheNodeUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-update-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-action-list ()
   '(trivial-types:proper-list update-action))
 (common-lisp:defun |make-update-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-results-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-results-message-"))
   (processed-update-actions common-lisp:nil :type
    (common-lisp:or processed-update-action-list common-lisp:null))
   (unprocessed-update-actions common-lisp:nil :type
    (common-lisp:or unprocessed-update-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-action-results-message
                    'make-update-action-results-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-update-actions))
      (common-lisp:list
       (common-lisp:cons "ProcessedUpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-update-actions))
      (common-lisp:list
       (common-lisp:cons "UnprocessedUpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-results-message))
   common-lisp:nil))
(common-lisp:deftype update-action-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype update-action-status-list ()
   '(trivial-types:proper-list update-action-status))
 (common-lisp:defun |make-update-action-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-action-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-actions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-actions-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (update-actions common-lisp:nil :type
    (common-lisp:or update-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-actions-message 'make-update-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-actions))
      (common-lisp:list
       (common-lisp:cons "UpdateActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (user-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or engine-type common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (access-string common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-group-ids common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null))
   (authentication common-lisp:nil :type
    (common-lisp:or authentication common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-ids))
      (common-lisp:list
       (common-lisp:cons "UserGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (user-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-group-"))
   (user-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or engine-type common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-changes common-lisp:nil :type
    (common-lisp:or user-group-pending-changes common-lisp:null))
   (replication-groups common-lisp:nil :type
    (common-lisp:or ugreplication-group-id-list common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-group 'make-user-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group-id))
      (common-lisp:list
       (common-lisp:cons "UserGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-changes))
      (common-lisp:list
       (common-lisp:cons "PendingChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-groups))
      (common-lisp:list
       (common-lisp:cons "ReplicationGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-group-already-exists-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-already-exists-fault)))
(common-lisp:deftype user-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-group-id-list ()
   '(trivial-types:proper-list user-group-id))
 (common-lisp:defun |make-user-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-group-id-list-input ()
   '(trivial-types:proper-list user-group-id))
 (common-lisp:defun |make-user-group-id-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-group-list ()
   '(trivial-types:proper-list user-group))
 (common-lisp:defun |make-user-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition user-group-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (user-group-pending-changes (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-group-pending-changes-"))
   (user-ids-to-remove common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (user-ids-to-add common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-group-pending-changes
                    'make-user-group-pending-changes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-group-pending-changes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-group-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (user-groups-update-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-groups-update-status-"))
   (user-group-ids-to-add common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null))
   (user-group-ids-to-remove common-lisp:nil :type
    (common-lisp:or user-group-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-groups-update-status
                    'make-user-groups-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserGroupIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-groups-update-status))
   common-lisp:nil))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-id-list () '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-id-list-input ()
   '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-user-id-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition user-not-found-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition user-quota-exceeded-fault
     (elasticache-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddTagsToResource"
                                                        "2015-02-02"))
      common-lisp:nil "AddTagsToResourceResult" *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun authorize-cache-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name ec2security-group-name
     ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-cache-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AuthorizeCacheSecurityGroupIngress"
                                                        "2015-02-02"))
      common-lisp:nil "AuthorizeCacheSecurityGroupIngressResult" *error-map*)))
 (common-lisp:export 'authorize-cache-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun batch-apply-update-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-ids cache-cluster-ids
                     service-update-name)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-ids cache-cluster-ids
     service-update-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-apply-update-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "BatchApplyUpdateAction"
                                                        "2015-02-02"))
      common-lisp:nil "BatchApplyUpdateActionResult" *error-map*)))
 (common-lisp:export 'batch-apply-update-action))
(common-lisp:progn
 (common-lisp:defun batch-stop-update-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-ids cache-cluster-ids
                     service-update-name)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-ids cache-cluster-ids
     service-update-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-update-action-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "BatchStopUpdateAction"
                                                        "2015-02-02"))
      common-lisp:nil "BatchStopUpdateActionResult" *error-map*)))
 (common-lisp:export 'batch-stop-update-action))
(common-lisp:progn
 (common-lisp:defun complete-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id force)
   (common-lisp:declare (common-lisp:ignorable replication-group-id force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-migration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CompleteMigration"
                                                        "2015-02-02"))
      common-lisp:nil "CompleteMigrationResult" *error-map*)))
 (common-lisp:export 'complete-migration))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name target-snapshot-name
                     target-bucket kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-name target-snapshot-name
     target-bucket kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CopySnapshot"
                                                        "2015-02-02"))
      common-lisp:nil "CopySnapshotResult" *error-map*)))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id replication-group-id
                     azmode preferred-availability-zone
                     preferred-availability-zones num-cache-nodes
                     cache-node-type engine engine-version
                     cache-parameter-group-name cache-subnet-group-name
                     cache-security-group-names security-group-ids tags
                     snapshot-arns snapshot-name preferred-maintenance-window
                     port notification-topic-arn auto-minor-version-upgrade
                     snapshot-retention-limit snapshot-window auth-token
                     outpost-mode preferred-outpost-arn preferred-outpost-arns
                     log-delivery-configurations transit-encryption-enabled
                     network-type ip-discovery)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id replication-group-id azmode
     preferred-availability-zone preferred-availability-zones num-cache-nodes
     cache-node-type engine engine-version cache-parameter-group-name
     cache-subnet-group-name cache-security-group-names security-group-ids tags
     snapshot-arns snapshot-name preferred-maintenance-window port
     notification-topic-arn auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window auth-token outpost-mode preferred-outpost-arn
     preferred-outpost-arns log-delivery-configurations
     transit-encryption-enabled network-type ip-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateCacheCluster"
                                                        "2015-02-02"))
      common-lisp:nil "CreateCacheClusterResult" *error-map*)))
 (common-lisp:export 'create-cache-cluster))
(common-lisp:progn
 (common-lisp:defun create-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     cache-parameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name
     cache-parameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateCacheParameterGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateCacheParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-cache-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateCacheSecurityGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateCacheSecurityGroupResult" *error-map*)))
 (common-lisp:export 'create-cache-security-group))
(common-lisp:progn
 (common-lisp:defun create-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name
                     cache-subnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name
     cache-subnet-group-description subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateCacheSubnetGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateCacheSubnetGroupResult" *error-map*)))
 (common-lisp:export 'create-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id-suffix
                     global-replication-group-description
                     primary-replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id-suffix
     global-replication-group-description primary-replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateGlobalReplicationGroupResult" *error-map*)))
 (common-lisp:export 'create-global-replication-group))
(common-lisp:progn
 (common-lisp:defun create-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     replication-group-description global-replication-group-id
                     primary-cluster-id automatic-failover-enabled
                     multi-azenabled num-cache-clusters
                     preferred-cache-cluster-azs num-node-groups
                     replicas-per-node-group node-group-configuration
                     cache-node-type engine engine-version
                     cache-parameter-group-name cache-subnet-group-name
                     cache-security-group-names security-group-ids tags
                     snapshot-arns snapshot-name preferred-maintenance-window
                     port notification-topic-arn auto-minor-version-upgrade
                     snapshot-retention-limit snapshot-window auth-token
                     transit-encryption-enabled at-rest-encryption-enabled
                     kms-key-id user-group-ids log-delivery-configurations
                     data-tiering-enabled network-type ip-discovery
                     transit-encryption-mode)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id replication-group-description
     global-replication-group-id primary-cluster-id automatic-failover-enabled
     multi-azenabled num-cache-clusters preferred-cache-cluster-azs
     num-node-groups replicas-per-node-group node-group-configuration
     cache-node-type engine engine-version cache-parameter-group-name
     cache-subnet-group-name cache-security-group-names security-group-ids tags
     snapshot-arns snapshot-name preferred-maintenance-window port
     notification-topic-arn auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window auth-token transit-encryption-enabled
     at-rest-encryption-enabled kms-key-id user-group-ids
     log-delivery-configurations data-tiering-enabled network-type ip-discovery
     transit-encryption-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateReplicationGroupResult" *error-map*)))
 (common-lisp:export 'create-replication-group))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id cache-cluster-id
                     snapshot-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id cache-cluster-id snapshot-name
     kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateSnapshot"
                                                        "2015-02-02"))
      common-lisp:nil "CreateSnapshotResult" *error-map*)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id user-name engine passwords
                     access-string no-password-required tags
                     authentication-mode)
   (common-lisp:declare
    (common-lisp:ignorable user-id user-name engine passwords access-string
     no-password-required tags authentication-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateUser"
                                                        "2015-02-02"))
      common-lisp:nil "CreateUserResult" *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id engine user-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id engine user-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateUserGroup"
                                                        "2015-02-02"))
      common-lisp:nil "CreateUserGroupResult" *error-map*)))
 (common-lisp:export 'create-user-group))
(common-lisp:progn
 (common-lisp:defun decrease-node-groups-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     node-group-count global-node-groups-to-remove
                     global-node-groups-to-retain apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id node-group-count
     global-node-groups-to-remove global-node-groups-to-retain
     apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-node-groups-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DecreaseNodeGroupsInGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "DecreaseNodeGroupsInGlobalReplicationGroupResult"
      *error-map*)))
 (common-lisp:export 'decrease-node-groups-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun decrease-replica-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id new-replica-count
                     replica-configuration replicas-to-remove
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id new-replica-count
     replica-configuration replicas-to-remove apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decrease-replica-count-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DecreaseReplicaCount"
                                                        "2015-02-02"))
      common-lisp:nil "DecreaseReplicaCountResult" *error-map*)))
 (common-lisp:export 'decrease-replica-count))
(common-lisp:progn
 (common-lisp:defun delete-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id
                     final-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id final-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteCacheCluster"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteCacheClusterResult" *error-map*)))
 (common-lisp:export 'delete-cache-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteCacheParameterGroup"
                                                        "2015-02-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-cache-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-security-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteCacheSecurityGroup"
                                                        "2015-02-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cache-security-group))
(common-lisp:progn
 (common-lisp:defun delete-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable cache-subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteCacheSubnetGroup"
                                                        "2015-02-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     retain-primary-replication-group)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id
     retain-primary-replication-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteGlobalReplicationGroupResult" *error-map*)))
 (common-lisp:export 'delete-global-replication-group))
(common-lisp:progn
 (common-lisp:defun delete-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     retain-primary-cluster final-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id retain-primary-cluster
     final-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteReplicationGroupResult" *error-map*)))
 (common-lisp:export 'delete-replication-group))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteSnapshot"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id)
   (common-lisp:declare (common-lisp:ignorable user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteUser"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteUserResult" *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id)
   (common-lisp:declare (common-lisp:ignorable user-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteUserGroup"
                                                        "2015-02-02"))
      common-lisp:nil "DeleteUserGroupResult" *error-map*)))
 (common-lisp:export 'delete-user-group))
(common-lisp:progn
 (common-lisp:defun describe-cache-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id max-records marker
                     show-cache-node-info
                     show-cache-clusters-not-in-replication-groups)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id max-records marker
     show-cache-node-info show-cache-clusters-not-in-replication-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cache-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheClusters"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheClustersResult" *error-map*)))
 (common-lisp:export 'describe-cache-clusters))
(common-lisp:progn
 (common-lisp:defun describe-cache-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     cache-parameter-group-family max-records marker
                     default-only)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version cache-parameter-group-family
     max-records marker default-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-engine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheEngineVersions"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheEngineVersionsResult" *error-map*)))
 (common-lisp:export 'describe-cache-engine-versions))
(common-lisp:progn
 (common-lisp:defun describe-cache-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheParameterGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cache-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-cache-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name source
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name source max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheParameters"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheParametersResult" *error-map*)))
 (common-lisp:export 'describe-cache-parameters))
(common-lisp:progn
 (common-lisp:defun describe-cache-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-security-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheSecurityGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheSecurityGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cache-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-cache-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cache-subnet-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCacheSubnetGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeCacheSubnetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cache-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-family max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-family max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEngineDefaultParameters"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeEngineDefaultParametersResult" *error-map*)))
 (common-lisp:export 'describe-engine-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEvents"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-global-replication-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id max-records
                     marker show-member-info)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id max-records marker
     show-member-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-global-replication-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeGlobalReplicationGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeGlobalReplicationGroupsResult" *error-map*)))
 (common-lisp:export 'describe-global-replication-groups))
(common-lisp:progn
 (common-lisp:defun describe-replication-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeReplicationGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeReplicationGroupsResult" *error-map*)))
 (common-lisp:export 'describe-replication-groups))
(common-lisp:progn
 (common-lisp:defun describe-reserved-cache-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-node-id
                     reserved-cache-nodes-offering-id cache-node-type duration
                     product-description offering-type max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-node-id
     reserved-cache-nodes-offering-id cache-node-type duration
     product-description offering-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-cache-nodes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeReservedCacheNodes"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeReservedCacheNodesResult" *error-map*)))
 (common-lisp:export 'describe-reserved-cache-nodes))
(common-lisp:progn
 (common-lisp:defun describe-reserved-cache-nodes-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-nodes-offering-id
                     cache-node-type duration product-description offering-type
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-nodes-offering-id cache-node-type
     duration product-description offering-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-cache-nodes-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeReservedCacheNodesOfferings"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeReservedCacheNodesOfferingsResult"
      *error-map*)))
 (common-lisp:export 'describe-reserved-cache-nodes-offerings))
(common-lisp:progn
 (common-lisp:defun describe-service-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-update-name service-update-status
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable service-update-name service-update-status
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-updates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeServiceUpdates"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeServiceUpdatesResult" *error-map*)))
 (common-lisp:export 'describe-service-updates))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id cache-cluster-id
                     snapshot-name snapshot-source marker max-records
                     show-node-group-config)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id cache-cluster-id snapshot-name
     snapshot-source marker max-records show-node-group-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeSnapshots"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-update-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-update-name replication-group-ids
                     cache-cluster-ids engine service-update-status
                     service-update-time-range update-action-status
                     show-node-level-update-status max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable service-update-name replication-group-ids
     cache-cluster-ids engine service-update-status service-update-time-range
     update-action-status show-node-level-update-status max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-update-actions-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeUpdateActions"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeUpdateActionsResult" *error-map*)))
 (common-lisp:export 'describe-update-actions))
(common-lisp:progn
 (common-lisp:defun describe-user-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeUserGroups"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeUserGroupsResult" *error-map*)))
 (common-lisp:export 'describe-user-groups))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine user-id filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable engine user-id filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeUsers"
                                                        "2015-02-02"))
      common-lisp:nil "DescribeUsersResult" *error-map*)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun disassociate-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     replication-group-id replication-group-region)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id replication-group-id
     replication-group-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DisassociateGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "DisassociateGlobalReplicationGroupResult" *error-map*)))
 (common-lisp:export 'disassociate-global-replication-group))
(common-lisp:progn
 (common-lisp:defun failover-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     primary-region primary-replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id primary-region
     primary-replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-failover-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "FailoverGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "FailoverGlobalReplicationGroupResult" *error-map*)))
 (common-lisp:export 'failover-global-replication-group))
(common-lisp:progn
 (common-lisp:defun increase-node-groups-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     node-group-count regional-configurations
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id node-group-count
     regional-configurations apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-node-groups-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "IncreaseNodeGroupsInGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "IncreaseNodeGroupsInGlobalReplicationGroupResult"
      *error-map*)))
 (common-lisp:export 'increase-node-groups-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun increase-replica-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id new-replica-count
                     replica-configuration apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id new-replica-count
     replica-configuration apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-increase-replica-count-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "IncreaseReplicaCount"
                                                        "2015-02-02"))
      common-lisp:nil "IncreaseReplicaCountResult" *error-map*)))
 (common-lisp:export 'increase-replica-count))
(common-lisp:progn
 (common-lisp:defun list-allowed-node-type-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id replication-group-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id replication-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-allowed-node-type-modifications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListAllowedNodeTypeModifications"
                                                        "2015-02-02"))
      common-lisp:nil "ListAllowedNodeTypeModificationsResult" *error-map*)))
 (common-lisp:export 'list-allowed-node-type-modifications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListTagsForResource"
                                                        "2015-02-02"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id num-cache-nodes
                     cache-node-ids-to-remove azmode new-availability-zones
                     cache-security-group-names security-group-ids
                     preferred-maintenance-window notification-topic-arn
                     cache-parameter-group-name notification-topic-status
                     apply-immediately engine-version
                     auto-minor-version-upgrade snapshot-retention-limit
                     snapshot-window cache-node-type auth-token
                     auth-token-update-strategy log-delivery-configurations
                     ip-discovery)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id num-cache-nodes
     cache-node-ids-to-remove azmode new-availability-zones
     cache-security-group-names security-group-ids preferred-maintenance-window
     notification-topic-arn cache-parameter-group-name
     notification-topic-status apply-immediately engine-version
     auto-minor-version-upgrade snapshot-retention-limit snapshot-window
     cache-node-type auth-token auth-token-update-strategy
     log-delivery-configurations ip-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyCacheCluster"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyCacheClusterResult" *error-map*)))
 (common-lisp:export 'modify-cache-cluster))
(common-lisp:progn
 (common-lisp:defun modify-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyCacheParameterGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyCacheParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-cache-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-subnet-group-name
                     cache-subnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable cache-subnet-group-name
     cache-subnet-group-description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cache-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyCacheSubnetGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyCacheSubnetGroupResult" *error-map*)))
 (common-lisp:export 'modify-cache-subnet-group))
(common-lisp:progn
 (common-lisp:defun modify-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     apply-immediately cache-node-type engine-version
                     cache-parameter-group-name
                     global-replication-group-description
                     automatic-failover-enabled)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id apply-immediately
     cache-node-type engine-version cache-parameter-group-name
     global-replication-group-description automatic-failover-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyGlobalReplicationGroupResult" *error-map*)))
 (common-lisp:export 'modify-global-replication-group))
(common-lisp:progn
 (common-lisp:defun modify-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     replication-group-description primary-cluster-id
                     snapshotting-cluster-id automatic-failover-enabled
                     multi-azenabled node-group-id cache-security-group-names
                     security-group-ids preferred-maintenance-window
                     notification-topic-arn cache-parameter-group-name
                     notification-topic-status apply-immediately engine-version
                     auto-minor-version-upgrade snapshot-retention-limit
                     snapshot-window cache-node-type auth-token
                     auth-token-update-strategy user-group-ids-to-add
                     user-group-ids-to-remove remove-user-groups
                     log-delivery-configurations ip-discovery
                     transit-encryption-enabled transit-encryption-mode)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id replication-group-description
     primary-cluster-id snapshotting-cluster-id automatic-failover-enabled
     multi-azenabled node-group-id cache-security-group-names
     security-group-ids preferred-maintenance-window notification-topic-arn
     cache-parameter-group-name notification-topic-status apply-immediately
     engine-version auto-minor-version-upgrade snapshot-retention-limit
     snapshot-window cache-node-type auth-token auth-token-update-strategy
     user-group-ids-to-add user-group-ids-to-remove remove-user-groups
     log-delivery-configurations ip-discovery transit-encryption-enabled
     transit-encryption-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-replication-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyReplicationGroupResult" *error-map*)))
 (common-lisp:export 'modify-replication-group))
(common-lisp:progn
 (common-lisp:defun modify-replication-group-shard-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id node-group-count
                     apply-immediately resharding-configuration
                     node-groups-to-remove node-groups-to-retain)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id node-group-count
     apply-immediately resharding-configuration node-groups-to-remove
     node-groups-to-retain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-replication-group-shard-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyReplicationGroupShardConfiguration"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyReplicationGroupShardConfigurationResult"
      *error-map*)))
 (common-lisp:export 'modify-replication-group-shard-configuration))
(common-lisp:progn
 (common-lisp:defun modify-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id access-string
                     append-access-string passwords no-password-required
                     authentication-mode)
   (common-lisp:declare
    (common-lisp:ignorable user-id access-string append-access-string passwords
     no-password-required authentication-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-user-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyUser"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyUserResult" *error-map*)))
 (common-lisp:export 'modify-user))
(common-lisp:progn
 (common-lisp:defun modify-user-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-group-id user-ids-to-add
                     user-ids-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable user-group-id user-ids-to-add user-ids-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-user-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyUserGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ModifyUserGroupResult" *error-map*)))
 (common-lisp:export 'modify-user-group))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-cache-nodes-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-cache-nodes-offering-id
                     reserved-cache-node-id cache-node-count tags)
   (common-lisp:declare
    (common-lisp:ignorable reserved-cache-nodes-offering-id
     reserved-cache-node-id cache-node-count tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-cache-nodes-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PurchaseReservedCacheNodesOffering"
                                                        "2015-02-02"))
      common-lisp:nil "PurchaseReservedCacheNodesOfferingResult" *error-map*)))
 (common-lisp:export 'purchase-reserved-cache-nodes-offering))
(common-lisp:progn
 (common-lisp:defun rebalance-slots-in-global-replication-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-replication-group-id
                     apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable global-replication-group-id apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-rebalance-slots-in-global-replication-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RebalanceSlotsInGlobalReplicationGroup"
                                                        "2015-02-02"))
      common-lisp:nil "RebalanceSlotsInGlobalReplicationGroupResult"
      *error-map*)))
 (common-lisp:export 'rebalance-slots-in-global-replication-group))
(common-lisp:progn
 (common-lisp:defun reboot-cache-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-cluster-id
                     cache-node-ids-to-reboot)
   (common-lisp:declare
    (common-lisp:ignorable cache-cluster-id cache-node-ids-to-reboot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-cache-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RebootCacheCluster"
                                                        "2015-02-02"))
      common-lisp:nil "RebootCacheClusterResult" *error-map*)))
 (common-lisp:export 'reboot-cache-cluster))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveTagsFromResource"
                                                        "2015-02-02"))
      common-lisp:nil "RemoveTagsFromResourceResult" *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-cache-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-parameter-group-name
                     reset-all-parameters parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable cache-parameter-group-name reset-all-parameters
     parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-cache-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ResetCacheParameterGroup"
                                                        "2015-02-02"))
      common-lisp:nil "ResetCacheParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-cache-parameter-group))
(common-lisp:progn
 (common-lisp:defun revoke-cache-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-security-group-name
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cache-security-group-name ec2security-group-name
     ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-cache-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RevokeCacheSecurityGroupIngress"
                                                        "2015-02-02"))
      common-lisp:nil "RevokeCacheSecurityGroupIngressResult" *error-map*)))
 (common-lisp:export 'revoke-cache-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun start-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id
                     customer-node-endpoint-list)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id customer-node-endpoint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-migration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "StartMigration"
                                                        "2015-02-02"))
      common-lisp:nil "StartMigrationResult" *error-map*)))
 (common-lisp:export 'start-migration))
(common-lisp:progn
 (common-lisp:defun test-failover
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-group-id node-group-id)
   (common-lisp:declare
    (common-lisp:ignorable replication-group-id node-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-failover-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elasticache-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "TestFailover"
                                                        "2015-02-02"))
      common-lisp:nil "TestFailoverResult" *error-map*)))
 (common-lisp:export 'test-failover))
