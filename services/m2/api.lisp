;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/m2/api
  (:use)
  (:nicknames #:aws/m2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/m2/api)
(common-lisp:progn
 (common-lisp:defclass m2-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "m2" :protocol :rest-json))
 (common-lisp:export 'm2-request))
(common-lisp:progn
 (common-lisp:define-condition m2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'm2-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (alternate-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-alternate-key-"))
   (allow-duplicates common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (length (common-lisp:error ":length is required") :type
    (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offset (common-lisp:error ":offset is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alternate-key 'make-alternate-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alternate-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alternate-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-duplicates))
      (common-lisp:list
       (common-lisp:cons "allowDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alternate-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alternate-key-list ()
   '(trivial-types:proper-list alternate-key))
 (common-lisp:defun |make-alternate-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alternate-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-deployment-lifecycle () 'common-lisp:string)
(common-lisp:deftype application-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-summary-"))
   (application-arn (common-lisp:error ":applicationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status common-lisp:nil :type
    (common-lisp:or application-deployment-lifecycle common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (last-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or application-lifecycle common-lisp:null))
   (version-status common-lisp:nil :type
    (common-lisp:or application-version-lifecycle common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-status))
      (common-lisp:list
       (common-lisp:cons "versionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-summary-list ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun |make-application-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-version-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-summary-"))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or application-version-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-summary
                    'make-application-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-version-summary-list ()
   '(trivial-types:proper-list application-version-summary))
 (common-lisp:defun |make-application-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-job-definition-"))
   (file-batch-job-definition common-lisp:nil :type
    (common-lisp:or file-batch-job-definition common-lisp:null))
   (script-batch-job-definition common-lisp:nil :type
    (common-lisp:or script-batch-job-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-job-definition 'make-batch-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-batch-job-definition))
      (common-lisp:list
       (common-lisp:cons "fileBatchJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-batch-job-definition))
      (common-lisp:list
       (common-lisp:cons "scriptBatchJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-job-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-job-definitions ()
   '(trivial-types:proper-list batch-job-definition))
 (common-lisp:defun |make-batch-job-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-job-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-job-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-job-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-job-execution-summary-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (batch-job-identifier common-lisp:nil :type
    (common-lisp:or batch-job-identifier common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (execution-id (common-lisp:error ":executionid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (job-name common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (job-type common-lisp:nil :type
    (common-lisp:or batch-job-type common-lisp:null))
   (return-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or batch-job-execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-job-execution-summary
                    'make-batch-job-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-job-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-job-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-identifier))
      (common-lisp:list
       (common-lisp:cons "batchJobIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-code))
      (common-lisp:list
       (common-lisp:cons "returnCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-job-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-job-execution-summary-list ()
   '(trivial-types:proper-list batch-job-execution-summary))
 (common-lisp:defun |make-batch-job-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-job-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-job-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-job-identifier-"))
   (file-batch-job-identifier common-lisp:nil :type
    (common-lisp:or file-batch-job-identifier common-lisp:null))
   (script-batch-job-identifier common-lisp:nil :type
    (common-lisp:or script-batch-job-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-job-identifier 'make-batch-job-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-job-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-job-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-batch-job-identifier))
      (common-lisp:list
       (common-lisp:cons "fileBatchJobIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-batch-job-identifier))
      (common-lisp:list
       (common-lisp:cons "scriptBatchJobIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-job-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-job-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-batch-job-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype batch-job-type () 'common-lisp:string)
(common-lisp:deftype batch-param-key () 'common-lisp:string)
(common-lisp:deftype batch-param-value () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-job-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-job-execution-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (execution-id (common-lisp:error ":executionid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-job-execution-request
                    'make-cancel-batch-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-batch-job-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-batch-job-execution-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-batch-job-execution-response
                    'make-cancel-batch-job-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-batch-job-execution-response))
   common-lisp:nil))
(common-lisp:deftype capacity-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or definition common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-arn (common-lisp:error ":applicationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-set-import-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-set-import-task-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (import-config (common-lisp:error ":importconfig is required") :type
    (common-lisp:or data-set-import-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-import-task-request
                    'make-create-data-set-import-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-config))
      (common-lisp:list
       (common-lisp:cons "importConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-set-import-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-set-import-task-response-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-import-task-response
                    'make-create-data-set-import-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-request
                    'make-create-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-response-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-response
                    'make-create-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or engine-version common-lisp:null))
   (high-availability-config common-lisp:nil :type
    (common-lisp:or high-availability-config common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or string20 common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string50 common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string50list common-lisp:null))
   (storage-configurations common-lisp:nil :type
    (common-lisp:or storage-configuration-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or string50list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-request
                    'make-create-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'high-availability-config))
      (common-lisp:list
       (common-lisp:cons "highAvailabilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-configurations))
      (common-lisp:list
       (common-lisp:cons "storageConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-response-"))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-response
                    'make-create-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set (:copier common-lisp:nil) (:conc-name "struct-shape-data-set-"))
   (dataset-name (common-lisp:error ":datasetname is required") :type
    (common-lisp:or string common-lisp:null))
   (dataset-org (common-lisp:error ":datasetorg is required") :type
    (common-lisp:or dataset-org-attributes common-lisp:null))
   (record-length (common-lisp:error ":recordlength is required") :type
    (common-lisp:or record-length common-lisp:null))
   (relative-path common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-set 'make-data-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "datasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-org))
      (common-lisp:list
       (common-lisp:cons "datasetOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-length))
      (common-lisp:list
       (common-lisp:cons "recordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-path))
      (common-lisp:list
       (common-lisp:cons "relativePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-import-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-import-config-"))
   (data-sets common-lisp:nil :type
    (common-lisp:or data-set-import-list common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or string2000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-import-config 'make-data-set-import-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sets))
      (common-lisp:list
       (common-lisp:cons "dataSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-import-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-import-item-"))
   (data-set (common-lisp:error ":dataset is required") :type
    (common-lisp:or data-set common-lisp:null))
   (external-location (common-lisp:error ":externallocation is required") :type
    (common-lisp:or external-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-import-item 'make-data-set-import-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-import-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-import-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set))
      (common-lisp:list
       (common-lisp:cons "dataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-location))
      (common-lisp:list
       (common-lisp:cons "externalLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-import-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-import-list ()
   '(trivial-types:proper-list data-set-import-item))
 (common-lisp:defun |make-data-set-import-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-import-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-import-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-import-summary-"))
   (failed (common-lisp:error ":failed is required") :type
    (common-lisp:or integer common-lisp:null))
   (in-progress (common-lisp:error ":inprogress is required") :type
    (common-lisp:or integer common-lisp:null))
   (pending (common-lisp:error ":pending is required") :type
    (common-lisp:or integer common-lisp:null))
   (succeeded (common-lisp:error ":succeeded is required") :type
    (common-lisp:or integer common-lisp:null))
   (total (common-lisp:error ":total is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-import-summary 'make-data-set-import-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "inProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-import-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-import-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-import-task-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-set-task-lifecycle common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or data-set-import-summary common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-import-task 'make-data-set-import-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-import-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-import-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-import-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-import-task-list ()
   '(trivial-types:proper-list data-set-import-task))
 (common-lisp:defun |make-data-set-import-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-import-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-summary-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-set-name (common-lisp:error ":datasetname is required") :type
    (common-lisp:or string200 common-lisp:null))
   (data-set-org common-lisp:nil :type
    (common-lisp:or string20 common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or string20 common-lisp:null))
   (last-referenced-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-summary 'make-data-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-name))
      (common-lisp:list
       (common-lisp:cons "dataSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-org))
      (common-lisp:list
       (common-lisp:cons "dataSetOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-referenced-time))
      (common-lisp:list
       (common-lisp:cons "lastReferencedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-summary))
   common-lisp:nil))
(common-lisp:deftype data-set-task-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sets-summary-list ()
   '(trivial-types:proper-list data-set-summary))
 (common-lisp:defun |make-data-sets-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-detail-org-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-detail-org-attributes-"))
   (gdg common-lisp:nil :type
    (common-lisp:or gdg-detail-attributes common-lisp:null))
   (vsam common-lisp:nil :type
    (common-lisp:or vsam-detail-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataset-detail-org-attributes
                    'make-dataset-detail-org-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-detail-org-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-detail-org-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gdg))
      (common-lisp:list
       (common-lisp:cons "gdg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vsam))
      (common-lisp:list
       (common-lisp:cons "vsam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-detail-org-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-org-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-org-attributes-"))
   (gdg common-lisp:nil :type (common-lisp:or gdg-attributes common-lisp:null))
   (vsam common-lisp:nil :type
    (common-lisp:or vsam-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataset-org-attributes 'make-dataset-org-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-org-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-org-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gdg))
      (common-lisp:list
       (common-lisp:cons "gdg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vsam))
      (common-lisp:list
       (common-lisp:cons "vsam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-org-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-definition-"))
   (content common-lisp:nil :type
    (common-lisp:or string-free65000 common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or string2000 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'definition 'make-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-from-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-from-environment-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-from-environment-request
                    'make-delete-application-from-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-from-environment-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-from-environment-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-from-environment-response
                    'make-delete-application-from-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-from-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-request-"))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-request
                    'make-delete-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-environment-response
                    'make-delete-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deployed-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployed-version-summary-"))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or deployment-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployed-version-summary 'make-deployed-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployed-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployed-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployed-version-summary))
   common-lisp:nil))
(common-lisp:deftype deployment-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-list ()
   '(trivial-types:proper-list deployment-summary))
 (common-lisp:defun |make-deployment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-summary-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or deployment-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-summary 'make-deployment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (efs-storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-efs-storage-configuration-"))
   (file-system-id (common-lisp:error ":filesystemid is required") :type
    (common-lisp:or string200 common-lisp:null))
   (mount-point (common-lisp:error ":mountpoint is required") :type
    (common-lisp:or string200 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'efs-storage-configuration
                    'make-efs-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efs-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efs-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "mountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efs-storage-configuration))
   common-lisp:nil))
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:deftype engine-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (engine-versions-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-engine-versions-summary-"))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version (common-lisp:error ":engineversion is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'engine-versions-summary 'make-engine-versions-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          engine-versions-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          engine-versions-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          engine-versions-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engine-versions-summary-list ()
   '(trivial-types:proper-list engine-versions-summary))
 (common-lisp:defun |make-engine-versions-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine-versions-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-description () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entity-name-list ()
   '(trivial-types:proper-list entity-name))
 (common-lisp:defun |make-entity-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-summary-"))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (engine-version (common-lisp:error ":engineversion is required") :type
    (common-lisp:or engine-version common-lisp:null))
   (environment-arn (common-lisp:error ":environmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or string20 common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or environment-lifecycle common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-summary 'make-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-summary-list ()
   '(trivial-types:proper-list environment-summary))
 (common-lisp:defun |make-environment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (external-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-location-"))
   (s3location common-lisp:nil :type
    (common-lisp:or string2000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-location 'make-external-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input external-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input external-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input external-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (file-batch-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-batch-job-definition-"))
   (file-name (common-lisp:error ":filename is required") :type
    (common-lisp:or string common-lisp:null))
   (folder-path common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'file-batch-job-definition
                    'make-file-batch-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-path))
      (common-lisp:list
       (common-lisp:cons "folderPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (file-batch-job-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-batch-job-identifier-"))
   (file-name (common-lisp:error ":filename is required") :type
    (common-lisp:or string common-lisp:null))
   (folder-path common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'file-batch-job-identifier
                    'make-file-batch-job-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-path))
      (common-lisp:list
       (common-lisp:cons "folderPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-batch-job-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (fsx-storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-fsx-storage-configuration-"))
   (file-system-id (common-lisp:error ":filesystemid is required") :type
    (common-lisp:or string200 common-lisp:null))
   (mount-point (common-lisp:error ":mountpoint is required") :type
    (common-lisp:or string200 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fsx-storage-configuration
                    'make-fsx-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fsx-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fsx-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "mountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fsx-storage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gdg-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-gdg-attributes-"))
   (limit common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (roll-disposition common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gdg-attributes 'make-gdg-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gdg-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gdg-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roll-disposition))
      (common-lisp:list
       (common-lisp:cons "rollDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gdg-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gdg-detail-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-gdg-detail-attributes-"))
   (limit common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (roll-disposition common-lisp:nil :type
    (common-lisp:or string50 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gdg-detail-attributes 'make-gdg-detail-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gdg-detail-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gdg-detail-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roll-disposition))
      (common-lisp:list
       (common-lisp:cons "rollDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gdg-detail-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-response-"))
   (application-arn (common-lisp:error ":applicationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployed-version common-lisp:nil :type
    (common-lisp:or deployed-version-summary common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (last-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-version (common-lisp:error ":latestversion is required") :type
    (common-lisp:or application-version-summary common-lisp:null))
   (listener-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (listener-ports common-lisp:nil :type
    (common-lisp:or port-list common-lisp:null))
   (load-balancer-dns-name common-lisp:nil :type
    (common-lisp:or string100 common-lisp:null))
   (log-groups common-lisp:nil :type
    (common-lisp:or log-group-summaries common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or application-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (target-group-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed-version))
      (common-lisp:list
       (common-lisp:cons "deployedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "latestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arns))
      (common-lisp:list
       (common-lisp:cons "listenerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-ports))
      (common-lisp:list
       (common-lisp:cons "listenerPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-dns-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-groups))
      (common-lisp:list
       (common-lisp:cons "logGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "targetGroupArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-version-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-version-request
                    'make-get-application-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-version-response-"))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (definition-content (common-lisp:error ":definitioncontent is required")
    :type (common-lisp:or string-free65000 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or application-version-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-version-response
                    'make-get-application-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-content))
      (common-lisp:list
       (common-lisp:cons "definitionContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-job-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-job-execution-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (execution-id (common-lisp:error ":executionid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-job-execution-request
                    'make-get-batch-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-batch-job-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-batch-job-execution-response-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (batch-job-identifier common-lisp:nil :type
    (common-lisp:or batch-job-identifier common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (execution-id (common-lisp:error ":executionid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (job-name common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (job-type common-lisp:nil :type
    (common-lisp:or batch-job-type common-lisp:null))
   (job-user common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (return-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or batch-job-execution-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-batch-job-execution-response
                    'make-get-batch-job-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-identifier))
      (common-lisp:list
       (common-lisp:cons "batchJobIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-user))
      (common-lisp:list
       (common-lisp:cons "jobUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-code))
      (common-lisp:list
       (common-lisp:cons "returnCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-batch-job-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-set-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-set-details-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (data-set-name (common-lisp:error ":datasetname is required") :type
    (common-lisp:or string200 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-set-details-request
                    'make-get-data-set-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-set-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-set-details-response-"))
   (blocksize common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-set-name (common-lisp:error ":datasetname is required") :type
    (common-lisp:or string200 common-lisp:null))
   (data-set-org common-lisp:nil :type
    (common-lisp:or dataset-detail-org-attributes common-lisp:null))
   (last-referenced-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or string2000 common-lisp:null))
   (record-length common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-set-details-response
                    'make-get-data-set-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocksize))
      (common-lisp:list
       (common-lisp:cons "blocksize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-name))
      (common-lisp:list
       (common-lisp:cons "dataSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-org))
      (common-lisp:list
       (common-lisp:cons "dataSetOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-referenced-time))
      (common-lisp:list
       (common-lisp:cons "lastReferencedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-length))
      (common-lisp:list
       (common-lisp:cons "recordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-set-import-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-set-import-task-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-set-import-task-request
                    'make-get-data-set-import-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-set-import-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-set-import-task-response-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-set-task-lifecycle common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or data-set-import-summary common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-set-import-task-response
                    'make-get-data-set-import-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-request 'make-get-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-response-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or deployment-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-response 'make-get-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-request-"))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-request 'make-get-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-response-"))
   (actual-capacity common-lisp:nil :type
    (common-lisp:or capacity-value common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (engine-type (common-lisp:error ":enginetype is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (engine-version (common-lisp:error ":engineversion is required") :type
    (common-lisp:or engine-version common-lisp:null))
   (environment-arn (common-lisp:error ":environmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (high-availability-config common-lisp:nil :type
    (common-lisp:or high-availability-config common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or string20 common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (load-balancer-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (pending-maintenance common-lisp:nil :type
    (common-lisp:or pending-maintenance common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string50 common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-group-ids (common-lisp:error ":securitygroupids is required")
    :type (common-lisp:or string50list common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or environment-lifecycle common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-configurations common-lisp:nil :type
    (common-lisp:or storage-configuration-list common-lisp:null))
   (subnet-ids (common-lisp:error ":subnetids is required") :type
    (common-lisp:or string50list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (vpc-id (common-lisp:error ":vpcid is required") :type
    (common-lisp:or string50 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-response 'make-get-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-capacity))
      (common-lisp:list
       (common-lisp:cons "actualCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "engineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'high-availability-config))
      (common-lisp:list
       (common-lisp:cons "highAvailabilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "loadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-maintenance))
      (common-lisp:list
       (common-lisp:cons "pendingMaintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-configurations))
      (common-lisp:list
       (common-lisp:cons "storageConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (high-availability-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-high-availability-config-"))
   (desired-capacity (common-lisp:error ":desiredcapacity is required") :type
    (common-lisp:or capacity-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'high-availability-config 'make-high-availability-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          high-availability-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          high-availability-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "desiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          high-availability-config))
   common-lisp:nil))
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identifier-list ()
   '(trivial-types:proper-list identifier))
 (common-lisp:defun |make-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-versions-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-request
                    'make-list-application-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-versions-response-"))
   (application-versions (common-lisp:error ":applicationversions is required")
    :type (common-lisp:or application-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-response
                    'make-list-application-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-versions))
      (common-lisp:list
       (common-lisp:cons "applicationVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (names common-lisp:nil :type
    (common-lisp:or entity-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (applications (common-lisp:error ":applications is required") :type
    (common-lisp:or application-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-batch-job-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-batch-job-definitions-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-batch-job-definitions-request
                    'make-list-batch-job-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-batch-job-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-batch-job-definitions-response-"))
   (batch-job-definitions
    (common-lisp:error ":batchjobdefinitions is required") :type
    (common-lisp:or batch-job-definitions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-batch-job-definitions-response
                    'make-list-batch-job-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-definitions))
      (common-lisp:list
       (common-lisp:cons "batchJobDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-batch-job-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-batch-job-executions-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (execution-ids common-lisp:nil :type
    (common-lisp:or identifier-list common-lisp:null))
   (job-name common-lisp:nil :type (common-lisp:or string100 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (started-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or batch-job-execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-batch-job-executions-request
                    'make-list-batch-job-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-batch-job-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-batch-job-executions-response-"))
   (batch-job-executions (common-lisp:error ":batchjobexecutions is required")
    :type (common-lisp:or batch-job-execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-batch-job-executions-response
                    'make-list-batch-job-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-executions))
      (common-lisp:list
       (common-lisp:cons "batchJobExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-job-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-set-import-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-set-import-history-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-set-import-history-request
                    'make-list-data-set-import-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-set-import-history-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-set-import-history-response-"))
   (data-set-import-tasks (common-lisp:error ":datasetimporttasks is required")
    :type (common-lisp:or data-set-import-task-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-set-import-history-response
                    'make-list-data-set-import-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-import-tasks))
      (common-lisp:list
       (common-lisp:cons "dataSetImportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-import-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sets-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string200 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-request 'make-list-data-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sets-response-"))
   (data-sets (common-lisp:error ":datasets is required") :type
    (common-lisp:or data-sets-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-response 'make-list-data-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sets))
      (common-lisp:list
       (common-lisp:cons "dataSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployments-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-request 'make-list-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployments-response-"))
   (deployments (common-lisp:error ":deployments is required") :type
    (common-lisp:or deployment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-response
                    'make-list-deployments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-engine-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-engine-versions-request-"))
   (engine-type common-lisp:nil :type
    (common-lisp:or engine-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-request
                    'make-list-engine-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-engine-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-engine-versions-response-"))
   (engine-versions (common-lisp:error ":engineversions is required") :type
    (common-lisp:or engine-versions-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-response
                    'make-list-engine-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-versions))
      (common-lisp:list
       (common-lisp:cons "engineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-request-"))
   (engine-type common-lisp:nil :type
    (common-lisp:or engine-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (names common-lisp:nil :type
    (common-lisp:or entity-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-request
                    'make-list-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-response-"))
   (environments (common-lisp:error ":environments is required") :type
    (common-lisp:or environment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-response
                    'make-list-environments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-group-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-group-summaries ()
   '(trivial-types:proper-list log-group-summary))
 (common-lisp:defun |make-log-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (log-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-group-summary-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-identifier common-lisp:null))
   (log-type (common-lisp:error ":logtype is required") :type
    (common-lisp:or string20 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-group-summary 'make-log-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maintenance-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-maintenance-schedule-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maintenance-schedule 'make-maintenance-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-schedule))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-"))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or maintenance-schedule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance 'make-pending-maintenance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pending-maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pending-maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pending-maintenance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-list () '(trivial-types:proper-list integer))
 (common-lisp:defun |make-port-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (primary-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-primary-key-"))
   (length (common-lisp:error ":length is required") :type
    (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offset (common-lisp:error ":offset is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'primary-key 'make-primary-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input primary-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input primary-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input primary-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record-length (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-length-"))
   (max (common-lisp:error ":max is required") :type
    (common-lisp:or integer common-lisp:null))
   (min (common-lisp:error ":min is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record-length 'make-record-length))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-length))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-length))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-length))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (script-batch-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-script-batch-job-definition-"))
   (script-name (common-lisp:error ":scriptname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'script-batch-job-definition
                    'make-script-batch-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-name))
      (common-lisp:list
       (common-lisp:cons "scriptName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (script-batch-job-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-script-batch-job-identifier-"))
   (script-name (common-lisp:error ":scriptname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'script-batch-job-identifier
                    'make-script-batch-job-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-name))
      (common-lisp:list
       (common-lisp:cons "scriptName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-batch-job-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-response-")))
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-batch-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-batch-job-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (batch-job-identifier (common-lisp:error ":batchjobidentifier is required")
    :type (common-lisp:or batch-job-identifier common-lisp:null))
   (job-params common-lisp:nil :type
    (common-lisp:or batch-job-parameters-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-batch-job-request 'make-start-batch-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-identifier))
      (common-lisp:list
       (common-lisp:cons "batchJobIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-params))
      (common-lisp:list
       (common-lisp:cons "jobParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-batch-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-batch-job-response-"))
   (execution-id (common-lisp:error ":executionid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-batch-job-response 'make-start-batch-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (force-stop common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-stop))
      (common-lisp:list
       (common-lisp:cons "forceStop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-configuration-"))
   (efs common-lisp:nil :type
    (common-lisp:or efs-storage-configuration common-lisp:null))
   (fsx common-lisp:nil :type
    (common-lisp:or fsx-storage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-configuration 'make-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs))
      (common-lisp:list
       (common-lisp:cons "efs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fsx))
      (common-lisp:list
       (common-lisp:cons "fsx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-configuration-list ()
   '(trivial-types:proper-list storage-configuration))
 (common-lisp:defun |make-storage-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string100 () 'common-lisp:string)
(common-lisp:deftype string20 () 'common-lisp:string)
(common-lisp:deftype string200 () 'common-lisp:string)
(common-lisp:deftype string2000 () 'common-lisp:string)
(common-lisp:deftype string50 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string50list () '(trivial-types:proper-list string50))
 (common-lisp:defun |make-string50list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string50))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-free65000 () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (m2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (current-application-version
    (common-lisp:error ":currentapplicationversion is required") :type
    (common-lisp:or version common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or definition common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version))
      (common-lisp:list
       (common-lisp:cons "currentApplicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-"))
   (application-version (common-lisp:error ":applicationversion is required")
    :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-request-"))
   (apply-during-maintenance-window common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or capacity-value common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or engine-version common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string20 common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-request
                    'make-update-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-during-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "applyDuringMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "desiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-response-"))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-response
                    'make-update-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (m2-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (vsam-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-vsam-attributes-"))
   (alternate-keys common-lisp:nil :type
    (common-lisp:or alternate-key-list common-lisp:null))
   (compressed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (encoding common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or string common-lisp:null))
   (primary-key common-lisp:nil :type
    (common-lisp:or primary-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vsam-attributes 'make-vsam-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vsam-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vsam-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternate-keys))
      (common-lisp:list
       (common-lisp:cons "alternateKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compressed))
      (common-lisp:list
       (common-lisp:cons "compressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key))
      (common-lisp:list
       (common-lisp:cons "primaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vsam-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vsam-detail-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-vsam-detail-attributes-"))
   (alternate-keys common-lisp:nil :type
    (common-lisp:or alternate-key-list common-lisp:null))
   (cache-at-startup common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (compressed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (encoding common-lisp:nil :type (common-lisp:or string20 common-lisp:null))
   (primary-key common-lisp:nil :type
    (common-lisp:or primary-key common-lisp:null))
   (record-format common-lisp:nil :type
    (common-lisp:or string20 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vsam-detail-attributes 'make-vsam-detail-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vsam-detail-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vsam-detail-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternate-keys))
      (common-lisp:list
       (common-lisp:cons "alternateKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-at-startup))
      (common-lisp:list
       (common-lisp:cons "cacheAtStartup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compressed))
      (common-lisp:list
       (common-lisp:cons "compressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key))
      (common-lisp:list
       (common-lisp:cons "primaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format))
      (common-lisp:list
       (common-lisp:cons "recordFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vsam-detail-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-batch-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id execution-id)
   (common-lisp:declare (common-lisp:ignorable application-id execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-batch-job-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/batch-job-executions/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'execution-id))))
                                                        "CancelBatchJobExecution"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-batch-job-execution))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token definition description
                     engine-type kms-key-id name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token definition description engine-type
     kms-key-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/applications"
                                                        "CreateApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-data-set-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     import-config)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token import-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-set-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/dataset-import-task"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateDataSetImportTask"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-set-import-task))
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id application-version
                     client-token environment-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id application-version client-token
     environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/deployments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateDeployment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description engine-type
                     engine-version high-availability-config instance-type
                     kms-key-id name preferred-maintenance-window
                     publicly-accessible security-group-ids
                     storage-configurations subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description engine-type engine-version
     high-availability-config instance-type kms-key-id name
     preferred-maintenance-window publicly-accessible security-group-ids
     storage-configurations subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/environments"
                                                        "CreateEnvironment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-from-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id)
   (common-lisp:declare (common-lisp:ignorable application-id environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-from-environment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteApplicationFromEnvironment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-from-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteEnvironment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id application-version)
   (common-lisp:declare
    (common-lisp:ignorable application-id application-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-version))))
                                                        "GetApplicationVersion"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-version))
(common-lisp:progn
 (common-lisp:defun get-batch-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id execution-id)
   (common-lisp:declare (common-lisp:ignorable application-id execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-batch-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/batch-job-executions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'execution-id))))
                                                        "GetBatchJobExecution"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-batch-job-execution))
(common-lisp:progn
 (common-lisp:defun get-data-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-set-name)
   (common-lisp:declare (common-lisp:ignorable application-id data-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-set-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-name))))
                                                        "GetDataSetDetails"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-set-details))
(common-lisp:progn
 (common-lisp:defun get-data-set-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id task-id)
   (common-lisp:declare (common-lisp:ignorable application-id task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-set-import-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/dataset-import-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "GetDataSetImportTask"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-set-import-task))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id deployment-id)
   (common-lisp:declare (common-lisp:ignorable application-id deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/deployments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-id))))
                                                        "GetDeployment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetEnvironment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun list-application-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListApplicationVersions"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-versions))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id max-results names
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id max-results names next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/applications"
                                                        "ListApplications"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-batch-job-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token
                     prefix)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-batch-job-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/batch-job-definitions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListBatchJobDefinitions"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-batch-job-definitions))
(common-lisp:progn
 (common-lisp:defun list-batch-job-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id execution-ids job-name
                     max-results next-token started-after started-before
                     status)
   (common-lisp:declare
    (common-lisp:ignorable application-id execution-ids job-name max-results
     next-token started-after started-before status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-batch-job-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/batch-job-executions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListBatchJobExecutions"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-batch-job-executions))
(common-lisp:progn
 (common-lisp:defun list-data-set-import-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-set-import-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/dataset-import-tasks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListDataSetImportHistory"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-set-import-history))
(common-lisp:progn
 (common-lisp:defun list-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token
                     prefix)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/datasets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListDataSets"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sets))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/deployments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListDeployments"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable engine-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-engine-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/engine-versions"
                                                        "ListEngineVersions"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-engine-versions))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-type max-results names next-token)
   (common-lisp:declare
    (common-lisp:ignorable engine-type max-results names next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/environments"
                                                        "ListEnvironments"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun start-batch-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id batch-job-identifier
                     job-params)
   (common-lisp:declare
    (common-lisp:ignorable application-id batch-job-identifier job-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-batch-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/batch-job"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartBatchJob"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-batch-job))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id force-stop)
   (common-lisp:declare (common-lisp:ignorable application-id force-stop))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StopApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     current-application-version definition description)
   (common-lisp:declare
    (common-lisp:ignorable application-id current-application-version
     definition description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apply-during-maintenance-window
                     desired-capacity engine-version environment-id
                     instance-type preferred-maintenance-window)
   (common-lisp:declare
    (common-lisp:ignorable apply-during-maintenance-window desired-capacity
     engine-version environment-id instance-type preferred-maintenance-window))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'm2-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateEnvironment"
                                                        "2021-04-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment))
