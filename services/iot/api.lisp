;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iot/api
  (:use)
  (:nicknames #:aws/iot)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iot/api)
(common-lisp:progn
 (common-lisp:define-condition iot-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iot-error))
(common-lisp:progn
 (common-lisp:defclass iot-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "iot" :api-version
                        "2015-05-28" :host-prefix "iot" :signing-name "iot"
                        :global-host common-lisp:nil))
 (common-lisp:export 'iot-request))
(common-lisp:defvar *error-map*
  '(("CertificateConflictException" . certificate-conflict-exception)
    ("CertificateStateException" . certificate-state-exception)
    ("CertificateValidationException" . certificate-validation-exception)
    ("ConflictException" . conflict-exception)
    ("ConflictingResourceUpdateException"
     . conflicting-resource-update-exception)
    ("DeleteConflictException" . delete-conflict-exception)
    ("IndexNotReadyException" . index-not-ready-exception)
    ("InternalException" . internal-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidAggregationException" . invalid-aggregation-exception)
    ("InvalidQueryException" . invalid-query-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidResponseException" . invalid-response-exception)
    ("InvalidStateTransitionException" . invalid-state-transition-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyException" . malformed-policy-exception)
    ("NotConfiguredException" . not-configured-exception)
    ("RegistrationCodeValidationException"
     . registration-code-validation-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceRegistrationFailureException"
     . resource-registration-failure-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("SqlParseException" . sql-parse-exception)
    ("TaskAlreadyExistsException" . task-already-exists-exception)
    ("ThrottlingException" . throttling-exception)
    ("TransferAlreadyCompletedException"
     . transfer-already-completed-exception)
    ("TransferConflictException" . transfer-conflict-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("ValidationException" . validation-exception)
    ("VersionConflictException" . version-conflict-exception)
    ("VersionsLimitExceededException" . versions-limit-exceeded-exception)))
(common-lisp:deftype abort-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (abort-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-config-"))
   (criteria-list (common-lisp:error ":criterialist is required") :type
    (common-lisp:or abort-criteria-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'abort-config 'make-abort-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abort-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abort-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria-list))
      (common-lisp:list
       (common-lisp:cons "criteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abort-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (abort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-criteria-"))
   (failure-type (common-lisp:error ":failuretype is required") :type
    (common-lisp:or job-execution-failure-type common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or abort-action common-lisp:null))
   (threshold-percentage (common-lisp:error ":thresholdpercentage is required")
    :type (common-lisp:or abort-threshold-percentage common-lisp:null))
   (min-number-of-executed-things
    (common-lisp:error ":minnumberofexecutedthings is required") :type
    (common-lisp:or minimum-number-of-executed-things common-lisp:null)))
 (common-lisp:export (common-lisp:list 'abort-criteria 'make-abort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "thresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-number-of-executed-things))
      (common-lisp:list
       (common-lisp:cons "minNumberOfExecutedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype abort-criteria-list ()
   '(trivial-types:proper-list abort-criteria))
 (common-lisp:defun make-abort-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list abort-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype abort-threshold-percentage () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (accept-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-certificate-transfer-request
                    'make-accept-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype acm-certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (dynamo-db common-lisp:nil :type
    (common-lisp:or dynamo-dbaction common-lisp:null))
   (dynamo-dbv2 common-lisp:nil :type
    (common-lisp:or dynamo-dbv2action common-lisp:null))
   (lambda common-lisp:nil :type
    (common-lisp:or lambda-action common-lisp:null))
   (sns common-lisp:nil :type (common-lisp:or sns-action common-lisp:null))
   (sqs common-lisp:nil :type (common-lisp:or sqs-action common-lisp:null))
   (kinesis common-lisp:nil :type
    (common-lisp:or kinesis-action common-lisp:null))
   (republish common-lisp:nil :type
    (common-lisp:or republish-action common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3action common-lisp:null))
   (firehose common-lisp:nil :type
    (common-lisp:or firehose-action common-lisp:null))
   (cloudwatch-metric common-lisp:nil :type
    (common-lisp:or cloudwatch-metric-action common-lisp:null))
   (cloudwatch-alarm common-lisp:nil :type
    (common-lisp:or cloudwatch-alarm-action common-lisp:null))
   (cloudwatch-logs common-lisp:nil :type
    (common-lisp:or cloudwatch-logs-action common-lisp:null))
   (elasticsearch common-lisp:nil :type
    (common-lisp:or elasticsearch-action common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-action common-lisp:null))
   (iot-analytics common-lisp:nil :type
    (common-lisp:or iot-analytics-action common-lisp:null))
   (iot-events common-lisp:nil :type
    (common-lisp:or iot-events-action common-lisp:null))
   (iot-site-wise common-lisp:nil :type
    (common-lisp:or iot-site-wise-action common-lisp:null))
   (step-functions common-lisp:nil :type
    (common-lisp:or step-functions-action common-lisp:null))
   (timestream common-lisp:nil :type
    (common-lisp:or timestream-action common-lisp:null))
   (http common-lisp:nil :type (common-lisp:or http-action common-lisp:null))
   (kafka common-lisp:nil :type (common-lisp:or kafka-action common-lisp:null))
   (open-search common-lisp:nil :type
    (common-lisp:or open-search-action common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db))
      (common-lisp:list
       (common-lisp:cons "dynamoDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-dbv2))
      (common-lisp:list
       (common-lisp:cons "dynamoDBv2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns))
      (common-lisp:list
       (common-lisp:cons "sns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs))
      (common-lisp:list
       (common-lisp:cons "sqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis))
      (common-lisp:list
       (common-lisp:cons "kinesis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'republish))
      (common-lisp:list
       (common-lisp:cons "republish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-metric))
      (common-lisp:list
       (common-lisp:cons "cloudwatchMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-alarm))
      (common-lisp:list
       (common-lisp:cons "cloudwatchAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elasticsearch))
      (common-lisp:list
       (common-lisp:cons "elasticsearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-analytics))
      (common-lisp:list
       (common-lisp:cons "iotAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-events))
      (common-lisp:list
       (common-lisp:cons "iotEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-site-wise))
      (common-lisp:list
       (common-lisp:cons "iotSiteWise"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-functions))
      (common-lisp:list
       (common-lisp:cons "stepFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream))
      (common-lisp:list
       (common-lisp:cons "timestream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka))
      (common-lisp:list
       (common-lisp:cons "kafka"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-search))
      (common-lisp:list
       (common-lisp:cons "openSearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (active-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-violation-"))
   (violation-id common-lisp:nil :type
    (common-lisp:or violation-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior common-lisp:nil :type (common-lisp:or behavior common-lisp:null))
   (last-violation-value common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (violation-event-additional-info common-lisp:nil :type
    (common-lisp:or violation-event-additional-info common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (verification-state-description common-lisp:nil :type
    (common-lisp:or verification-state-description common-lisp:null))
   (last-violation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (violation-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-violation 'make-active-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-violation-value))
      (common-lisp:list
       (common-lisp:cons "lastViolationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-additional-info))
      (common-lisp:list
       (common-lisp:cons "violationEventAdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-violation-time))
      (common-lisp:list
       (common-lisp:cons "lastViolationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-start-time))
      (common-lisp:list
       (common-lisp:cons "violationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-violations ()
   '(trivial-types:proper-list active-violation))
 (common-lisp:defun make-active-violations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (add-thing-to-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-thing-to-billing-group-request-"))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-arn common-lisp:nil :type
    (common-lisp:or billing-group-arn common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-billing-group-request
                    'make-add-thing-to-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-thing-to-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-thing-to-billing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-billing-group-response
                    'make-add-thing-to-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-thing-to-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-thing-to-thing-group-request-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (override-dynamic-groups common-lisp:nil :type
    (common-lisp:or override-dynamic-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-thing-group-request
                    'make-add-thing-to-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-thing-to-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-thing-to-thing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-thing-group-response
                    'make-add-thing-to-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-things-to-thing-group-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-things-to-thing-group-params-"))
   (thing-group-names (common-lisp:error ":thinggroupnames is required") :type
    (common-lisp:or thing-group-names common-lisp:null))
   (override-dynamic-groups common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-things-to-thing-group-params
                    'make-add-things-to-thing-group-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-names))
      (common-lisp:list
       (common-lisp:cons "thingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-to-retain-list ()
   '(trivial-types:proper-list behavior-metric))
 (common-lisp:defun make-additional-metrics-to-retain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list behavior-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-to-retain-v2list ()
   '(trivial-types:proper-list metric-to-retain))
 (common-lisp:defun make-additional-metrics-to-retain-v2list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-to-retain))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype aggregation-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-type-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or aggregation-type-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or aggregation-type-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-type 'make-aggregation-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-type))
   common-lisp:nil))
(common-lisp:deftype aggregation-type-name () 'common-lisp:string)
(common-lisp:deftype aggregation-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregation-type-values ()
   '(trivial-types:proper-list aggregation-type-value))
 (common-lisp:defun make-aggregation-type-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-type-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (alert-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-alert-target-"))
   (alert-target-arn (common-lisp:error ":alerttargetarn is required") :type
    (common-lisp:or alert-target-arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alert-target 'make-alert-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alert-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alert-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-target-arn))
      (common-lisp:list
       (common-lisp:cons "alertTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alert-target))
   common-lisp:nil))
(common-lisp:deftype alert-target-arn () 'common-lisp:string)
(common-lisp:deftype alert-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alert-targets () 'common-lisp:hash-table)
 (common-lisp:defun make-alert-targets (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype allow-authorizer-override () 'common-lisp:boolean)
(common-lisp:deftype allow-auto-registration () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (allowed (:copier common-lisp:nil) (:conc-name "struct-shape-allowed-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null)))
 (common-lisp:export (common-lisp:list 'allowed 'make-allowed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed))
   common-lisp:nil))
(common-lisp:deftype approximate-seconds-before-timed-out ()
  'common-lisp:integer)
(common-lisp:deftype ascending-order () 'common-lisp:boolean)
(common-lisp:deftype asset-id () 'common-lisp:string)
(common-lisp:deftype asset-property-alias () 'common-lisp:string)
(common-lisp:deftype asset-property-boolean-value () 'common-lisp:string)
(common-lisp:deftype asset-property-double-value () 'common-lisp:string)
(common-lisp:deftype asset-property-entry-id () 'common-lisp:string)
(common-lisp:deftype asset-property-id () 'common-lisp:string)
(common-lisp:deftype asset-property-integer-value () 'common-lisp:string)
(common-lisp:deftype asset-property-offset-in-nanos () 'common-lisp:string)
(common-lisp:deftype asset-property-quality () 'common-lisp:string)
(common-lisp:deftype asset-property-string-value () 'common-lisp:string)
(common-lisp:deftype asset-property-time-in-seconds () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property-timestamp (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-timestamp-"))
   (time-in-seconds (common-lisp:error ":timeinseconds is required") :type
    (common-lisp:or asset-property-time-in-seconds common-lisp:null))
   (offset-in-nanos common-lisp:nil :type
    (common-lisp:or asset-property-offset-in-nanos common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-property-timestamp 'make-asset-property-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-in-nanos))
      (common-lisp:list
       (common-lisp:cons "offsetInNanos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-value-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or asset-property-variant common-lisp:null))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or asset-property-timestamp common-lisp:null))
   (quality common-lisp:nil :type
    (common-lisp:or asset-property-quality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-property-value 'make-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-property-value-list ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun make-asset-property-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property-variant (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-variant-"))
   (string-value common-lisp:nil :type
    (common-lisp:or asset-property-string-value common-lisp:null))
   (integer-value common-lisp:nil :type
    (common-lisp:or asset-property-integer-value common-lisp:null))
   (double-value common-lisp:nil :type
    (common-lisp:or asset-property-double-value common-lisp:null))
   (boolean-value common-lisp:nil :type
    (common-lisp:or asset-property-boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-property-variant 'make-asset-property-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-targets-with-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-targets-with-job-request-"))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or job-targets common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (comment common-lisp:nil :type (common-lisp:or comment common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-targets-with-job-request
                    'make-associate-targets-with-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-targets-with-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-targets-with-job-response-"))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-targets-with-job-response
                    'make-associate-targets-with-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or policy-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-policy-request 'make-attach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-principal-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-principal-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-principal-policy-request
                    'make-attach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-target-arn
    (common-lisp:error ":securityprofiletargetarn is required") :type
    (common-lisp:or security-profile-target-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-security-profile-request
                    'make-attach-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-security-profile-response-")))
 (common-lisp:export
  (common-lisp:list 'attach-security-profile-response
                    'make-attach-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-thing-principal-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-request
                    'make-attach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-thing-principal-response-")))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-response
                    'make-attach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   common-lisp:nil))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-payload-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (merge common-lisp:nil :type (common-lisp:or flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-payload 'make-attribute-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge))
      (common-lisp:list
       (common-lisp:cons "merge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-payload))
   common-lisp:nil))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attributes-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-check-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-check-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-check-configuration
                    'make-audit-check-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-check-configurations () 'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-check-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-check-details-"))
   (check-run-status common-lisp:nil :type
    (common-lisp:or audit-check-run-status common-lisp:null))
   (check-compliant common-lisp:nil :type
    (common-lisp:or check-compliant common-lisp:null))
   (total-resources-count common-lisp:nil :type
    (common-lisp:or total-resources-count common-lisp:null))
   (non-compliant-resources-count common-lisp:nil :type
    (common-lisp:or non-compliant-resources-count common-lisp:null))
   (suppressed-non-compliant-resources-count common-lisp:nil :type
    (common-lisp:or suppressed-non-compliant-resources-count common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-check-details 'make-audit-check-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-check-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-check-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-run-status))
      (common-lisp:list
       (common-lisp:cons "checkRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-compliant))
      (common-lisp:list
       (common-lisp:cons "checkCompliant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resources-count))
      (common-lisp:list
       (common-lisp:cons "totalResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-resources-count))
      (common-lisp:list
       (common-lisp:cons "nonCompliantResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-non-compliant-resources-count))
      (common-lisp:list
       (common-lisp:cons "suppressedNonCompliantResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-check-details))
   common-lisp:nil))
(common-lisp:deftype audit-check-name () 'common-lisp:string)
(common-lisp:deftype audit-check-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-check-to-actions-mapping ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-to-actions-mapping
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype audit-check-to-reason-code-filter ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-to-reason-code-filter
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-details () 'common-lisp:hash-table)
 (common-lisp:defun make-audit-details (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-finding-"))
   (finding-id common-lisp:nil :type
    (common-lisp:or finding-id common-lisp:null))
   (task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null))
   (check-name common-lisp:nil :type
    (common-lisp:or audit-check-name common-lisp:null))
   (task-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (finding-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or audit-finding-severity common-lisp:null))
   (non-compliant-resource common-lisp:nil :type
    (common-lisp:or non-compliant-resource common-lisp:null))
   (related-resources common-lisp:nil :type
    (common-lisp:or related-resources common-lisp:null))
   (reason-for-non-compliance common-lisp:nil :type
    (common-lisp:or reason-for-non-compliance common-lisp:null))
   (reason-for-non-compliance-code common-lisp:nil :type
    (common-lisp:or reason-for-non-compliance-code common-lisp:null))
   (is-suppressed common-lisp:nil :type
    (common-lisp:or is-suppressed common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audit-finding 'make-audit-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-id))
      (common-lisp:list
       (common-lisp:cons "findingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-time))
      (common-lisp:list
       (common-lisp:cons "findingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-resource))
      (common-lisp:list
       (common-lisp:cons "nonCompliantResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-resources))
      (common-lisp:list
       (common-lisp:cons "relatedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reason-for-non-compliance))
      (common-lisp:list
       (common-lisp:cons "reasonForNonCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reason-for-non-compliance-code))
      (common-lisp:list
       (common-lisp:cons "reasonForNonComplianceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-suppressed))
      (common-lisp:list
       (common-lisp:cons "isSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-finding))
   common-lisp:nil))
(common-lisp:deftype audit-finding-severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-findings ()
   '(trivial-types:proper-list audit-finding))
 (common-lisp:defun make-audit-findings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audit-mitigation-action-execution-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-mitigation-action-execution-metadata-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (finding-id common-lisp:nil :type
    (common-lisp:or finding-id common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or mitigation-action-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-execution-status
                    common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-action-execution-metadata
                    'make-audit-mitigation-action-execution-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-id))
      (common-lisp:list
       (common-lisp:cons "findingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-action-execution-metadata-list ()
   '(trivial-types:proper-list audit-mitigation-action-execution-metadata))
 (common-lisp:defun make-audit-mitigation-action-execution-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            audit-mitigation-action-execution-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-mitigation-actions-execution-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audit-mitigation-actions-task-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-mitigation-actions-task-metadata-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-actions-task-metadata
                    'make-audit-mitigation-actions-task-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-actions-task-metadata-list ()
   '(trivial-types:proper-list audit-mitigation-actions-task-metadata))
 (common-lisp:defun make-audit-mitigation-actions-task-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            audit-mitigation-actions-task-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-actions-task-statistics ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-mitigation-actions-task-statistics
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-mitigation-actions-task-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audit-mitigation-actions-task-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-mitigation-actions-task-target-"))
   (audit-task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null))
   (finding-ids common-lisp:nil :type
    (common-lisp:or finding-ids common-lisp:null))
   (audit-check-to-reason-code-filter common-lisp:nil :type
    (common-lisp:or audit-check-to-reason-code-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-actions-task-target
                    'make-audit-mitigation-actions-task-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-task-id))
      (common-lisp:list
       (common-lisp:cons "auditTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-reason-code-filter))
      (common-lisp:list
       (common-lisp:cons "auditCheckToReasonCodeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-notification-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-notification-target-"))
   (target-arn common-lisp:nil :type
    (common-lisp:or target-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-notification-target
                    'make-audit-notification-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-notification-target-configurations ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-notification-target-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audit-suppression (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-suppression-"))
   (check-name (common-lisp:error ":checkname is required") :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (suppress-indefinitely common-lisp:nil :type
    (common-lisp:or suppress-indefinitely common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or audit-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-suppression 'make-audit-suppression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-suppression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-suppression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-suppression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-suppression-list ()
   '(trivial-types:proper-list audit-suppression))
 (common-lisp:defun make-audit-suppression-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-suppression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audit-task-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-task-metadata-"))
   (task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-task-status common-lisp:null))
   (task-type common-lisp:nil :type
    (common-lisp:or audit-task-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audit-task-metadata 'make-audit-task-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "taskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-task-metadata-list ()
   '(trivial-types:proper-list audit-task-metadata))
 (common-lisp:defun make-audit-task-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-task-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-task-status () 'common-lisp:string)
(common-lisp:deftype audit-task-type () 'common-lisp:string)
(common-lisp:deftype auth-decision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auth-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-auth-info-"))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or resources common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auth-info 'make-auth-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-infos () '(trivial-types:proper-list auth-info))
 (common-lisp:defun make-auth-infos
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auth-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-auth-result-"))
   (auth-info common-lisp:nil :type
    (common-lisp:or auth-info common-lisp:null))
   (allowed common-lisp:nil :type (common-lisp:or allowed common-lisp:null))
   (denied common-lisp:nil :type (common-lisp:or denied common-lisp:null))
   (auth-decision common-lisp:nil :type
    (common-lisp:or auth-decision common-lisp:null))
   (missing-context-values common-lisp:nil :type
    (common-lisp:or missing-context-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auth-result 'make-auth-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-info))
      (common-lisp:list
       (common-lisp:cons "authInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed))
      (common-lisp:list
       (common-lisp:cons "allowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denied))
      (common-lisp:list
       (common-lisp:cons "denied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-decision))
      (common-lisp:list
       (common-lisp:cons "authDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "missingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-results () '(trivial-types:proper-list auth-result))
 (common-lisp:defun make-auth-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype authorizer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (authorizer-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorizer-config-"))
   (default-authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (allow-authorizer-override common-lisp:nil :type
    (common-lisp:or allow-authorizer-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorizer-config 'make-authorizer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorizer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorizer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authorizer-name))
      (common-lisp:list
       (common-lisp:cons "defaultAuthorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-authorizer-override))
      (common-lisp:list
       (common-lisp:cons "allowAuthorizerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorizer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorizer-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorizer-description-"))
   (authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-arn common-lisp:nil :type
    (common-lisp:or authorizer-arn common-lisp:null))
   (authorizer-function-arn common-lisp:nil :type
    (common-lisp:or authorizer-function-arn common-lisp:null))
   (token-key-name common-lisp:nil :type
    (common-lisp:or token-key-name common-lisp:null))
   (token-signing-public-keys common-lisp:nil :type
    (common-lisp:or public-key-map common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or authorizer-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (signing-disabled common-lisp:nil :type
    (common-lisp:or boolean-key common-lisp:null))
   (enable-caching-for-http common-lisp:nil :type
    (common-lisp:or enable-caching-for-http common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorizer-description 'make-authorizer-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-disabled))
      (common-lisp:list
       (common-lisp:cons "signingDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   common-lisp:nil))
(common-lisp:deftype authorizer-function-arn () 'common-lisp:string)
(common-lisp:deftype authorizer-name () 'common-lisp:string)
(common-lisp:deftype authorizer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (authorizer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorizer-summary-"))
   (authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-arn common-lisp:nil :type
    (common-lisp:or authorizer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorizer-summary 'make-authorizer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorizer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorizer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorizer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorizers ()
   '(trivial-types:proper-list authorizer-summary))
 (common-lisp:defun make-authorizers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorizer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-registration-status () 'common-lisp:string)
(common-lisp:deftype average () 'common-lisp:double-float)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-job-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-job-id () 'common-lisp:string)
(common-lisp:deftype aws-iot-sql-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-abort-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-abort-config-"))
   (abort-criteria-list (common-lisp:error ":abortcriterialist is required")
    :type (common-lisp:or aws-job-abort-criteria-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-abort-config 'make-aws-job-abort-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-criteria-list))
      (common-lisp:list
       (common-lisp:cons "abortCriteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-abort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-abort-criteria-"))
   (failure-type (common-lisp:error ":failuretype is required") :type
    (common-lisp:or aws-job-abort-criteria-failure-type common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or aws-job-abort-criteria-abort-action common-lisp:null))
   (threshold-percentage (common-lisp:error ":thresholdpercentage is required")
    :type
    (common-lisp:or aws-job-abort-criteria-abort-threshold-percentage
                    common-lisp:null))
   (min-number-of-executed-things
    (common-lisp:error ":minnumberofexecutedthings is required") :type
    (common-lisp:or aws-job-abort-criteria-minimum-number-of-executed-things
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-abort-criteria 'make-aws-job-abort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "thresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-number-of-executed-things))
      (common-lisp:list
       (common-lisp:cons "minNumberOfExecutedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   common-lisp:nil))
(common-lisp:deftype aws-job-abort-criteria-abort-action () 'common-lisp:string)
(common-lisp:deftype aws-job-abort-criteria-abort-threshold-percentage ()
  'common-lisp:double-float)
(common-lisp:deftype aws-job-abort-criteria-failure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-job-abort-criteria-list ()
   '(trivial-types:proper-list aws-job-abort-criteria))
 (common-lisp:defun make-aws-job-abort-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-job-abort-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-job-abort-criteria-minimum-number-of-executed-things
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-executions-rollout-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-executions-rollout-config-"))
   (maximum-per-minute common-lisp:nil :type
    (common-lisp:or maximum-per-minute common-lisp:null))
   (exponential-rate common-lisp:nil :type
    (common-lisp:or aws-job-exponential-rollout-rate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-executions-rollout-config
                    'make-aws-job-executions-rollout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-per-minute))
      (common-lisp:list
       (common-lisp:cons "maximumPerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exponential-rate))
      (common-lisp:list
       (common-lisp:cons "exponentialRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-exponential-rollout-rate (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-exponential-rollout-rate-"))
   (base-rate-per-minute (common-lisp:error ":baserateperminute is required")
    :type (common-lisp:or aws-job-rollout-rate-per-minute common-lisp:null))
   (increment-factor (common-lisp:error ":incrementfactor is required") :type
    (common-lisp:or aws-job-rollout-increment-factor common-lisp:null))
   (rate-increase-criteria
    (common-lisp:error ":rateincreasecriteria is required") :type
    (common-lisp:or aws-job-rate-increase-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-exponential-rollout-rate
                    'make-aws-job-exponential-rollout-rate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-rate-per-minute))
      (common-lisp:list
       (common-lisp:cons "baseRatePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'increment-factor))
      (common-lisp:list
       (common-lisp:cons "incrementFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rate-increase-criteria))
      (common-lisp:list
       (common-lisp:cons "rateIncreaseCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-presigned-url-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-presigned-url-config-"))
   (expires-in-sec common-lisp:nil :type
    (common-lisp:or expires-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-presigned-url-config
                    'make-aws-job-presigned-url-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-sec))
      (common-lisp:list
       (common-lisp:cons "expiresInSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-rate-increase-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-rate-increase-criteria-"))
   (number-of-notified-things common-lisp:nil :type
    (common-lisp:or aws-job-rate-increase-criteria-number-of-things
                    common-lisp:null))
   (number-of-succeeded-things common-lisp:nil :type
    (common-lisp:or aws-job-rate-increase-criteria-number-of-things
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-rate-increase-criteria
                    'make-aws-job-rate-increase-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-notified-things))
      (common-lisp:list
       (common-lisp:cons "numberOfNotifiedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   common-lisp:nil))
(common-lisp:deftype aws-job-rate-increase-criteria-number-of-things ()
  'common-lisp:integer)
(common-lisp:deftype aws-job-rollout-increment-factor ()
  'common-lisp:double-float)
(common-lisp:deftype aws-job-rollout-rate-per-minute () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-job-timeout-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-job-timeout-config-"))
   (in-progress-timeout-in-minutes common-lisp:nil :type
    (common-lisp:or aws-job-timeout-in-progress-timeout-in-minutes
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-job-timeout-config 'make-aws-job-timeout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "inProgressTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   common-lisp:nil))
(common-lisp:deftype aws-job-timeout-in-progress-timeout-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype batch-mode () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (behavior (:copier common-lisp:nil) (:conc-name "struct-shape-behavior-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or behavior-name common-lisp:null))
   (metric common-lisp:nil :type
    (common-lisp:or behavior-metric common-lisp:null))
   (metric-dimension common-lisp:nil :type
    (common-lisp:or metric-dimension common-lisp:null))
   (criteria common-lisp:nil :type
    (common-lisp:or behavior-criteria common-lisp:null))
   (suppress-alerts common-lisp:nil :type
    (common-lisp:or suppress-alerts common-lisp:null))
   (export-metric common-lisp:nil :type
    (common-lisp:or export-metric common-lisp:null)))
 (common-lisp:export (common-lisp:list 'behavior 'make-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-dimension))
      (common-lisp:list
       (common-lisp:cons "metricDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppress-alerts))
      (common-lisp:list
       (common-lisp:cons "suppressAlerts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-metric))
      (common-lisp:list
       (common-lisp:cons "exportMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (behavior-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-behavior-criteria-"))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or metric-value common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or duration-seconds common-lisp:null))
   (consecutive-datapoints-to-alarm common-lisp:nil :type
    (common-lisp:or consecutive-datapoints-to-alarm common-lisp:null))
   (consecutive-datapoints-to-clear common-lisp:nil :type
    (common-lisp:or consecutive-datapoints-to-clear common-lisp:null))
   (statistical-threshold common-lisp:nil :type
    (common-lisp:or statistical-threshold common-lisp:null))
   (ml-detection-config common-lisp:nil :type
    (common-lisp:or machine-learning-detection-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'behavior-criteria 'make-behavior-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input behavior-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input behavior-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "durationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consecutive-datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "consecutiveDatapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consecutive-datapoints-to-clear))
      (common-lisp:list
       (common-lisp:cons "consecutiveDatapointsToClear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'statistical-threshold))
      (common-lisp:list
       (common-lisp:cons "statisticalThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ml-detection-config))
      (common-lisp:list
       (common-lisp:cons "mlDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input behavior-criteria))
   common-lisp:nil))
(common-lisp:deftype behavior-criteria-type () 'common-lisp:string)
(common-lisp:deftype behavior-metric () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype behavior-model-training-summaries ()
   '(trivial-types:proper-list behavior-model-training-summary))
 (common-lisp:defun make-behavior-model-training-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            behavior-model-training-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (behavior-model-training-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-behavior-model-training-summary-"))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior-name common-lisp:nil :type
    (common-lisp:or behavior-name common-lisp:null))
   (training-data-collection-start-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (model-status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (datapoints-collection-percentage common-lisp:nil :type
    (common-lisp:or data-collection-percentage common-lisp:null))
   (last-model-refresh-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'behavior-model-training-summary
                    'make-behavior-model-training-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior-name))
      (common-lisp:list
       (common-lisp:cons "behaviorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-collection-start-date))
      (common-lisp:list
       (common-lisp:cons "trainingDataCollectionStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "modelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datapoints-collection-percentage))
      (common-lisp:list
       (common-lisp:cons "datapointsCollectionPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-model-refresh-date))
      (common-lisp:list
       (common-lisp:cons "lastModelRefreshDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   common-lisp:nil))
(common-lisp:deftype behavior-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype behaviors () '(trivial-types:proper-list behavior))
 (common-lisp:defun make-behaviors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list behavior))
   aws-sdk/generator/shape::members))
(common-lisp:deftype billing-group-arn () 'common-lisp:string)
(common-lisp:deftype billing-group-description () 'common-lisp:string)
(common-lisp:deftype billing-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (billing-group-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-billing-group-metadata-"))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'billing-group-metadata 'make-billing-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   common-lisp:nil))
(common-lisp:deftype billing-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype billing-group-name-and-arn-list ()
   '(trivial-types:proper-list group-name-and-arn))
 (common-lisp:defun make-billing-group-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (billing-group-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-billing-group-properties-"))
   (billing-group-description common-lisp:nil :type
    (common-lisp:or billing-group-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'billing-group-properties 'make-billing-group-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-description))
      (common-lisp:list
       (common-lisp:cons "billingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-key () 'common-lisp:boolean)
(common-lisp:deftype boolean-wrapper-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket (:copier common-lisp:nil) (:conc-name "struct-shape-bucket-"))
   (key-value common-lisp:nil :type
    (common-lisp:or bucket-key-value common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-value))
      (common-lisp:list
       (common-lisp:cons "keyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:deftype bucket-key-value () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-buckets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (buckets-aggregation-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-buckets-aggregation-type-"))
   (terms-aggregation common-lisp:nil :type
    (common-lisp:or terms-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'buckets-aggregation-type 'make-buckets-aggregation-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terms-aggregation))
      (common-lisp:list
       (common-lisp:cons "termsAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cacertificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-cacertificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cacertificate 'make-cacertificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cacertificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cacertificate-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-cacertificate-description-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (customer-version common-lisp:nil :type
    (common-lisp:or customer-version common-lisp:null))
   (generation-id common-lisp:nil :type
    (common-lisp:or generation-id common-lisp:null))
   (validity common-lisp:nil :type
    (common-lisp:or certificate-validity common-lisp:null))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or certificate-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cacertificate-description
                    'make-cacertificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-registration-status))
      (common-lisp:list
       (common-lisp:cons "autoRegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-version))
      (common-lisp:list
       (common-lisp:cons "customerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   common-lisp:nil))
(common-lisp:deftype cacertificate-status () 'common-lisp:string)
(common-lisp:deftype cacertificate-update-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificates ()
   '(trivial-types:proper-list cacertificate))
 (common-lisp:defun make-cacertificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cacertificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-audit-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-audit-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-mitigation-actions-task-request
                    'make-cancel-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-audit-mitigation-actions-task-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-audit-mitigation-actions-task-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-mitigation-actions-task-response
                    'make-cancel-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-audit-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-audit-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or audit-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-task-request
                    'make-cancel-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-audit-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-audit-task-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-task-response
                    'make-cancel-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-certificate-transfer-request
                    'make-cancel-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-detect-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-detect-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-detect-mitigation-actions-task-request
                    'make-cancel-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-detect-mitigation-actions-task-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-detect-mitigation-actions-task-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-detect-mitigation-actions-task-response
                    'make-cancel-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-execution-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or force-flag common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or expected-version common-lisp:null))
   (status-details common-lisp:nil :type
    (common-lisp:or details-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-execution-request
                    'make-cancel-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "statusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (reason-code common-lisp:nil :type
    (common-lisp:or reason-code common-lisp:null))
   (comment common-lisp:nil :type (common-lisp:or comment common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or force-flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "reasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-response-"))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:deftype canceled-checks-count () 'common-lisp:integer)
(common-lisp:deftype canceled-findings-count () 'common-lisp:integer)
(common-lisp:deftype canceled-things () 'common-lisp:integer)
(common-lisp:deftype canned-access-control-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or certificate-mode common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-conflict-exception
                    'certificate-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-description-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (ca-certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (previous-owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (customer-version common-lisp:nil :type
    (common-lisp:or customer-version common-lisp:null))
   (transfer-data common-lisp:nil :type
    (common-lisp:or transfer-data common-lisp:null))
   (generation-id common-lisp:nil :type
    (common-lisp:or generation-id common-lisp:null))
   (validity common-lisp:nil :type
    (common-lisp:or certificate-validity common-lisp:null))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or certificate-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-description 'make-certificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-id))
      (common-lisp:list
       (common-lisp:cons "caCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-owned-by))
      (common-lisp:list
       (common-lisp:cons "previousOwnedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-version))
      (common-lisp:list
       (common-lisp:cons "customerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-data))
      (common-lisp:list
       (common-lisp:cons "transferData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   common-lisp:nil))
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:deftype certificate-mode () 'common-lisp:string)
(common-lisp:deftype certificate-name () 'common-lisp:string)
(common-lisp:deftype certificate-path-on-device () 'common-lisp:string)
(common-lisp:deftype certificate-pem () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-provider-account-default-for-operations ()
   '(trivial-types:proper-list certificate-provider-operation))
 (common-lisp:defun make-certificate-provider-account-default-for-operations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-provider-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-provider-arn () 'common-lisp:string)
(common-lisp:deftype certificate-provider-function-arn () 'common-lisp:string)
(common-lisp:deftype certificate-provider-name () 'common-lisp:string)
(common-lisp:deftype certificate-provider-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-provider-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-provider-summary-"))
   (certificate-provider-name common-lisp:nil :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (certificate-provider-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-provider-summary
                    'make-certificate-provider-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-providers ()
   '(trivial-types:proper-list certificate-provider-summary))
 (common-lisp:defun make-certificate-providers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-provider-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-signing-request () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-state-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-state-exception
                    'certificate-state-exception-message)))
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-exception
                    'certificate-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-validity (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-validity-"))
   (not-before common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (not-after common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-validity 'make-certificate-validity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-validity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificates () '(trivial-types:proper-list certificate))
 (common-lisp:defun make-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:deftype check-compliant () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidrs () '(trivial-types:proper-list cidr))
 (common-lisp:defun make-cidrs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (clear-default-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-clear-default-authorizer-request-")))
 (common-lisp:export
  (common-lisp:list 'clear-default-authorizer-request
                    'make-clear-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (clear-default-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-clear-default-authorizer-response-")))
 (common-lisp:export
  (common-lisp:list 'clear-default-authorizer-response
                    'make-clear-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-client-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-alarm-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-alarm-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (alarm-name (common-lisp:error ":alarmname is required") :type
    (common-lisp:or alarm-name common-lisp:null))
   (state-reason (common-lisp:error ":statereason is required") :type
    (common-lisp:or state-reason common-lisp:null))
   (state-value (common-lisp:error ":statevalue is required") :type
    (common-lisp:or state-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-alarm-action 'make-cloudwatch-alarm-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "stateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-value))
      (common-lisp:list
       (common-lisp:cons "stateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-logs-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-logs-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (batch-mode common-lisp:nil :type
    (common-lisp:or batch-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-action 'make-cloudwatch-logs-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-metric-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-metric-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (metric-namespace (common-lisp:error ":metricnamespace is required") :type
    (common-lisp:or string common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or string common-lisp:null))
   (metric-value (common-lisp:error ":metricvalue is required") :type
    (common-lisp:or string common-lisp:null))
   (metric-unit (common-lisp:error ":metricunit is required") :type
    (common-lisp:or string common-lisp:null))
   (metric-timestamp common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-metric-action 'make-cloudwatch-metric-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-unit))
      (common-lisp:list
       (common-lisp:cons "metricUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-timestamp))
      (common-lisp:list
       (common-lisp:cons "metricTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   common-lisp:nil))
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-signing (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-signing-"))
   (aws-signer-job-id common-lisp:nil :type
    (common-lisp:or signing-job-id common-lisp:null))
   (start-signing-job-parameter common-lisp:nil :type
    (common-lisp:or start-signing-job-parameter common-lisp:null))
   (custom-code-signing common-lisp:nil :type
    (common-lisp:or custom-code-signing common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-signing 'make-code-signing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-signing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-signing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-signer-job-id))
      (common-lisp:list
       (common-lisp:cons "awsSignerJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-signing-job-parameter))
      (common-lisp:list
       (common-lisp:cons "startSigningJobParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-code-signing))
      (common-lisp:list
       (common-lisp:cons "customCodeSigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-signing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-signing-certificate-chain (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-signing-certificate-chain-"))
   (certificate-name common-lisp:nil :type
    (common-lisp:or certificate-name common-lisp:null))
   (inline-document common-lisp:nil :type
    (common-lisp:or inline-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-signing-certificate-chain
                    'make-code-signing-certificate-chain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inline-document))
      (common-lisp:list
       (common-lisp:cons "inlineDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-signing-signature (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-signing-signature-"))
   (inline-document common-lisp:nil :type
    (common-lisp:or signature common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-signing-signature 'make-code-signing-signature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inline-document))
      (common-lisp:list
       (common-lisp:cons "inlineDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   common-lisp:nil))
(common-lisp:deftype cognito-identity-pool-id () 'common-lisp:string)
(common-lisp:deftype comment () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:deftype compliant-checks-count () 'common-lisp:integer)
(common-lisp:deftype confidence-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-topic-rule-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-topic-rule-destination-request-"))
   (confirmation-token (common-lisp:error ":confirmationtoken is required")
    :type (common-lisp:or confirmation-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-topic-rule-destination-request
                    'make-confirm-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-topic-rule-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-topic-rule-destination-response-")))
 (common-lisp:export
  (common-lisp:list 'confirm-topic-rule-destination-response
                    'make-confirm-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:deftype confirmation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-resource-update-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-resource-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-resource-update-exception
                    'conflicting-resource-update-exception-message)))
(common-lisp:deftype connectivity-timestamp () 'common-lisp:integer)
(common-lisp:deftype consecutive-datapoints-to-alarm () 'common-lisp:integer)
(common-lisp:deftype consecutive-datapoints-to-clear () 'common-lisp:integer)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype correlation-data () 'common-lisp:string)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-audit-suppression-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-audit-suppression-request-"))
   (check-name (common-lisp:error ":checkname is required") :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (suppress-indefinitely common-lisp:nil :type
    (common-lisp:or suppress-indefinitely common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or audit-description common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-audit-suppression-request
                    'make-create-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-audit-suppression-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-audit-suppression-response-")))
 (common-lisp:export
  (common-lisp:list 'create-audit-suppression-response
                    'make-create-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-function-arn
    (common-lisp:error ":authorizerfunctionarn is required") :type
    (common-lisp:or authorizer-function-arn common-lisp:null))
   (token-key-name common-lisp:nil :type
    (common-lisp:or token-key-name common-lisp:null))
   (token-signing-public-keys common-lisp:nil :type
    (common-lisp:or public-key-map common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or authorizer-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (signing-disabled common-lisp:nil :type
    (common-lisp:or boolean-key common-lisp:null))
   (enable-caching-for-http common-lisp:nil :type
    (common-lisp:or enable-caching-for-http common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-authorizer-request
                    'make-create-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-disabled))
      (common-lisp:list
       (common-lisp:cons "signingDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-authorizer-response-"))
   (authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-arn common-lisp:nil :type
    (common-lisp:or authorizer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-authorizer-response
                    'make-create-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-billing-group-request-"))
   (billing-group-name (common-lisp:error ":billinggroupname is required")
    :type (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-properties common-lisp:nil :type
    (common-lisp:or billing-group-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-billing-group-request
                    'make-create-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-billing-group-response-"))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-arn common-lisp:nil :type
    (common-lisp:or billing-group-arn common-lisp:null))
   (billing-group-id common-lisp:nil :type
    (common-lisp:or billing-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-billing-group-response
                    'make-create-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-id))
      (common-lisp:list
       (common-lisp:cons "billingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-from-csr-request-"))
   (certificate-signing-request
    (common-lisp:error ":certificatesigningrequest is required") :type
    (common-lisp:or certificate-signing-request common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-request
                    'make-create-certificate-from-csr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-signing-request))
      (common-lisp:list
       (common-lisp:cons "certificateSigningRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-from-csr-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-response
                    'make-create-certificate-from-csr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-provider-request-"))
   (certificate-provider-name
    (common-lisp:error ":certificateprovidername is required") :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (lambda-function-arn (common-lisp:error ":lambdafunctionarn is required")
    :type (common-lisp:or certificate-provider-function-arn common-lisp:null))
   (account-default-for-operations
    (common-lisp:error ":accountdefaultforoperations is required") :type
    (common-lisp:or certificate-provider-account-default-for-operations
                    common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-provider-request
                    'make-create-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-provider-response-"))
   (certificate-provider-name common-lisp:nil :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (certificate-provider-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-provider-response
                    'make-create-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or custom-metric-display-name common-lisp:null))
   (metric-type (common-lisp:error ":metrictype is required") :type
    (common-lisp:or custom-metric-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-metric-request
                    'make-create-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-metric-response-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or custom-metric-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-metric-response
                    'make-create-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dimension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dimension-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dimension-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or dimension-type common-lisp:null))
   (string-values (common-lisp:error ":stringvalues is required") :type
    (common-lisp:or dimension-string-values common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dimension-request 'make-create-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dimension-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dimension-response-"))
   (name common-lisp:nil :type
    (common-lisp:or dimension-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or dimension-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dimension-response
                    'make-create-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-configuration-request-"))
   (domain-configuration-name
    (common-lisp:error ":domainconfigurationname is required") :type
    (common-lisp:or domain-configuration-name common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (server-certificate-arns common-lisp:nil :type
    (common-lisp:or server-certificate-arns common-lisp:null))
   (validation-certificate-arn common-lisp:nil :type
    (common-lisp:or acm-certificate-arn common-lisp:null))
   (authorizer-config common-lisp:nil :type
    (common-lisp:or authorizer-config common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or service-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (tls-config common-lisp:nil :type
    (common-lisp:or tls-config common-lisp:null))
   (server-certificate-config common-lisp:nil :type
    (common-lisp:or server-certificate-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-configuration-request
                    'make-create-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-arns))
      (common-lisp:list
       (common-lisp:cons "serverCertificateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "validationCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-configuration-response-"))
   (domain-configuration-name common-lisp:nil :type
    (common-lisp:or domain-configuration-name common-lisp:null))
   (domain-configuration-arn common-lisp:nil :type
    (common-lisp:or domain-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-configuration-response
                    'make-create-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dynamic-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dynamic-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-properties common-lisp:nil :type
    (common-lisp:or thing-group-properties common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dynamic-thing-group-request
                    'make-create-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dynamic-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dynamic-thing-group-response-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dynamic-thing-group-response
                    'make-create-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fleet-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fleet-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-type (common-lisp:error ":aggregationtype is required") :type
    (common-lisp:or aggregation-type common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or fleet-metric-period common-lisp:null))
   (aggregation-field (common-lisp:error ":aggregationfield is required") :type
    (common-lisp:or aggregation-field common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or fleet-metric-description common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or fleet-metric-unit common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-metric-request
                    'make-create-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fleet-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fleet-metric-response-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or fleet-metric-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-metric-response
                    'make-create-fleet-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or job-targets common-lisp:null))
   (document-source common-lisp:nil :type
    (common-lisp:or job-document-source common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or job-document common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (presigned-url-config common-lisp:nil :type
    (common-lisp:or presigned-url-config common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or job-executions-rollout-config common-lisp:null))
   (abort-config common-lisp:nil :type
    (common-lisp:or abort-config common-lisp:null))
   (timeout-config common-lisp:nil :type
    (common-lisp:or timeout-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null))
   (job-template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (job-executions-retry-config common-lisp:nil :type
    (common-lisp:or job-executions-retry-config common-lisp:null))
   (document-parameters common-lisp:nil :type
    (common-lisp:or parameter-map common-lisp:null))
   (scheduling-config common-lisp:nil :type
    (common-lisp:or scheduling-config common-lisp:null))
   (destination-package-versions common-lisp:nil :type
    (common-lisp:or destination-package-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "namespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-config))
      (common-lisp:list
       (common-lisp:cons "schedulingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-response-"))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-template-request-"))
   (job-template-id (common-lisp:error ":jobtemplateid is required") :type
    (common-lisp:or job-template-id common-lisp:null))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (document-source common-lisp:nil :type
    (common-lisp:or job-document-source common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or job-document common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or job-description common-lisp:null))
   (presigned-url-config common-lisp:nil :type
    (common-lisp:or presigned-url-config common-lisp:null))
   (job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or job-executions-rollout-config common-lisp:null))
   (abort-config common-lisp:nil :type
    (common-lisp:or abort-config common-lisp:null))
   (timeout-config common-lisp:nil :type
    (common-lisp:or timeout-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (job-executions-retry-config common-lisp:nil :type
    (common-lisp:or job-executions-retry-config common-lisp:null))
   (maintenance-windows common-lisp:nil :type
    (common-lisp:or maintenance-windows common-lisp:null))
   (destination-package-versions common-lisp:nil :type
    (common-lisp:or destination-package-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-template-request
                    'make-create-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-template-response-"))
   (job-template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (job-template-id common-lisp:nil :type
    (common-lisp:or job-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-template-response
                    'make-create-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-keys-and-certificate-request-"))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-request
                    'make-create-keys-and-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-keys-and-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-response
                    'make-create-keys-and-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mitigation-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mitigation-action-request-"))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (action-params (common-lisp:error ":actionparams is required") :type
    (common-lisp:or mitigation-action-params common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mitigation-action-request
                    'make-create-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mitigation-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mitigation-action-response-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or mitigation-action-arn common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or mitigation-action-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mitigation-action-response
                    'make-create-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-otaupdate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-otaupdate-request-"))
   (ota-update-id (common-lisp:error ":otaupdateid is required") :type
    (common-lisp:or otaupdate-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or otaupdate-description common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or targets common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (aws-job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or aws-job-executions-rollout-config common-lisp:null))
   (aws-job-presigned-url-config common-lisp:nil :type
    (common-lisp:or aws-job-presigned-url-config common-lisp:null))
   (aws-job-abort-config common-lisp:nil :type
    (common-lisp:or aws-job-abort-config common-lisp:null))
   (aws-job-timeout-config common-lisp:nil :type
    (common-lisp:or aws-job-timeout-config common-lisp:null))
   (files (common-lisp:error ":files is required") :type
    (common-lisp:or otaupdate-files common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (additional-parameters common-lisp:nil :type
    (common-lisp:or additional-parameter-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-otaupdate-request 'make-create-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "awsJobPresignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-abort-config))
      (common-lisp:list
       (common-lisp:cons "awsJobAbortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-timeout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobTimeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-parameters))
      (common-lisp:list
       (common-lisp:cons "additionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-otaupdate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-otaupdate-response-"))
   (ota-update-id common-lisp:nil :type
    (common-lisp:or otaupdate-id common-lisp:null))
   (aws-iot-job-id common-lisp:nil :type
    (common-lisp:or aws-iot-job-id common-lisp:null))
   (ota-update-arn common-lisp:nil :type
    (common-lisp:or otaupdate-arn common-lisp:null))
   (aws-iot-job-arn common-lisp:nil :type
    (common-lisp:or aws-iot-job-arn common-lisp:null))
   (ota-update-status common-lisp:nil :type
    (common-lisp:or otaupdate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-otaupdate-response
                    'make-create-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-id))
      (common-lisp:list
       (common-lisp:cons "awsIotJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-arn))
      (common-lisp:list
       (common-lisp:cons "awsIotJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-status))
      (common-lisp:list
       (common-lisp:cons "otaUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-response-"))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (package-arn common-lisp:nil :type
    (common-lisp:or package-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "packageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-version-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (version-name (common-lisp:error ":versionname is required") :type
    (common-lisp:or version-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or resource-attributes common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-version-request
                    'make-create-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-version-response-"))
   (package-version-arn common-lisp:nil :type
    (common-lisp:or package-version-arn common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or resource-attributes common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (error-reason common-lisp:nil :type
    (common-lisp:or package-version-error-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-version-response
                    'make-create-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version-arn))
      (common-lisp:list
       (common-lisp:cons "packageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "errorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-response-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or set-as-default common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-response-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-claim-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-provisioning-claim-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-claim-request
                    'make-create-provisioning-claim-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-claim-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-provisioning-claim-response-"))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-claim-response
                    'make-create-provisioning-claim-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-provisioning-template-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (template-body (common-lisp:error ":templatebody is required") :type
    (common-lisp:or template-body common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (provisioning-role-arn
    (common-lisp:error ":provisioningrolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (pre-provisioning-hook common-lisp:nil :type
    (common-lisp:or provisioning-hook common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-request
                    'make-create-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-provisioning-template-response-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-response
                    'make-create-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-template-version-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-provisioning-template-version-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (template-body (common-lisp:error ":templatebody is required") :type
    (common-lisp:or template-body common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or set-as-default common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-version-request
                    'make-create-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-provisioning-template-version-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-provisioning-template-version-response-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-version-response
                    'make-create-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-role-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-role-alias-request-"))
   (role-alias (common-lisp:error ":rolealias is required") :type
    (common-lisp:or role-alias common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (credential-duration-seconds common-lisp:nil :type
    (common-lisp:or credential-duration-seconds common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-alias-request
                    'make-create-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-role-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-role-alias-response-"))
   (role-alias common-lisp:nil :type
    (common-lisp:or role-alias common-lisp:null))
   (role-alias-arn common-lisp:nil :type
    (common-lisp:or role-alias-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-alias-response
                    'make-create-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-scheduled-audit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scheduled-audit-request-"))
   (frequency (common-lisp:error ":frequency is required") :type
    (common-lisp:or audit-frequency common-lisp:null))
   (day-of-month common-lisp:nil :type
    (common-lisp:or day-of-month common-lisp:null))
   (day-of-week common-lisp:nil :type
    (common-lisp:or day-of-week common-lisp:null))
   (target-check-names (common-lisp:error ":targetchecknames is required")
    :type (common-lisp:or target-audit-check-names common-lisp:null))
   (scheduled-audit-name (common-lisp:error ":scheduledauditname is required")
    :type (common-lisp:or scheduled-audit-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-audit-request
                    'make-create-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-scheduled-audit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scheduled-audit-response-"))
   (scheduled-audit-arn common-lisp:nil :type
    (common-lisp:or scheduled-audit-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-audit-response
                    'make-create-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (behaviors common-lisp:nil :type
    (common-lisp:or behaviors common-lisp:null))
   (alert-targets common-lisp:nil :type
    (common-lisp:or alert-targets common-lisp:null))
   (additional-metrics-to-retain common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-list common-lisp:null))
   (additional-metrics-to-retain-v2 common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-v2list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (metrics-export-config common-lisp:nil :type
    (common-lisp:or metrics-export-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-request
                    'make-create-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-profile-response-"))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-arn common-lisp:nil :type
    (common-lisp:or security-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-response
                    'make-create-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stream-request-"))
   (stream-id (common-lisp:error ":streamid is required") :type
    (common-lisp:or stream-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null))
   (files (common-lisp:error ":files is required") :type
    (common-lisp:or stream-files common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stream-request 'make-create-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stream-response-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or stream-id common-lisp:null))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null))
   (stream-version common-lisp:nil :type
    (common-lisp:or stream-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stream-response 'make-create-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (parent-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-properties common-lisp:nil :type
    (common-lisp:or thing-group-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-group-request
                    'make-create-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-name))
      (common-lisp:list
       (common-lisp:cons "parentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-group-response-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-group-response
                    'make-create-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-request 'make-create-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-response-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (thing-id common-lisp:nil :type (common-lisp:or thing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-response 'make-create-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-request
                    'make-create-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-type-response-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-arn common-lisp:nil :type
    (common-lisp:or thing-type-arn common-lisp:null))
   (thing-type-id common-lisp:nil :type
    (common-lisp:or thing-type-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-response
                    'make-create-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-id))
      (common-lisp:list
       (common-lisp:cons "thingTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-topic-rule-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-topic-rule-destination-request-"))
   (destination-configuration
    (common-lisp:error ":destinationconfiguration is required") :type
    (common-lisp:or topic-rule-destination-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-destination-request
                    'make-create-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configuration))
      (common-lisp:list
       (common-lisp:cons "destinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-topic-rule-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-topic-rule-destination-response-"))
   (topic-rule-destination common-lisp:nil :type
    (common-lisp:or topic-rule-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-destination-response
                    'make-create-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-rule-destination))
      (common-lisp:list
       (common-lisp:cons "topicRuleDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload (common-lisp:error ":topicrulepayload is required")
    :type (common-lisp:or topic-rule-payload common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-request
                    'make-create-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload)))
(common-lisp:deftype created-at-date () 'common-lisp:string)
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype credential-duration-seconds () 'common-lisp:integer)
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-code-signing (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-code-signing-"))
   (signature common-lisp:nil :type
    (common-lisp:or code-signing-signature common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or code-signing-certificate-chain common-lisp:null))
   (hash-algorithm common-lisp:nil :type
    (common-lisp:or hash-algorithm common-lisp:null))
   (signature-algorithm common-lisp:nil :type
    (common-lisp:or signature-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-code-signing 'make-custom-code-signing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-code-signing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-code-signing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "hashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-code-signing))
   common-lisp:nil))
(common-lisp:deftype custom-metric-arn () 'common-lisp:string)
(common-lisp:deftype custom-metric-display-name () 'common-lisp:string)
(common-lisp:deftype custom-metric-type () 'common-lisp:string)
(common-lisp:deftype customer-version () 'common-lisp:integer)
(common-lisp:deftype data-collection-percentage () 'common-lisp:double-float)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:deftype day-of-month () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-audit-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-audit-configuration-request-"))
   (delete-scheduled-audits common-lisp:nil :type
    (common-lisp:or delete-scheduled-audits common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-audit-configuration-request
                    'make-delete-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-audit-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-account-audit-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-account-audit-configuration-response
                    'make-delete-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:deftype delete-additional-metrics-to-retain ()
  'common-lisp:boolean)
(common-lisp:deftype delete-alert-targets () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-audit-suppression-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-audit-suppression-request-"))
   (check-name (common-lisp:error ":checkname is required") :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-audit-suppression-request
                    'make-delete-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-audit-suppression-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-audit-suppression-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-audit-suppression-response
                    'make-delete-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-authorizer-request
                    'make-delete-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-authorizer-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-authorizer-response
                    'make-delete-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype delete-behaviors () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-billing-group-request-"))
   (billing-group-name (common-lisp:error ":billinggroupname is required")
    :type (common-lisp:or billing-group-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-billing-group-request
                    'make-delete-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-billing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-billing-group-response
                    'make-delete-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-request
                    'make-delete-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cacertificate-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-response
                    'make-delete-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-provider-request-"))
   (certificate-provider-name
    (common-lisp:error ":certificateprovidername is required") :type
    (common-lisp:or certificate-provider-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-provider-request
                    'make-delete-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-provider-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-provider-response
                    'make-delete-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or force-delete common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition delete-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delete-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'delete-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metric-request
                    'make-delete-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-metric-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metric-response
                    'make-delete-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dimension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dimension-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dimension-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dimension-request 'make-delete-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dimension-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dimension-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-dimension-response
                    'make-delete-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-configuration-request-"))
   (domain-configuration-name
    (common-lisp:error ":domainconfigurationname is required") :type
    (common-lisp:or domain-configuration-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-configuration-request
                    'make-delete-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-domain-configuration-response
                    'make-delete-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dynamic-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dynamic-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dynamic-thing-group-request
                    'make-delete-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dynamic-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dynamic-thing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-dynamic-thing-group-response
                    'make-delete-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-fleet-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-fleet-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-metric-request
                    'make-delete-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-execution-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (execution-number (common-lisp:error ":executionnumber is required") :type
    (common-lisp:or execution-number common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or force-flag common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-execution-request
                    'make-delete-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or force-flag common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-template-request-"))
   (job-template-id (common-lisp:error ":jobtemplateid is required") :type
    (common-lisp:or job-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-template-request
                    'make-delete-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   common-lisp:nil))
(common-lisp:deftype delete-metrics-export-config () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mitigation-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mitigation-action-request-"))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or mitigation-action-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mitigation-action-request
                    'make-delete-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mitigation-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mitigation-action-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-mitigation-action-response
                    'make-delete-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-otaupdate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-otaupdate-request-"))
   (ota-update-id (common-lisp:error ":otaupdateid is required") :type
    (common-lisp:or otaupdate-id common-lisp:null))
   (delete-stream common-lisp:nil :type
    (common-lisp:or delete-stream common-lisp:null))
   (force-delete-awsjob common-lisp:nil :type
    (common-lisp:or force-delete-awsjob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-otaupdate-request 'make-delete-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-otaupdate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-otaupdate-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-otaupdate-response
                    'make-delete-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-version-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (version-name (common-lisp:error ":versionname is required") :type
    (common-lisp:or version-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-version-request
                    'make-delete-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-version-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-package-version-response
                    'make-delete-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-provisioning-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-provisioning-template-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-request
                    'make-delete-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-provisioning-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-provisioning-template-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-response
                    'make-delete-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-provisioning-template-version-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-provisioning-template-version-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (version-id (common-lisp:error ":versionid is required") :type
    (common-lisp:or template-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-version-request
                    'make-delete-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-provisioning-template-version-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-provisioning-template-version-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-version-response
                    'make-delete-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-code-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-request
                    'make-delete-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-code-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-response
                    'make-delete-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-role-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-role-alias-request-"))
   (role-alias (common-lisp:error ":rolealias is required") :type
    (common-lisp:or role-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-alias-request
                    'make-delete-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-role-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-role-alias-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-role-alias-response
                    'make-delete-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scheduled-audit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scheduled-audit-request-"))
   (scheduled-audit-name (common-lisp:error ":scheduledauditname is required")
    :type (common-lisp:or scheduled-audit-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-audit-request
                    'make-delete-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scheduled-audit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scheduled-audit-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-audit-response
                    'make-delete-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:deftype delete-scheduled-audits () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-security-profile-request
                    'make-delete-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-profile-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-security-profile-response
                    'make-delete-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   common-lisp:nil))
(common-lisp:deftype delete-stream () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stream-request-"))
   (stream-id (common-lisp:error ":streamid is required") :type
    (common-lisp:or stream-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stream-request 'make-delete-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stream-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-stream-response 'make-delete-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-group-request
                    'make-delete-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-thing-group-response
                    'make-delete-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-request 'make-delete-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-thing-response 'make-delete-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-request
                    'make-delete-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-type-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-response
                    'make-delete-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-topic-rule-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-topic-rule-destination-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-destination-request
                    'make-delete-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-topic-rule-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-topic-rule-destination-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-destination-response
                    'make-delete-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-request
                    'make-delete-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-v2logging-level-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-v2logging-level-request-"))
   (target-type (common-lisp:error ":targettype is required") :type
    (common-lisp:or log-target-type common-lisp:null))
   (target-name (common-lisp:error ":targetname is required") :type
    (common-lisp:or log-target-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-v2logging-level-request
                    'make-delete-v2logging-level-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   common-lisp:nil))
(common-lisp:deftype delivery-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (denied (:copier common-lisp:nil) (:conc-name "struct-shape-denied-"))
   (implicit-deny common-lisp:nil :type
    (common-lisp:or implicit-deny common-lisp:null))
   (explicit-deny common-lisp:nil :type
    (common-lisp:or explicit-deny common-lisp:null)))
 (common-lisp:export (common-lisp:list 'denied 'make-denied))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input denied))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input denied))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implicit-deny))
      (common-lisp:list
       (common-lisp:cons "implicitDeny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-deny))
      (common-lisp:list
       (common-lisp:cons "explicitDeny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input denied))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null))
   (undo-deprecate common-lisp:nil :type
    (common-lisp:or undo-deprecate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-request
                    'make-deprecate-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'undo-deprecate))
      (common-lisp:list
       (common-lisp:cons "undoDeprecate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-thing-type-response-")))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-response
                    'make-deprecate-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype deprecation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-audit-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-account-audit-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-account-audit-configuration-request
                    'make-describe-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-audit-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-account-audit-configuration-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (audit-notification-target-configurations common-lisp:nil :type
    (common-lisp:or audit-notification-target-configurations common-lisp:null))
   (audit-check-configurations common-lisp:nil :type
    (common-lisp:or audit-check-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-audit-configuration-response
                    'make-describe-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-notification-target-configurations))
      (common-lisp:list
       (common-lisp:cons "auditNotificationTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-configurations))
      (common-lisp:list
       (common-lisp:cons "auditCheckConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-finding-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-finding-request-"))
   (finding-id (common-lisp:error ":findingid is required") :type
    (common-lisp:or finding-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-finding-request
                    'make-describe-audit-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-finding-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-finding-response-"))
   (finding common-lisp:nil :type
    (common-lisp:or audit-finding common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-finding-response
                    'make-describe-audit-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding))
      (common-lisp:list
       (common-lisp:cons "finding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-audit-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-mitigation-actions-task-request
                    'make-describe-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-mitigation-actions-task-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-audit-mitigation-actions-task-response-"))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (task-statistics common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-statistics common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-target common-lisp:null))
   (audit-check-to-actions-mapping common-lisp:nil :type
    (common-lisp:or audit-check-to-actions-mapping common-lisp:null))
   (actions-definition common-lisp:nil :type
    (common-lisp:or mitigation-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-mitigation-actions-task-response
                    'make-describe-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-actions-mapping))
      (common-lisp:list
       (common-lisp:cons "auditCheckToActionsMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-definition))
      (common-lisp:list
       (common-lisp:cons "actionsDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-suppression-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-suppression-request-"))
   (check-name (common-lisp:error ":checkname is required") :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-suppression-request
                    'make-describe-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-suppression-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-suppression-response-"))
   (check-name common-lisp:nil :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or resource-identifier common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (suppress-indefinitely common-lisp:nil :type
    (common-lisp:or suppress-indefinitely common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or audit-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-suppression-response
                    'make-describe-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or audit-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-task-request
                    'make-describe-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-audit-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-audit-task-response-"))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-task-status common-lisp:null))
   (task-type common-lisp:nil :type
    (common-lisp:or audit-task-type common-lisp:null))
   (task-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (task-statistics common-lisp:nil :type
    (common-lisp:or task-statistics common-lisp:null))
   (scheduled-audit-name common-lisp:nil :type
    (common-lisp:or scheduled-audit-name common-lisp:null))
   (audit-details common-lisp:nil :type
    (common-lisp:or audit-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-audit-task-response
                    'make-describe-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "taskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-details))
      (common-lisp:list
       (common-lisp:cons "auditDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-authorizer-request
                    'make-describe-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-authorizer-response-"))
   (authorizer-description common-lisp:nil :type
    (common-lisp:or authorizer-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-authorizer-response
                    'make-describe-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-description))
      (common-lisp:list
       (common-lisp:cons "authorizerDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-billing-group-request-"))
   (billing-group-name (common-lisp:error ":billinggroupname is required")
    :type (common-lisp:or billing-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-billing-group-request
                    'make-describe-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-billing-group-response-"))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-id common-lisp:nil :type
    (common-lisp:or billing-group-id common-lisp:null))
   (billing-group-arn common-lisp:nil :type
    (common-lisp:or billing-group-arn common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (billing-group-properties common-lisp:nil :type
    (common-lisp:or billing-group-properties common-lisp:null))
   (billing-group-metadata common-lisp:nil :type
    (common-lisp:or billing-group-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-billing-group-response
                    'make-describe-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-id))
      (common-lisp:list
       (common-lisp:cons "billingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-metadata))
      (common-lisp:list
       (common-lisp:cons "billingGroupMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-request
                    'make-describe-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cacertificate-response-"))
   (certificate-description common-lisp:nil :type
    (common-lisp:or cacertificate-description common-lisp:null))
   (registration-config common-lisp:nil :type
    (common-lisp:or registration-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-response
                    'make-describe-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-provider-request-"))
   (certificate-provider-name
    (common-lisp:error ":certificateprovidername is required") :type
    (common-lisp:or certificate-provider-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-provider-request
                    'make-describe-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-provider-response-"))
   (certificate-provider-name common-lisp:nil :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (certificate-provider-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-arn common-lisp:null))
   (lambda-function-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-function-arn common-lisp:null))
   (account-default-for-operations common-lisp:nil :type
    (common-lisp:or certificate-provider-account-default-for-operations
                    common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-provider-response
                    'make-describe-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-response-"))
   (certificate-description common-lisp:nil :type
    (common-lisp:or certificate-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-metric-request
                    'make-describe-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-metric-response-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or custom-metric-arn common-lisp:null))
   (metric-type common-lisp:nil :type
    (common-lisp:or custom-metric-type common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or custom-metric-display-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-metric-response
                    'make-describe-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-authorizer-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-default-authorizer-request
                    'make-describe-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-authorizer-response-"))
   (authorizer-description common-lisp:nil :type
    (common-lisp:or authorizer-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-authorizer-response
                    'make-describe-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-description))
      (common-lisp:list
       (common-lisp:cons "authorizerDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-detect-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-detect-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-detect-mitigation-actions-task-request
                    'make-describe-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-detect-mitigation-actions-task-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-detect-mitigation-actions-task-response-"))
   (task-summary common-lisp:nil :type
    (common-lisp:or detect-mitigation-actions-task-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-detect-mitigation-actions-task-response
                    'make-describe-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-summary))
      (common-lisp:list
       (common-lisp:cons "taskSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dimension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dimension-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dimension-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-request
                    'make-describe-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dimension-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dimension-response-"))
   (name common-lisp:nil :type
    (common-lisp:or dimension-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or dimension-arn common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or dimension-type common-lisp:null))
   (string-values common-lisp:nil :type
    (common-lisp:or dimension-string-values common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-response
                    'make-describe-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-configuration-request-"))
   (domain-configuration-name
    (common-lisp:error ":domainconfigurationname is required") :type
    (common-lisp:or reserved-domain-configuration-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-configuration-request
                    'make-describe-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-configuration-response-"))
   (domain-configuration-name common-lisp:nil :type
    (common-lisp:or reserved-domain-configuration-name common-lisp:null))
   (domain-configuration-arn common-lisp:nil :type
    (common-lisp:or domain-configuration-arn common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (server-certificates common-lisp:nil :type
    (common-lisp:or server-certificates common-lisp:null))
   (authorizer-config common-lisp:nil :type
    (common-lisp:or authorizer-config common-lisp:null))
   (domain-configuration-status common-lisp:nil :type
    (common-lisp:or domain-configuration-status common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or service-type common-lisp:null))
   (domain-type common-lisp:nil :type
    (common-lisp:or domain-type common-lisp:null))
   (last-status-change-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (tls-config common-lisp:nil :type
    (common-lisp:or tls-config common-lisp:null))
   (server-certificate-config common-lisp:nil :type
    (common-lisp:or server-certificate-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-configuration-response
                    'make-describe-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-certificates))
      (common-lisp:list
       (common-lisp:cons "serverCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-status))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-type))
      (common-lisp:list
       (common-lisp:cons "domainType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-change-date))
      (common-lisp:list
       (common-lisp:cons "lastStatusChangeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-request-"))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-request
                    'make-describe-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-response-"))
   (endpoint-address common-lisp:nil :type
    (common-lisp:or endpoint-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-response
                    'make-describe-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-address))
      (common-lisp:list
       (common-lisp:cons "endpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-configurations-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-event-configurations-request
                    'make-describe-event-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-configurations-response-"))
   (event-configurations common-lisp:nil :type
    (common-lisp:or event-configurations common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-configurations-response
                    'make-describe-event-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-configurations))
      (common-lisp:list
       (common-lisp:cons "eventConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fleet-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fleet-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or fleet-metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-metric-request
                    'make-describe-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fleet-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fleet-metric-response-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-type common-lisp:nil :type
    (common-lisp:or aggregation-type common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or fleet-metric-period common-lisp:null))
   (aggregation-field common-lisp:nil :type
    (common-lisp:or aggregation-field common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or fleet-metric-description common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or fleet-metric-unit common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or fleet-metric-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-metric-response
                    'make-describe-fleet-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-index-request-"))
   (index-name (common-lisp:error ":indexname is required") :type
    (common-lisp:or index-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-index-request 'make-describe-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-index-response-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (index-status common-lisp:nil :type
    (common-lisp:or index-status common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or index-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-index-response 'make-describe-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "indexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-execution-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (execution-number common-lisp:nil :type
    (common-lisp:or execution-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-execution-request
                    'make-describe-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-execution-response-"))
   (execution common-lisp:nil :type
    (common-lisp:or job-execution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-execution-response
                    'make-describe-job-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-response-"))
   (document-source common-lisp:nil :type
    (common-lisp:or job-document-source common-lisp:null))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-response 'make-describe-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-template-request-"))
   (job-template-id (common-lisp:error ":jobtemplateid is required") :type
    (common-lisp:or job-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-template-request
                    'make-describe-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-template-response-"))
   (job-template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (job-template-id common-lisp:nil :type
    (common-lisp:or job-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (document-source common-lisp:nil :type
    (common-lisp:or job-document-source common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or job-document common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (presigned-url-config common-lisp:nil :type
    (common-lisp:or presigned-url-config common-lisp:null))
   (job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or job-executions-rollout-config common-lisp:null))
   (abort-config common-lisp:nil :type
    (common-lisp:or abort-config common-lisp:null))
   (timeout-config common-lisp:nil :type
    (common-lisp:or timeout-config common-lisp:null))
   (job-executions-retry-config common-lisp:nil :type
    (common-lisp:or job-executions-retry-config common-lisp:null))
   (maintenance-windows common-lisp:nil :type
    (common-lisp:or maintenance-windows common-lisp:null))
   (destination-package-versions common-lisp:nil :type
    (common-lisp:or destination-package-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-template-response
                    'make-describe-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-job-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-managed-job-template-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or managed-job-template-name common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or managed-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-job-template-request
                    'make-describe-managed-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-job-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-managed-job-template-response-"))
   (template-name common-lisp:nil :type
    (common-lisp:or managed-job-template-name common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or managed-template-version common-lisp:null))
   (environments common-lisp:nil :type
    (common-lisp:or environments common-lisp:null))
   (document-parameters common-lisp:nil :type
    (common-lisp:or document-parameters common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or job-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-job-template-response
                    'make-describe-managed-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mitigation-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mitigation-action-request-"))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or mitigation-action-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mitigation-action-request
                    'make-describe-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mitigation-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mitigation-action-response-"))
   (action-name common-lisp:nil :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or mitigation-action-type common-lisp:null))
   (action-arn common-lisp:nil :type
    (common-lisp:or mitigation-action-arn common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or mitigation-action-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (action-params common-lisp:nil :type
    (common-lisp:or mitigation-action-params common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mitigation-action-response
                    'make-describe-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-provisioning-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-provisioning-template-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-request
                    'make-describe-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-provisioning-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-provisioning-template-response-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (pre-provisioning-hook common-lisp:nil :type
    (common-lisp:or provisioning-hook common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-response
                    'make-describe-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-provisioning-template-version-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-provisioning-template-version-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (version-id (common-lisp:error ":versionid is required") :type
    (common-lisp:or template-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-version-request
                    'make-describe-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-provisioning-template-version-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-provisioning-template-version-response-"))
   (version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-version-response
                    'make-describe-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-role-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-role-alias-request-"))
   (role-alias (common-lisp:error ":rolealias is required") :type
    (common-lisp:or role-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-role-alias-request
                    'make-describe-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-role-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-role-alias-response-"))
   (role-alias-description common-lisp:nil :type
    (common-lisp:or role-alias-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-role-alias-response
                    'make-describe-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'role-alias-description))
      (common-lisp:list
       (common-lisp:cons "roleAliasDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-audit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scheduled-audit-request-"))
   (scheduled-audit-name (common-lisp:error ":scheduledauditname is required")
    :type (common-lisp:or scheduled-audit-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-audit-request
                    'make-describe-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-audit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scheduled-audit-response-"))
   (frequency common-lisp:nil :type
    (common-lisp:or audit-frequency common-lisp:null))
   (day-of-month common-lisp:nil :type
    (common-lisp:or day-of-month common-lisp:null))
   (day-of-week common-lisp:nil :type
    (common-lisp:or day-of-week common-lisp:null))
   (target-check-names common-lisp:nil :type
    (common-lisp:or target-audit-check-names common-lisp:null))
   (scheduled-audit-name common-lisp:nil :type
    (common-lisp:or scheduled-audit-name common-lisp:null))
   (scheduled-audit-arn common-lisp:nil :type
    (common-lisp:or scheduled-audit-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-audit-response
                    'make-describe-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-request
                    'make-describe-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-profile-response-"))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-arn common-lisp:nil :type
    (common-lisp:or security-profile-arn common-lisp:null))
   (security-profile-description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (behaviors common-lisp:nil :type
    (common-lisp:or behaviors common-lisp:null))
   (alert-targets common-lisp:nil :type
    (common-lisp:or alert-targets common-lisp:null))
   (additional-metrics-to-retain common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-list common-lisp:null))
   (additional-metrics-to-retain-v2 common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-v2list common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (metrics-export-config common-lisp:nil :type
    (common-lisp:or metrics-export-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-response
                    'make-describe-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stream-request-"))
   (stream-id (common-lisp:error ":streamid is required") :type
    (common-lisp:or stream-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-request 'make-describe-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stream-response-"))
   (stream-info common-lisp:nil :type
    (common-lisp:or stream-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-response 'make-describe-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-info))
      (common-lisp:list
       (common-lisp:cons "streamInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-group-request
                    'make-describe-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-group-response-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null))
   (thing-group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (thing-group-properties common-lisp:nil :type
    (common-lisp:or thing-group-properties common-lisp:null))
   (thing-group-metadata common-lisp:nil :type
    (common-lisp:or thing-group-metadata common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dynamic-group-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-group-response
                    'make-describe-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-metadata))
      (common-lisp:list
       (common-lisp:cons "thingGroupMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-registration-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-registration-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-registration-task-request
                    'make-describe-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-registration-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-registration-task-response-"))
   (task-id common-lisp:nil :type (common-lisp:or task-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (input-file-bucket common-lisp:nil :type
    (common-lisp:or registry-s3bucket-name common-lisp:null))
   (input-file-key common-lisp:nil :type
    (common-lisp:or registry-s3key-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (success-count common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (failure-count common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (percentage-progress common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-registration-task-response
                    'make-describe-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-bucket))
      (common-lisp:list
       (common-lisp:cons "inputFileBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-key))
      (common-lisp:list
       (common-lisp:cons "inputFileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-count))
      (common-lisp:list
       (common-lisp:cons "successCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-count))
      (common-lisp:list
       (common-lisp:cons "failureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-progress))
      (common-lisp:list
       (common-lisp:cons "percentageProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-request 'make-describe-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-response-"))
   (default-client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-id common-lisp:nil :type (common-lisp:or thing-id common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-response 'make-describe-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-client-id))
      (common-lisp:list
       (common-lisp:cons "defaultClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-request
                    'make-describe-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-type-response-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-id common-lisp:nil :type
    (common-lisp:or thing-type-id common-lisp:null))
   (thing-type-arn common-lisp:nil :type
    (common-lisp:or thing-type-arn common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-response
                    'make-describe-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-id))
      (common-lisp:list
       (common-lisp:cons "thingTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (s3destination common-lisp:nil :type
    (common-lisp:or s3destination common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-package-versions ()
   '(trivial-types:proper-list package-version-arn))
 (common-lisp:defun make-destination-package-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or policy-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-policy-request 'make-detach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-principal-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-principal-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-principal-policy-request
                    'make-detach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-target-arn
    (common-lisp:error ":securityprofiletargetarn is required") :type
    (common-lisp:or security-profile-target-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-security-profile-request
                    'make-detach-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-security-profile-response-")))
 (common-lisp:export
  (common-lisp:list 'detach-security-profile-response
                    'make-detach-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-thing-principal-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-request
                    'make-detach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-thing-principal-response-")))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-response
                    'make-detach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   common-lisp:nil))
(common-lisp:deftype details-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype details-map () 'common-lisp:hash-table)
 (common-lisp:defun make-details-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype details-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detect-mitigation-action-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-mitigation-action-execution-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (violation-id common-lisp:nil :type
    (common-lisp:or violation-id common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (execution-start-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-end-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or detect-mitigation-action-execution-status
                    common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or detect-mitigation-action-execution-error-code
                    common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-action-execution
                    'make-detect-mitigation-action-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-date))
      (common-lisp:list
       (common-lisp:cons "executionStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-end-date))
      (common-lisp:list
       (common-lisp:cons "executionEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   common-lisp:nil))
(common-lisp:deftype detect-mitigation-action-execution-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-action-execution-list ()
   '(trivial-types:proper-list detect-mitigation-action-execution))
 (common-lisp:defun make-detect-mitigation-action-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detect-mitigation-action-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detect-mitigation-action-execution-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detect-mitigation-actions-task-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-mitigation-actions-task-statistics-"))
   (actions-executed common-lisp:nil :type
    (common-lisp:or generic-long-value common-lisp:null))
   (actions-skipped common-lisp:nil :type
    (common-lisp:or generic-long-value common-lisp:null))
   (actions-failed common-lisp:nil :type
    (common-lisp:or generic-long-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-statistics
                    'make-detect-mitigation-actions-task-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executed))
      (common-lisp:list
       (common-lisp:cons "actionsExecuted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-skipped))
      (common-lisp:list
       (common-lisp:cons "actionsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-failed))
      (common-lisp:list
       (common-lisp:cons "actionsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   common-lisp:nil))
(common-lisp:deftype detect-mitigation-actions-task-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detect-mitigation-actions-task-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-mitigation-actions-task-summary-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or detect-mitigation-actions-task-status common-lisp:null))
   (task-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (task-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or detect-mitigation-actions-task-target common-lisp:null))
   (violation-event-occurrence-range common-lisp:nil :type
    (common-lisp:or violation-event-occurrence-range common-lisp:null))
   (only-active-violations-included common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (suppressed-alerts-included common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (actions-definition common-lisp:nil :type
    (common-lisp:or mitigation-action-list common-lisp:null))
   (task-statistics common-lisp:nil :type
    (common-lisp:or detect-mitigation-actions-task-statistics
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-summary
                    'make-detect-mitigation-actions-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "taskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-occurrence-range))
      (common-lisp:list
       (common-lisp:cons "violationEventOccurrenceRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'only-active-violations-included))
      (common-lisp:list
       (common-lisp:cons "onlyActiveViolationsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-alerts-included))
      (common-lisp:list
       (common-lisp:cons "suppressedAlertsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-definition))
      (common-lisp:list
       (common-lisp:cons "actionsDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-actions-task-summary-list ()
   '(trivial-types:proper-list detect-mitigation-actions-task-summary))
 (common-lisp:defun make-detect-mitigation-actions-task-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detect-mitigation-actions-task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (detect-mitigation-actions-task-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-detect-mitigation-actions-task-target-"))
   (violation-ids common-lisp:nil :type
    (common-lisp:or target-violation-ids-for-detect-mitigation-actions
                    common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior-name common-lisp:nil :type
    (common-lisp:or behavior-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-target
                    'make-detect-mitigation-actions-task-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-ids))
      (common-lisp:list
       (common-lisp:cons "violationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior-name))
      (common-lisp:list
       (common-lisp:cons "behaviorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-actions-to-execute-list ()
   '(trivial-types:proper-list mitigation-action-name))
 (common-lisp:defun make-detect-mitigation-actions-to-execute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-certificate-update-action () 'common-lisp:string)
(common-lisp:deftype device-defender-indexing-mode () 'common-lisp:string)
(common-lisp:deftype device-defender-thing-name () 'common-lisp:string)
(common-lisp:deftype dimension-arn () 'common-lisp:string)
(common-lisp:deftype dimension-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-names ()
   '(trivial-types:proper-list dimension-name))
 (common-lisp:defun make-dimension-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-string-values ()
   '(trivial-types:proper-list dimension-string-value))
 (common-lisp:defun make-dimension-string-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-string-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-type () 'common-lisp:string)
(common-lisp:deftype dimension-value-operator () 'common-lisp:string)
(common-lisp:deftype disable-all-logs () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-topic-rule-request
                    'make-disable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype disconnect-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-parameter-"))
   (key common-lisp:nil :type (common-lisp:or parameter-key common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (regex common-lisp:nil :type (common-lisp:or regex common-lisp:null))
   (example common-lisp:nil :type (common-lisp:or example common-lisp:null))
   (optional common-lisp:nil :type (common-lisp:or optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-parameter 'make-document-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'example))
      (common-lisp:list
       (common-lisp:cons "example"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-parameters ()
   '(trivial-types:proper-list document-parameter))
 (common-lisp:defun make-document-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-configuration-arn () 'common-lisp:string)
(common-lisp:deftype domain-configuration-name () 'common-lisp:string)
(common-lisp:deftype domain-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-configuration-summary-"))
   (domain-configuration-name common-lisp:nil :type
    (common-lisp:or reserved-domain-configuration-name common-lisp:null))
   (domain-configuration-arn common-lisp:nil :type
    (common-lisp:or domain-configuration-arn common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or service-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-configuration-summary
                    'make-domain-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-configurations ()
   '(trivial-types:proper-list domain-configuration-summary))
 (common-lisp:defun make-domain-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            domain-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-type () 'common-lisp:string)
(common-lisp:deftype duration-in-minutes () 'common-lisp:integer)
(common-lisp:deftype duration-seconds () 'common-lisp:integer)
(common-lisp:deftype dynamic-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbaction (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbaction-"))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or table-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or dynamo-operation common-lisp:null))
   (hash-key-field (common-lisp:error ":hashkeyfield is required") :type
    (common-lisp:or hash-key-field common-lisp:null))
   (hash-key-value (common-lisp:error ":hashkeyvalue is required") :type
    (common-lisp:or hash-key-value common-lisp:null))
   (hash-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (range-key-field common-lisp:nil :type
    (common-lisp:or range-key-field common-lisp:null))
   (range-key-value common-lisp:nil :type
    (common-lisp:or range-key-value common-lisp:null))
   (range-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (payload-field common-lisp:nil :type
    (common-lisp:or payload-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dynamo-dbaction 'make-dynamo-dbaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-field))
      (common-lisp:list
       (common-lisp:cons "hashKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-value))
      (common-lisp:list
       (common-lisp:cons "hashKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-type))
      (common-lisp:list
       (common-lisp:cons "hashKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-field))
      (common-lisp:list
       (common-lisp:cons "rangeKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-value))
      (common-lisp:list
       (common-lisp:cons "rangeKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-type))
      (common-lisp:list
       (common-lisp:cons "rangeKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-field))
      (common-lisp:list
       (common-lisp:cons "payloadField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbv2action (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbv2action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (put-item (common-lisp:error ":putitem is required") :type
    (common-lisp:or put-item-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbv2action 'make-dynamo-dbv2action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'put-item))
      (common-lisp:list
       (common-lisp:cons "putItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   common-lisp:nil))
(common-lisp:deftype dynamo-key-type () 'common-lisp:string)
(common-lisp:deftype dynamo-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype effective-policies ()
   '(trivial-types:proper-list effective-policy))
 (common-lisp:defun make-effective-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list effective-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (effective-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-effective-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'effective-policy 'make-effective-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input effective-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or elasticsearch-endpoint common-lisp:null))
   (index (common-lisp:error ":index is required") :type
    (common-lisp:or elasticsearch-index common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or elasticsearch-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or elasticsearch-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-action 'make-elasticsearch-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   common-lisp:nil))
(common-lisp:deftype elasticsearch-endpoint () 'common-lisp:string)
(common-lisp:deftype elasticsearch-id () 'common-lisp:string)
(common-lisp:deftype elasticsearch-index () 'common-lisp:string)
(common-lisp:deftype elasticsearch-type () 'common-lisp:string)
(common-lisp:deftype enable-caching-for-http () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-io-tlogging-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-io-tlogging-params-"))
   (role-arn-for-logging (common-lisp:error ":rolearnforlogging is required")
    :type (common-lisp:or role-arn common-lisp:null))
   (log-level (common-lisp:error ":loglevel is required") :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-io-tlogging-params
                    'make-enable-io-tlogging-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'role-arn-for-logging))
      (common-lisp:list
       (common-lisp:cons "roleArnForLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   common-lisp:nil))
(common-lisp:deftype enable-ocspcheck () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-topic-rule-request
                    'make-enable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype enabled-boolean () 'common-lisp:boolean)
(common-lisp:deftype endpoint-address () 'common-lisp:string)
(common-lisp:deftype endpoint-type () 'common-lisp:string)
(common-lisp:deftype environment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environments () '(trivial-types:proper-list environment))
 (common-lisp:defun make-environments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-info-"))
   (code common-lisp:nil :type (common-lisp:or code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or otaupdate-error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype evaluation-statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-configurations () 'common-lisp:hash-table)
 (common-lisp:defun make-event-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:deftype example () 'common-lisp:string)
(common-lisp:deftype execution-name-prefix () 'common-lisp:string)
(common-lisp:deftype execution-number () 'common-lisp:integer)
(common-lisp:deftype expected-version () 'common-lisp:integer)
(common-lisp:deftype expires-in-sec () 'common-lisp:integer)
(common-lisp:deftype expires-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (explicit-deny (:copier common-lisp:nil)
      (:conc-name "struct-shape-explicit-deny-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null)))
 (common-lisp:export (common-lisp:list 'explicit-deny 'make-explicit-deny))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explicit-deny))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explicit-deny))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explicit-deny))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exponential-rollout-rate (:copier common-lisp:nil)
      (:conc-name "struct-shape-exponential-rollout-rate-"))
   (base-rate-per-minute (common-lisp:error ":baserateperminute is required")
    :type (common-lisp:or rollout-rate-per-minute common-lisp:null))
   (increment-factor (common-lisp:error ":incrementfactor is required") :type
    (common-lisp:or increment-factor common-lisp:null))
   (rate-increase-criteria
    (common-lisp:error ":rateincreasecriteria is required") :type
    (common-lisp:or rate-increase-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exponential-rollout-rate 'make-exponential-rollout-rate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-rate-per-minute))
      (common-lisp:list
       (common-lisp:cons "baseRatePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'increment-factor))
      (common-lisp:list
       (common-lisp:cons "incrementFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rate-increase-criteria))
      (common-lisp:list
       (common-lisp:cons "rateIncreaseCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   common-lisp:nil))
(common-lisp:deftype export-metric () 'common-lisp:boolean)
(common-lisp:deftype failed-checks-count () 'common-lisp:integer)
(common-lisp:deftype failed-findings-count () 'common-lisp:integer)
(common-lisp:deftype failed-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (field (:copier common-lisp:nil) (:conc-name "struct-shape-field-"))
   (name common-lisp:nil :type (common-lisp:or field-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or field-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fields () '(trivial-types:proper-list field))
 (common-lisp:defun make-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-location-"))
   (stream common-lisp:nil :type (common-lisp:or stream common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-location 'make-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-location))
   common-lisp:nil))
(common-lisp:deftype file-name () 'common-lisp:string)
(common-lisp:deftype file-type () 'common-lisp:integer)
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-ids () '(trivial-types:proper-list finding-id))
 (common-lisp:defun make-finding-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firehose-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-firehose-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (delivery-stream-name (common-lisp:error ":deliverystreamname is required")
    :type (common-lisp:or delivery-stream-name common-lisp:null))
   (separator common-lisp:nil :type
    (common-lisp:or firehose-separator common-lisp:null))
   (batch-mode common-lisp:nil :type
    (common-lisp:or batch-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'firehose-action 'make-firehose-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-stream-name))
      (common-lisp:list
       (common-lisp:cons "deliveryStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'separator))
      (common-lisp:list
       (common-lisp:cons "separator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firehose-action))
   common-lisp:nil))
(common-lisp:deftype firehose-separator () 'common-lisp:string)
(common-lisp:deftype flag () 'common-lisp:boolean)
(common-lisp:deftype fleet-metric-arn () 'common-lisp:string)
(common-lisp:deftype fleet-metric-description () 'common-lisp:string)
(common-lisp:deftype fleet-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fleet-metric-name-and-arn (:copier common-lisp:nil)
      (:conc-name "struct-shape-fleet-metric-name-and-arn-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or fleet-metric-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fleet-metric-name-and-arn
                    'make-fleet-metric-name-and-arn))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleet-metric-name-and-arn-list ()
   '(trivial-types:proper-list fleet-metric-name-and-arn))
 (common-lisp:defun make-fleet-metric-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fleet-metric-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-metric-period () 'common-lisp:integer)
(common-lisp:deftype fleet-metric-unit () 'common-lisp:string)
(common-lisp:deftype force-delete () 'common-lisp:boolean)
(common-lisp:deftype force-delete-awsjob () 'common-lisp:boolean)
(common-lisp:deftype force-flag () 'common-lisp:boolean)
(common-lisp:deftype forced () 'common-lisp:boolean)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:deftype generation-id () 'common-lisp:string)
(common-lisp:deftype generic-long-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (geo-location-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-location-target-"))
   (name common-lisp:nil :type
    (common-lisp:or target-field-name common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or target-field-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-location-target 'make-geo-location-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype geo-locations-filter ()
   '(trivial-types:proper-list geo-location-target))
 (common-lisp:defun make-geo-locations-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-location-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-behavior-model-training-summaries-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-behavior-model-training-summaries-request-"))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or tiny-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-behavior-model-training-summaries-request
                    'make-get-behavior-model-training-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-behavior-model-training-summaries-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-behavior-model-training-summaries-response-"))
   (summaries common-lisp:nil :type
    (common-lisp:or behavior-model-training-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-behavior-model-training-summaries-response
                    'make-get-behavior-model-training-summaries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-buckets-aggregation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-buckets-aggregation-request-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-field (common-lisp:error ":aggregationfield is required") :type
    (common-lisp:or aggregation-field common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (buckets-aggregation-type
    (common-lisp:error ":bucketsaggregationtype is required") :type
    (common-lisp:or buckets-aggregation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-buckets-aggregation-request
                    'make-get-buckets-aggregation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'buckets-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "bucketsAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-buckets-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-buckets-aggregation-response-"))
   (total-count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (buckets common-lisp:nil :type (common-lisp:or buckets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-buckets-aggregation-response
                    'make-get-buckets-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cardinality-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cardinality-request-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-field common-lisp:nil :type
    (common-lisp:or aggregation-field common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cardinality-request 'make-get-cardinality-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cardinality-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cardinality-response-"))
   (cardinality common-lisp:nil :type (common-lisp:or count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cardinality-response 'make-get-cardinality-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cardinality))
      (common-lisp:list
       (common-lisp:cons "cardinality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-effective-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-effective-policies-request-"))
   (principal common-lisp:nil :type
    (common-lisp:or principal common-lisp:null))
   (cognito-identity-pool-id common-lisp:nil :type
    (common-lisp:or cognito-identity-pool-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-effective-policies-request
                    'make-get-effective-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-effective-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-effective-policies-response-"))
   (effective-policies common-lisp:nil :type
    (common-lisp:or effective-policies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-effective-policies-response
                    'make-get-effective-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-policies))
      (common-lisp:list
       (common-lisp:cons "effectivePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-indexing-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-indexing-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-indexing-configuration-request
                    'make-get-indexing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-indexing-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-indexing-configuration-response-"))
   (thing-indexing-configuration common-lisp:nil :type
    (common-lisp:or thing-indexing-configuration common-lisp:null))
   (thing-group-indexing-configuration common-lisp:nil :type
    (common-lisp:or thing-group-indexing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-indexing-configuration-response
                    'make-get-indexing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-document-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-document-request 'make-get-job-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-document-response-"))
   (document common-lisp:nil :type
    (common-lisp:or job-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-document-response
                    'make-get-job-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-options-request-")))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-options-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-otaupdate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-otaupdate-request-"))
   (ota-update-id (common-lisp:error ":otaupdateid is required") :type
    (common-lisp:or otaupdate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-otaupdate-request 'make-get-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-otaupdate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-otaupdate-response-"))
   (ota-update-info common-lisp:nil :type
    (common-lisp:or otaupdate-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-otaupdate-response 'make-get-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-info))
      (common-lisp:list
       (common-lisp:cons "otaUpdateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-package-configuration-request
                    'make-get-package-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-configuration-response-"))
   (version-update-by-jobs-config common-lisp:nil :type
    (common-lisp:or version-update-by-jobs-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-configuration-response
                    'make-get-package-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-update-by-jobs-config))
      (common-lisp:list
       (common-lisp:cons "versionUpdateByJobsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-request 'make-get-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-response-"))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (package-arn common-lisp:nil :type
    (common-lisp:or package-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (default-version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-response 'make-get-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "packageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (version-name (common-lisp:error ":versionname is required") :type
    (common-lisp:or version-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-request
                    'make-get-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-response-"))
   (package-version-arn common-lisp:nil :type
    (common-lisp:or package-version-arn common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or resource-attributes common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (error-reason common-lisp:nil :type
    (common-lisp:or package-version-error-reason common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-response
                    'make-get-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version-arn))
      (common-lisp:list
       (common-lisp:cons "packageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "errorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-percentiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-percentiles-request-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-field common-lisp:nil :type
    (common-lisp:or aggregation-field common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (percents common-lisp:nil :type
    (common-lisp:or percent-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-percentiles-request 'make-get-percentiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percents))
      (common-lisp:list
       (common-lisp:cons "percents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-percentiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-percentiles-response-"))
   (percentiles common-lisp:nil :type
    (common-lisp:or percentiles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-percentiles-response 'make-get-percentiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentiles))
      (common-lisp:list
       (common-lisp:cons "percentiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-response-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (generation-id common-lisp:nil :type
    (common-lisp:or generation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-response-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (generation-id common-lisp:nil :type
    (common-lisp:or generation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registration-code-request-")))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-request
                    'make-get-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registration-code-response-"))
   (registration-code common-lisp:nil :type
    (common-lisp:or registration-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-response
                    'make-get-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-code))
      (common-lisp:list
       (common-lisp:cons "registrationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statistics-request-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-field common-lisp:nil :type
    (common-lisp:or aggregation-field common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statistics-request 'make-get-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statistics-response-"))
   (statistics common-lisp:nil :type
    (common-lisp:or statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statistics-response 'make-get-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-destination-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-destination-request
                    'make-get-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-destination-response-"))
   (topic-rule-destination common-lisp:nil :type
    (common-lisp:or topic-rule-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-destination-response
                    'make-get-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-rule-destination))
      (common-lisp:list
       (common-lisp:cons "topicRuleDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-request 'make-get-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-response-"))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule common-lisp:nil :type (common-lisp:or topic-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-response 'make-get-topic-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-v2logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-v2logging-options-request-")))
 (common-lisp:export
  (common-lisp:list 'get-v2logging-options-request
                    'make-get-v2logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-v2logging-options-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-v2logging-options-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (default-log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (disable-all-logs common-lisp:nil :type
    (common-lisp:or disable-all-logs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-v2logging-options-response
                    'make-get-v2logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "defaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-all-logs))
      (common-lisp:list
       (common-lisp:cons "disableAllLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-name-and-arn (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-name-and-arn-"))
   (group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-name-and-arn 'make-group-name-and-arn))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "groupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   common-lisp:nil))
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype hash-key-field () 'common-lisp:string)
(common-lisp:deftype hash-key-value () 'common-lisp:string)
(common-lisp:deftype header-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-list ()
   '(trivial-types:proper-list http-action-header))
 (common-lisp:defun make-header-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-action-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-action-"))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null))
   (confirmation-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (headers common-lisp:nil :type
    (common-lisp:or header-list common-lisp:null))
   (auth common-lisp:nil :type
    (common-lisp:or http-authorization common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-action 'make-http-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-action-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-action-header-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or header-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or header-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-action-header 'make-http-action-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-action-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-action-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-action-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-authorization (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-authorization-"))
   (sigv4 common-lisp:nil :type
    (common-lisp:or sig-v4authorization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-authorization 'make-http-authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sigv4))
      (common-lisp:list
       (common-lisp:cons "sigv4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-authorization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-context-"))
   (headers common-lisp:nil :type
    (common-lisp:or http-headers common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or http-query-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-context 'make-http-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-context))
   common-lisp:nil))
(common-lisp:deftype http-header-name () 'common-lisp:string)
(common-lisp:deftype http-header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype http-headers () 'common-lisp:hash-table)
 (common-lisp:defun make-http-headers (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype http-query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-url-destination-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-url-destination-configuration-"))
   (confirmation-url (common-lisp:error ":confirmationurl is required") :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-configuration
                    'make-http-url-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-url-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-url-destination-properties-"))
   (confirmation-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-properties
                    'make-http-url-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-url-destination-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-url-destination-summary-"))
   (confirmation-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-summary
                    'make-http-url-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (implicit-deny (:copier common-lisp:nil)
      (:conc-name "struct-shape-implicit-deny-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null)))
 (common-lisp:export (common-lisp:list 'implicit-deny 'make-implicit-deny))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input implicit-deny))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input implicit-deny))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input implicit-deny))
   common-lisp:nil))
(common-lisp:deftype in-progress-checks-count () 'common-lisp:integer)
(common-lisp:deftype in-progress-things () 'common-lisp:integer)
(common-lisp:deftype in-progress-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype increment-factor () 'common-lisp:double-float)
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype index-names-list ()
   '(trivial-types:proper-list index-name))
 (common-lisp:defun make-index-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition index-not-ready-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       index-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'index-not-ready-exception
                    'index-not-ready-exception-message)))
(common-lisp:deftype index-schema () 'common-lisp:string)
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (indexing-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-indexing-filter-"))
   (named-shadow-names common-lisp:nil :type
    (common-lisp:or named-shadow-names-filter common-lisp:null))
   (geo-locations common-lisp:nil :type
    (common-lisp:or geo-locations-filter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'indexing-filter 'make-indexing-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indexing-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indexing-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-shadow-names))
      (common-lisp:list
       (common-lisp:cons "namedShadowNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-locations))
      (common-lisp:list
       (common-lisp:cons "geoLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indexing-filter))
   common-lisp:nil))
(common-lisp:deftype inline-document () 'common-lisp:string)
(common-lisp:deftype input-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-aggregation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-aggregation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-aggregation-exception
                    'invalid-aggregation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-query-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-query-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-query-exception 'invalid-query-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-response-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-response-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-response-exception
                    'invalid-response-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-transition-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-transition-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-transition-exception
                    'invalid-state-transition-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (iot-analytics-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-iot-analytics-action-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or aws-arn common-lisp:null))
   (channel-name common-lisp:nil :type
    (common-lisp:or channel-name common-lisp:null))
   (batch-mode common-lisp:nil :type
    (common-lisp:or batch-mode common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iot-analytics-action 'make-iot-analytics-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "channelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iot-events-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-iot-events-action-"))
   (input-name (common-lisp:error ":inputname is required") :type
    (common-lisp:or input-name common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (batch-mode common-lisp:nil :type
    (common-lisp:or batch-mode common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iot-events-action 'make-iot-events-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-events-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-events-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-name))
      (common-lisp:list
       (common-lisp:cons "inputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-events-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iot-site-wise-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-iot-site-wise-action-"))
   (put-asset-property-value-entries
    (common-lisp:error ":putassetpropertyvalueentries is required") :type
    (common-lisp:or put-asset-property-value-entry-list common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-action 'make-iot-site-wise-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'put-asset-property-value-entries))
      (common-lisp:list
       (common-lisp:cons "putAssetPropertyValueEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   common-lisp:nil))
(common-lisp:deftype is-authenticated () 'common-lisp:boolean)
(common-lisp:deftype is-default-version () 'common-lisp:boolean)
(common-lisp:deftype is-disabled () 'common-lisp:boolean)
(common-lisp:deftype is-suppressed () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (issuer-certificate-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-issuer-certificate-identifier-"))
   (issuer-certificate-subject common-lisp:nil :type
    (common-lisp:or issuer-certificate-subject common-lisp:null))
   (issuer-id common-lisp:nil :type
    (common-lisp:or issuer-id common-lisp:null))
   (issuer-certificate-serial-number common-lisp:nil :type
    (common-lisp:or issuer-certificate-serial-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'issuer-certificate-identifier
                    'make-issuer-certificate-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-subject))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-id))
      (common-lisp:list
       (common-lisp:cons "issuerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-serial-number))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   common-lisp:nil))
(common-lisp:deftype issuer-certificate-serial-number () 'common-lisp:string)
(common-lisp:deftype issuer-certificate-subject () 'common-lisp:string)
(common-lisp:deftype issuer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (force-canceled common-lisp:nil :type
    (common-lisp:or forced common-lisp:null))
   (reason-code common-lisp:nil :type
    (common-lisp:or reason-code common-lisp:null))
   (comment common-lisp:nil :type (common-lisp:or comment common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or job-targets common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (presigned-url-config common-lisp:nil :type
    (common-lisp:or presigned-url-config common-lisp:null))
   (job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or job-executions-rollout-config common-lisp:null))
   (abort-config common-lisp:nil :type
    (common-lisp:or abort-config common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (completed-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (job-process-details common-lisp:nil :type
    (common-lisp:or job-process-details common-lisp:null))
   (timeout-config common-lisp:nil :type
    (common-lisp:or timeout-config common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null))
   (job-template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (job-executions-retry-config common-lisp:nil :type
    (common-lisp:or job-executions-retry-config common-lisp:null))
   (document-parameters common-lisp:nil :type
    (common-lisp:or parameter-map common-lisp:null))
   (is-concurrent common-lisp:nil :type
    (common-lisp:or boolean-wrapper-object common-lisp:null))
   (scheduling-config common-lisp:nil :type
    (common-lisp:or scheduling-config common-lisp:null))
   (scheduled-job-rollouts common-lisp:nil :type
    (common-lisp:or scheduled-job-rollout-list common-lisp:null))
   (destination-package-versions common-lisp:nil :type
    (common-lisp:or destination-package-versions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-canceled))
      (common-lisp:list
       (common-lisp:cons "forceCanceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "reasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-process-details))
      (common-lisp:list
       (common-lisp:cons "jobProcessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "namespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-concurrent))
      (common-lisp:list
       (common-lisp:cons "isConcurrent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-config))
      (common-lisp:list
       (common-lisp:cons "schedulingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-job-rollouts))
      (common-lisp:list
       (common-lisp:cons "scheduledJobRollouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:deftype job-description () 'common-lisp:string)
(common-lisp:deftype job-document () 'common-lisp:string)
(common-lisp:deftype job-document-source () 'common-lisp:string)
(common-lisp:deftype job-end-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or job-execution-status common-lisp:null))
   (force-canceled common-lisp:nil :type
    (common-lisp:or forced common-lisp:null))
   (status-details common-lisp:nil :type
    (common-lisp:or job-execution-status-details common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (queued-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (execution-number common-lisp:nil :type
    (common-lisp:or execution-number common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (approximate-seconds-before-timed-out common-lisp:nil :type
    (common-lisp:or approximate-seconds-before-timed-out common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-execution 'make-job-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-canceled))
      (common-lisp:list
       (common-lisp:cons "forceCanceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "statusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-at))
      (common-lisp:list
       (common-lisp:cons "queuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-number))
      (common-lisp:list
       (common-lisp:cons "executionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "versionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-seconds-before-timed-out))
      (common-lisp:list
       (common-lisp:cons "approximateSecondsBeforeTimedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-execution))
   common-lisp:nil))
(common-lisp:deftype job-execution-failure-type () 'common-lisp:string)
(common-lisp:deftype job-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution-status-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-status-details-"))
   (details-map common-lisp:nil :type
    (common-lisp:or details-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-execution-status-details
                    'make-job-execution-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details-map))
      (common-lisp:list
       (common-lisp:cons "detailsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-summary-"))
   (status common-lisp:nil :type
    (common-lisp:or job-execution-status common-lisp:null))
   (queued-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (execution-number common-lisp:nil :type
    (common-lisp:or execution-number common-lisp:null))
   (retry-attempt common-lisp:nil :type
    (common-lisp:or retry-attempt common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary 'make-job-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-at))
      (common-lisp:list
       (common-lisp:cons "queuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-number))
      (common-lisp:list
       (common-lisp:cons "executionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-attempt))
      (common-lisp:list
       (common-lisp:cons "retryAttempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution-summary-for-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-summary-for-job-"))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (job-execution-summary common-lisp:nil :type
    (common-lisp:or job-execution-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary-for-job
                    'make-job-execution-summary-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-summary))
      (common-lisp:list
       (common-lisp:cons "jobExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-execution-summary-for-job-list ()
   '(trivial-types:proper-list job-execution-summary-for-job))
 (common-lisp:defun make-job-execution-summary-for-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-execution-summary-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution-summary-for-thing (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-summary-for-thing-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-execution-summary common-lisp:nil :type
    (common-lisp:or job-execution-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary-for-thing
                    'make-job-execution-summary-for-thing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-summary))
      (common-lisp:list
       (common-lisp:cons "jobExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-execution-summary-for-thing-list ()
   '(trivial-types:proper-list job-execution-summary-for-thing))
 (common-lisp:defun make-job-execution-summary-for-thing-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-execution-summary-for-thing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-executions-retry-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-executions-retry-config-"))
   (criteria-list (common-lisp:error ":criterialist is required") :type
    (common-lisp:or retry-criteria-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-executions-retry-config
                    'make-job-executions-retry-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria-list))
      (common-lisp:list
       (common-lisp:cons "criteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-executions-rollout-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-executions-rollout-config-"))
   (maximum-per-minute common-lisp:nil :type
    (common-lisp:or max-job-executions-per-min common-lisp:null))
   (exponential-rate common-lisp:nil :type
    (common-lisp:or exponential-rollout-rate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-executions-rollout-config
                    'make-job-executions-rollout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-per-minute))
      (common-lisp:list
       (common-lisp:cons "maximumPerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exponential-rate))
      (common-lisp:list
       (common-lisp:cons "exponentialRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-process-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-process-details-"))
   (processing-targets common-lisp:nil :type
    (common-lisp:or processing-target-name-list common-lisp:null))
   (number-of-canceled-things common-lisp:nil :type
    (common-lisp:or canceled-things common-lisp:null))
   (number-of-succeeded-things common-lisp:nil :type
    (common-lisp:or succeeded-things common-lisp:null))
   (number-of-failed-things common-lisp:nil :type
    (common-lisp:or failed-things common-lisp:null))
   (number-of-rejected-things common-lisp:nil :type
    (common-lisp:or rejected-things common-lisp:null))
   (number-of-queued-things common-lisp:nil :type
    (common-lisp:or queued-things common-lisp:null))
   (number-of-in-progress-things common-lisp:nil :type
    (common-lisp:or in-progress-things common-lisp:null))
   (number-of-removed-things common-lisp:nil :type
    (common-lisp:or removed-things common-lisp:null))
   (number-of-timed-out-things common-lisp:nil :type
    (common-lisp:or timed-out-things common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-process-details 'make-job-process-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-process-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-process-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-targets))
      (common-lisp:list
       (common-lisp:cons "processingTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-canceled-things))
      (common-lisp:list
       (common-lisp:cons "numberOfCanceledThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-failed-things))
      (common-lisp:list
       (common-lisp:cons "numberOfFailedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-rejected-things))
      (common-lisp:list
       (common-lisp:cons "numberOfRejectedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-queued-things))
      (common-lisp:list
       (common-lisp:cons "numberOfQueuedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-in-progress-things))
      (common-lisp:list
       (common-lisp:cons "numberOfInProgressThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-removed-things))
      (common-lisp:list
       (common-lisp:cons "numberOfRemovedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-timed-out-things))
      (common-lisp:list
       (common-lisp:cons "numberOfTimedOutThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-process-details))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (completed-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (is-concurrent common-lisp:nil :type
    (common-lisp:or boolean-wrapper-object common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-concurrent))
      (common-lisp:list
       (common-lisp:cons "isConcurrent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-summary-list ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype job-targets () '(trivial-types:proper-list target-arn))
 (common-lisp:defun make-job-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-template-arn () 'common-lisp:string)
(common-lisp:deftype job-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-template-summary-"))
   (job-template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (job-template-id common-lisp:nil :type
    (common-lisp:or job-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-template-summary 'make-job-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-template-summary-list ()
   '(trivial-types:proper-list job-template-summary))
 (common-lisp:defun make-job-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype json-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-action-"))
   (destination-arn (common-lisp:error ":destinationarn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (topic (common-lisp:error ":topic is required") :type
    (common-lisp:or string common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (partition common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (client-properties (common-lisp:error ":clientproperties is required") :type
    (common-lisp:or client-properties common-lisp:null))
   (headers common-lisp:nil :type
    (common-lisp:or kafka-headers common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kafka-action 'make-kafka-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-properties))
      (common-lisp:list
       (common-lisp:cons "clientProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-action-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-action-header-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or kafka-header-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or kafka-header-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-action-header 'make-kafka-action-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-action-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-action-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-action-header))
   common-lisp:nil))
(common-lisp:deftype kafka-header-key () 'common-lisp:string)
(common-lisp:deftype kafka-header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kafka-headers ()
   '(trivial-types:proper-list kafka-action-header))
 (common-lisp:defun make-kafka-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-action-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype key-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-pair (:copier common-lisp:nil) (:conc-name "struct-shape-key-pair-"))
   (public-key common-lisp:nil :type
    (common-lisp:or public-key common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or private-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:deftype key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (stream-name (common-lisp:error ":streamname is required") :type
    (common-lisp:or stream-name common-lisp:null))
   (partition-key common-lisp:nil :type
    (common-lisp:or partition-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kinesis-action 'make-kinesis-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "streamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "partitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-action-"))
   (function-arn (common-lisp:error ":functionarn is required") :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-action 'make-lambda-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "functionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-action))
   common-lisp:nil))
(common-lisp:deftype laser-max-results () 'common-lisp:integer)
(common-lisp:deftype last-modified-date () 'common-lisp:string)
(common-lisp:deftype last-updated-at-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-active-violations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-active-violations-request-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior-criteria-type common-lisp:nil :type
    (common-lisp:or behavior-criteria-type common-lisp:null))
   (list-suppressed-alerts common-lisp:nil :type
    (common-lisp:or list-suppressed-alerts common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-active-violations-request
                    'make-list-active-violations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-active-violations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-active-violations-response-"))
   (active-violations common-lisp:nil :type
    (common-lisp:or active-violations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-active-violations-response
                    'make-list-active-violations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-violations))
      (common-lisp:list
       (common-lisp:cons "activeViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-policies-request-"))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or policy-target common-lisp:null))
   (recursive common-lisp:nil :type
    (common-lisp:or recursive common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-policies-request
                    'make-list-attached-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-policies-response-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-policies-response
                    'make-list-attached-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-findings-request-"))
   (task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null))
   (check-name common-lisp:nil :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or resource-identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (list-suppressed-findings common-lisp:nil :type
    (common-lisp:or list-suppressed-findings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-findings-request
                    'make-list-audit-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-suppressed-findings))
      (common-lisp:list
       (common-lisp:cons "listSuppressedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-findings-response-"))
   (findings common-lisp:nil :type
    (common-lisp:or audit-findings common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-findings-response
                    'make-list-audit-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-mitigation-actions-executions-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-audit-mitigation-actions-executions-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (action-status common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-execution-status
                    common-lisp:null))
   (finding-id (common-lisp:error ":findingid is required") :type
    (common-lisp:or finding-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-executions-request
                    'make-list-audit-mitigation-actions-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-mitigation-actions-executions-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-audit-mitigation-actions-executions-response-"))
   (actions-executions common-lisp:nil :type
    (common-lisp:or audit-mitigation-action-execution-metadata-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-executions-response
                    'make-list-audit-mitigation-actions-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executions))
      (common-lisp:list
       (common-lisp:cons "actionsExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-mitigation-actions-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-mitigation-actions-tasks-request-"))
   (audit-task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null))
   (finding-id common-lisp:nil :type
    (common-lisp:or finding-id common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-tasks-request
                    'make-list-audit-mitigation-actions-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-mitigation-actions-tasks-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-audit-mitigation-actions-tasks-response-"))
   (tasks common-lisp:nil :type
    (common-lisp:or audit-mitigation-actions-task-metadata-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-tasks-response
                    'make-list-audit-mitigation-actions-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-suppressions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-suppressions-request-"))
   (check-name common-lisp:nil :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or resource-identifier common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-suppressions-request
                    'make-list-audit-suppressions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ascending-order))
      (common-lisp:list
       (common-lisp:cons "ascendingOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-suppressions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-suppressions-response-"))
   (suppressions common-lisp:nil :type
    (common-lisp:or audit-suppression-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-suppressions-response
                    'make-list-audit-suppressions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressions))
      (common-lisp:list
       (common-lisp:cons "suppressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-tasks-request-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (task-type common-lisp:nil :type
    (common-lisp:or audit-task-type common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or audit-task-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-tasks-request 'make-list-audit-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-audit-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-audit-tasks-response-"))
   (tasks common-lisp:nil :type
    (common-lisp:or audit-task-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-audit-tasks-response
                    'make-list-audit-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-authorizers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-authorizers-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or authorizer-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-authorizers-request 'make-list-authorizers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-authorizers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-authorizers-response-"))
   (authorizers common-lisp:nil :type
    (common-lisp:or authorizers common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-authorizers-response
                    'make-list-authorizers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizers))
      (common-lisp:list
       (common-lisp:cons "authorizers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-billing-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-billing-groups-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (name-prefix-filter common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-billing-groups-request
                    'make-list-billing-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-billing-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-billing-groups-response-"))
   (billing-groups common-lisp:nil :type
    (common-lisp:or billing-group-name-and-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-billing-groups-response
                    'make-list-billing-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-groups))
      (common-lisp:list
       (common-lisp:cons "billingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cacertificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cacertificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-request
                    'make-list-cacertificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cacertificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cacertificates-response-"))
   (certificates common-lisp:nil :type
    (common-lisp:or cacertificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-response
                    'make-list-cacertificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificate-providers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificate-providers-request-"))
   (next-token common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificate-providers-request
                    'make-list-certificate-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificate-providers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificate-providers-response-"))
   (certificate-providers common-lisp:nil :type
    (common-lisp:or certificate-providers common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificate-providers-response
                    'make-list-certificate-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-providers))
      (common-lisp:list
       (common-lisp:cons "certificateProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-carequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-by-carequest-"))
   (ca-certificate-id (common-lisp:error ":cacertificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-carequest
                    'make-list-certificates-by-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-caresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-by-caresponse-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-caresponse
                    'make-list-certificates-by-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-response-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-metrics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-metrics-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-metrics-request
                    'make-list-custom-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-metrics-response-"))
   (metric-names common-lisp:nil :type
    (common-lisp:or metric-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-metrics-response
                    'make-list-custom-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-names))
      (common-lisp:list
       (common-lisp:cons "metricNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-detect-mitigation-actions-executions-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-detect-mitigation-actions-executions-request-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (violation-id common-lisp:nil :type
    (common-lisp:or violation-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-executions-request
                    'make-list-detect-mitigation-actions-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-detect-mitigation-actions-executions-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-detect-mitigation-actions-executions-response-"))
   (actions-executions common-lisp:nil :type
    (common-lisp:or detect-mitigation-action-execution-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-executions-response
                    'make-list-detect-mitigation-actions-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executions))
      (common-lisp:list
       (common-lisp:cons "actionsExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-detect-mitigation-actions-tasks-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-detect-mitigation-actions-tasks-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-tasks-request
                    'make-list-detect-mitigation-actions-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-detect-mitigation-actions-tasks-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-detect-mitigation-actions-tasks-response-"))
   (tasks common-lisp:nil :type
    (common-lisp:or detect-mitigation-actions-task-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-tasks-response
                    'make-list-detect-mitigation-actions-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dimensions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dimensions-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dimensions-request 'make-list-dimensions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dimensions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dimensions-response-"))
   (dimension-names common-lisp:nil :type
    (common-lisp:or dimension-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dimensions-response 'make-list-dimensions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-names))
      (common-lisp:list
       (common-lisp:cons "dimensionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-configurations-request-"))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or service-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-configurations-request
                    'make-list-domain-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-configurations-response-"))
   (domain-configurations common-lisp:nil :type
    (common-lisp:or domain-configurations common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-configurations-response
                    'make-list-domain-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configurations))
      (common-lisp:list
       (common-lisp:cons "domainConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-fleet-metrics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-fleet-metrics-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-fleet-metrics-request
                    'make-list-fleet-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-fleet-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-fleet-metrics-response-"))
   (fleet-metrics common-lisp:nil :type
    (common-lisp:or fleet-metric-name-and-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-fleet-metrics-response
                    'make-list-fleet-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-metrics))
      (common-lisp:list
       (common-lisp:cons "fleetMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or query-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-request 'make-list-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-response-"))
   (index-names common-lisp:nil :type
    (common-lisp:or index-names-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-response 'make-list-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-names))
      (common-lisp:list
       (common-lisp:cons "indexNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-executions-for-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-executions-for-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or job-execution-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or laser-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-job-request
                    'make-list-job-executions-for-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-executions-for-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-executions-for-job-response-"))
   (execution-summaries common-lisp:nil :type
    (common-lisp:or job-execution-summary-for-job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-job-response
                    'make-list-job-executions-for-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summaries))
      (common-lisp:list
       (common-lisp:cons "executionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-executions-for-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-executions-for-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or job-execution-status common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or laser-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-thing-request
                    'make-list-job-executions-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-executions-for-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-executions-for-thing-response-"))
   (execution-summaries common-lisp:nil :type
    (common-lisp:or job-execution-summary-for-thing-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-thing-response
                    'make-list-job-executions-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summaries))
      (common-lisp:list
       (common-lisp:cons "executionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-templates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or laser-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-request
                    'make-list-job-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-templates-response-"))
   (job-templates common-lisp:nil :type
    (common-lisp:or job-template-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-response
                    'make-list-job-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-templates))
      (common-lisp:list
       (common-lisp:cons "jobTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or laser-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-response-"))
   (jobs common-lisp:nil :type
    (common-lisp:or job-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-job-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-job-templates-request-"))
   (template-name common-lisp:nil :type
    (common-lisp:or managed-job-template-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or laser-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-job-templates-request
                    'make-list-managed-job-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-job-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-job-templates-response-"))
   (managed-job-templates common-lisp:nil :type
    (common-lisp:or managed-job-templates-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-job-templates-response
                    'make-list-managed-job-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-job-templates))
      (common-lisp:list
       (common-lisp:cons "managedJobTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-metric-values-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-metric-values-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or behavior-metric common-lisp:null))
   (dimension-name common-lisp:nil :type
    (common-lisp:or dimension-name common-lisp:null))
   (dimension-value-operator common-lisp:nil :type
    (common-lisp:or dimension-value-operator common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-metric-values-request
                    'make-list-metric-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-metric-values-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-metric-values-response-"))
   (metric-datum-list common-lisp:nil :type
    (common-lisp:or metric-datum-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-metric-values-response
                    'make-list-metric-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-datum-list))
      (common-lisp:list
       (common-lisp:cons "metricDatumList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mitigation-actions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mitigation-actions-request-"))
   (action-type common-lisp:nil :type
    (common-lisp:or mitigation-action-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mitigation-actions-request
                    'make-list-mitigation-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mitigation-actions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mitigation-actions-response-"))
   (action-identifiers common-lisp:nil :type
    (common-lisp:or mitigation-action-identifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mitigation-actions-response
                    'make-list-mitigation-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-identifiers))
      (common-lisp:list
       (common-lisp:cons "actionIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-otaupdates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-otaupdates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (ota-update-status common-lisp:nil :type
    (common-lisp:or otaupdate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-otaupdates-request 'make-list-otaupdates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-otaupdates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-otaupdates-response-"))
   (ota-updates common-lisp:nil :type
    (common-lisp:or otaupdates-summary common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-otaupdates-response 'make-list-otaupdates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-updates))
      (common-lisp:list
       (common-lisp:cons "otaUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-certificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-request
                    'make-list-outgoing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-certificates-response-"))
   (outgoing-certificates common-lisp:nil :type
    (common-lisp:or outgoing-certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-response
                    'make-list-outgoing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-certificates))
      (common-lisp:list
       (common-lisp:cons "outgoingCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-versions-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or package-catalog-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-request
                    'make-list-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-versions-response-"))
   (package-version-summaries common-lisp:nil :type
    (common-lisp:or package-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-response
                    'make-list-package-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-summaries))
      (common-lisp:list
       (common-lisp:cons "packageVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or package-catalog-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-response-"))
   (package-summaries common-lisp:nil :type
    (common-lisp:or package-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-response 'make-list-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-summaries))
      (common-lisp:list
       (common-lisp:cons "packageSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-request-"))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-response-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-principals-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-request
                    'make-list-policy-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:cons "x-amzn-iot-policy" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-principals-response-"))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-response
                    'make-list-policy-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-response-"))
   (policy-versions common-lisp:nil :type
    (common-lisp:or policy-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-versions))
      (common-lisp:list
       (common-lisp:cons "policyVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-policies-request-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-request
                    'make-list-principal-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-policies-response-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-response
                    'make-list-principal-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-things-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-request
                    'make-list-principal-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-things-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-response
                    'make-list-principal-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-provisioning-template-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-provisioning-template-versions-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-template-versions-request
                    'make-list-provisioning-template-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-provisioning-template-versions-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-provisioning-template-versions-response-"))
   (versions common-lisp:nil :type
    (common-lisp:or provisioning-template-version-listing common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-template-versions-response
                    'make-list-provisioning-template-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-provisioning-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-provisioning-templates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-templates-request
                    'make-list-provisioning-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-provisioning-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-provisioning-templates-response-"))
   (templates common-lisp:nil :type
    (common-lisp:or provisioning-template-listing common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-templates-response
                    'make-list-provisioning-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-related-resources-for-audit-finding-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-related-resources-for-audit-finding-request-"))
   (finding-id (common-lisp:error ":findingid is required") :type
    (common-lisp:or finding-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-related-resources-for-audit-finding-request
                    'make-list-related-resources-for-audit-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-related-resources-for-audit-finding-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-related-resources-for-audit-finding-response-"))
   (related-resources common-lisp:nil :type
    (common-lisp:or related-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-related-resources-for-audit-finding-response
                    'make-list-related-resources-for-audit-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-resources))
      (common-lisp:list
       (common-lisp:cons "relatedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-aliases-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-aliases-request
                    'make-list-role-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-aliases-response-"))
   (role-aliases common-lisp:nil :type
    (common-lisp:or role-aliases common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-aliases-response
                    'make-list-role-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-aliases))
      (common-lisp:list
       (common-lisp:cons "roleAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-scheduled-audits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-scheduled-audits-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-audits-request
                    'make-list-scheduled-audits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-scheduled-audits-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-scheduled-audits-response-"))
   (scheduled-audits common-lisp:nil :type
    (common-lisp:or scheduled-audit-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-audits-response
                    'make-list-scheduled-audits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audits))
      (common-lisp:list
       (common-lisp:cons "scheduledAudits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-for-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-for-target-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (recursive common-lisp:nil :type
    (common-lisp:or recursive common-lisp:null))
   (security-profile-target-arn
    (common-lisp:error ":securityprofiletargetarn is required") :type
    (common-lisp:or security-profile-target-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-for-target-request
                    'make-list-security-profiles-for-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-for-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-for-target-response-"))
   (security-profile-target-mappings common-lisp:nil :type
    (common-lisp:or security-profile-target-mappings common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-for-target-response
                    'make-list-security-profiles-for-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-target-mappings))
      (common-lisp:list
       (common-lisp:cons "securityProfileTargetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (dimension-name common-lisp:nil :type
    (common-lisp:or dimension-name common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-request
                    'make-list-security-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-response-"))
   (security-profile-identifiers common-lisp:nil :type
    (common-lisp:or security-profile-identifiers common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-response
                    'make-list-security-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-identifiers))
      (common-lisp:list
       (common-lisp:cons "securityProfileIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streams-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streams-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-request 'make-list-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streams-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streams-response-"))
   (streams common-lisp:nil :type
    (common-lisp:or streams-summary common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-response 'make-list-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   common-lisp:nil))
(common-lisp:deftype list-suppressed-alerts () 'common-lisp:boolean)
(common-lisp:deftype list-suppressed-findings () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-for-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-for-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-request
                    'make-list-targets-for-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-for-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-for-policy-response-"))
   (targets common-lisp:nil :type
    (common-lisp:or policy-targets common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-response
                    'make-list-targets-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-for-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-for-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-security-profile-request
                    'make-list-targets-for-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-for-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-for-security-profile-response-"))
   (security-profile-targets common-lisp:nil :type
    (common-lisp:or security-profile-targets common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-security-profile-response
                    'make-list-targets-for-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-targets))
      (common-lisp:list
       (common-lisp:cons "securityProfileTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-groups-for-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-groups-for-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-for-thing-request
                    'make-list-thing-groups-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-groups-for-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-groups-for-thing-response-"))
   (thing-groups common-lisp:nil :type
    (common-lisp:or thing-group-name-and-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-for-thing-response
                    'make-list-thing-groups-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-groups-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (parent-group common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (name-prefix-filter common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (recursive common-lisp:nil :type
    (common-lisp:or recursive-without-default common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-request
                    'make-list-thing-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-groups-response-"))
   (thing-groups common-lisp:nil :type
    (common-lisp:or thing-group-name-and-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-response
                    'make-list-thing-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-principals-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-request
                    'make-list-thing-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-principals-response-"))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-response
                    'make-list-thing-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-registration-task-reports-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-thing-registration-task-reports-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null))
   (report-type (common-lisp:error ":reporttype is required") :type
    (common-lisp:or report-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-task-reports-request
                    'make-list-thing-registration-task-reports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-registration-task-reports-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-thing-registration-task-reports-response-"))
   (resource-links common-lisp:nil :type
    (common-lisp:or s3file-url-list common-lisp:null))
   (report-type common-lisp:nil :type
    (common-lisp:or report-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-task-reports-response
                    'make-list-thing-registration-task-reports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-links))
      (common-lisp:list
       (common-lisp:cons "resourceLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "reportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-registration-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-registration-tasks-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-tasks-request
                    'make-list-thing-registration-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-registration-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-registration-tasks-response-"))
   (task-ids common-lisp:nil :type
    (common-lisp:or task-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-tasks-response
                    'make-list-thing-registration-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-ids))
      (common-lisp:list
       (common-lisp:cons "taskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-types-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-request 'make-list-thing-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-types-response-"))
   (thing-types common-lisp:nil :type
    (common-lisp:or thing-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-response
                    'make-list-thing-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-types))
      (common-lisp:list
       (common-lisp:cons "thingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-in-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-in-billing-group-request-"))
   (billing-group-name (common-lisp:error ":billinggroupname is required")
    :type (common-lisp:or billing-group-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-in-billing-group-request
                    'make-list-things-in-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-in-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-in-billing-group-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-in-billing-group-response
                    'make-list-things-in-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-in-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-in-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (recursive common-lisp:nil :type
    (common-lisp:or recursive common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-in-thing-group-request
                    'make-list-things-in-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-in-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-in-thing-group-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-in-thing-group-response
                    'make-list-things-in-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (use-prefix-attribute-value common-lisp:nil :type
    (common-lisp:or |usePrefixAttributeValue| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-request 'make-list-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-attribute-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-response 'make-list-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rule-destinations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rule-destinations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or topic-rule-destination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rule-destinations-request
                    'make-list-topic-rule-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rule-destinations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rule-destinations-response-"))
   (destination-summaries common-lisp:nil :type
    (common-lisp:or topic-rule-destination-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rule-destinations-response
                    'make-list-topic-rule-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-summaries))
      (common-lisp:list
       (common-lisp:cons "destinationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rules-request-"))
   (topic common-lisp:nil :type (common-lisp:or topic common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or topic-rule-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-request 'make-list-topic-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rules-response-"))
   (rules common-lisp:nil :type
    (common-lisp:or topic-rule-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-response
                    'make-list-topic-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-v2logging-levels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-v2logging-levels-request-"))
   (target-type common-lisp:nil :type
    (common-lisp:or log-target-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or skyfall-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-v2logging-levels-request
                    'make-list-v2logging-levels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-v2logging-levels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-v2logging-levels-response-"))
   (log-target-configurations common-lisp:nil :type
    (common-lisp:or log-target-configurations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-v2logging-levels-response
                    'make-list-v2logging-levels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-target-configurations))
      (common-lisp:list
       (common-lisp:cons "logTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-violation-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-violation-events-request-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior-criteria-type common-lisp:nil :type
    (common-lisp:or behavior-criteria-type common-lisp:null))
   (list-suppressed-alerts common-lisp:nil :type
    (common-lisp:or list-suppressed-alerts common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-violation-events-request
                    'make-list-violation-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-violation-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-violation-events-response-"))
   (violation-events common-lisp:nil :type
    (common-lisp:or violation-events common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-violation-events-response
                    'make-list-violation-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-events))
      (common-lisp:list
       (common-lisp:cons "violationEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (location-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-location-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (tracker-name (common-lisp:error ":trackername is required") :type
    (common-lisp:or string common-lisp:null))
   (device-id (common-lisp:error ":deviceid is required") :type
    (common-lisp:or string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or location-timestamp common-lisp:null))
   (latitude (common-lisp:error ":latitude is required") :type
    (common-lisp:or string common-lisp:null))
   (longitude (common-lisp:error ":longitude is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location-action 'make-location-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "trackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "deviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (location-timestamp (:copier common-lisp:nil)
      (:conc-name "struct-shape-location-timestamp-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'location-timestamp 'make-location-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-timestamp))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (log-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-target-"))
   (target-type (common-lisp:error ":targettype is required") :type
    (common-lisp:or log-target-type common-lisp:null))
   (target-name common-lisp:nil :type
    (common-lisp:or log-target-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-target 'make-log-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-target-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-target-configuration-"))
   (log-target common-lisp:nil :type
    (common-lisp:or log-target common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-target-configuration 'make-log-target-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-target))
      (common-lisp:list
       (common-lisp:cons "logTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-target-configurations ()
   '(trivial-types:proper-list log-target-configuration))
 (common-lisp:defun make-log-target-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-target-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-target-name () 'common-lisp:string)
(common-lisp:deftype log-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logging-options-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-options-payload-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-options-payload 'make-logging-options-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (machine-learning-detection-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-machine-learning-detection-config-"))
   (confidence-level (common-lisp:error ":confidencelevel is required") :type
    (common-lisp:or confidence-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'machine-learning-detection-config
                    'make-machine-learning-detection-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-level))
      (common-lisp:list
       (common-lisp:cons "confidenceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maintenance-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-maintenance-window-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or cron-expression common-lisp:null))
   (duration-in-minutes (common-lisp:error ":durationinminutes is required")
    :type (common-lisp:or duration-in-minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window 'make-maintenance-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-windows ()
   '(trivial-types:proper-list maintenance-window))
 (common-lisp:defun make-maintenance-windows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list maintenance-window))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-exception
                    'malformed-policy-exception-message)))
(common-lisp:deftype managed-job-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-job-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-job-template-summary-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or job-template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or managed-job-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (environments common-lisp:nil :type
    (common-lisp:or environments common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or managed-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-job-template-summary
                    'make-managed-job-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-job-templates-summary-list ()
   '(trivial-types:proper-list managed-job-template-summary))
 (common-lisp:defun make-managed-job-templates-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-job-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-template-version () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-buckets () 'common-lisp:integer)
(common-lisp:deftype max-job-executions-per-min () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum () 'common-lisp:double-float)
(common-lisp:deftype maximum-per-minute () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-expiry () 'common-lisp:string)
(common-lisp:deftype message-format () 'common-lisp:string)
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-datum (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-datum-"))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-datum 'make-metric-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datum))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-datum-list ()
   '(trivial-types:proper-list metric-datum))
 (common-lisp:defun make-metric-datum-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-dimension-"))
   (dimension-name (common-lisp:error ":dimensionname is required") :type
    (common-lisp:or dimension-name common-lisp:null))
   (operator common-lisp:nil :type
    (common-lisp:or dimension-value-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "dimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-names () '(trivial-types:proper-list metric-name))
 (common-lisp:defun make-metric-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-to-retain (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-to-retain-"))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or behavior-metric common-lisp:null))
   (metric-dimension common-lisp:nil :type
    (common-lisp:or metric-dimension common-lisp:null))
   (export-metric common-lisp:nil :type
    (common-lisp:or export-metric common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-to-retain 'make-metric-to-retain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-to-retain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-to-retain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-dimension))
      (common-lisp:list
       (common-lisp:cons "metricDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-metric))
      (common-lisp:list
       (common-lisp:cons "exportMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-to-retain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-value-"))
   (count common-lisp:nil :type
    (common-lisp:or unsigned-long common-lisp:null))
   (cidrs common-lisp:nil :type (common-lisp:or cidrs common-lisp:null))
   (ports common-lisp:nil :type (common-lisp:or ports common-lisp:null))
   (number common-lisp:nil :type (common-lisp:or number common-lisp:null))
   (numbers common-lisp:nil :type
    (common-lisp:or number-list common-lisp:null))
   (strings common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-value 'make-metric-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number))
      (common-lisp:list
       (common-lisp:cons "number"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numbers))
      (common-lisp:list
       (common-lisp:cons "numbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strings))
      (common-lisp:list
       (common-lisp:cons "strings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-export-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-export-config-"))
   (mqtt-topic (common-lisp:error ":mqtttopic is required") :type
    (common-lisp:or mqtt-topic common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metrics-export-config 'make-metrics-export-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mqtt-topic))
      (common-lisp:list
       (common-lisp:cons "mqttTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   common-lisp:nil))
(common-lisp:deftype minimum () 'common-lisp:double-float)
(common-lisp:deftype minimum-number-of-executed-things () 'common-lisp:integer)
(common-lisp:deftype missing-context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype missing-context-values ()
   '(trivial-types:proper-list missing-context-value))
 (common-lisp:defun make-missing-context-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list missing-context-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mitigation-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-mitigation-action-"))
   (name common-lisp:nil :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or mitigation-action-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (action-params common-lisp:nil :type
    (common-lisp:or mitigation-action-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mitigation-action 'make-mitigation-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mitigation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mitigation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mitigation-action))
   common-lisp:nil))
(common-lisp:deftype mitigation-action-arn () 'common-lisp:string)
(common-lisp:deftype mitigation-action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mitigation-action-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-mitigation-action-identifier-"))
   (action-name common-lisp:nil :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (action-arn common-lisp:nil :type
    (common-lisp:or mitigation-action-arn common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mitigation-action-identifier
                    'make-mitigation-action-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mitigation-action-identifier-list ()
   '(trivial-types:proper-list mitigation-action-identifier))
 (common-lisp:defun make-mitigation-action-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mitigation-action-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype mitigation-action-list ()
   '(trivial-types:proper-list mitigation-action))
 (common-lisp:defun make-mitigation-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mitigation-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mitigation-action-name-list ()
   '(trivial-types:proper-list mitigation-action-name))
 (common-lisp:defun make-mitigation-action-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mitigation-action-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-mitigation-action-params-"))
   (update-device-certificate-params common-lisp:nil :type
    (common-lisp:or update-device-certificate-params common-lisp:null))
   (update-cacertificate-params common-lisp:nil :type
    (common-lisp:or update-cacertificate-params common-lisp:null))
   (add-things-to-thing-group-params common-lisp:nil :type
    (common-lisp:or add-things-to-thing-group-params common-lisp:null))
   (replace-default-policy-version-params common-lisp:nil :type
    (common-lisp:or replace-default-policy-version-params common-lisp:null))
   (enable-io-tlogging-params common-lisp:nil :type
    (common-lisp:or enable-io-tlogging-params common-lisp:null))
   (publish-finding-to-sns-params common-lisp:nil :type
    (common-lisp:or publish-finding-to-sns-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mitigation-action-params 'make-mitigation-action-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-device-certificate-params))
      (common-lisp:list
       (common-lisp:cons "updateDeviceCertificateParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-cacertificate-params))
      (common-lisp:list
       (common-lisp:cons "updateCACertificateParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-things-to-thing-group-params))
      (common-lisp:list
       (common-lisp:cons "addThingsToThingGroupParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-default-policy-version-params))
      (common-lisp:list
       (common-lisp:cons "replaceDefaultPolicyVersionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-io-tlogging-params))
      (common-lisp:list
       (common-lisp:cons "enableIoTLoggingParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-finding-to-sns-params))
      (common-lisp:list
       (common-lisp:cons "publishFindingToSnsParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   common-lisp:nil))
(common-lisp:deftype mitigation-action-type () 'common-lisp:string)
(common-lisp:deftype mitigation-actions-task-id () 'common-lisp:string)
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:deftype mqtt-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mqtt-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-mqtt-context-"))
   (username common-lisp:nil :type
    (common-lisp:or mqtt-username common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or mqtt-password common-lisp:null))
   (client-id common-lisp:nil :type
    (common-lisp:or mqtt-client-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mqtt-context 'make-mqtt-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mqtt-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mqtt-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mqtt-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mqtt-headers (:copier common-lisp:nil)
      (:conc-name "struct-shape-mqtt-headers-"))
   (payload-format-indicator common-lisp:nil :type
    (common-lisp:or payload-format-indicator common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (response-topic common-lisp:nil :type
    (common-lisp:or response-topic common-lisp:null))
   (correlation-data common-lisp:nil :type
    (common-lisp:or correlation-data common-lisp:null))
   (message-expiry common-lisp:nil :type
    (common-lisp:or message-expiry common-lisp:null))
   (user-properties common-lisp:nil :type
    (common-lisp:or user-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mqtt-headers 'make-mqtt-headers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mqtt-headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mqtt-headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payload-format-indicator))
      (common-lisp:list
       (common-lisp:cons "payloadFormatIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-topic))
      (common-lisp:list
       (common-lisp:cons "responseTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'correlation-data))
      (common-lisp:list
       (common-lisp:cons "correlationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-expiry))
      (common-lisp:list
       (common-lisp:cons "messageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-properties))
      (common-lisp:list
       (common-lisp:cons "userProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mqtt-headers))
   common-lisp:nil))
(common-lisp:deftype mqtt-password ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype mqtt-topic () 'common-lisp:string)
(common-lisp:deftype mqtt-username () 'common-lisp:string)
(common-lisp:deftype named-shadow-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype named-shadow-names-filter ()
   '(trivial-types:proper-list shadow-name))
 (common-lisp:defun make-named-shadow-names-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shadow-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype namespace-id () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-compliant-checks-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (non-compliant-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-non-compliant-resource-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or resource-identifier common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'non-compliant-resource 'make-non-compliant-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   common-lisp:nil))
(common-lisp:deftype non-compliant-resources-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-configured-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-configured-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-configured-exception
                    'not-configured-exception-message)))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype number () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype number-list () '(trivial-types:proper-list number))
 (common-lisp:defun make-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-of-retries () 'common-lisp:integer)
(common-lisp:deftype number-of-things () 'common-lisp:integer)
(common-lisp:deftype otaupdate-arn () 'common-lisp:string)
(common-lisp:deftype otaupdate-description () 'common-lisp:string)
(common-lisp:deftype otaupdate-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (otaupdate-file (:copier common-lisp:nil)
      (:conc-name "struct-shape-otaupdate-file-"))
   (file-name common-lisp:nil :type
    (common-lisp:or file-name common-lisp:null))
   (file-type common-lisp:nil :type
    (common-lisp:or file-type common-lisp:null))
   (file-version common-lisp:nil :type
    (common-lisp:or otaupdate-file-version common-lisp:null))
   (file-location common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (code-signing common-lisp:nil :type
    (common-lisp:or code-signing common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'otaupdate-file 'make-otaupdate-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-version))
      (common-lisp:list
       (common-lisp:cons "fileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-location))
      (common-lisp:list
       (common-lisp:cons "fileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-signing))
      (common-lisp:list
       (common-lisp:cons "codeSigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-file))
   common-lisp:nil))
(common-lisp:deftype otaupdate-file-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype otaupdate-files ()
   '(trivial-types:proper-list otaupdate-file))
 (common-lisp:defun make-otaupdate-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list otaupdate-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype otaupdate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (otaupdate-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-otaupdate-info-"))
   (ota-update-id common-lisp:nil :type
    (common-lisp:or otaupdate-id common-lisp:null))
   (ota-update-arn common-lisp:nil :type
    (common-lisp:or otaupdate-arn common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or otaupdate-description common-lisp:null))
   (targets common-lisp:nil :type (common-lisp:or targets common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null))
   (aws-job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or aws-job-executions-rollout-config common-lisp:null))
   (aws-job-presigned-url-config common-lisp:nil :type
    (common-lisp:or aws-job-presigned-url-config common-lisp:null))
   (target-selection common-lisp:nil :type
    (common-lisp:or target-selection common-lisp:null))
   (ota-update-files common-lisp:nil :type
    (common-lisp:or otaupdate-files common-lisp:null))
   (ota-update-status common-lisp:nil :type
    (common-lisp:or otaupdate-status common-lisp:null))
   (aws-iot-job-id common-lisp:nil :type
    (common-lisp:or aws-iot-job-id common-lisp:null))
   (aws-iot-job-arn common-lisp:nil :type
    (common-lisp:or aws-iot-job-arn common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or error-info common-lisp:null))
   (additional-parameters common-lisp:nil :type
    (common-lisp:or additional-parameter-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'otaupdate-info 'make-otaupdate-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "awsJobPresignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-files))
      (common-lisp:list
       (common-lisp:cons "otaUpdateFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-status))
      (common-lisp:list
       (common-lisp:cons "otaUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-id))
      (common-lisp:list
       (common-lisp:cons "awsIotJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-arn))
      (common-lisp:list
       (common-lisp:cons "awsIotJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-parameters))
      (common-lisp:list
       (common-lisp:cons "additionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-info))
   common-lisp:nil))
(common-lisp:deftype otaupdate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (otaupdate-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-otaupdate-summary-"))
   (ota-update-id common-lisp:nil :type
    (common-lisp:or otaupdate-id common-lisp:null))
   (ota-update-arn common-lisp:nil :type
    (common-lisp:or otaupdate-arn common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'otaupdate-summary 'make-otaupdate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype otaupdates-summary ()
   '(trivial-types:proper-list otaupdate-summary))
 (common-lisp:defun make-otaupdates-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list otaupdate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (open-search-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-search-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or elasticsearch-endpoint common-lisp:null))
   (index (common-lisp:error ":index is required") :type
    (common-lisp:or elasticsearch-index common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or elasticsearch-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or elasticsearch-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-search-action 'make-open-search-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-search-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-search-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-search-action))
   common-lisp:nil))
(common-lisp:deftype optional () 'common-lisp:boolean)
(common-lisp:deftype optional-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (outgoing-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-outgoing-certificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (transferred-to common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outgoing-certificate 'make-outgoing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transferred-to))
      (common-lisp:list
       (common-lisp:cons "transferredTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outgoing-certificates ()
   '(trivial-types:proper-list outgoing-certificate))
 (common-lisp:defun make-outgoing-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outgoing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype override-dynamic-groups () 'common-lisp:boolean)
(common-lisp:deftype package-arn () 'common-lisp:string)
(common-lisp:deftype package-catalog-max-results () 'common-lisp:integer)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-summary-"))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (default-version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'package-summary 'make-package-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-summary-list ()
   '(trivial-types:proper-list package-summary))
 (common-lisp:defun make-package-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-version-action () 'common-lisp:string)
(common-lisp:deftype package-version-arn () 'common-lisp:string)
(common-lisp:deftype package-version-error-reason () 'common-lisp:string)
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-summary-"))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-summary 'make-package-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-summary-list ()
   '(trivial-types:proper-list package-version-summary))
 (common-lisp:defun make-package-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameter-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype payload-field () 'common-lisp:string)
(common-lisp:deftype payload-format-indicator () 'common-lisp:string)
(common-lisp:deftype payload-version () 'common-lisp:string)
(common-lisp:deftype percent () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype percent-list () '(trivial-types:proper-list percent))
 (common-lisp:defun make-percent-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list percent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (percent-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-percent-pair-"))
   (percent common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or percent-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'percent-pair 'make-percent-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input percent-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input percent-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent))
      (common-lisp:list
       (common-lisp:cons "percent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input percent-pair))
   common-lisp:nil))
(common-lisp:deftype percent-value () 'common-lisp:double-float)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype percentiles () '(trivial-types:proper-list percent-pair))
 (common-lisp:defun make-percentiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list percent-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policies () '(trivial-types:proper-list policy))
 (common-lisp:defun make-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy (:copier common-lisp:nil) (:conc-name "struct-shape-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-documents ()
   '(trivial-types:proper-list policy-document))
 (common-lisp:defun make-policy-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-names () '(trivial-types:proper-list policy-name))
 (common-lisp:defun make-policy-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-targets ()
   '(trivial-types:proper-list policy-target))
 (common-lisp:defun make-policy-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-version-"))
   (version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "createDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-version))
   common-lisp:nil))
(common-lisp:deftype policy-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-version-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-version-identifier-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-version-identifier
                    'make-policy-version-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-versions ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun make-policy-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype ports () '(trivial-types:proper-list port))
 (common-lisp:defun make-ports
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (presigned-url-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-presigned-url-config-"))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (expires-in-sec common-lisp:nil :type
    (common-lisp:or expires-in-sec common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'presigned-url-config 'make-presigned-url-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input presigned-url-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input presigned-url-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-sec))
      (common-lisp:list
       (common-lisp:cons "expiresInSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input presigned-url-config))
   common-lisp:nil))
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:deftype principal-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal-arn))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype private-key () 'common-lisp:string)
(common-lisp:deftype processing-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype processing-target-name-list ()
   '(trivial-types:proper-list processing-target-name))
 (common-lisp:defun make-processing-target-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processing-target-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun make-protocols
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioning-hook (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioning-hook-"))
   (payload-version common-lisp:nil :type
    (common-lisp:or payload-version common-lisp:null))
   (target-arn (common-lisp:error ":targetarn is required") :type
    (common-lisp:or target-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioning-hook 'make-provisioning-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioning-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioning-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-version))
      (common-lisp:list
       (common-lisp:cons "payloadVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioning-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-template-listing ()
   '(trivial-types:proper-list provisioning-template-summary))
 (common-lisp:defun make-provisioning-template-listing
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioning-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioning-template-summary-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioning-template-summary
                    'make-provisioning-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-template-version-listing ()
   '(trivial-types:proper-list provisioning-template-version-summary))
 (common-lisp:defun make-provisioning-template-version-listing
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioning-template-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioning-template-version-summary-"))
   (version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioning-template-version-summary
                    'make-provisioning-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   common-lisp:nil))
(common-lisp:deftype public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype public-key-map () 'common-lisp:hash-table)
 (common-lisp:defun make-public-key-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (publish-finding-to-sns-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-finding-to-sns-params-"))
   (topic-arn (common-lisp:error ":topicarn is required") :type
    (common-lisp:or sns-topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-finding-to-sns-params
                    'make-publish-finding-to-sns-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-asset-property-value-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-asset-property-value-entry-"))
   (entry-id common-lisp:nil :type
    (common-lisp:or asset-property-entry-id common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or asset-id common-lisp:null))
   (property-id common-lisp:nil :type
    (common-lisp:or asset-property-id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (property-values (common-lisp:error ":propertyvalues is required") :type
    (common-lisp:or asset-property-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-asset-property-value-entry
                    'make-put-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-asset-property-value-entry-list ()
   '(trivial-types:proper-list put-asset-property-value-entry))
 (common-lisp:defun make-put-asset-property-value-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-item-input-"))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-item-input 'make-put-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-verification-state-on-violation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-verification-state-on-violation-request-"))
   (violation-id (common-lisp:error ":violationid is required") :type
    (common-lisp:or violation-id common-lisp:null))
   (verification-state (common-lisp:error ":verificationstate is required")
    :type (common-lisp:or verification-state common-lisp:null))
   (verification-state-description common-lisp:nil :type
    (common-lisp:or verification-state-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-verification-state-on-violation-request
                    'make-put-verification-state-on-violation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-verification-state-on-violation-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-verification-state-on-violation-response-")))
 (common-lisp:export
  (common-lisp:list 'put-verification-state-on-violation-response
                    'make-put-verification-state-on-violation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   common-lisp:nil))
(common-lisp:deftype qos () 'common-lisp:integer)
(common-lisp:deftype query-max-results () 'common-lisp:integer)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:deftype query-version () 'common-lisp:string)
(common-lisp:deftype queue-url () 'common-lisp:string)
(common-lisp:deftype queued-things () 'common-lisp:integer)
(common-lisp:deftype range-key-field () 'common-lisp:string)
(common-lisp:deftype range-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rate-increase-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-increase-criteria-"))
   (number-of-notified-things common-lisp:nil :type
    (common-lisp:or number-of-things common-lisp:null))
   (number-of-succeeded-things common-lisp:nil :type
    (common-lisp:or number-of-things common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-increase-criteria 'make-rate-increase-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-notified-things))
      (common-lisp:list
       (common-lisp:cons "numberOfNotifiedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   common-lisp:nil))
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:deftype reason-for-non-compliance () 'common-lisp:string)
(common-lisp:deftype reason-for-non-compliance-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reason-for-non-compliance-codes ()
   '(trivial-types:proper-list reason-for-non-compliance-code))
 (common-lisp:defun make-reason-for-non-compliance-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reason-for-non-compliance-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recursive () 'common-lisp:boolean)
(common-lisp:deftype recursive-without-default () 'common-lisp:boolean)
(common-lisp:deftype regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cacertificate-request-"))
   (ca-certificate (common-lisp:error ":cacertificate is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (verification-certificate common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null))
   (allow-auto-registration common-lisp:nil :type
    (common-lisp:or allow-auto-registration common-lisp:null))
   (registration-config common-lisp:nil :type
    (common-lisp:or registration-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or certificate-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-request
                    'make-register-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate))
      (common-lisp:list
       (common-lisp:cons "caCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-certificate))
      (common-lisp:list
       (common-lisp:cons "verificationCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cacertificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-response
                    'make-register-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-request-"))
   (certificate-pem (common-lisp:error ":certificatepem is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (ca-certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active-flag common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-request
                    'make-register-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-pem))
      (common-lisp:list
       (common-lisp:cons "caCertificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-response
                    'make-register-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-without-carequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-without-carequest-"))
   (certificate-pem (common-lisp:error ":certificatepem is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-without-carequest
                    'make-register-certificate-without-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-without-caresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-without-caresponse-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-without-caresponse
                    'make-register-certificate-without-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-thing-request-"))
   (template-body (common-lisp:error ":templatebody is required") :type
    (common-lisp:or template-body common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-thing-request 'make-register-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-thing-response-"))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-thing-response 'make-register-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   common-lisp:nil))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition registration-code-validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       registration-code-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'registration-code-validation-exception
                    'registration-code-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-config-"))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-config 'make-registration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registration-config))
   common-lisp:nil))
(common-lisp:deftype registry-max-results () 'common-lisp:integer)
(common-lisp:deftype registry-s3bucket-name () 'common-lisp:string)
(common-lisp:deftype registry-s3key-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reject-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-certificate-transfer-request
                    'make-reject-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype rejected-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (related-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-related-resource-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or resource-identifier common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'related-resource 'make-related-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-resources ()
   '(trivial-types:proper-list related-resource))
 (common-lisp:defun make-related-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype remove-authorizer-config () 'common-lisp:boolean)
(common-lisp:deftype remove-auto-registration () 'common-lisp:boolean)
(common-lisp:deftype remove-hook () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-thing-from-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-thing-from-billing-group-request-"))
   (billing-group-name common-lisp:nil :type
    (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-arn common-lisp:nil :type
    (common-lisp:or billing-group-arn common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-billing-group-request
                    'make-remove-thing-from-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-thing-from-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-thing-from-billing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-billing-group-response
                    'make-remove-thing-from-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-thing-from-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-thing-from-thing-group-request-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-arn common-lisp:nil :type
    (common-lisp:or thing-group-arn common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-thing-group-request
                    'make-remove-thing-from-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-thing-from-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-thing-from-thing-group-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-thing-group-response
                    'make-remove-thing-from-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   common-lisp:nil))
(common-lisp:deftype remove-thing-type () 'common-lisp:boolean)
(common-lisp:deftype removed-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (replace-default-policy-version-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-default-policy-version-params-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or policy-template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-default-policy-version-params
                    'make-replace-default-policy-version-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload (common-lisp:error ":topicrulepayload is required")
    :type (common-lisp:or topic-rule-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-topic-rule-request
                    'make-replace-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload)))
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (republish-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-republish-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (topic (common-lisp:error ":topic is required") :type
    (common-lisp:or topic-pattern common-lisp:null))
   (qos common-lisp:nil :type (common-lisp:or qos common-lisp:null))
   (headers common-lisp:nil :type
    (common-lisp:or mqtt-headers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'republish-action 'make-republish-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qos))
      (common-lisp:list
       (common-lisp:cons "qos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input republish-action))
   common-lisp:nil))
(common-lisp:deftype reserved-domain-configuration-name () 'common-lisp:string)
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-id
                    'resource-already-exists-exception-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arns () 'common-lisp:hash-table)
 (common-lisp:defun make-resource-arns (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-attribute-key () 'common-lisp:string)
(common-lisp:deftype resource-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-resource-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-identifier-"))
   (device-certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (ca-certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (cognito-identity-pool-id common-lisp:nil :type
    (common-lisp:or cognito-identity-pool-id common-lisp:null))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (policy-version-identifier common-lisp:nil :type
    (common-lisp:or policy-version-identifier common-lisp:null))
   (account common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (role-alias-arn common-lisp:nil :type
    (common-lisp:or role-alias-arn common-lisp:null))
   (issuer-certificate-identifier common-lisp:nil :type
    (common-lisp:or issuer-certificate-identifier common-lisp:null))
   (device-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-identifier 'make-resource-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-certificate-id))
      (common-lisp:list
       (common-lisp:cons "deviceCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-id))
      (common-lisp:list
       (common-lisp:cons "caCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-version-identifier))
      (common-lisp:list
       (common-lisp:cons "policyVersionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "deviceCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-identifier))
   common-lisp:nil))
(common-lisp:deftype resource-logical-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-registration-failure-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-registration-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-registration-failure-exception
                    'resource-registration-failure-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype response-topic () 'common-lisp:string)
(common-lisp:deftype retry-attempt () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (retry-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-criteria-"))
   (failure-type (common-lisp:error ":failuretype is required") :type
    (common-lisp:or retryable-failure-type common-lisp:null))
   (number-of-retries (common-lisp:error ":numberofretries is required") :type
    (common-lisp:or number-of-retries common-lisp:null)))
 (common-lisp:export (common-lisp:list 'retry-criteria 'make-retry-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retry-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retry-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-retries))
      (common-lisp:list
       (common-lisp:cons "numberOfRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retry-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retry-criteria-list ()
   '(trivial-types:proper-list retry-criteria))
 (common-lisp:defun make-retry-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retry-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retryable-failure-type () 'common-lisp:string)
(common-lisp:deftype role-alias () 'common-lisp:string)
(common-lisp:deftype role-alias-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (role-alias-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-role-alias-description-"))
   (role-alias common-lisp:nil :type
    (common-lisp:or role-alias common-lisp:null))
   (role-alias-arn common-lisp:nil :type
    (common-lisp:or role-alias-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (credential-duration-seconds common-lisp:nil :type
    (common-lisp:or credential-duration-seconds common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'role-alias-description 'make-role-alias-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype role-aliases () '(trivial-types:proper-list role-alias))
 (common-lisp:defun make-role-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rollout-rate-per-minute () 'common-lisp:integer)
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3action (:copier common-lisp:nil) (:conc-name "struct-shape-s3action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null))
   (canned-acl common-lisp:nil :type
    (common-lisp:or canned-access-control-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3action 'make-s3action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "cannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3action))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3destination-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:deftype s3file-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3file-url-list ()
   '(trivial-types:proper-list s3file-url))
 (common-lisp:defun make-s3file-url-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3file-url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or s3version common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3version () 'common-lisp:string)
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-action-"))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or salesforce-token common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or salesforce-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-action 'make-salesforce-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input salesforce-action))
   common-lisp:nil))
(common-lisp:deftype salesforce-endpoint () 'common-lisp:string)
(common-lisp:deftype salesforce-token () 'common-lisp:string)
(common-lisp:deftype scheduled-audit-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-audit-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-audit-metadata-"))
   (scheduled-audit-name common-lisp:nil :type
    (common-lisp:or scheduled-audit-name common-lisp:null))
   (scheduled-audit-arn common-lisp:nil :type
    (common-lisp:or scheduled-audit-arn common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or audit-frequency common-lisp:null))
   (day-of-month common-lisp:nil :type
    (common-lisp:or day-of-month common-lisp:null))
   (day-of-week common-lisp:nil :type
    (common-lisp:or day-of-week common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-audit-metadata 'make-scheduled-audit-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-audit-metadata-list ()
   '(trivial-types:proper-list scheduled-audit-metadata))
 (common-lisp:defun make-scheduled-audit-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-audit-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-audit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-job-rollout (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-job-rollout-"))
   (start-time common-lisp:nil :type
    (common-lisp:or string-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-job-rollout 'make-scheduled-job-rollout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-job-rollout-list ()
   '(trivial-types:proper-list scheduled-job-rollout))
 (common-lisp:defun make-scheduled-job-rollout-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-job-rollout))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduling-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduling-config-"))
   (start-time common-lisp:nil :type
    (common-lisp:or string-date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or string-date-time common-lisp:null))
   (end-behavior common-lisp:nil :type
    (common-lisp:or job-end-behavior common-lisp:null))
   (maintenance-windows common-lisp:nil :type
    (common-lisp:or maintenance-windows common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduling-config 'make-scheduling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-behavior))
      (common-lisp:list
       (common-lisp:cons "endBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduling-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-index-request-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or query-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-query-max-results common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-index-request 'make-search-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-index-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (things common-lisp:nil :type
    (common-lisp:or thing-document-list common-lisp:null))
   (thing-groups common-lisp:nil :type
    (common-lisp:or thing-group-document-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-index-response 'make-search-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   common-lisp:nil))
(common-lisp:deftype search-query-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype searchable-attributes ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun make-searchable-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype seconds () 'common-lisp:integer)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy () 'common-lisp:string)
(common-lisp:deftype security-profile-arn () 'common-lisp:string)
(common-lisp:deftype security-profile-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-identifier-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or security-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-identifier
                    'make-security-profile-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profile-identifiers ()
   '(trivial-types:proper-list security-profile-identifier))
 (common-lisp:defun make-security-profile-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-target-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or security-profile-target-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-target 'make-security-profile-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   common-lisp:nil))
(common-lisp:deftype security-profile-target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-target-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-target-mapping-"))
   (security-profile-identifier common-lisp:nil :type
    (common-lisp:or security-profile-identifier common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or security-profile-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-target-mapping
                    'make-security-profile-target-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "securityProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profile-target-mappings ()
   '(trivial-types:proper-list security-profile-target-mapping))
 (common-lisp:defun make-security-profile-target-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-target-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-profile-targets ()
   '(trivial-types:proper-list security-profile-target))
 (common-lisp:defun make-security-profile-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-profile-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype server-certificate-arns ()
   '(trivial-types:proper-list acm-certificate-arn))
 (common-lisp:defun make-server-certificate-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list acm-certificate-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (server-certificate-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-certificate-config-"))
   (enable-ocspcheck common-lisp:nil :type
    (common-lisp:or enable-ocspcheck common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate-config
                    'make-server-certificate-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ocspcheck))
      (common-lisp:list
       (common-lisp:cons "enableOCSPCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   common-lisp:nil))
(common-lisp:deftype server-certificate-status () 'common-lisp:string)
(common-lisp:deftype server-certificate-status-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-certificate-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-certificate-summary-"))
   (server-certificate-arn common-lisp:nil :type
    (common-lisp:or acm-certificate-arn common-lisp:null))
   (server-certificate-status common-lisp:nil :type
    (common-lisp:or server-certificate-status common-lisp:null))
   (server-certificate-status-detail common-lisp:nil :type
    (common-lisp:or server-certificate-status-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate-summary
                    'make-server-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "serverCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-status))
      (common-lisp:list
       (common-lisp:cons "serverCertificateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-status-detail))
      (common-lisp:list
       (common-lisp:cons "serverCertificateStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-certificates ()
   '(trivial-types:proper-list server-certificate-summary))
 (common-lisp:defun make-server-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-name () 'common-lisp:string)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype set-as-active () 'common-lisp:boolean)
(common-lisp:deftype set-as-active-flag () 'common-lisp:boolean)
(common-lisp:deftype set-as-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-authorizer-request
                    'make-set-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-authorizer-response-"))
   (authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-arn common-lisp:nil :type
    (common-lisp:or authorizer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-authorizer-response
                    'make-set-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-logging-options-request-"))
   (logging-options-payload
    (common-lisp:error ":loggingoptionspayload is required") :type
    (common-lisp:or logging-options-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-logging-options-request
                    'make-set-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-options-payload))
      (common-lisp:list
       (common-lisp:cons "loggingOptionsPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'logging-options-payload)))
(common-lisp:progn
 (common-lisp:defstruct
     (set-v2logging-level-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-v2logging-level-request-"))
   (log-target (common-lisp:error ":logtarget is required") :type
    (common-lisp:or log-target common-lisp:null))
   (log-level (common-lisp:error ":loglevel is required") :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-v2logging-level-request
                    'make-set-v2logging-level-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-target))
      (common-lisp:list
       (common-lisp:cons "logTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-v2logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-v2logging-options-request-"))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (default-log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (disable-all-logs common-lisp:nil :type
    (common-lisp:or disable-all-logs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-v2logging-options-request
                    'make-set-v2logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "defaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-all-logs))
      (common-lisp:list
       (common-lisp:cons "disableAllLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   common-lisp:nil))
(common-lisp:deftype shadow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sig-v4authorization (:copier common-lisp:nil)
      (:conc-name "struct-shape-sig-v4authorization-"))
   (signing-region (common-lisp:error ":signingregion is required") :type
    (common-lisp:or signing-region common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or service-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sig-v4authorization 'make-sig-v4authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-region))
      (common-lisp:list
       (common-lisp:cons "signingRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   common-lisp:nil))
(common-lisp:deftype signature ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype signature-algorithm () 'common-lisp:string)
(common-lisp:deftype signing-job-id () 'common-lisp:string)
(common-lisp:deftype signing-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (signing-profile-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-signing-profile-parameter-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (certificate-path-on-device common-lisp:nil :type
    (common-lisp:or certificate-path-on-device common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signing-profile-parameter
                    'make-signing-profile-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-path-on-device))
      (common-lisp:list
       (common-lisp:cons "certificatePathOnDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   common-lisp:nil))
(common-lisp:deftype signing-region () 'common-lisp:string)
(common-lisp:deftype skipped-findings-count () 'common-lisp:integer)
(common-lisp:deftype skyfall-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (sns-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-action-"))
   (target-arn (common-lisp:error ":targetarn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (message-format common-lisp:nil :type
    (common-lisp:or message-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sns-action 'make-sns-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "messageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-action))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition sql-parse-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       sql-parse-exception-message)))
 (common-lisp:export
  (common-lisp:list 'sql-parse-exception 'sql-parse-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (sqs-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-sqs-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (queue-url (common-lisp:error ":queueurl is required") :type
    (common-lisp:or queue-url common-lisp:null))
   (use-base64 common-lisp:nil :type
    (common-lisp:or use-base64 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sqs-action 'make-sqs-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-url))
      (common-lisp:list
       (common-lisp:cons "queueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-base64))
      (common-lisp:list
       (common-lisp:cons "useBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqs-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-audit-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-audit-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or audit-mitigation-actions-task-target common-lisp:null))
   (audit-check-to-actions-mapping
    (common-lisp:error ":auditchecktoactionsmapping is required") :type
    (common-lisp:or audit-check-to-actions-mapping common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-audit-mitigation-actions-task-request
                    'make-start-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-actions-mapping))
      (common-lisp:list
       (common-lisp:cons "auditCheckToActionsMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-audit-mitigation-actions-task-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-audit-mitigation-actions-task-response-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-audit-mitigation-actions-task-response
                    'make-start-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-detect-mitigation-actions-task-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-detect-mitigation-actions-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or detect-mitigation-actions-task-target common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or detect-mitigation-actions-to-execute-list
                    common-lisp:null))
   (violation-event-occurrence-range common-lisp:nil :type
    (common-lisp:or violation-event-occurrence-range common-lisp:null))
   (include-only-active-violations common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (include-suppressed-alerts common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-detect-mitigation-actions-task-request
                    'make-start-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-occurrence-range))
      (common-lisp:list
       (common-lisp:cons "violationEventOccurrenceRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-only-active-violations))
      (common-lisp:list
       (common-lisp:cons "includeOnlyActiveViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-suppressed-alerts))
      (common-lisp:list
       (common-lisp:cons "includeSuppressedAlerts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-detect-mitigation-actions-task-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-detect-mitigation-actions-task-response-"))
   (task-id common-lisp:nil :type
    (common-lisp:or mitigation-actions-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-detect-mitigation-actions-task-response
                    'make-start-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-on-demand-audit-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-on-demand-audit-task-request-"))
   (target-check-names (common-lisp:error ":targetchecknames is required")
    :type (common-lisp:or target-audit-check-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-audit-task-request
                    'make-start-on-demand-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-on-demand-audit-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-on-demand-audit-task-response-"))
   (task-id common-lisp:nil :type
    (common-lisp:or audit-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-audit-task-response
                    'make-start-on-demand-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-signing-job-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-signing-job-parameter-"))
   (signing-profile-parameter common-lisp:nil :type
    (common-lisp:or signing-profile-parameter common-lisp:null))
   (signing-profile-name common-lisp:nil :type
    (common-lisp:or signing-profile-name common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-signing-job-parameter
                    'make-start-signing-job-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-parameter))
      (common-lisp:list
       (common-lisp:cons "signingProfileParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-name))
      (common-lisp:list
       (common-lisp:cons "signingProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-thing-registration-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-thing-registration-task-request-"))
   (template-body (common-lisp:error ":templatebody is required") :type
    (common-lisp:or template-body common-lisp:null))
   (input-file-bucket (common-lisp:error ":inputfilebucket is required") :type
    (common-lisp:or registry-s3bucket-name common-lisp:null))
   (input-file-key (common-lisp:error ":inputfilekey is required") :type
    (common-lisp:or registry-s3key-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-thing-registration-task-request
                    'make-start-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-bucket))
      (common-lisp:list
       (common-lisp:cons "inputFileBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-key))
      (common-lisp:list
       (common-lisp:cons "inputFileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-thing-registration-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-thing-registration-task-response-"))
   (task-id common-lisp:nil :type (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-thing-registration-task-response
                    'make-start-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:deftype state-machine-name () 'common-lisp:string)
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype state-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (statistical-threshold (:copier common-lisp:nil)
      (:conc-name "struct-shape-statistical-threshold-"))
   (statistic common-lisp:nil :type
    (common-lisp:or evaluation-statistic common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'statistical-threshold 'make-statistical-threshold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-statistics-"))
   (count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (average common-lisp:nil :type (common-lisp:or average common-lisp:null))
   (sum common-lisp:nil :type (common-lisp:or sum common-lisp:null))
   (minimum common-lisp:nil :type (common-lisp:or minimum common-lisp:null))
   (maximum common-lisp:nil :type (common-lisp:or maximum common-lisp:null))
   (sum-of-squares common-lisp:nil :type
    (common-lisp:or sum-of-squares common-lisp:null))
   (variance common-lisp:nil :type (common-lisp:or variance common-lisp:null))
   (std-deviation common-lisp:nil :type
    (common-lisp:or std-deviation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-of-squares))
      (common-lisp:list
       (common-lisp:cons "sumOfSquares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variance))
      (common-lisp:list
       (common-lisp:cons "variance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-deviation))
      (common-lisp:list
       (common-lisp:cons "stdDeviation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype std-deviation () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (step-functions-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-step-functions-action-"))
   (execution-name-prefix common-lisp:nil :type
    (common-lisp:or execution-name-prefix common-lisp:null))
   (state-machine-name (common-lisp:error ":statemachinename is required")
    :type (common-lisp:or state-machine-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'step-functions-action 'make-step-functions-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-name-prefix))
      (common-lisp:list
       (common-lisp:cons "executionNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-name))
      (common-lisp:list
       (common-lisp:cons "stateMachineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-thing-registration-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-thing-registration-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-thing-registration-task-request
                    'make-stop-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-thing-registration-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-thing-registration-task-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-thing-registration-task-response
                    'make-stop-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream (:copier common-lisp:nil) (:conc-name "struct-shape-stream-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or stream-id common-lisp:null))
   (file-id common-lisp:nil :type (common-lisp:or file-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream 'make-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-id))
      (common-lisp:list
       (common-lisp:cons "fileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream))
   common-lisp:nil))
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:deftype stream-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-file (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-file-"))
   (file-id common-lisp:nil :type (common-lisp:or file-id common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream-file 'make-stream-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-id))
      (common-lisp:list
       (common-lisp:cons "fileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-file))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stream-files () '(trivial-types:proper-list stream-file))
 (common-lisp:defun make-stream-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stream-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-info-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or stream-id common-lisp:null))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (stream-version common-lisp:nil :type
    (common-lisp:or stream-version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null))
   (files common-lisp:nil :type (common-lisp:or stream-files common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream-info 'make-stream-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-info))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-summary-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or stream-id common-lisp:null))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (stream-version common-lisp:nil :type
    (common-lisp:or stream-version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stream-summary 'make-stream-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-summary))
   common-lisp:nil))
(common-lisp:deftype stream-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype streams-summary ()
   '(trivial-types:proper-list stream-summary))
 (common-lisp:defun make-streams-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list |stringValue|))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |stringValue|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype succeeded-findings-count () 'common-lisp:integer)
(common-lisp:deftype succeeded-things () 'common-lisp:integer)
(common-lisp:deftype sum () 'common-lisp:double-float)
(common-lisp:deftype sum-of-squares () 'common-lisp:double-float)
(common-lisp:deftype suppress-alerts () 'common-lisp:boolean)
(common-lisp:deftype suppress-indefinitely () 'common-lisp:boolean)
(common-lisp:deftype suppressed-non-compliant-resources-count ()
  'common-lisp:integer)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-audit-check-names ()
   '(trivial-types:proper-list audit-check-name))
 (common-lisp:defun make-target-audit-check-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-check-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-field-name () 'common-lisp:string)
(common-lisp:deftype target-field-order () 'common-lisp:string)
(common-lisp:deftype target-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-violation-ids-for-detect-mitigation-actions ()
   '(trivial-types:proper-list violation-id))
 (common-lisp:defun make-target-violation-ids-for-detect-mitigation-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list violation-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype targets () '(trivial-types:proper-list target))
 (common-lisp:defun make-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition task-already-exists-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'task-already-exists-exception
                    'task-already-exists-exception-message)))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-id-list () '(trivial-types:proper-list task-id))
 (common-lisp:defun make-task-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (task-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-statistics-"))
   (total-checks common-lisp:nil :type
    (common-lisp:or total-checks-count common-lisp:null))
   (in-progress-checks common-lisp:nil :type
    (common-lisp:or in-progress-checks-count common-lisp:null))
   (waiting-for-data-collection-checks common-lisp:nil :type
    (common-lisp:or waiting-for-data-collection-checks-count common-lisp:null))
   (compliant-checks common-lisp:nil :type
    (common-lisp:or compliant-checks-count common-lisp:null))
   (non-compliant-checks common-lisp:nil :type
    (common-lisp:or non-compliant-checks-count common-lisp:null))
   (failed-checks common-lisp:nil :type
    (common-lisp:or failed-checks-count common-lisp:null))
   (canceled-checks common-lisp:nil :type
    (common-lisp:or canceled-checks-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task-statistics 'make-task-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-checks))
      (common-lisp:list
       (common-lisp:cons "totalChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress-checks))
      (common-lisp:list
       (common-lisp:cons "inProgressChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waiting-for-data-collection-checks))
      (common-lisp:list
       (common-lisp:cons "waitingForDataCollectionChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-checks))
      (common-lisp:list
       (common-lisp:cons "compliantChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-checks))
      (common-lisp:list
       (common-lisp:cons "nonCompliantChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-checks))
      (common-lisp:list
       (common-lisp:cons "failedChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canceled-checks))
      (common-lisp:list
       (common-lisp:cons "canceledChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (task-statistics-for-audit-check (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-statistics-for-audit-check-"))
   (total-findings-count common-lisp:nil :type
    (common-lisp:or total-findings-count common-lisp:null))
   (failed-findings-count common-lisp:nil :type
    (common-lisp:or failed-findings-count common-lisp:null))
   (succeeded-findings-count common-lisp:nil :type
    (common-lisp:or succeeded-findings-count common-lisp:null))
   (skipped-findings-count common-lisp:nil :type
    (common-lisp:or skipped-findings-count common-lisp:null))
   (canceled-findings-count common-lisp:nil :type
    (common-lisp:or canceled-findings-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-statistics-for-audit-check
                    'make-task-statistics-for-audit-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-findings-count))
      (common-lisp:list
       (common-lisp:cons "totalFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-findings-count))
      (common-lisp:list
       (common-lisp:cons "failedFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'succeeded-findings-count))
      (common-lisp:list
       (common-lisp:cons "succeededFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-findings-count))
      (common-lisp:list
       (common-lisp:cons "skippedFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canceled-findings-count))
      (common-lisp:list
       (common-lisp:cons "canceledFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   common-lisp:nil))
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:deftype template-body () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-version-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (terms-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-terms-aggregation-"))
   (max-buckets common-lisp:nil :type
    (common-lisp:or max-buckets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terms-aggregation 'make-terms-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terms-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terms-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-buckets))
      (common-lisp:list
       (common-lisp:cons "maxBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terms-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-authorization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-authorization-request-"))
   (principal common-lisp:nil :type
    (common-lisp:or principal common-lisp:null))
   (cognito-identity-pool-id common-lisp:nil :type
    (common-lisp:or cognito-identity-pool-id common-lisp:null))
   (auth-infos (common-lisp:error ":authinfos is required") :type
    (common-lisp:or auth-infos common-lisp:null))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (policy-names-to-add common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null))
   (policy-names-to-skip common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-authorization-request
                    'make-test-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-infos))
      (common-lisp:list
       (common-lisp:cons "authInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names-to-add))
      (common-lisp:list
       (common-lisp:cons "policyNamesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-names-to-skip))
      (common-lisp:list
       (common-lisp:cons "policyNamesToSkip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-authorization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-authorization-response-"))
   (auth-results common-lisp:nil :type
    (common-lisp:or auth-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-authorization-response
                    'make-test-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-results))
      (common-lisp:list
       (common-lisp:cons "authResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-invoke-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-invoke-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (token-signature common-lisp:nil :type
    (common-lisp:or token-signature common-lisp:null))
   (http-context common-lisp:nil :type
    (common-lisp:or http-context common-lisp:null))
   (mqtt-context common-lisp:nil :type
    (common-lisp:or mqtt-context common-lisp:null))
   (tls-context common-lisp:nil :type
    (common-lisp:or tls-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-invoke-authorizer-request
                    'make-test-invoke-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-signature))
      (common-lisp:list
       (common-lisp:cons "tokenSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-context))
      (common-lisp:list
       (common-lisp:cons "httpContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mqtt-context))
      (common-lisp:list
       (common-lisp:cons "mqttContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-context))
      (common-lisp:list
       (common-lisp:cons "tlsContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-invoke-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-invoke-authorizer-response-"))
   (is-authenticated common-lisp:nil :type
    (common-lisp:or is-authenticated common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or principal-id common-lisp:null))
   (policy-documents common-lisp:nil :type
    (common-lisp:or policy-documents common-lisp:null))
   (refresh-after-in-seconds common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (disconnect-after-in-seconds common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-invoke-authorizer-response
                    'make-test-invoke-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-authenticated))
      (common-lisp:list
       (common-lisp:cons "isAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-documents))
      (common-lisp:list
       (common-lisp:cons "policyDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-after-in-seconds))
      (common-lisp:list
       (common-lisp:cons "refreshAfterInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-after-in-seconds))
      (common-lisp:list
       (common-lisp:cons "disconnectAfterInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype thing-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-attribute-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'thing-attribute 'make-thing-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-attribute-list ()
   '(trivial-types:proper-list thing-attribute))
 (common-lisp:defun make-thing-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thing-connectivity (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-connectivity-"))
   (connected common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or connectivity-timestamp common-lisp:null))
   (disconnect-reason common-lisp:nil :type
    (common-lisp:or disconnect-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-connectivity 'make-thing-connectivity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-connectivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-connectivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected))
      (common-lisp:list
       (common-lisp:cons "connected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disconnect-reason))
      (common-lisp:list
       (common-lisp:cons "disconnectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-connectivity))
   common-lisp:nil))
(common-lisp:deftype thing-connectivity-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-document-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-id common-lisp:nil :type (common-lisp:or thing-id common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-group-names common-lisp:nil :type
    (common-lisp:or thing-group-name-list common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (shadow common-lisp:nil :type
    (common-lisp:or json-document common-lisp:null))
   (device-defender common-lisp:nil :type
    (common-lisp:or json-document common-lisp:null))
   (connectivity common-lisp:nil :type
    (common-lisp:or thing-connectivity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'thing-document 'make-thing-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-names))
      (common-lisp:list
       (common-lisp:cons "thingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow))
      (common-lisp:list
       (common-lisp:cons "shadow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-defender))
      (common-lisp:list
       (common-lisp:cons "deviceDefender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity))
      (common-lisp:list
       (common-lisp:cons "connectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-document-list ()
   '(trivial-types:proper-list thing-document))
 (common-lisp:defun make-thing-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-group-arn () 'common-lisp:string)
(common-lisp:deftype thing-group-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-group-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-group-document-"))
   (thing-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-id common-lisp:nil :type
    (common-lisp:or thing-group-id common-lisp:null))
   (thing-group-description common-lisp:nil :type
    (common-lisp:or thing-group-description common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (parent-group-names common-lisp:nil :type
    (common-lisp:or thing-group-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-group-document 'make-thing-group-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-group-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-group-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-description))
      (common-lisp:list
       (common-lisp:cons "thingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-names))
      (common-lisp:list
       (common-lisp:cons "parentGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-group-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-group-document-list ()
   '(trivial-types:proper-list thing-group-document))
 (common-lisp:defun make-thing-group-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-group-indexing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-group-indexing-configuration-"))
   (thing-group-indexing-mode
    (common-lisp:error ":thinggroupindexingmode is required") :type
    (common-lisp:or thing-group-indexing-mode common-lisp:null))
   (managed-fields common-lisp:nil :type
    (common-lisp:or fields common-lisp:null))
   (custom-fields common-lisp:nil :type
    (common-lisp:or fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-group-indexing-configuration
                    'make-thing-group-indexing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-fields))
      (common-lisp:list
       (common-lisp:cons "managedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-fields))
      (common-lisp:list
       (common-lisp:cons "customFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   common-lisp:nil))
(common-lisp:deftype thing-group-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-group-list ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thing-group-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-group-metadata-"))
   (parent-group-name common-lisp:nil :type
    (common-lisp:or thing-group-name common-lisp:null))
   (root-to-parent-thing-groups common-lisp:nil :type
    (common-lisp:or thing-group-name-and-arn-list common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-group-metadata 'make-thing-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-name))
      (common-lisp:list
       (common-lisp:cons "parentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-to-parent-thing-groups))
      (common-lisp:list
       (common-lisp:cons "rootToParentThingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   common-lisp:nil))
(common-lisp:deftype thing-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-group-name-and-arn-list ()
   '(trivial-types:proper-list group-name-and-arn))
 (common-lisp:defun make-thing-group-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thing-group-name-list ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thing-group-names ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thing-group-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-group-properties-"))
   (thing-group-description common-lisp:nil :type
    (common-lisp:or thing-group-description common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-group-properties 'make-thing-group-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-description))
      (common-lisp:list
       (common-lisp:cons "thingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   common-lisp:nil))
(common-lisp:deftype thing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-indexing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-indexing-configuration-"))
   (thing-indexing-mode (common-lisp:error ":thingindexingmode is required")
    :type (common-lisp:or thing-indexing-mode common-lisp:null))
   (thing-connectivity-indexing-mode common-lisp:nil :type
    (common-lisp:or thing-connectivity-indexing-mode common-lisp:null))
   (device-defender-indexing-mode common-lisp:nil :type
    (common-lisp:or device-defender-indexing-mode common-lisp:null))
   (named-shadow-indexing-mode common-lisp:nil :type
    (common-lisp:or named-shadow-indexing-mode common-lisp:null))
   (managed-fields common-lisp:nil :type
    (common-lisp:or fields common-lisp:null))
   (custom-fields common-lisp:nil :type
    (common-lisp:or fields common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or indexing-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-indexing-configuration
                    'make-thing-indexing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-connectivity-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingConnectivityIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-defender-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "deviceDefenderIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'named-shadow-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "namedShadowIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-fields))
      (common-lisp:list
       (common-lisp:cons "managedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-fields))
      (common-lisp:list
       (common-lisp:cons "customFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   common-lisp:nil))
(common-lisp:deftype thing-indexing-mode () 'common-lisp:string)
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-name-list ()
   '(trivial-types:proper-list thing-name))
 (common-lisp:defun make-thing-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-type-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-definition-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-arn common-lisp:nil :type
    (common-lisp:or thing-type-arn common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-definition 'make-thing-type-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   common-lisp:nil))
(common-lisp:deftype thing-type-description () 'common-lisp:string)
(common-lisp:deftype thing-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-type-list ()
   '(trivial-types:proper-list thing-type-definition))
 (common-lisp:defun make-thing-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-type-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-metadata-"))
   (deprecated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (deprecation-date common-lisp:nil :type
    (common-lisp:or deprecation-date common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-metadata 'make-thing-type-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated))
      (common-lisp:list
       (common-lisp:cons "deprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "deprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   common-lisp:nil))
(common-lisp:deftype thing-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-properties-"))
   (thing-type-description common-lisp:nil :type
    (common-lisp:or thing-type-description common-lisp:null))
   (searchable-attributes common-lisp:nil :type
    (common-lisp:or searchable-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-properties 'make-thing-type-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-description))
      (common-lisp:list
       (common-lisp:cons "thingTypeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searchable-attributes))
      (common-lisp:list
       (common-lisp:cons "searchableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timed-out-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (timeout-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-timeout-config-"))
   (in-progress-timeout-in-minutes common-lisp:nil :type
    (common-lisp:or in-progress-timeout-in-minutes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timeout-config 'make-timeout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timeout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timeout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "inProgressTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timeout-config))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestream-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestream-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (database-name (common-lisp:error ":databasename is required") :type
    (common-lisp:or timestream-database-name common-lisp:null))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or timestream-table-name common-lisp:null))
   (dimensions (common-lisp:error ":dimensions is required") :type
    (common-lisp:or timestream-dimension-list common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestream-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timestream-action 'make-timestream-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-action))
   common-lisp:nil))
(common-lisp:deftype timestream-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestream-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestream-dimension-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or timestream-dimension-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or timestream-dimension-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timestream-dimension 'make-timestream-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestream-dimension-list ()
   '(trivial-types:proper-list timestream-dimension))
 (common-lisp:defun make-timestream-dimension-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestream-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestream-dimension-name () 'common-lisp:string)
(common-lisp:deftype timestream-dimension-value () 'common-lisp:string)
(common-lisp:deftype timestream-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestream-timestamp (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestream-timestamp-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or timestream-timestamp-value common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or timestream-timestamp-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timestream-timestamp 'make-timestream-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   common-lisp:nil))
(common-lisp:deftype timestream-timestamp-unit () 'common-lisp:string)
(common-lisp:deftype timestream-timestamp-value () 'common-lisp:string)
(common-lisp:deftype tiny-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (tls-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-config-"))
   (security-policy common-lisp:nil :type
    (common-lisp:or security-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tls-config 'make-tls-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-policy))
      (common-lisp:list
       (common-lisp:cons "securityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tls-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-context-"))
   (server-name common-lisp:nil :type
    (common-lisp:or server-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tls-context 'make-tls-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "serverName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls-context))
   common-lisp:nil))
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype token-key-name () 'common-lisp:string)
(common-lisp:deftype token-signature () 'common-lisp:string)
(common-lisp:deftype topic () 'common-lisp:string)
(common-lisp:deftype topic-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-"))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (sql common-lisp:nil :type (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null))
   (error-action common-lisp:nil :type
    (common-lisp:or action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'topic-rule 'make-topic-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-action))
      (common-lisp:list
       (common-lisp:cons "errorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-destination-"))
   (arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or topic-rule-destination-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or last-updated-at-date common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (http-url-properties common-lisp:nil :type
    (common-lisp:or http-url-destination-properties common-lisp:null))
   (vpc-properties common-lisp:nil :type
    (common-lisp:or vpc-destination-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination 'make-topic-rule-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-url-properties))
      (common-lisp:list
       (common-lisp:cons "httpUrlProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-properties))
      (common-lisp:list
       (common-lisp:cons "vpcProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-destination-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-destination-configuration-"))
   (http-url-configuration common-lisp:nil :type
    (common-lisp:or http-url-destination-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or vpc-destination-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination-configuration
                    'make-topic-rule-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-url-configuration))
      (common-lisp:list
       (common-lisp:cons "httpUrlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   common-lisp:nil))
(common-lisp:deftype topic-rule-destination-max-results () 'common-lisp:integer)
(common-lisp:deftype topic-rule-destination-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-rule-destination-summaries ()
   '(trivial-types:proper-list topic-rule-destination-summary))
 (common-lisp:defun make-topic-rule-destination-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            topic-rule-destination-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-destination-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-destination-summary-"))
   (arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or topic-rule-destination-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or last-updated-at-date common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (http-url-summary common-lisp:nil :type
    (common-lisp:or http-url-destination-summary common-lisp:null))
   (vpc-destination-summary common-lisp:nil :type
    (common-lisp:or vpc-destination-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination-summary
                    'make-topic-rule-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-url-summary))
      (common-lisp:list
       (common-lisp:cons "httpUrlSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-destination-summary))
      (common-lisp:list
       (common-lisp:cons "vpcDestinationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-rule-list ()
   '(trivial-types:proper-list topic-rule-list-item))
 (common-lisp:defun make-topic-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-rule-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-list-item-"))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-pattern common-lisp:nil :type
    (common-lisp:or topic-pattern common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-list-item 'make-topic-rule-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-pattern))
      (common-lisp:list
       (common-lisp:cons "topicPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   common-lisp:nil))
(common-lisp:deftype topic-rule-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-payload-"))
   (sql (common-lisp:error ":sql is required") :type
    (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null))
   (error-action common-lisp:nil :type
    (common-lisp:or action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-payload 'make-topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-action))
      (common-lisp:list
       (common-lisp:cons "errorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   common-lisp:nil))
(common-lisp:deftype total-checks-count () 'common-lisp:integer)
(common-lisp:deftype total-findings-count () 'common-lisp:integer)
(common-lisp:deftype total-resources-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition transfer-already-completed-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transfer-already-completed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transfer-already-completed-exception
                    'transfer-already-completed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (target-aws-account (common-lisp:error ":targetawsaccount is required")
    :type (common-lisp:or aws-account-id common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-request
                    'make-transfer-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-certificate-response-"))
   (transferred-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-response
                    'make-transfer-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transferred-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "transferredCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition transfer-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transfer-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transfer-conflict-exception
                    'transfer-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-data-"))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (accept-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (reject-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transfer-data 'make-transfer-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-date))
      (common-lisp:list
       (common-lisp:cons "acceptDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-date))
      (common-lisp:list
       (common-lisp:cons "rejectDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transfer-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:deftype undo-deprecate () 'common-lisp:boolean)
(common-lisp:deftype unset-default-version () 'common-lisp:boolean)
(common-lisp:deftype unsigned-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-audit-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-audit-configuration-request-"))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (audit-notification-target-configurations common-lisp:nil :type
    (common-lisp:or audit-notification-target-configurations common-lisp:null))
   (audit-check-configurations common-lisp:nil :type
    (common-lisp:or audit-check-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-audit-configuration-request
                    'make-update-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-notification-target-configurations))
      (common-lisp:list
       (common-lisp:cons "auditNotificationTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-configurations))
      (common-lisp:list
       (common-lisp:cons "auditCheckConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-audit-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-account-audit-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-account-audit-configuration-response
                    'make-update-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-audit-suppression-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-audit-suppression-request-"))
   (check-name (common-lisp:error ":checkname is required") :type
    (common-lisp:or audit-check-name common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (suppress-indefinitely common-lisp:nil :type
    (common-lisp:or suppress-indefinitely common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or audit-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-audit-suppression-request
                    'make-update-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-audit-suppression-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-audit-suppression-response-")))
 (common-lisp:export
  (common-lisp:list 'update-audit-suppression-response
                    'make-update-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-authorizer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-authorizer-request-"))
   (authorizer-name (common-lisp:error ":authorizername is required") :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-function-arn common-lisp:nil :type
    (common-lisp:or authorizer-function-arn common-lisp:null))
   (token-key-name common-lisp:nil :type
    (common-lisp:or token-key-name common-lisp:null))
   (token-signing-public-keys common-lisp:nil :type
    (common-lisp:or public-key-map common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or authorizer-status common-lisp:null))
   (enable-caching-for-http common-lisp:nil :type
    (common-lisp:or enable-caching-for-http common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-authorizer-request
                    'make-update-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-authorizer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-authorizer-response-"))
   (authorizer-name common-lisp:nil :type
    (common-lisp:or authorizer-name common-lisp:null))
   (authorizer-arn common-lisp:nil :type
    (common-lisp:or authorizer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-authorizer-response
                    'make-update-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-billing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-billing-group-request-"))
   (billing-group-name (common-lisp:error ":billinggroupname is required")
    :type (common-lisp:or billing-group-name common-lisp:null))
   (billing-group-properties
    (common-lisp:error ":billinggroupproperties is required") :type
    (common-lisp:or billing-group-properties common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-billing-group-request
                    'make-update-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-billing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-billing-group-response-"))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-billing-group-response
                    'make-update-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cacertificate-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cacertificate-params-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or cacertificate-update-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-params
                    'make-update-cacertificate-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (new-status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (new-auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null))
   (registration-config common-lisp:nil :type
    (common-lisp:or registration-config common-lisp:null))
   (remove-auto-registration common-lisp:nil :type
    (common-lisp:or remove-auto-registration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-request
                    'make-update-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-auto-registration))
      (common-lisp:list
       (common-lisp:cons "removeAutoRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-provider-request-"))
   (certificate-provider-name
    (common-lisp:error ":certificateprovidername is required") :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (lambda-function-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-function-arn common-lisp:null))
   (account-default-for-operations common-lisp:nil :type
    (common-lisp:or certificate-provider-account-default-for-operations
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-provider-request
                    'make-update-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-provider-response-"))
   (certificate-provider-name common-lisp:nil :type
    (common-lisp:or certificate-provider-name common-lisp:null))
   (certificate-provider-arn common-lisp:nil :type
    (common-lisp:or certificate-provider-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-provider-response
                    'make-update-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (new-status (common-lisp:error ":newstatus is required") :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or custom-metric-display-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-metric-request
                    'make-update-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-metric-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-metric-response-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-arn common-lisp:nil :type
    (common-lisp:or custom-metric-arn common-lisp:null))
   (metric-type common-lisp:nil :type
    (common-lisp:or custom-metric-type common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or custom-metric-display-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-metric-response
                    'make-update-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-device-certificate-params (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-device-certificate-params-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or device-certificate-update-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-device-certificate-params
                    'make-update-device-certificate-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dimension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dimension-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dimension-name common-lisp:null))
   (string-values (common-lisp:error ":stringvalues is required") :type
    (common-lisp:or dimension-string-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dimension-request 'make-update-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dimension-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dimension-response-"))
   (name common-lisp:nil :type
    (common-lisp:or dimension-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or dimension-arn common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or dimension-type common-lisp:null))
   (string-values common-lisp:nil :type
    (common-lisp:or dimension-string-values common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dimension-response
                    'make-update-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-configuration-request-"))
   (domain-configuration-name
    (common-lisp:error ":domainconfigurationname is required") :type
    (common-lisp:or reserved-domain-configuration-name common-lisp:null))
   (authorizer-config common-lisp:nil :type
    (common-lisp:or authorizer-config common-lisp:null))
   (domain-configuration-status common-lisp:nil :type
    (common-lisp:or domain-configuration-status common-lisp:null))
   (remove-authorizer-config common-lisp:nil :type
    (common-lisp:or remove-authorizer-config common-lisp:null))
   (tls-config common-lisp:nil :type
    (common-lisp:or tls-config common-lisp:null))
   (server-certificate-config common-lisp:nil :type
    (common-lisp:or server-certificate-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-configuration-request
                    'make-update-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-status))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "removeAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-configuration-response-"))
   (domain-configuration-name common-lisp:nil :type
    (common-lisp:or reserved-domain-configuration-name common-lisp:null))
   (domain-configuration-arn common-lisp:nil :type
    (common-lisp:or domain-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-configuration-response
                    'make-update-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dynamic-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dynamic-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-properties
    (common-lisp:error ":thinggroupproperties is required") :type
    (common-lisp:or thing-group-properties common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dynamic-thing-group-request
                    'make-update-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dynamic-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dynamic-thing-group-response-"))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dynamic-thing-group-response
                    'make-update-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-configurations-request-"))
   (event-configurations common-lisp:nil :type
    (common-lisp:or event-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-configurations-request
                    'make-update-event-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-configurations))
      (common-lisp:list
       (common-lisp:cons "eventConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-configurations-response-")))
 (common-lisp:export
  (common-lisp:list 'update-event-configurations-response
                    'make-update-event-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-fleet-metric-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-fleet-metric-request-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or fleet-metric-name common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (aggregation-type common-lisp:nil :type
    (common-lisp:or aggregation-type common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or fleet-metric-period common-lisp:null))
   (aggregation-field common-lisp:nil :type
    (common-lisp:or aggregation-field common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or fleet-metric-description common-lisp:null))
   (query-version common-lisp:nil :type
    (common-lisp:or query-version common-lisp:null))
   (index-name (common-lisp:error ":indexname is required") :type
    (common-lisp:or index-name common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or fleet-metric-unit common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-metric-request
                    'make-update-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-indexing-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-indexing-configuration-request-"))
   (thing-indexing-configuration common-lisp:nil :type
    (common-lisp:or thing-indexing-configuration common-lisp:null))
   (thing-group-indexing-configuration common-lisp:nil :type
    (common-lisp:or thing-group-indexing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-indexing-configuration-request
                    'make-update-indexing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-indexing-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-indexing-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-indexing-configuration-response
                    'make-update-indexing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or job-description common-lisp:null))
   (presigned-url-config common-lisp:nil :type
    (common-lisp:or presigned-url-config common-lisp:null))
   (job-executions-rollout-config common-lisp:nil :type
    (common-lisp:or job-executions-rollout-config common-lisp:null))
   (abort-config common-lisp:nil :type
    (common-lisp:or abort-config common-lisp:null))
   (timeout-config common-lisp:nil :type
    (common-lisp:or timeout-config common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or namespace-id common-lisp:null))
   (job-executions-retry-config common-lisp:nil :type
    (common-lisp:or job-executions-retry-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mitigation-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mitigation-action-request-"))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or mitigation-action-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (action-params common-lisp:nil :type
    (common-lisp:or mitigation-action-params common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mitigation-action-request
                    'make-update-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mitigation-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mitigation-action-response-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or mitigation-action-arn common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or mitigation-action-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mitigation-action-response
                    'make-update-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-configuration-request-"))
   (version-update-by-jobs-config common-lisp:nil :type
    (common-lisp:or version-update-by-jobs-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-package-configuration-request
                    'make-update-package-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-update-by-jobs-config))
      (common-lisp:list
       (common-lisp:cons "versionUpdateByJobsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-package-configuration-response
                    'make-update-package-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (default-version-name common-lisp:nil :type
    (common-lisp:or version-name common-lisp:null))
   (unset-default-version common-lisp:nil :type
    (common-lisp:or unset-default-version common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-package-request 'make-update-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unset-default-version))
      (common-lisp:list
       (common-lisp:cons "unsetDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-response-")))
 (common-lisp:export
  (common-lisp:list 'update-package-response 'make-update-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-version-request-"))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or package-name common-lisp:null))
   (version-name (common-lisp:error ":versionname is required") :type
    (common-lisp:or version-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or resource-attributes common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or package-version-action common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-package-version-request
                    'make-update-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-version-response-")))
 (common-lisp:export
  (common-lisp:list 'update-package-version-response
                    'make-update-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-provisioning-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-provisioning-template-request-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or template-version-id common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (pre-provisioning-hook common-lisp:nil :type
    (common-lisp:or provisioning-hook common-lisp:null))
   (remove-pre-provisioning-hook common-lisp:nil :type
    (common-lisp:or remove-hook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-template-request
                    'make-update-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "removePreProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-provisioning-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-provisioning-template-response-")))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-template-response
                    'make-update-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-alias-request-"))
   (role-alias (common-lisp:error ":rolealias is required") :type
    (common-lisp:or role-alias common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (credential-duration-seconds common-lisp:nil :type
    (common-lisp:or credential-duration-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-alias-request
                    'make-update-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-alias-response-"))
   (role-alias common-lisp:nil :type
    (common-lisp:or role-alias common-lisp:null))
   (role-alias-arn common-lisp:nil :type
    (common-lisp:or role-alias-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-alias-response
                    'make-update-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-scheduled-audit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scheduled-audit-request-"))
   (frequency common-lisp:nil :type
    (common-lisp:or audit-frequency common-lisp:null))
   (day-of-month common-lisp:nil :type
    (common-lisp:or day-of-month common-lisp:null))
   (day-of-week common-lisp:nil :type
    (common-lisp:or day-of-week common-lisp:null))
   (target-check-names common-lisp:nil :type
    (common-lisp:or target-audit-check-names common-lisp:null))
   (scheduled-audit-name (common-lisp:error ":scheduledauditname is required")
    :type (common-lisp:or scheduled-audit-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-audit-request
                    'make-update-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-scheduled-audit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scheduled-audit-response-"))
   (scheduled-audit-arn common-lisp:nil :type
    (common-lisp:or scheduled-audit-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-audit-response
                    'make-update-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":securityprofilename is required") :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (behaviors common-lisp:nil :type
    (common-lisp:or behaviors common-lisp:null))
   (alert-targets common-lisp:nil :type
    (common-lisp:or alert-targets common-lisp:null))
   (additional-metrics-to-retain common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-list common-lisp:null))
   (additional-metrics-to-retain-v2 common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-v2list common-lisp:null))
   (delete-behaviors common-lisp:nil :type
    (common-lisp:or delete-behaviors common-lisp:null))
   (delete-alert-targets common-lisp:nil :type
    (common-lisp:or delete-alert-targets common-lisp:null))
   (delete-additional-metrics-to-retain common-lisp:nil :type
    (common-lisp:or delete-additional-metrics-to-retain common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null))
   (metrics-export-config common-lisp:nil :type
    (common-lisp:or metrics-export-config common-lisp:null))
   (delete-metrics-export-config common-lisp:nil :type
    (common-lisp:or delete-metrics-export-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-security-profile-request
                    'make-update-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-behaviors))
      (common-lisp:list
       (common-lisp:cons "deleteBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-alert-targets))
      (common-lisp:list
       (common-lisp:cons "deleteAlertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "deleteAdditionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "deleteMetricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-security-profile-response-"))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (security-profile-arn common-lisp:nil :type
    (common-lisp:or security-profile-arn common-lisp:null))
   (security-profile-description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (behaviors common-lisp:nil :type
    (common-lisp:or behaviors common-lisp:null))
   (alert-targets common-lisp:nil :type
    (common-lisp:or alert-targets common-lisp:null))
   (additional-metrics-to-retain common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-list common-lisp:null))
   (additional-metrics-to-retain-v2 common-lisp:nil :type
    (common-lisp:or additional-metrics-to-retain-v2list common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (metrics-export-config common-lisp:nil :type
    (common-lisp:or metrics-export-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-security-profile-response
                    'make-update-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stream-request-"))
   (stream-id (common-lisp:error ":streamid is required") :type
    (common-lisp:or stream-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null))
   (files common-lisp:nil :type (common-lisp:or stream-files common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stream-request 'make-update-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stream-response-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or stream-id common-lisp:null))
   (stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or stream-description common-lisp:null))
   (stream-version common-lisp:nil :type
    (common-lisp:or stream-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stream-response 'make-update-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-group-request-"))
   (thing-group-name (common-lisp:error ":thinggroupname is required") :type
    (common-lisp:or thing-group-name common-lisp:null))
   (thing-group-properties
    (common-lisp:error ":thinggroupproperties is required") :type
    (common-lisp:or thing-group-properties common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-group-request
                    'make-update-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-group-response-"))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-group-response
                    'make-update-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-groups-for-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-groups-for-thing-request-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-groups-to-add common-lisp:nil :type
    (common-lisp:or thing-group-list common-lisp:null))
   (thing-groups-to-remove common-lisp:nil :type
    (common-lisp:or thing-group-list common-lisp:null))
   (override-dynamic-groups common-lisp:nil :type
    (common-lisp:or override-dynamic-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-groups-for-thing-request
                    'make-update-thing-groups-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups-to-add))
      (common-lisp:list
       (common-lisp:cons "thingGroupsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "thingGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-groups-for-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-groups-for-thing-response-")))
 (common-lisp:export
  (common-lisp:list 'update-thing-groups-for-thing-response
                    'make-update-thing-groups-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null))
   (remove-thing-type common-lisp:nil :type
    (common-lisp:or remove-thing-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-request 'make-update-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-thing-type))
      (common-lisp:list
       (common-lisp:cons "removeThingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-response-")))
 (common-lisp:export
  (common-lisp:list 'update-thing-response 'make-update-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-topic-rule-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-topic-rule-destination-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or topic-rule-destination-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-topic-rule-destination-request
                    'make-update-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-topic-rule-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-topic-rule-destination-response-")))
 (common-lisp:export
  (common-lisp:list 'update-topic-rule-destination-response
                    'make-update-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype use-base64 () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype user-properties ()
   '(trivial-types:proper-list user-property))
 (common-lisp:defun make-user-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-property-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or user-property-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or user-property-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-property 'make-user-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-property))
   common-lisp:nil))
(common-lisp:deftype user-property-key () 'common-lisp:string)
(common-lisp:deftype user-property-value () 'common-lisp:string)
(common-lisp:deftype valid () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-security-profile-behaviors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-security-profile-behaviors-request-"))
   (behaviors (common-lisp:error ":behaviors is required") :type
    (common-lisp:or behaviors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-security-profile-behaviors-request
                    'make-validate-security-profile-behaviors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-security-profile-behaviors-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-security-profile-behaviors-response-"))
   (valid common-lisp:nil :type (common-lisp:or valid common-lisp:null))
   (validation-errors common-lisp:nil :type
    (common-lisp:or validation-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-security-profile-behaviors-response
                    'make-validate-security-profile-behaviors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-error-"))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun make-validation-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype variance () 'common-lisp:double-float)
(common-lisp:deftype verification-state () 'common-lisp:string)
(common-lisp:deftype verification-state-description () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition version-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       version-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'version-conflict-exception
                    'version-conflict-exception-message)))
(common-lisp:deftype version-name () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (version-update-by-jobs-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-version-update-by-jobs-config-"))
   (enabled common-lisp:nil :type
    (common-lisp:or enabled-boolean common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-update-by-jobs-config
                    'make-version-update-by-jobs-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition versions-limit-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       versions-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'versions-limit-exceeded-exception
                    'versions-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (violation-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-violation-event-"))
   (violation-id common-lisp:nil :type
    (common-lisp:or violation-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or device-defender-thing-name common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (behavior common-lisp:nil :type (common-lisp:or behavior common-lisp:null))
   (metric-value common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (violation-event-additional-info common-lisp:nil :type
    (common-lisp:or violation-event-additional-info common-lisp:null))
   (violation-event-type common-lisp:nil :type
    (common-lisp:or violation-event-type common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (verification-state-description common-lisp:nil :type
    (common-lisp:or verification-state-description common-lisp:null))
   (violation-event-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'violation-event 'make-violation-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input violation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input violation-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-additional-info))
      (common-lisp:list
       (common-lisp:cons "violationEventAdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-type))
      (common-lisp:list
       (common-lisp:cons "violationEventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-time))
      (common-lisp:list
       (common-lisp:cons "violationEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input violation-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (violation-event-additional-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-violation-event-additional-info-"))
   (confidence-level common-lisp:nil :type
    (common-lisp:or confidence-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'violation-event-additional-info
                    'make-violation-event-additional-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-level))
      (common-lisp:list
       (common-lisp:cons "confidenceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (violation-event-occurrence-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-violation-event-occurrence-range-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'violation-event-occurrence-range
                    'make-violation-event-occurrence-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   common-lisp:nil))
(common-lisp:deftype violation-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype violation-events ()
   '(trivial-types:proper-list violation-event))
 (common-lisp:defun make-violation-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list violation-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype violation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-destination-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-destination-configuration-"))
   (subnet-ids (common-lisp:error ":subnetids is required") :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-list common-lisp:null))
   (vpc-id (common-lisp:error ":vpcid is required") :type
    (common-lisp:or vpc-id common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-configuration
                    'make-vpc-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-destination-properties-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-properties
                    'make-vpc-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-destination-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-destination-summary-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-summary 'make-vpc-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype waiting-for-data-collection-checks-count ()
  'common-lisp:integer)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |resourceArn| () 'common-lisp:string)
(common-lisp:deftype |resourceId| () 'common-lisp:string)
(common-lisp:deftype |stringValue| () 'common-lisp:string)
(common-lisp:deftype |usePrefixAttributeValue| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun accept-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id set-as-active)
   (common-lisp:declare (common-lisp:ignorable certificate-id set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accept-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "AcceptCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun add-thing-to-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name billing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-thing-to-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/billing-groups/addThingToBillingGroup"
                                                        "AddThingToBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-thing-to-billing-group))
(common-lisp:progn
 (common-lisp:defun add-thing-to-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-arn
                     thing-name thing-arn override-dynamic-groups)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-arn thing-name
     thing-arn override-dynamic-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-thing-to-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/addThingToThingGroup"
                                                        "AddThingToThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-thing-to-thing-group))
(common-lisp:progn
 (common-lisp:defun associate-targets-with-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key targets job-id comment namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable targets job-id comment namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-targets-with-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "AssociateTargetsWithJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-targets-with-job))
(common-lisp:progn
 (common-lisp:defun attach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name target)
   (common-lisp:declare (common-lisp:ignorable policy-name target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/target-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "AttachPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-policy))
(common-lisp:progn
 (common-lisp:defun attach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "AttachPrincipalPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-principal-policy))
(common-lisp:progn
 (common-lisp:defun attach-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "AttachSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-security-profile))
(common-lisp:progn
 (common-lisp:defun attach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "AttachThingPrincipal"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-thing-principal))
(common-lisp:progn
 (common-lisp:defun cancel-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun cancel-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-audit-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelAuditTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-audit-task))
(common-lisp:progn
 (common-lisp:defun cancel-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cancel-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "CancelCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun cancel-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id reason-code comment force)
   (common-lisp:declare
    (common-lisp:ignorable job-id reason-code comment force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun cancel-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name force expected-version
                     status-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name force expected-version
     status-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelJobExecution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job-execution))
(common-lisp:progn
 (common-lisp:defun clear-default-authorizer ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "DELETE" :path
                                "/default-authorizer" :operation
                                "ClearDefaultAuthorizer"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'clear-default-authorizer))
(common-lisp:progn
 (common-lisp:defun confirm-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key confirmation-token)
   (common-lisp:declare (common-lisp:ignorable confirmation-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/confirmdestination/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'confirmation-token)))
                                                        "ConfirmTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'confirm-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun create-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     expiration-date suppress-indefinitely description
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier expiration-date
     suppress-indefinitely description client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/create"
                                                        "CreateAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-audit-suppression))
(common-lisp:progn
 (common-lisp:defun create-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name authorizer-function-arn
                     token-key-name token-signing-public-keys status tags
                     signing-disabled enable-caching-for-http)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name authorizer-function-arn
     token-key-name token-signing-public-keys status tags signing-disabled
     enable-caching-for-http))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "CreateAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-authorizer))
(common-lisp:progn
 (common-lisp:defun create-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name
                     billing-group-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "CreateBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-billing-group))
(common-lisp:progn
 (common-lisp:defun create-certificate-from-csr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-signing-request
                     set-as-active)
   (common-lisp:declare
    (common-lisp:ignorable certificate-signing-request set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-from-csr-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/certificates"
                                                        "CreateCertificateFromCsr"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-certificate-from-csr))
(common-lisp:progn
 (common-lisp:defun create-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name
                     lambda-function-arn account-default-for-operations
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-provider-name lambda-function-arn
     account-default-for-operations client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "CreateCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-certificate-provider))
(common-lisp:progn
 (common-lisp:defun create-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name display-name metric-type tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable metric-name display-name metric-type tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "CreateCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-metric))
(common-lisp:progn
 (common-lisp:defun create-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type string-values tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name type string-values tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateDimension"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dimension))
(common-lisp:progn
 (common-lisp:defun create-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name domain-name
                     server-certificate-arns validation-certificate-arn
                     authorizer-config service-type tags tls-config
                     server-certificate-config)
   (common-lisp:declare
    (common-lisp:ignorable domain-configuration-name domain-name
     server-certificate-arns validation-certificate-arn authorizer-config
     service-type tags tls-config server-certificate-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "CreateDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain-configuration))
(common-lisp:progn
 (common-lisp:defun create-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     index-name query-string query-version tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties index-name
     query-string query-version tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "CreateDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun create-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name query-string aggregation-type
                     period aggregation-field description query-version
                     index-name unit tags)
   (common-lisp:declare
    (common-lisp:ignorable metric-name query-string aggregation-type period
     aggregation-field description query-version index-name unit tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "CreateFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet-metric))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id targets document-source document
                     description presigned-url-config target-selection
                     job-executions-rollout-config abort-config timeout-config
                     tags namespace-id job-template-arn
                     job-executions-retry-config document-parameters
                     scheduling-config destination-package-versions)
   (common-lisp:declare
    (common-lisp:ignorable job-id targets document-source document description
     presigned-url-config target-selection job-executions-rollout-config
     abort-config timeout-config tags namespace-id job-template-arn
     job-executions-retry-config document-parameters scheduling-config
     destination-package-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CreateJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id job-arn document-source
                     document description presigned-url-config
                     job-executions-rollout-config abort-config timeout-config
                     tags job-executions-retry-config maintenance-windows
                     destination-package-versions)
   (common-lisp:declare
    (common-lisp:ignorable job-template-id job-arn document-source document
     description presigned-url-config job-executions-rollout-config
     abort-config timeout-config tags job-executions-retry-config
     maintenance-windows destination-package-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "CreateJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job-template))
(common-lisp:progn
 (common-lisp:defun create-keys-and-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key set-as-active)
   (common-lisp:declare (common-lisp:ignorable set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-keys-and-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/keys-and-certificate"
                                                        "CreateKeysAndCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-keys-and-certificate))
(common-lisp:progn
 (common-lisp:defun create-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name role-arn action-params tags)
   (common-lisp:declare
    (common-lisp:ignorable action-name role-arn action-params tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "CreateMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mitigation-action))
(common-lisp:progn
 (common-lisp:defun create-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id description targets
                     protocols target-selection
                     aws-job-executions-rollout-config
                     aws-job-presigned-url-config aws-job-abort-config
                     aws-job-timeout-config files role-arn
                     additional-parameters tags)
   (common-lisp:declare
    (common-lisp:ignorable ota-update-id description targets protocols
     target-selection aws-job-executions-rollout-config
     aws-job-presigned-url-config aws-job-abort-config aws-job-timeout-config
     files role-arn additional-parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "CreateOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-otaupdate))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name description tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name description tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "CreatePackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name description
                     attributes tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name description attributes
     tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "CreatePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package-version))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document tags)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-provisioning-claim
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-claim-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/provisioning-claim"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateProvisioningClaim"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-provisioning-claim))
(common-lisp:progn
 (common-lisp:defun create-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description template-body
                     enabled provisioning-role-arn pre-provisioning-hook tags
                     type)
   (common-lisp:declare
    (common-lisp:ignorable template-name description template-body enabled
     provisioning-role-arn pre-provisioning-hook tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/provisioning-templates"
                                                        "CreateProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-provisioning-template))
(common-lisp:progn
 (common-lisp:defun create-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-body
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable template-name template-body set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun create-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias role-arn
                     credential-duration-seconds tags)
   (common-lisp:declare
    (common-lisp:ignorable role-alias role-arn credential-duration-seconds
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "CreateRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-role-alias))
(common-lisp:progn
 (common-lisp:defun create-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key frequency day-of-month day-of-week
                     target-check-names scheduled-audit-name tags)
   (common-lisp:declare
    (common-lisp:ignorable frequency day-of-month day-of-week
     target-check-names scheduled-audit-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "CreateScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun create-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-description behaviors alert-targets
                     additional-metrics-to-retain
                     additional-metrics-to-retain-v2 tags
                     metrics-export-config)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-description
     behaviors alert-targets additional-metrics-to-retain
     additional-metrics-to-retain-v2 tags metrics-export-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "CreateSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-security-profile))
(common-lisp:progn
 (common-lisp:defun create-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id description files role-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable stream-id description files role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "CreateStream"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-stream))
(common-lisp:progn
 (common-lisp:defun create-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload billing-group-name)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     billing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "CreateThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-thing))
(common-lisp:progn
 (common-lisp:defun create-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name parent-group-name
                     thing-group-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name parent-group-name
     thing-group-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "CreateThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-thing-group))
(common-lisp:progn
 (common-lisp:defun create-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name thing-type-properties
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-type-name thing-type-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "CreateThingType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-thing-type))
(common-lisp:progn
 (common-lisp:defun create-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload tags)
   (common-lisp:declare
    (common-lisp:ignorable rule-name topic-rule-payload tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "CreateTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-topic-rule))
(common-lisp:progn
 (common-lisp:defun create-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-configuration)
   (common-lisp:declare (common-lisp:ignorable destination-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/destinations"
                                                        "CreateTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun delete-account-audit-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-scheduled-audits)
   (common-lisp:declare (common-lisp:ignorable delete-scheduled-audits))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-audit-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/audit/configuration"
                                                        "DeleteAccountAuditConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun delete-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier)
   (common-lisp:declare (common-lisp:ignorable check-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/delete"
                                                        "DeleteAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-audit-suppression))
(common-lisp:progn
 (common-lisp:defun delete-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "DeleteAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-authorizer))
(common-lisp:progn
 (common-lisp:defun delete-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "DeleteBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-billing-group))
(common-lisp:progn
 (common-lisp:defun delete-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DeleteCACertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cacertificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id force-delete)
   (common-lisp:declare (common-lisp:ignorable certificate-id force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name)
   (common-lisp:declare (common-lisp:ignorable certificate-provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "DeleteCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate-provider))
(common-lisp:progn
 (common-lisp:defun delete-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DeleteCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-metric))
(common-lisp:progn
 (common-lisp:defun delete-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteDimension"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dimension))
(common-lisp:progn
 (common-lisp:defun delete-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name)
   (common-lisp:declare (common-lisp:ignorable domain-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "DeleteDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-configuration))
(common-lisp:progn
 (common-lisp:defun delete-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DeleteDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun delete-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name expected-version)
   (common-lisp:declare (common-lisp:ignorable metric-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DeleteFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet-metric))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id force namespace-id)
   (common-lisp:declare (common-lisp:ignorable job-id force namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name execution-number force
                     namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name execution-number force
     namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A/executionNumber/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'execution-number))))
                                                        "DeleteJobExecution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job-execution))
(common-lisp:progn
 (common-lisp:defun delete-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id)
   (common-lisp:declare (common-lisp:ignorable job-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "DeleteJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job-template))
(common-lisp:progn
 (common-lisp:defun delete-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "DeleteMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mitigation-action))
(common-lisp:progn
 (common-lisp:defun delete-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id delete-stream
                     force-delete-awsjob)
   (common-lisp:declare
    (common-lisp:ignorable ota-update-id delete-stream force-delete-awsjob))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "DeleteOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-otaupdate))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name client-token)
   (common-lisp:declare (common-lisp:ignorable package-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "DeletePackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "DeletePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package-version))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DeletePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "DeletePolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-provisioning-template))
(common-lisp:progn
 (common-lisp:defun delete-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version-id)
   (common-lisp:declare (common-lisp:ignorable template-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DeleteProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun delete-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "DELETE" :path
                                "/registrationcode" :operation
                                "DeleteRegistrationCode"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-registration-code))
(common-lisp:progn
 (common-lisp:defun delete-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias)
   (common-lisp:declare (common-lisp:ignorable role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "DeleteRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-role-alias))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-audit-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "DeleteScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun delete-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DeleteSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-security-profile))
(common-lisp:progn
 (common-lisp:defun delete-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id)
   (common-lisp:declare (common-lisp:ignorable stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DeleteStream"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-stream))
(common-lisp:progn
 (common-lisp:defun delete-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name expected-version)
   (common-lisp:declare (common-lisp:ignorable thing-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DeleteThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-thing))
(common-lisp:progn
 (common-lisp:defun delete-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DeleteThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-thing-group))
(common-lisp:progn
 (common-lisp:defun delete-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeleteThingType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-thing-type))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-topic-rule))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'arn)))
                                                        "DeleteTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun delete-v2logging-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-type target-name)
   (common-lisp:declare (common-lisp:ignorable target-type target-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-v2logging-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v2LoggingLevel"
                                                        "DeleteV2LoggingLevel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-v2logging-level))
(common-lisp:progn
 (common-lisp:defun deprecate-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name undo-deprecate)
   (common-lisp:declare (common-lisp:ignorable thing-type-name undo-deprecate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A/deprecate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeprecateThingType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deprecate-thing-type))
(common-lisp:progn
 (common-lisp:defun describe-account-audit-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/audit/configuration" :operation
                                "DescribeAccountAuditConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun describe-audit-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-audit-finding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/findings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "DescribeAuditFinding"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-audit-finding))
(common-lisp:progn
 (common-lisp:defun describe-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun describe-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier)
   (common-lisp:declare (common-lisp:ignorable check-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-audit-suppression-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/describe"
                                                        "DescribeAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-audit-suppression))
(common-lisp:progn
 (common-lisp:defun describe-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-audit-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeAuditTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-audit-task))
(common-lisp:progn
 (common-lisp:defun describe-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "DescribeAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-authorizer))
(common-lisp:progn
 (common-lisp:defun describe-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name)
   (common-lisp:declare (common-lisp:ignorable billing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "DescribeBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-billing-group))
(common-lisp:progn
 (common-lisp:defun describe-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DescribeCACertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cacertificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DescribeCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name)
   (common-lisp:declare (common-lisp:ignorable certificate-provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "DescribeCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate-provider))
(common-lisp:progn
 (common-lisp:defun describe-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DescribeCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-metric))
(common-lisp:progn
 (common-lisp:defun describe-default-authorizer ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/default-authorizer" :operation
                                "DescribeDefaultAuthorizer"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-default-authorizer))
(common-lisp:progn
 (common-lisp:defun describe-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun describe-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeDimension"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dimension))
(common-lisp:progn
 (common-lisp:defun describe-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name)
   (common-lisp:declare (common-lisp:ignorable domain-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "DescribeDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain-configuration))
(common-lisp:progn
 (common-lisp:defun describe-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-type)
   (common-lisp:declare (common-lisp:ignorable endpoint-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/endpoint"
                                                        "DescribeEndpoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-event-configurations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/event-configurations" :operation
                                "DescribeEventConfigurations"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-event-configurations))
(common-lisp:progn
 (common-lisp:defun describe-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DescribeFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-metric))
(common-lisp:progn
 (common-lisp:defun describe-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name)
   (common-lisp:declare (common-lisp:ignorable index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "DescribeIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-index))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name execution-number)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name execution-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeJobExecution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job-execution))
(common-lisp:progn
 (common-lisp:defun describe-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id)
   (common-lisp:declare (common-lisp:ignorable job-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "DescribeJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job-template))
(common-lisp:progn
 (common-lisp:defun describe-managed-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-version)
   (common-lisp:declare (common-lisp:ignorable template-name template-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-managed-job-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/managed-job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DescribeManagedJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-managed-job-template))
(common-lisp:progn
 (common-lisp:defun describe-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-mitigation-action-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "DescribeMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mitigation-action))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DescribeProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioning-template))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version-id)
   (common-lisp:declare (common-lisp:ignorable template-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DescribeProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun describe-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias)
   (common-lisp:declare (common-lisp:ignorable role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "DescribeRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-role-alias))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-audit-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "DescribeScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun describe-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name)
   (common-lisp:declare (common-lisp:ignorable security-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-security-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DescribeSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-security-profile))
(common-lisp:progn
 (common-lisp:defun describe-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id)
   (common-lisp:declare (common-lisp:ignorable stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DescribeStream"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-stream))
(common-lisp:progn
 (common-lisp:defun describe-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DescribeThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-thing))
(common-lisp:progn
 (common-lisp:defun describe-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name)
   (common-lisp:declare (common-lisp:ignorable thing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DescribeThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-thing-group))
(common-lisp:progn
 (common-lisp:defun describe-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun describe-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DescribeThingType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-thing-type))
(common-lisp:progn
 (common-lisp:defun detach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name target)
   (common-lisp:declare (common-lisp:ignorable policy-name target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/target-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DetachPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-policy))
(common-lisp:progn
 (common-lisp:defun detach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DetachPrincipalPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-principal-policy))
(common-lisp:progn
 (common-lisp:defun detach-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DetachSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-security-profile))
(common-lisp:progn
 (common-lisp:defun detach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DetachThingPrincipal"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-thing-principal))
(common-lisp:progn
 (common-lisp:defun disable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/disable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DisableTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-topic-rule))
(common-lisp:progn
 (common-lisp:defun enable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/enable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "EnableTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-behavior-model-training-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-behavior-model-training-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/behavior-model-training/summaries"
                                                        "GetBehaviorModelTrainingSummaries"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-behavior-model-training-summaries))
(common-lisp:progn
 (common-lisp:defun get-buckets-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version buckets-aggregation-type)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version buckets-aggregation-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-buckets-aggregation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/buckets"
                                                        "GetBucketsAggregation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-buckets-aggregation))
(common-lisp:progn
 (common-lisp:defun get-cardinality
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cardinality-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/cardinality"
                                                        "GetCardinality"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cardinality))
(common-lisp:progn
 (common-lisp:defun get-effective-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal cognito-identity-pool-id
                     thing-name)
   (common-lisp:declare
    (common-lisp:ignorable principal cognito-identity-pool-id thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-effective-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/effective-policies"
                                                        "GetEffectivePolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-effective-policies))
(common-lisp:progn
 (common-lisp:defun get-indexing-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/indexing/config" :operation
                                "GetIndexingConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-indexing-configuration))
(common-lisp:progn
 (common-lisp:defun get-job-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/job-document"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetJobDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-document))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/loggingOptions" :operation
                                "GetLoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id)
   (common-lisp:declare (common-lisp:ignorable ota-update-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "GetOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-otaupdate))
(common-lisp:progn
 (common-lisp:defun get-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name)
   (common-lisp:declare (common-lisp:ignorable package-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "GetPackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package))
(common-lisp:progn
 (common-lisp:defun get-package-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/package-configuration" :operation
                                "GetPackageConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-package-configuration))
(common-lisp:progn
 (common-lisp:defun get-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name)
   (common-lisp:declare (common-lisp:ignorable package-name version-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "GetPackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version))
(common-lisp:progn
 (common-lisp:defun get-percentiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version percents)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version percents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-percentiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/percentiles"
                                                        "GetPercentiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-percentiles))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "GetPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/registrationcode" :operation
                                "GetRegistrationCode"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-registration-code))
(common-lisp:progn
 (common-lisp:defun get-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/statistics"
                                                        "GetStatistics"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-statistics))
(common-lisp:progn
 (common-lisp:defun get-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'arn)))
                                                        "GetTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun get-v2logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/v2LoggingOptions" :operation
                                "GetV2LoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-v2logging-options))
(common-lisp:progn
 (common-lisp:defun list-active-violations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name security-profile-name
                     behavior-criteria-type list-suppressed-alerts
                     verification-state next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-name security-profile-name
     behavior-criteria-type list-suppressed-alerts verification-state
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-active-violations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/active-violations"
                                                        "ListActiveViolations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-active-violations))
(common-lisp:progn
 (common-lisp:defun list-attached-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target recursive marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable target recursive marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attached-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/attached-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'target))))
                                                        "ListAttachedPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-attached-policies))
(common-lisp:progn
 (common-lisp:defun list-audit-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id check-name resource-identifier
                     max-results next-token start-time end-time
                     list-suppressed-findings)
   (common-lisp:declare
    (common-lisp:ignorable task-id check-name resource-identifier max-results
     next-token start-time end-time list-suppressed-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/findings"
                                                        "ListAuditFindings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-audit-findings))
(common-lisp:progn
 (common-lisp:defun list-audit-mitigation-actions-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id action-status finding-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id action-status finding-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-audit-mitigation-actions-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/mitigationactions/executions"
                                                        "ListAuditMitigationActionsExecutions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-audit-mitigation-actions-executions))
(common-lisp:progn
 (common-lisp:defun list-audit-mitigation-actions-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key audit-task-id finding-id task-status
                     max-results next-token start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable audit-task-id finding-id task-status max-results
     next-token start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-audit-mitigation-actions-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/mitigationactions/tasks"
                                                        "ListAuditMitigationActionsTasks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-audit-mitigation-actions-tasks))
(common-lisp:progn
 (common-lisp:defun list-audit-suppressions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     ascending-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier ascending-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-suppressions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/list"
                                                        "ListAuditSuppressions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-audit-suppressions))
(common-lisp:progn
 (common-lisp:defun list-audit-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time task-type task-status
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time task-type task-status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/audit/tasks"
                                                        "ListAuditTasks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-audit-tasks))
(common-lisp:progn
 (common-lisp:defun list-authorizers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order status)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-authorizers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/authorizers/"
                                                        "ListAuthorizers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-authorizers))
(common-lisp:progn
 (common-lisp:defun list-billing-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     name-prefix-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-prefix-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-billing-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/billing-groups"
                                                        "ListBillingGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-billing-groups))
(common-lisp:progn
 (common-lisp:defun list-cacertificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cacertificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/cacertificates"
                                                        "ListCACertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cacertificates))
(common-lisp:progn
 (common-lisp:defun list-certificate-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token ascending-order)
   (common-lisp:declare (common-lisp:ignorable next-token ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-certificate-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/certificate-providers/"
                                                        "ListCertificateProviders"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificate-providers))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/certificates"
                                                        "ListCertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-certificates-by-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate-id page-size marker
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate-id page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-by-carequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates-by-ca/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "ListCertificatesByCA"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates-by-ca))
(common-lisp:progn
 (common-lisp:defun list-custom-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-custom-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/custom-metrics"
                                                        "ListCustomMetrics"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-metrics))
(common-lisp:progn
 (common-lisp:defun list-detect-mitigation-actions-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id violation-id thing-name
                     start-time end-time max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id violation-id thing-name start-time end-time
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-detect-mitigation-actions-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/detect/mitigationactions/executions"
                                                        "ListDetectMitigationActionsExecutions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-detect-mitigation-actions-executions))
(common-lisp:progn
 (common-lisp:defun list-detect-mitigation-actions-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token start-time
                     end-time)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-detect-mitigation-actions-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/detect/mitigationactions/tasks"
                                                        "ListDetectMitigationActionsTasks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-detect-mitigation-actions-tasks))
(common-lisp:progn
 (common-lisp:defun list-dimensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dimensions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/dimensions"
                                                        "ListDimensions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dimensions))
(common-lisp:progn
 (common-lisp:defun list-domain-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size service-type)
   (common-lisp:declare (common-lisp:ignorable marker page-size service-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-domain-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/domainConfigurations"
                                                        "ListDomainConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domain-configurations))
(common-lisp:progn
 (common-lisp:defun list-fleet-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleet-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/fleet-metrics"
                                                        "ListFleetMetrics"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fleet-metrics))
(common-lisp:progn
 (common-lisp:defun list-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/indices"
                                                        "ListIndices"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-indices))
(common-lisp:progn
 (common-lisp:defun list-job-executions-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable job-id status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-job-executions-for-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "ListJobExecutionsForJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-executions-for-job))
(common-lisp:progn
 (common-lisp:defun list-job-executions-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name status namespace-id
                     max-results next-token job-id)
   (common-lisp:declare
    (common-lisp:ignorable thing-name status namespace-id max-results
     next-token job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-job-executions-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListJobExecutionsForThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-executions-for-thing))
(common-lisp:progn
 (common-lisp:defun list-job-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-job-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/job-templates"
                                                        "ListJobTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-templates))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status target-selection max-results
                     next-token thing-group-name thing-group-id namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable status target-selection max-results next-token
     thing-group-name thing-group-id namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/jobs"
                                                        "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-managed-job-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-managed-job-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/managed-job-templates"
                                                        "ListManagedJobTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-job-templates))
(common-lisp:progn
 (common-lisp:defun list-metric-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name metric-name dimension-name
                     dimension-value-operator start-time end-time max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable thing-name metric-name dimension-name
     dimension-value-operator start-time end-time max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-metric-values-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/metric-values"
                                                        "ListMetricValues"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-metric-values))
(common-lisp:progn
 (common-lisp:defun list-mitigation-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable action-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mitigation-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/mitigationactions/actions"
                                                        "ListMitigationActions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mitigation-actions))
(common-lisp:progn
 (common-lisp:defun list-otaupdates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token ota-update-status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token ota-update-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-otaupdates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/otaUpdates"
                                                        "ListOTAUpdates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-otaupdates))
(common-lisp:progn
 (common-lisp:defun list-outgoing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-outgoing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/certificates-out-going"
                                                        "ListOutgoingCertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-outgoing-certificates))
(common-lisp:progn
 (common-lisp:defun list-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "ListPackageVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-versions))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/packages"
                                                        "ListPackages"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/policies"
                                                        "ListPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable policy-name marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/policy-principals"
                                                        "ListPolicyPrincipals"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-principals))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "ListPolicyVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-principal-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable principal marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principal-policies"
                                                        "ListPrincipalPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-principal-policies))
(common-lisp:progn
 (common-lisp:defun list-principal-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results principal)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principals/things"
                                                        "ListPrincipalThings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-principal-things))
(common-lisp:progn
 (common-lisp:defun list-provisioning-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-template-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "ListProvisioningTemplateVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provisioning-template-versions))
(common-lisp:progn
 (common-lisp:defun list-provisioning-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/provisioning-templates"
                                                        "ListProvisioningTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provisioning-templates))
(common-lisp:progn
 (common-lisp:defun list-related-resources-for-audit-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable finding-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-related-resources-for-audit-finding-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/relatedResources"
                                                        "ListRelatedResourcesForAuditFinding"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-related-resources-for-audit-finding))
(common-lisp:progn
 (common-lisp:defun list-role-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/role-aliases"
                                                        "ListRoleAliases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-role-aliases))
(common-lisp:progn
 (common-lisp:defun list-scheduled-audits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scheduled-audits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/scheduledaudits"
                                                        "ListScheduledAudits"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scheduled-audits))
(common-lisp:progn
 (common-lisp:defun list-security-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results dimension-name
                     metric-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results dimension-name metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/security-profiles"
                                                        "ListSecurityProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-profiles))
(common-lisp:progn
 (common-lisp:defun list-security-profiles-for-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results recursive
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results recursive
     security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-profiles-for-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/security-profiles-for-target"
                                                        "ListSecurityProfilesForTarget"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-profiles-for-target))
(common-lisp:progn
 (common-lisp:defun list-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/streams"
                                                        "ListStreams"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streams))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-targets-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size)
   (common-lisp:declare (common-lisp:ignorable policy-name marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "ListTargetsForPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-targets-for-policy))
(common-lisp:progn
 (common-lisp:defun list-targets-for-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-targets-for-security-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "ListTargetsForSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-targets-for-security-profile))
(common-lisp:progn
 (common-lisp:defun list-thing-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results parent-group
                     name-prefix-filter recursive)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results parent-group
     name-prefix-filter recursive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/thing-groups"
                                                        "ListThingGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-groups))
(common-lisp:progn
 (common-lisp:defun list-thing-groups-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-groups-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/thing-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListThingGroupsForThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-groups-for-thing))
(common-lisp:progn
 (common-lisp:defun list-thing-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListThingPrincipals"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-principals))
(common-lisp:progn
 (common-lisp:defun list-thing-registration-task-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id report-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable task-id report-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-registration-task-reports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A/reports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "ListThingRegistrationTaskReports"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-registration-task-reports))
(common-lisp:progn
 (common-lisp:defun list-thing-registration-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-registration-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/thing-registration-tasks"
                                                        "ListThingRegistrationTasks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-registration-tasks))
(common-lisp:progn
 (common-lisp:defun list-thing-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/thing-types"
                                                        "ListThingTypes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thing-types))
(common-lisp:progn
 (common-lisp:defun list-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results attribute-name
                     attribute-value thing-type-name
                     use-prefix-attribute-value)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results attribute-name
     attribute-value thing-type-name use-prefix-attribute-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/things"
                                                        "ListThings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-things))
(common-lisp:progn
 (common-lisp:defun list-things-in-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-things-in-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "ListThingsInBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-things-in-billing-group))
(common-lisp:progn
 (common-lisp:defun list-things-in-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name recursive next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name recursive next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-things-in-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "ListThingsInThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-things-in-thing-group))
(common-lisp:progn
 (common-lisp:defun list-topic-rule-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-topic-rule-destinations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/destinations"
                                                        "ListTopicRuleDestinations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-topic-rule-destinations))
(common-lisp:progn
 (common-lisp:defun list-topic-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key topic max-results next-token
                     rule-disabled)
   (common-lisp:declare
    (common-lisp:ignorable topic max-results next-token rule-disabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-topic-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/rules"
                                                        "ListTopicRules"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-topic-rules))
(common-lisp:progn
 (common-lisp:defun list-v2logging-levels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable target-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-v2logging-levels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v2LoggingLevel"
                                                        "ListV2LoggingLevels"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-v2logging-levels))
(common-lisp:progn
 (common-lisp:defun list-violation-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time thing-name
                     security-profile-name behavior-criteria-type
                     list-suppressed-alerts verification-state next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time thing-name security-profile-name
     behavior-criteria-type list-suppressed-alerts verification-state
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-violation-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/violation-events"
                                                        "ListViolationEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-violation-events))
(common-lisp:progn
 (common-lisp:defun put-verification-state-on-violation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key violation-id verification-state
                     verification-state-description)
   (common-lisp:declare
    (common-lisp:ignorable violation-id verification-state
     verification-state-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-verification-state-on-violation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/violations/verification-state/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'violation-id))))
                                                        "PutVerificationStateOnViolation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-verification-state-on-violation))
(common-lisp:progn
 (common-lisp:defun register-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate verification-certificate
                     set-as-active allow-auto-registration registration-config
                     tags certificate-mode)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate verification-certificate
     set-as-active allow-auto-registration registration-config tags
     certificate-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/cacertificate"
                                                        "RegisterCACertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-cacertificate))
(common-lisp:progn
 (common-lisp:defun register-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem ca-certificate-pem
                     set-as-active status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-pem ca-certificate-pem set-as-active
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/certificate/register"
                                                        "RegisterCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-certificate))
(common-lisp:progn
 (common-lisp:defun register-certificate-without-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem status)
   (common-lisp:declare (common-lisp:ignorable certificate-pem status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-certificate-without-carequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/certificate/register-no-ca"
                                                        "RegisterCertificateWithoutCA"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-certificate-without-ca))
(common-lisp:progn
 (common-lisp:defun register-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body parameters)
   (common-lisp:declare (common-lisp:ignorable template-body parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/things"
                                                        "RegisterThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-thing))
(common-lisp:progn
 (common-lisp:defun reject-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id reject-reason)
   (common-lisp:declare (common-lisp:ignorable certificate-id reject-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/reject-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "RejectCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun remove-thing-from-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name billing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-thing-from-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/billing-groups/removeThingFromBillingGroup"
                                                        "RemoveThingFromBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-thing-from-billing-group))
(common-lisp:progn
 (common-lisp:defun remove-thing-from-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-thing-from-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/removeThingFromThingGroup"
                                                        "RemoveThingFromThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-thing-from-thing-group))
(common-lisp:progn
 (common-lisp:defun replace-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replace-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "ReplaceTopicRule"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'replace-topic-rule))
(common-lisp:progn
 (common-lisp:defun search-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string next-token
                     max-results query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string next-token max-results
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/search"
                                                        "SearchIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-index))
(common-lisp:progn
 (common-lisp:defun set-default-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/default-authorizer"
                                                        "SetDefaultAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-authorizer))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "SetDefaultPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options-payload)
   (common-lisp:declare (common-lisp:ignorable logging-options-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/loggingOptions"
                                                        "SetLoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-logging-options))
(common-lisp:progn
 (common-lisp:defun set-v2logging-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-target log-level)
   (common-lisp:declare (common-lisp:ignorable log-target log-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-v2logging-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v2LoggingLevel"
                                                        "SetV2LoggingLevel"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-v2logging-level))
(common-lisp:progn
 (common-lisp:defun set-v2logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn default-log-level
                     disable-all-logs)
   (common-lisp:declare
    (common-lisp:ignorable role-arn default-log-level disable-all-logs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-v2logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v2LoggingOptions"
                                                        "SetV2LoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-v2logging-options))
(common-lisp:progn
 (common-lisp:defun start-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id target
                     audit-check-to-actions-mapping client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id target audit-check-to-actions-mapping
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StartAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun start-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id target actions
                     violation-event-occurrence-range
                     include-only-active-violations include-suppressed-alerts
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id target actions
     violation-event-occurrence-range include-only-active-violations
     include-suppressed-alerts client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StartDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun start-on-demand-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-check-names)
   (common-lisp:declare (common-lisp:ignorable target-check-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-on-demand-audit-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/audit/tasks"
                                                        "StartOnDemandAuditTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-on-demand-audit-task))
(common-lisp:progn
 (common-lisp:defun start-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body input-file-bucket
                     input-file-key role-arn)
   (common-lisp:declare
    (common-lisp:ignorable template-body input-file-bucket input-file-key
     role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/thing-registration-tasks"
                                                        "StartThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun stop-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StopThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal cognito-identity-pool-id
                     auth-infos client-id policy-names-to-add
                     policy-names-to-skip)
   (common-lisp:declare
    (common-lisp:ignorable principal cognito-identity-pool-id auth-infos
     client-id policy-names-to-add policy-names-to-skip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-authorization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/test-authorization"
                                                        "TestAuthorization"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-authorization))
(common-lisp:progn
 (common-lisp:defun test-invoke-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name token token-signature
                     http-context mqtt-context tls-context)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name token token-signature http-context
     mqtt-context tls-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-invoke-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A/test"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "TestInvokeAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-invoke-authorizer))
(common-lisp:progn
 (common-lisp:defun transfer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id target-aws-account
                     transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id target-aws-account transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/transfer-certificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "TransferCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-certificate))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/untag"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-audit-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn
                     audit-notification-target-configurations
                     audit-check-configurations)
   (common-lisp:declare
    (common-lisp:ignorable role-arn audit-notification-target-configurations
     audit-check-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-audit-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/audit/configuration"
                                                        "UpdateAccountAuditConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun update-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     expiration-date suppress-indefinitely description)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier expiration-date
     suppress-indefinitely description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/audit/suppressions/update"
                                                        "UpdateAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-audit-suppression))
(common-lisp:progn
 (common-lisp:defun update-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name authorizer-function-arn
                     token-key-name token-signing-public-keys status
                     enable-caching-for-http)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name authorizer-function-arn
     token-key-name token-signing-public-keys status enable-caching-for-http))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "UpdateAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-authorizer))
(common-lisp:progn
 (common-lisp:defun update-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name
                     billing-group-properties expected-version)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-properties
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "UpdateBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-billing-group))
(common-lisp:progn
 (common-lisp:defun update-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status
                     new-auto-registration-status registration-config
                     remove-auto-registration)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id new-status
     new-auto-registration-status registration-config
     remove-auto-registration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "UpdateCACertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cacertificate))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status)
   (common-lisp:declare (common-lisp:ignorable certificate-id new-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "UpdateCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name
                     lambda-function-arn account-default-for-operations)
   (common-lisp:declare
    (common-lisp:ignorable certificate-provider-name lambda-function-arn
     account-default-for-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "UpdateCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-certificate-provider))
(common-lisp:progn
 (common-lisp:defun update-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name display-name)
   (common-lisp:declare (common-lisp:ignorable metric-name display-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "UpdateCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-custom-metric))
(common-lisp:progn
 (common-lisp:defun update-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name string-values)
   (common-lisp:declare (common-lisp:ignorable name string-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateDimension"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dimension))
(common-lisp:progn
 (common-lisp:defun update-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name
                     authorizer-config domain-configuration-status
                     remove-authorizer-config tls-config
                     server-certificate-config)
   (common-lisp:declare
    (common-lisp:ignorable domain-configuration-name authorizer-config
     domain-configuration-status remove-authorizer-config tls-config
     server-certificate-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "UpdateDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-configuration))
(common-lisp:progn
 (common-lisp:defun update-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     expected-version index-name query-string query-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties
     expected-version index-name query-string query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "UpdateDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun update-event-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-configurations)
   (common-lisp:declare (common-lisp:ignorable event-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/event-configurations"
                                                        "UpdateEventConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-configurations))
(common-lisp:progn
 (common-lisp:defun update-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name query-string aggregation-type
                     period aggregation-field description query-version
                     index-name unit expected-version)
   (common-lisp:declare
    (common-lisp:ignorable metric-name query-string aggregation-type period
     aggregation-field description query-version index-name unit
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "UpdateFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet-metric))
(common-lisp:progn
 (common-lisp:defun update-indexing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-indexing-configuration
                     thing-group-indexing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable thing-indexing-configuration
     thing-group-indexing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-indexing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indexing/config"
                                                        "UpdateIndexingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-indexing-configuration))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id description presigned-url-config
                     job-executions-rollout-config abort-config timeout-config
                     namespace-id job-executions-retry-config)
   (common-lisp:declare
    (common-lisp:ignorable job-id description presigned-url-config
     job-executions-rollout-config abort-config timeout-config namespace-id
     job-executions-retry-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name role-arn action-params)
   (common-lisp:declare
    (common-lisp:ignorable action-name role-arn action-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "UpdateMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mitigation-action))
(common-lisp:progn
 (common-lisp:defun update-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name description
                     default-version-name unset-default-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name description default-version-name
     unset-default-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "UpdatePackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package))
(common-lisp:progn
 (common-lisp:defun update-package-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key version-update-by-jobs-config
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable version-update-by-jobs-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-package-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/package-configuration"
                                                        "UpdatePackageConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package-configuration))
(common-lisp:progn
 (common-lisp:defun update-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name description
                     attributes action client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name description attributes
     action client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "UpdatePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package-version))
(common-lisp:progn
 (common-lisp:defun update-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description enabled
                     default-version-id provisioning-role-arn
                     pre-provisioning-hook remove-pre-provisioning-hook)
   (common-lisp:declare
    (common-lisp:ignorable template-name description enabled default-version-id
     provisioning-role-arn pre-provisioning-hook remove-pre-provisioning-hook))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-provisioning-template))
(common-lisp:progn
 (common-lisp:defun update-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias role-arn
                     credential-duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-alias role-arn credential-duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "UpdateRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-role-alias))
(common-lisp:progn
 (common-lisp:defun update-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key frequency day-of-month day-of-week
                     target-check-names scheduled-audit-name)
   (common-lisp:declare
    (common-lisp:ignorable frequency day-of-month day-of-week
     target-check-names scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "UpdateScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun update-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-description behaviors alert-targets
                     additional-metrics-to-retain
                     additional-metrics-to-retain-v2 delete-behaviors
                     delete-alert-targets delete-additional-metrics-to-retain
                     expected-version metrics-export-config
                     delete-metrics-export-config)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-description
     behaviors alert-targets additional-metrics-to-retain
     additional-metrics-to-retain-v2 delete-behaviors delete-alert-targets
     delete-additional-metrics-to-retain expected-version metrics-export-config
     delete-metrics-export-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "UpdateSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-security-profile))
(common-lisp:progn
 (common-lisp:defun update-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id description files role-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-id description files role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "UpdateStream"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-stream))
(common-lisp:progn
 (common-lisp:defun update-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload expected-version remove-thing-type)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     expected-version remove-thing-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "UpdateThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-thing))
(common-lisp:progn
 (common-lisp:defun update-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "UpdateThingGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-thing-group))
(common-lisp:progn
 (common-lisp:defun update-thing-groups-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-groups-to-add
                     thing-groups-to-remove override-dynamic-groups)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-groups-to-add
     thing-groups-to-remove override-dynamic-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-thing-groups-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/updateThingGroupsForThing"
                                                        "UpdateThingGroupsForThing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-thing-groups-for-thing))
(common-lisp:progn
 (common-lisp:defun update-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn status)
   (common-lisp:declare (common-lisp:ignorable arn status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" "/destinations"
                                                        "UpdateTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun validate-security-profile-behaviors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key behaviors)
   (common-lisp:declare (common-lisp:ignorable behaviors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-security-profile-behaviors-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/security-profile-behaviors/validate"
                                                        "ValidateSecurityProfileBehaviors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-security-profile-behaviors))
