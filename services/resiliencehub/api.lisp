;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/resiliencehub/api
  (:use)
  (:nicknames #:aws/resiliencehub)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/resiliencehub/api)
(common-lisp:progn
 (common-lisp:defclass resiliencehub-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "resiliencehub" :protocol
                        :rest-json))
 (common-lisp:export 'resiliencehub-request))
(common-lisp:progn
 (common-lisp:define-condition resiliencehub-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'resiliencehub-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-draft-app-version-resource-mappings-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-draft-app-version-resource-mappings-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (resource-mappings (common-lisp:error ":resourcemappings is required") :type
    (common-lisp:or resource-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-draft-app-version-resource-mappings-request
                    'make-add-draft-app-version-resource-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-mappings))
      (common-lisp:list
       (common-lisp:cons "resourceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-draft-app-version-resource-mappings-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-draft-app-version-resource-mappings-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (resource-mappings (common-lisp:error ":resourcemappings is required") :type
    (common-lisp:or resource-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-draft-app-version-resource-mappings-response
                    'make-add-draft-app-version-resource-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-mappings))
      (common-lisp:list
       (common-lisp:cons "resourceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-draft-app-version-resource-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-info-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-additional-info-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype additional-info-value-list ()
   '(trivial-types:proper-list string1024))
 (common-lisp:defun |make-additional-info-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string1024))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (alarm-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-alarm-recommendation-"))
   (app-component-name common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or recommendation-item-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string500 common-lisp:null))
   (prerequisite common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (recommendation-id (common-lisp:error ":recommendationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (reference-id (common-lisp:error ":referenceid is required") :type
    (common-lisp:or spec-reference-id common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or alarm-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alarm-recommendation 'make-alarm-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prerequisite))
      (common-lisp:list
       (common-lisp:cons "prerequisite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-recommendation-list ()
   '(trivial-types:proper-list alarm-recommendation))
 (common-lisp:defun |make-alarm-recommendation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype alarm-reference-id-list ()
   '(trivial-types:proper-list string500))
 (common-lisp:defun |make-alarm-reference-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string500))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app (:copier common-lisp:nil) (:conc-name "struct-shape-app-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-schedule common-lisp:nil :type
    (common-lisp:or app-assessment-schedule-type common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or app-compliance-status-type common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (last-app-compliance-evaluation-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-resiliency-score-evaluation-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (resiliency-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or app-status-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app 'make-app))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-schedule))
      (common-lisp:list
       (common-lisp:cons "assessmentSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "complianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-app-compliance-evaluation-time))
      (common-lisp:list
       (common-lisp:cons "lastAppComplianceEvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resiliency-score-evaluation-time))
      (common-lisp:list
       (common-lisp:cons "lastResiliencyScoreEvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-score))
      (common-lisp:list
       (common-lisp:cons "resiliencyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (app-assessment (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-assessment-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (app-version common-lisp:nil :type
    (common-lisp:or entity-version common-lisp:null))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (assessment-status (common-lisp:error ":assessmentstatus is required") :type
    (common-lisp:or assessment-status common-lisp:null))
   (compliance common-lisp:nil :type
    (common-lisp:or assessment-compliance common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or compliance-status common-lisp:null))
   (cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (invoker (common-lisp:error ":invoker is required") :type
    (common-lisp:or assessment-invoker common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or resiliency-policy common-lisp:null))
   (resiliency-score common-lisp:nil :type
    (common-lisp:or resiliency-score common-lisp:null))
   (resource-errors-details common-lisp:nil :type
    (common-lisp:or resource-errors-details common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app-assessment 'make-app-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-status))
      (common-lisp:list
       (common-lisp:cons "assessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "complianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoker))
      (common-lisp:list
       (common-lisp:cons "invoker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-score))
      (common-lisp:list
       (common-lisp:cons "resiliencyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-errors-details))
      (common-lisp:list
       (common-lisp:cons "resourceErrorsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-assessment))
   common-lisp:nil))
(common-lisp:deftype app-assessment-schedule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-assessment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-assessment-summary-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (app-version common-lisp:nil :type
    (common-lisp:or entity-version common-lisp:null))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (assessment-status (common-lisp:error ":assessmentstatus is required") :type
    (common-lisp:or assessment-status common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or compliance-status common-lisp:null))
   (cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (invoker common-lisp:nil :type
    (common-lisp:or assessment-invoker common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (resiliency-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-assessment-summary 'make-app-assessment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-assessment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-assessment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-status))
      (common-lisp:list
       (common-lisp:cons "assessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "complianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoker))
      (common-lisp:list
       (common-lisp:cons "invoker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-score))
      (common-lisp:list
       (common-lisp:cons "resiliencyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-assessment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-assessment-summary-list ()
   '(trivial-types:proper-list app-assessment-summary))
 (common-lisp:defun |make-app-assessment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-assessment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-compliance-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-component-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string255 common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string255 common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app-component 'make-app-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (app-component-compliance (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-component-compliance-"))
   (app-component-name common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (compliance common-lisp:nil :type
    (common-lisp:or assessment-compliance common-lisp:null))
   (cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (resiliency-score common-lisp:nil :type
    (common-lisp:or resiliency-score common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or compliance-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-component-compliance 'make-app-component-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-component-compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-component-compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-score))
      (common-lisp:list
       (common-lisp:cons "resiliencyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-component-compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-component-list ()
   '(trivial-types:proper-list app-component))
 (common-lisp:defun |make-app-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-component))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype app-component-name-list ()
   '(trivial-types:proper-list string255))
 (common-lisp:defun |make-app-component-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (app-input-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-input-source-"))
   (eks-source-cluster-namespace common-lisp:nil :type
    (common-lisp:or eks-source-cluster-namespace common-lisp:null))
   (import-type (common-lisp:error ":importtype is required") :type
    (common-lisp:or resource-mapping-type common-lisp:null))
   (resource-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (source-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (terraform-source common-lisp:nil :type
    (common-lisp:or terraform-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-input-source 'make-app-input-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eks-source-cluster-namespace))
      (common-lisp:list
       (common-lisp:cons "eksSourceClusterNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-type))
      (common-lisp:list
       (common-lisp:cons "importType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-count))
      (common-lisp:list
       (common-lisp:cons "resourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "sourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terraform-source))
      (common-lisp:list
       (common-lisp:cons "terraformSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-input-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-input-source-list ()
   '(trivial-types:proper-list app-input-source))
 (common-lisp:defun |make-app-input-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-input-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-summary-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-schedule common-lisp:nil :type
    (common-lisp:or app-assessment-schedule-type common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or app-compliance-status-type common-lisp:null))
   (creation-time (common-lisp:error ":creationtime is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (resiliency-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or app-status-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app-summary 'make-app-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-schedule))
      (common-lisp:list
       (common-lisp:cons "assessmentSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "complianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-score))
      (common-lisp:list
       (common-lisp:cons "resiliencyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-summary-list ()
   '(trivial-types:proper-list app-summary))
 (common-lisp:defun |make-app-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-template-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype app-version-list ()
   '(trivial-types:proper-list app-version-summary))
 (common-lisp:defun |make-app-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (app-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-version-summary-"))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-version-summary 'make-app-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-version-summary))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-compliance () 'common-lisp:hash-table)
 (common-lisp:defun |make-assessment-compliance|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype assessment-invoker () 'common-lisp:string)
(common-lisp:deftype assessment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-status-list ()
   '(trivial-types:proper-list assessment-status))
 (common-lisp:defun |make-assessment-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype compliance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-compliances-list ()
   '(trivial-types:proper-list app-component-compliance))
 (common-lisp:defun |make-component-compliances-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            app-component-compliance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (component-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-recommendation-"))
   (app-component-name (common-lisp:error ":appcomponentname is required")
    :type (common-lisp:or entity-id common-lisp:null))
   (config-recommendations
    (common-lisp:error ":configrecommendations is required") :type
    (common-lisp:or config-recommendation-list common-lisp:null))
   (recommendation-status
    (common-lisp:error ":recommendationstatus is required") :type
    (common-lisp:or recommendation-compliance-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-recommendation 'make-component-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-recommendations))
      (common-lisp:list
       (common-lisp:cons "configRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-status))
      (common-lisp:list
       (common-lisp:cons "recommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-recommendation-list ()
   '(trivial-types:proper-list component-recommendation))
 (common-lisp:defun |make-component-recommendation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            component-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (config-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-recommendation-"))
   (app-component-name common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (compliance common-lisp:nil :type
    (common-lisp:or assessment-compliance common-lisp:null))
   (cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (ha-architecture common-lisp:nil :type
    (common-lisp:or ha-architecture common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (optimization-type (common-lisp:error ":optimizationtype is required") :type
    (common-lisp:or config-recommendation-optimization-type common-lisp:null))
   (recommendation-compliance common-lisp:nil :type
    (common-lisp:or recommendation-compliance common-lisp:null))
   (reference-id (common-lisp:error ":referenceid is required") :type
    (common-lisp:or spec-reference-id common-lisp:null))
   (suggested-changes common-lisp:nil :type
    (common-lisp:or suggested-changes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'config-recommendation 'make-config-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ha-architecture))
      (common-lisp:list
       (common-lisp:cons "haArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-type))
      (common-lisp:list
       (common-lisp:cons "optimizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-compliance))
      (common-lisp:list
       (common-lisp:cons "recommendationCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggested-changes))
      (common-lisp:list
       (common-lisp:cons "suggestedChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype config-recommendation-list ()
   '(trivial-types:proper-list config-recommendation))
 (common-lisp:defun |make-config-recommendation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype config-recommendation-optimization-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (cost (:copier common-lisp:nil) (:conc-name "struct-shape-cost-"))
   (amount (common-lisp:error ":amount is required") :type
    (common-lisp:or double common-lisp:null))
   (currency (common-lisp:error ":currency is required") :type
    (common-lisp:or currency-code common-lisp:null))
   (frequency (common-lisp:error ":frequency is required") :type
    (common-lisp:or cost-frequency common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cost 'make-cost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost))
   common-lisp:nil))
(common-lisp:deftype cost-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-request-"))
   (assessment-schedule common-lisp:nil :type
    (common-lisp:or app-assessment-schedule-type common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-schedule))
      (common-lisp:list
       (common-lisp:cons "assessmentSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-response-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-response 'make-create-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-version-app-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-version-app-component-request-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string255 common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string255 common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-version-app-component-request
                    'make-create-app-version-app-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-version-app-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-version-app-component-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-component common-lisp:nil :type
    (common-lisp:or app-component common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-version-app-component-response
                    'make-create-app-version-app-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component))
      (common-lisp:list
       (common-lisp:cons "appComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-app-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-version-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-version-resource-request-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-components (common-lisp:error ":appcomponents is required") :type
    (common-lisp:or app-component-name-list common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (aws-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (logical-resource-id (common-lisp:error ":logicalresourceid is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id (common-lisp:error ":physicalresourceid is required")
    :type (common-lisp:or string2048 common-lisp:null))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-version-resource-request
                    'make-create-app-version-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-components))
      (common-lisp:list
       (common-lisp:cons "appComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-version-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-version-resource-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (physical-resource common-lisp:nil :type
    (common-lisp:or physical-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-version-resource-response
                    'make-create-app-version-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-resource))
      (common-lisp:list
       (common-lisp:cons "physicalResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-version-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-recommendation-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-recommendation-template-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (bucket-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or template-format common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-id-list common-lisp:null))
   (recommendation-types common-lisp:nil :type
    (common-lisp:or render-recommendation-type-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-recommendation-template-request
                    'make-create-recommendation-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-types))
      (common-lisp:list
       (common-lisp:cons "recommendationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-recommendation-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-recommendation-template-response-"))
   (recommendation-template common-lisp:nil :type
    (common-lisp:or recommendation-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-recommendation-template-response
                    'make-create-recommendation-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-template))
      (common-lisp:list
       (common-lisp:cons "recommendationTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-recommendation-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resiliency-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resiliency-policy-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (data-location-constraint common-lisp:nil :type
    (common-lisp:or data-location-constraint common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or disruption-policy common-lisp:null))
   (policy-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (tier (common-lisp:error ":tier is required") :type
    (common-lisp:or resiliency-policy-tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resiliency-policy-request
                    'make-create-resiliency-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-location-constraint))
      (common-lisp:list
       (common-lisp:cons "dataLocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-description))
      (common-lisp:list
       (common-lisp:cons "policyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resiliency-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resiliency-policy-response-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resiliency-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resiliency-policy-response
                    'make-create-resiliency-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resiliency-policy-response))
   common-lisp:nil))
(common-lisp:deftype currency-code () 'common-lisp:string)
(common-lisp:deftype customer-id () 'common-lisp:string)
(common-lisp:deftype data-location-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-assessment-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-assessment-request
                    'make-delete-app-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-assessment-response-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-status (common-lisp:error ":assessmentstatus is required") :type
    (common-lisp:or assessment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-assessment-response
                    'make-delete-app-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-status))
      (common-lisp:list
       (common-lisp:cons "assessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-input-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-input-source-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (eks-source-cluster-namespace common-lisp:nil :type
    (common-lisp:or eks-source-cluster-namespace common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (terraform-source common-lisp:nil :type
    (common-lisp:or terraform-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-input-source-request
                    'make-delete-app-input-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eks-source-cluster-namespace))
      (common-lisp:list
       (common-lisp:cons "eksSourceClusterNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "sourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terraform-source))
      (common-lisp:list
       (common-lisp:cons "terraformSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-input-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-input-source-response-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (app-input-source common-lisp:nil :type
    (common-lisp:or app-input-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-input-source-response
                    'make-delete-app-input-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-input-source))
      (common-lisp:list
       (common-lisp:cons "appInputSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-input-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-response 'make-delete-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-version-app-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-version-app-component-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-version-app-component-request
                    'make-delete-app-version-app-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-version-app-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-version-app-component-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-component common-lisp:nil :type
    (common-lisp:or app-component common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-version-app-component-response
                    'make-delete-app-version-app-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component))
      (common-lisp:list
       (common-lisp:cons "appComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-app-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-version-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-version-resource-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (aws-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or string2048 common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-version-resource-request
                    'make-delete-app-version-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-version-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-version-resource-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (physical-resource common-lisp:nil :type
    (common-lisp:or physical-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-version-resource-response
                    'make-delete-app-version-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-resource))
      (common-lisp:list
       (common-lisp:cons "physicalResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-version-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-recommendation-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-recommendation-template-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (recommendation-template-arn
    (common-lisp:error ":recommendationtemplatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-recommendation-template-request
                    'make-delete-recommendation-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-template-arn))
      (common-lisp:list
       (common-lisp:cons "recommendationTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-recommendation-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-recommendation-template-response-"))
   (recommendation-template-arn
    (common-lisp:error ":recommendationtemplatearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or recommendation-template-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-recommendation-template-response
                    'make-delete-recommendation-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-template-arn))
      (common-lisp:list
       (common-lisp:cons "recommendationTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommendation-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resiliency-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resiliency-policy-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resiliency-policy-request
                    'make-delete-resiliency-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resiliency-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resiliency-policy-response-"))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resiliency-policy-response
                    'make-delete-resiliency-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resiliency-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-assessment-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-assessment-request
                    'make-describe-app-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-assessment-response-"))
   (assessment (common-lisp:error ":assessment is required") :type
    (common-lisp:or app-assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-assessment-response
                    'make-describe-app-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-request 'make-describe-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-response-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-response 'make-describe-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-app-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-app-component-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-app-component-request
                    'make-describe-app-version-app-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-app-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-app-component-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-component common-lisp:nil :type
    (common-lisp:or app-component common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-app-component-response
                    'make-describe-app-version-app-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component))
      (common-lisp:list
       (common-lisp:cons "appComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-app-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-request
                    'make-describe-app-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-resource-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (aws-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or string2048 common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-resource-request
                    'make-describe-app-version-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-resource-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (physical-resource common-lisp:nil :type
    (common-lisp:or physical-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-resource-response
                    'make-describe-app-version-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-resource))
      (common-lisp:list
       (common-lisp:cons "physicalResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-resources-resolution-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-app-version-resources-resolution-status-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (resolution-id common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-resources-resolution-status-request
                    'make-describe-app-version-resources-resolution-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-resources-resolution-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-app-version-resources-resolution-status-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (resolution-id (common-lisp:error ":resolutionid is required") :type
    (common-lisp:or string255 common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-resolution-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-resources-resolution-status-response
                    'make-describe-app-version-resources-resolution-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-resources-resolution-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-response-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-response
                    'make-describe-app-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-template-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-template-request
                    'make-describe-app-version-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-version-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-version-template-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-template-body (common-lisp:error ":apptemplatebody is required") :type
    (common-lisp:or app-template-body common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-version-template-response
                    'make-describe-app-version-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-template-body))
      (common-lisp:list
       (common-lisp:cons "appTemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-version-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-draft-app-version-resources-import-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-draft-app-version-resources-import-status-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-draft-app-version-resources-import-status-request
                    'make-describe-draft-app-version-resources-import-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-draft-app-version-resources-import-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-draft-app-version-resources-import-status-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-import-status-type common-lisp:null))
   (status-change-time (common-lisp:error ":statuschangetime is required")
    :type (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'describe-draft-app-version-resources-import-status-response
   'make-describe-draft-app-version-resources-import-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-change-time))
      (common-lisp:list
       (common-lisp:cons "statusChangeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-draft-app-version-resources-import-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resiliency-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resiliency-policy-request-"))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resiliency-policy-request
                    'make-describe-resiliency-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resiliency-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resiliency-policy-response-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resiliency-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resiliency-policy-response
                    'make-describe-resiliency-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resiliency-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disruption-compliance (:copier common-lisp:nil)
      (:conc-name "struct-shape-disruption-compliance-"))
   (achievable-rpo-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (achievable-rto-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (compliance-status (common-lisp:error ":compliancestatus is required") :type
    (common-lisp:or compliance-status common-lisp:null))
   (current-rpo-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (current-rto-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (rpo-description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (rpo-reference-id common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (rto-description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (rto-reference-id common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disruption-compliance 'make-disruption-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disruption-compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disruption-compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'achievable-rpo-in-secs))
      (common-lisp:list
       (common-lisp:cons "achievableRpoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'achievable-rto-in-secs))
      (common-lisp:list
       (common-lisp:cons "achievableRtoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "complianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-rpo-in-secs))
      (common-lisp:list
       (common-lisp:cons "currentRpoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-rto-in-secs))
      (common-lisp:list
       (common-lisp:cons "currentRtoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rpo-description))
      (common-lisp:list
       (common-lisp:cons "rpoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rpo-reference-id))
      (common-lisp:list
       (common-lisp:cons "rpoReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rto-description))
      (common-lisp:list
       (common-lisp:cons "rtoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rto-reference-id))
      (common-lisp:list
       (common-lisp:cons "rtoReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disruption-compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disruption-policy () 'common-lisp:hash-table)
 (common-lisp:defun |make-disruption-policy|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype disruption-resiliency-score () 'common-lisp:hash-table)
 (common-lisp:defun |make-disruption-resiliency-score|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype disruption-type () 'common-lisp:string)
(common-lisp:deftype document-name () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype eks-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eks-namespace-list ()
   '(trivial-types:proper-list eks-namespace))
 (common-lisp:defun |make-eks-namespace-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eks-namespace))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (eks-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-eks-source-"))
   (eks-cluster-arn (common-lisp:error ":eksclusterarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (namespaces (common-lisp:error ":namespaces is required") :type
    (common-lisp:or eks-namespace-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eks-source 'make-eks-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eks-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eks-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "eksClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eks-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (eks-source-cluster-namespace (:copier common-lisp:nil)
      (:conc-name "struct-shape-eks-source-cluster-namespace-"))
   (eks-cluster-arn (common-lisp:error ":eksclusterarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or eks-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eks-source-cluster-namespace
                    'make-eks-source-cluster-namespace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eks-source-cluster-namespace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eks-source-cluster-namespace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "eksClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eks-source-cluster-namespace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eks-source-list ()
   '(trivial-types:proper-list eks-source))
 (common-lisp:defun |make-eks-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eks-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-description () 'common-lisp:string)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entity-name-list ()
   '(trivial-types:proper-list entity-name))
 (common-lisp:defun |make-entity-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-version () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype estimated-cost-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failure-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-failure-policy-"))
   (rpo-in-secs (common-lisp:error ":rpoinsecs is required") :type
    (common-lisp:or seconds common-lisp:null))
   (rto-in-secs (common-lisp:error ":rtoinsecs is required") :type
    (common-lisp:or seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failure-policy 'make-failure-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rpo-in-secs))
      (common-lisp:list
       (common-lisp:cons "rpoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rto-in-secs))
      (common-lisp:list
       (common-lisp:cons "rtoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-policy))
   common-lisp:nil))
(common-lisp:deftype ha-architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-resources-to-draft-app-version-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-import-resources-to-draft-app-version-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (eks-sources common-lisp:nil :type
    (common-lisp:or eks-source-list common-lisp:null))
   (import-strategy common-lisp:nil :type
    (common-lisp:or resource-import-strategy-type common-lisp:null))
   (source-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (terraform-sources common-lisp:nil :type
    (common-lisp:or terraform-source-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-resources-to-draft-app-version-request
                    'make-import-resources-to-draft-app-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-sources))
      (common-lisp:list
       (common-lisp:cons "eksSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-strategy))
      (common-lisp:list
       (common-lisp:cons "importStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arns))
      (common-lisp:list
       (common-lisp:cons "sourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terraform-sources))
      (common-lisp:list
       (common-lisp:cons "terraformSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-resources-to-draft-app-version-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-import-resources-to-draft-app-version-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (eks-sources common-lisp:nil :type
    (common-lisp:or eks-source-list common-lisp:null))
   (source-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-import-status-type common-lisp:null))
   (terraform-sources common-lisp:nil :type
    (common-lisp:or terraform-source-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-resources-to-draft-app-version-response
                    'make-import-resources-to-draft-app-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-sources))
      (common-lisp:list
       (common-lisp:cons "eksSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arns))
      (common-lisp:list
       (common-lisp:cons "sourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terraform-sources))
      (common-lisp:list
       (common-lisp:cons "terraformSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-resources-to-draft-app-version-response))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-alarm-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-alarm-recommendations-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-alarm-recommendations-request
                    'make-list-alarm-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-alarm-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-alarm-recommendations-response-"))
   (alarm-recommendations
    (common-lisp:error ":alarmrecommendations is required") :type
    (common-lisp:or alarm-recommendation-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-alarm-recommendations-response
                    'make-list-alarm-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alarm-recommendations))
      (common-lisp:list
       (common-lisp:cons "alarmRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-alarm-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-assessments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-assessments-request-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (assessment-status common-lisp:nil :type
    (common-lisp:or assessment-status-list common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or compliance-status common-lisp:null))
   (invoker common-lisp:nil :type
    (common-lisp:or assessment-invoker common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-assessments-request
                    'make-list-app-assessments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-assessments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-assessments-response-"))
   (assessment-summaries (common-lisp:error ":assessmentsummaries is required")
    :type (common-lisp:or app-assessment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-assessments-response
                    'make-list-app-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-summaries))
      (common-lisp:list
       (common-lisp:cons "assessmentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-component-compliances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-component-compliances-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-component-compliances-request
                    'make-list-app-component-compliances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-component-compliances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-component-compliances-response-"))
   (component-compliances
    (common-lisp:error ":componentcompliances is required") :type
    (common-lisp:or component-compliances-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-component-compliances-response
                    'make-list-app-component-compliances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-compliances))
      (common-lisp:list
       (common-lisp:cons "componentCompliances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-compliances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-component-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-component-recommendations-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-component-recommendations-request
                    'make-list-app-component-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-component-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-component-recommendations-response-"))
   (component-recommendations
    (common-lisp:error ":componentrecommendations is required") :type
    (common-lisp:or component-recommendation-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-component-recommendations-response
                    'make-list-app-component-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-recommendations))
      (common-lisp:list
       (common-lisp:cons "componentRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-component-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-input-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-input-sources-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-input-sources-request
                    'make-list-app-input-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-input-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-input-sources-response-"))
   (app-input-sources (common-lisp:error ":appinputsources is required") :type
    (common-lisp:or app-input-source-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-input-sources-response
                    'make-list-app-input-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-input-sources))
      (common-lisp:list
       (common-lisp:cons "appInputSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-input-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-app-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-app-components-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-app-components-request
                    'make-list-app-version-app-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-app-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-app-components-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-components common-lisp:nil :type
    (common-lisp:or app-component-list common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-app-components-response
                    'make-list-app-version-app-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-components))
      (common-lisp:list
       (common-lisp:cons "appComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-app-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-resource-mappings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-resource-mappings-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-resource-mappings-request
                    'make-list-app-version-resource-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-resource-mappings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-resource-mappings-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resource-mappings (common-lisp:error ":resourcemappings is required") :type
    (common-lisp:or resource-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-resource-mappings-response
                    'make-list-app-version-resource-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-mappings))
      (common-lisp:list
       (common-lisp:cons "resourceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resource-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-resources-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resolution-id common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-resources-request
                    'make-list-app-version-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-version-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-version-resources-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (physical-resources (common-lisp:error ":physicalresources is required")
    :type (common-lisp:or physical-resource-list common-lisp:null))
   (resolution-id (common-lisp:error ":resolutionid is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-version-resources-response
                    'make-list-app-version-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-resources))
      (common-lisp:list
       (common-lisp:cons "physicalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-version-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-versions-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-versions-request
                    'make-list-app-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-versions-response-"))
   (app-versions (common-lisp:error ":appversions is required") :type
    (common-lisp:or app-version-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-versions-response
                    'make-list-app-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-versions))
      (common-lisp:list
       (common-lisp:cons "appVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-request-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-request 'make-list-apps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-response-"))
   (app-summaries (common-lisp:error ":appsummaries is required") :type
    (common-lisp:or app-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-response 'make-list-apps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-summaries))
      (common-lisp:list
       (common-lisp:cons "appSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-templates-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (recommendation-template-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or recommendation-template-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-templates-request
                    'make-list-recommendation-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-templates-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (recommendation-templates common-lisp:nil :type
    (common-lisp:or recommendation-template-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-templates-response
                    'make-list-recommendation-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-templates))
      (common-lisp:list
       (common-lisp:cons "recommendationTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resiliency-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resiliency-policies-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resiliency-policies-request
                    'make-list-resiliency-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resiliency-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resiliency-policies-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resiliency-policies (common-lisp:error ":resiliencypolicies is required")
    :type (common-lisp:or resiliency-policies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resiliency-policies-response
                    'make-list-resiliency-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-policies))
      (common-lisp:list
       (common-lisp:cons "resiliencyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resiliency-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sop-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sop-recommendations-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sop-recommendations-request
                    'make-list-sop-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sop-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sop-recommendations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sop-recommendations (common-lisp:error ":soprecommendations is required")
    :type (common-lisp:or sop-recommendation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sop-recommendations-response
                    'make-list-sop-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sop-recommendations))
      (common-lisp:list
       (common-lisp:cons "sopRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sop-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-suggested-resiliency-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-suggested-resiliency-policies-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-suggested-resiliency-policies-request
                    'make-list-suggested-resiliency-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-suggested-resiliency-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-suggested-resiliency-policies-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resiliency-policies (common-lisp:error ":resiliencypolicies is required")
    :type (common-lisp:or resiliency-policies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-suggested-resiliency-policies-response
                    'make-list-suggested-resiliency-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resiliency-policies))
      (common-lisp:list
       (common-lisp:cons "resiliencyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-suggested-resiliency-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-test-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-test-recommendations-request-"))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-test-recommendations-request
                    'make-list-test-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-test-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-test-recommendations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (test-recommendations (common-lisp:error ":testrecommendations is required")
    :type (common-lisp:or test-recommendation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-test-recommendations-response
                    'make-list-test-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-recommendations))
      (common-lisp:list
       (common-lisp:cons "testRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-unsupported-app-version-resources-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-unsupported-app-version-resources-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resolution-id common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-unsupported-app-version-resources-request
                    'make-list-unsupported-app-version-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-unsupported-app-version-resources-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-unsupported-app-version-resources-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resolution-id (common-lisp:error ":resolutionid is required") :type
    (common-lisp:or string255 common-lisp:null))
   (unsupported-resources
    (common-lisp:error ":unsupportedresources is required") :type
    (common-lisp:or unsupported-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-unsupported-app-version-resources-response
                    'make-list-unsupported-app-version-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsupported-resources))
      (common-lisp:list
       (common-lisp:cons "unsupportedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-unsupported-app-version-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logical-resource-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-logical-resource-id-"))
   (eks-source-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or string255 common-lisp:null))
   (logical-stack-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (terraform-source-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logical-resource-id 'make-logical-resource-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logical-resource-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logical-resource-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-source-name))
      (common-lisp:list
       (common-lisp:cons "eksSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-stack-name))
      (common-lisp:list
       (common-lisp:cons "logicalStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "resourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terraform-source-name))
      (common-lisp:list
       (common-lisp:cons "terraformSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logical-resource-id))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype physical-identifier-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (physical-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-physical-resource-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-components common-lisp:nil :type
    (common-lisp:or app-component-list common-lisp:null))
   (excluded common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (logical-resource-id (common-lisp:error ":logicalresourceid is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id (common-lisp:error ":physicalresourceid is required")
    :type (common-lisp:or physical-resource-id common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'physical-resource 'make-physical-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input physical-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input physical-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-components))
      (common-lisp:list
       (common-lisp:cons "appComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input physical-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (physical-resource-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-physical-resource-id-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (aws-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or string255 common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or physical-identifier-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'physical-resource-id 'make-physical-resource-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input physical-resource-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input physical-resource-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input physical-resource-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype physical-resource-list ()
   '(trivial-types:proper-list physical-resource))
 (common-lisp:defun |make-physical-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list physical-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (publish-app-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-app-version-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-app-version-request
                    'make-publish-app-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (publish-app-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-app-version-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version common-lisp:nil :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-app-version-response
                    'make-publish-app-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-app-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-draft-app-version-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-draft-app-version-template-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-template-body (common-lisp:error ":apptemplatebody is required") :type
    (common-lisp:or app-template-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-draft-app-version-template-request
                    'make-put-draft-app-version-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-template-body))
      (common-lisp:list
       (common-lisp:cons "appTemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-draft-app-version-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-draft-app-version-template-response-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (app-version common-lisp:nil :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-draft-app-version-template-response
                    'make-put-draft-app-version-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-draft-app-version-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-compliance () 'common-lisp:hash-table)
 (common-lisp:defun |make-recommendation-compliance|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype recommendation-compliance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-disruption-compliance (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-disruption-compliance-"))
   (expected-compliance-status
    (common-lisp:error ":expectedcompliancestatus is required") :type
    (common-lisp:or compliance-status common-lisp:null))
   (expected-rpo-description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (expected-rpo-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null))
   (expected-rto-description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (expected-rto-in-secs common-lisp:nil :type
    (common-lisp:or seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-disruption-compliance
                    'make-recommendation-disruption-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-disruption-compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-disruption-compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-compliance-status))
      (common-lisp:list
       (common-lisp:cons "expectedComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-rpo-description))
      (common-lisp:list
       (common-lisp:cons "expectedRpoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-rpo-in-secs))
      (common-lisp:list
       (common-lisp:cons "expectedRpoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-rto-description))
      (common-lisp:list
       (common-lisp:cons "expectedRtoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-rto-in-secs))
      (common-lisp:list
       (common-lisp:cons "expectedRtoInSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-disruption-compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list uuid))
 (common-lisp:defun |make-recommendation-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uuid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-item-"))
   (already-implemented common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (target-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (target-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-item 'make-recommendation-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'already-implemented))
      (common-lisp:list
       (common-lisp:cons "alreadyImplemented"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-account-id))
      (common-lisp:list
       (common-lisp:cons "targetAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "targetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-item-list ()
   '(trivial-types:proper-list recommendation-item))
 (common-lisp:defun |make-recommendation-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-template-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (assessment-arn (common-lisp:error ":assessmentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or template-format common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (needs-replacements common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-id-list common-lisp:null))
   (recommendation-template-arn
    (common-lisp:error ":recommendationtemplatearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (recommendation-types (common-lisp:error ":recommendationtypes is required")
    :type (common-lisp:or render-recommendation-type-list common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or recommendation-template-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (templates-location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-template 'make-recommendation-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'needs-replacements))
      (common-lisp:list
       (common-lisp:cons "needsReplacements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-template-arn))
      (common-lisp:list
       (common-lisp:cons "recommendationTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-types))
      (common-lisp:list
       (common-lisp:cons "recommendationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates-location))
      (common-lisp:list
       (common-lisp:cons "templatesLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-template-list ()
   '(trivial-types:proper-list recommendation-template))
 (common-lisp:defun |make-recommendation-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-template-status-list ()
   '(trivial-types:proper-list recommendation-template-status))
 (common-lisp:defun |make-recommendation-template-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-template-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-draft-app-version-resource-mappings-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-draft-app-version-resource-mappings-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-registry-app-names common-lisp:nil :type
    (common-lisp:or entity-name-list common-lisp:null))
   (eks-source-names common-lisp:nil :type
    (common-lisp:or string255list common-lisp:null))
   (logical-stack-names common-lisp:nil :type
    (common-lisp:or string255list common-lisp:null))
   (resource-group-names common-lisp:nil :type
    (common-lisp:or entity-name-list common-lisp:null))
   (resource-names common-lisp:nil :type
    (common-lisp:or entity-name-list common-lisp:null))
   (terraform-source-names common-lisp:nil :type
    (common-lisp:or string255list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-draft-app-version-resource-mappings-request
                    'make-remove-draft-app-version-resource-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-registry-app-names))
      (common-lisp:list
       (common-lisp:cons "appRegistryAppNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-source-names))
      (common-lisp:list
       (common-lisp:cons "eksSourceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-stack-names))
      (common-lisp:list
       (common-lisp:cons "logicalStackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-group-names))
      (common-lisp:list
       (common-lisp:cons "resourceGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-names))
      (common-lisp:list
       (common-lisp:cons "resourceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terraform-source-names))
      (common-lisp:list
       (common-lisp:cons "terraformSourceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-draft-app-version-resource-mappings-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-draft-app-version-resource-mappings-response-"))
   (app-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (app-version common-lisp:nil :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-draft-app-version-resource-mappings-response
                    'make-remove-draft-app-version-resource-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-draft-app-version-resource-mappings-response))
   common-lisp:nil))
(common-lisp:deftype render-recommendation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype render-recommendation-type-list ()
   '(trivial-types:proper-list render-recommendation-type))
 (common-lisp:defun |make-render-recommendation-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            render-recommendation-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resiliency-policies ()
   '(trivial-types:proper-list resiliency-policy))
 (common-lisp:defun |make-resiliency-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resiliency-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resiliency-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-resiliency-policy-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (data-location-constraint common-lisp:nil :type
    (common-lisp:or data-location-constraint common-lisp:null))
   (estimated-cost-tier common-lisp:nil :type
    (common-lisp:or estimated-cost-tier common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or disruption-policy common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (policy-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or resiliency-policy-tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resiliency-policy 'make-resiliency-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resiliency-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resiliency-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-location-constraint))
      (common-lisp:list
       (common-lisp:cons "dataLocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-cost-tier))
      (common-lisp:list
       (common-lisp:cons "estimatedCostTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-description))
      (common-lisp:list
       (common-lisp:cons "policyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resiliency-policy))
   common-lisp:nil))
(common-lisp:deftype resiliency-policy-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resiliency-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-resiliency-score-"))
   (disruption-score (common-lisp:error ":disruptionscore is required") :type
    (common-lisp:or disruption-resiliency-score common-lisp:null))
   (score (common-lisp:error ":score is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resiliency-score 'make-resiliency-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resiliency-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resiliency-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disruption-score))
      (common-lisp:list
       (common-lisp:cons "disruptionScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resiliency-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resolve-app-version-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolve-app-version-resources-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolve-app-version-resources-request
                    'make-resolve-app-version-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resolve-app-version-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolve-app-version-resources-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (resolution-id (common-lisp:error ":resolutionid is required") :type
    (common-lisp:or string255 common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-resolution-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolve-app-version-resources-response
                    'make-resolve-app-version-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-id))
      (common-lisp:list
       (common-lisp:cons "resolutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-app-version-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-error-"))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-error 'make-resource-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-error-list ()
   '(trivial-types:proper-list resource-error))
 (common-lisp:defun |make-resource-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-errors-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-errors-details-"))
   (has-more-errors common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (resource-errors common-lisp:nil :type
    (common-lisp:or resource-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-errors-details 'make-resource-errors-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-errors-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-errors-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-errors))
      (common-lisp:list
       (common-lisp:cons "hasMoreErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-errors))
      (common-lisp:list
       (common-lisp:cons "resourceErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-errors-details))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-import-status-type () 'common-lisp:string)
(common-lisp:deftype resource-import-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-mapping-"))
   (app-registry-app-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (eks-source-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (logical-stack-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (mapping-type (common-lisp:error ":mappingtype is required") :type
    (common-lisp:or resource-mapping-type common-lisp:null))
   (physical-resource-id (common-lisp:error ":physicalresourceid is required")
    :type (common-lisp:or physical-resource-id common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (terraform-source-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-mapping 'make-resource-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-registry-app-name))
      (common-lisp:list
       (common-lisp:cons "appRegistryAppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-source-name))
      (common-lisp:list
       (common-lisp:cons "eksSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-stack-name))
      (common-lisp:list
       (common-lisp:cons "logicalStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-type))
      (common-lisp:list
       (common-lisp:cons "mappingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "resourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terraform-source-name))
      (common-lisp:list
       (common-lisp:cons "terraformSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-mapping-list ()
   '(trivial-types:proper-list resource-mapping))
 (common-lisp:defun |make-resource-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-mapping-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-resolution-status-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket common-lisp:nil :type (common-lisp:or string500 common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string500 common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:deftype seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (sop-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-sop-recommendation-"))
   (app-component-name common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or recommendation-item-list common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or document-name common-lisp:null))
   (prerequisite common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (recommendation-id (common-lisp:error ":recommendationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (reference-id (common-lisp:error ":referenceid is required") :type
    (common-lisp:or spec-reference-id common-lisp:null))
   (service-type (common-lisp:error ":servicetype is required") :type
    (common-lisp:or sop-service-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sop-recommendation 'make-sop-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sop-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sop-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prerequisite))
      (common-lisp:list
       (common-lisp:cons "prerequisite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sop-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sop-recommendation-list ()
   '(trivial-types:proper-list sop-recommendation))
 (common-lisp:defun |make-sop-recommendation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sop-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sop-service-type () 'common-lisp:string)
(common-lisp:deftype spec-reference-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-app-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-app-assessment-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (assessment-name (common-lisp:error ":assessmentname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-app-assessment-request
                    'make-start-app-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-app-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-app-assessment-response-"))
   (assessment (common-lisp:error ":assessment is required") :type
    (common-lisp:or app-assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-app-assessment-response
                    'make-start-app-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-app-assessment-response))
   common-lisp:nil))
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string128without-whitespace () 'common-lisp:string)
(common-lisp:deftype string2048 () 'common-lisp:string)
(common-lisp:deftype string255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string255list () '(trivial-types:proper-list string255))
 (common-lisp:defun |make-string255list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string500 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype suggested-changes-list ()
   '(trivial-types:proper-list entity-description))
 (common-lisp:defun |make-suggested-changes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terraform-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-terraform-source-"))
   (s3state-file-url (common-lisp:error ":s3statefileurl is required") :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terraform-source 'make-terraform-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terraform-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terraform-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3state-file-url))
      (common-lisp:list
       (common-lisp:cons "s3StateFileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terraform-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terraform-source-list ()
   '(trivial-types:proper-list terraform-source))
 (common-lisp:defun |make-terraform-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list terraform-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (test-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-recommendation-"))
   (app-component-name common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (depends-on-alarms common-lisp:nil :type
    (common-lisp:or alarm-reference-id-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (intent common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or recommendation-item-list common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or document-name common-lisp:null))
   (prerequisite common-lisp:nil :type
    (common-lisp:or string500 common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (reference-id (common-lisp:error ":referenceid is required") :type
    (common-lisp:or spec-reference-id common-lisp:null))
   (risk common-lisp:nil :type (common-lisp:or test-risk common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or test-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-recommendation 'make-test-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component-name))
      (common-lisp:list
       (common-lisp:cons "appComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on-alarms))
      (common-lisp:list
       (common-lisp:cons "dependsOnAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prerequisite))
      (common-lisp:list
       (common-lisp:cons "prerequisite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-recommendation-list ()
   '(trivial-types:proper-list test-recommendation))
 (common-lisp:defun |make-test-recommendation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype test-risk () 'common-lisp:string)
(common-lisp:deftype test-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsupported-resource-"))
   (logical-resource-id (common-lisp:error ":logicalresourceid is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id (common-lisp:error ":physicalresourceid is required")
    :type (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or string255 common-lisp:null))
   (unsupported-resource-status common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-resource 'make-unsupported-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unsupported-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unsupported-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsupported-resource-status))
      (common-lisp:list
       (common-lisp:cons "unsupportedResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unsupported-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unsupported-resource-list ()
   '(trivial-types:proper-list unsupported-resource))
 (common-lisp:defun |make-unsupported-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unsupported-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-request-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-schedule common-lisp:nil :type
    (common-lisp:or app-assessment-schedule-type common-lisp:null))
   (clear-resiliency-policy-arn common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-request 'make-update-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-schedule))
      (common-lisp:list
       (common-lisp:cons "assessmentSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clear-resiliency-policy-arn))
      (common-lisp:list
       (common-lisp:cons "clearResiliencyPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-response-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-response 'make-update-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-app-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-app-component-request-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string255 common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string255 common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-app-component-request
                    'make-update-app-version-app-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-app-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-app-component-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-component common-lisp:nil :type
    (common-lisp:or app-component common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-app-component-response
                    'make-update-app-version-app-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-component))
      (common-lisp:list
       (common-lisp:cons "appComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-app-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-request-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-request
                    'make-update-app-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-resource-request-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-components common-lisp:nil :type
    (common-lisp:or app-component-name-list common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or customer-id common-lisp:null))
   (aws-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (excluded common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or string2048 common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-resource-request
                    'make-update-app-version-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-components))
      (common-lisp:list
       (common-lisp:cons "appComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "logicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "physicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-resource-response-"))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null))
   (physical-resource common-lisp:nil :type
    (common-lisp:or physical-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-resource-response
                    'make-update-app-version-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-resource))
      (common-lisp:list
       (common-lisp:cons "physicalResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-version-response-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or arn common-lisp:null))
   (app-version (common-lisp:error ":appversion is required") :type
    (common-lisp:or entity-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-version-response
                    'make-update-app-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "appVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resiliency-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resiliency-policy-request-"))
   (data-location-constraint common-lisp:nil :type
    (common-lisp:or data-location-constraint common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or disruption-policy common-lisp:null))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (policy-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or resiliency-policy-tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resiliency-policy-request
                    'make-update-resiliency-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-location-constraint))
      (common-lisp:list
       (common-lisp:cons "dataLocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-description))
      (common-lisp:list
       (common-lisp:cons "policyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resiliency-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resiliency-policy-response-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resiliency-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resiliency-policy-response
                    'make-update-resiliency-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resiliency-policy-response))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (resiliencehub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun add-draft-app-version-resource-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn resource-mappings)
   (common-lisp:declare (common-lisp:ignorable app-arn resource-mappings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-draft-app-version-resource-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/add-draft-app-version-resource-mappings"
                                                        "AddDraftAppVersionResourceMappings"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-draft-app-version-resource-mappings))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-schedule client-token
                     description name policy-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable assessment-schedule client-token description name
     policy-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/create-app"
                                                        "CreateApp"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-app-version-app-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-info app-arn client-token id
                     name type)
   (common-lisp:declare
    (common-lisp:ignorable additional-info app-arn client-token id name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-app-version-app-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/create-app-version-app-component"
                                                        "CreateAppVersionAppComponent"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app-version-app-component))
(common-lisp:progn
 (common-lisp:defun create-app-version-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-info app-arn app-components
                     aws-account-id aws-region client-token logical-resource-id
                     physical-resource-id resource-name resource-type)
   (common-lisp:declare
    (common-lisp:ignorable additional-info app-arn app-components
     aws-account-id aws-region client-token logical-resource-id
     physical-resource-id resource-name resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-app-version-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/create-app-version-resource"
                                                        "CreateAppVersionResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app-version-resource))
(common-lisp:progn
 (common-lisp:defun create-recommendation-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn bucket-name client-token
                     format name recommendation-ids recommendation-types tags)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn bucket-name client-token format name
     recommendation-ids recommendation-types tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-recommendation-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/create-recommendation-template"
                                                        "CreateRecommendationTemplate"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-recommendation-template))
(common-lisp:progn
 (common-lisp:defun create-resiliency-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-location-constraint
                     policy policy-description policy-name tags tier)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-location-constraint policy
     policy-description policy-name tags tier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resiliency-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/create-resiliency-policy"
                                                        "CreateResiliencyPolicy"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resiliency-policy))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn client-token force-delete)
   (common-lisp:declare
    (common-lisp:ignorable app-arn client-token force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-app"
                                                        "DeleteApp"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-app-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn client-token)
   (common-lisp:declare (common-lisp:ignorable assessment-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-app-assessment"
                                                        "DeleteAppAssessment"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-assessment))
(common-lisp:progn
 (common-lisp:defun delete-app-input-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn client-token
                     eks-source-cluster-namespace source-arn terraform-source)
   (common-lisp:declare
    (common-lisp:ignorable app-arn client-token eks-source-cluster-namespace
     source-arn terraform-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-input-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-app-input-source"
                                                        "DeleteAppInputSource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-input-source))
(common-lisp:progn
 (common-lisp:defun delete-app-version-app-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn client-token id)
   (common-lisp:declare (common-lisp:ignorable app-arn client-token id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-app-version-app-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-app-version-app-component"
                                                        "DeleteAppVersionAppComponent"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-version-app-component))
(common-lisp:progn
 (common-lisp:defun delete-app-version-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn aws-account-id aws-region
                     client-token logical-resource-id physical-resource-id
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-arn aws-account-id aws-region client-token
     logical-resource-id physical-resource-id resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-app-version-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-app-version-resource"
                                                        "DeleteAppVersionResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-version-resource))
(common-lisp:progn
 (common-lisp:defun delete-recommendation-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token recommendation-template-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token recommendation-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-recommendation-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-recommendation-template"
                                                        "DeleteRecommendationTemplate"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-recommendation-template))
(common-lisp:progn
 (common-lisp:defun delete-resiliency-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token policy-arn)
   (common-lisp:declare (common-lisp:ignorable client-token policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resiliency-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/delete-resiliency-policy"
                                                        "DeleteResiliencyPolicy"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resiliency-policy))
(common-lisp:progn
 (common-lisp:defun describe-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn)
   (common-lisp:declare (common-lisp:ignorable app-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app"
                                                        "DescribeApp"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app))
(common-lisp:progn
 (common-lisp:defun describe-app-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-assessment"
                                                        "DescribeAppAssessment"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-assessment))
(common-lisp:progn
 (common-lisp:defun describe-app-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version)
   (common-lisp:declare (common-lisp:ignorable app-arn app-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-version"
                                                        "DescribeAppVersion"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-version))
(common-lisp:progn
 (common-lisp:defun describe-app-version-app-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version id)
   (common-lisp:declare (common-lisp:ignorable app-arn app-version id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-app-version-app-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-version-app-component"
                                                        "DescribeAppVersionAppComponent"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-version-app-component))
(common-lisp:progn
 (common-lisp:defun describe-app-version-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version aws-account-id
                     aws-region logical-resource-id physical-resource-id
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version aws-account-id aws-region
     logical-resource-id physical-resource-id resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-app-version-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-version-resource"
                                                        "DescribeAppVersionResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-version-resource))
(common-lisp:progn
 (common-lisp:defun describe-app-version-resources-resolution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version resolution-id)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version resolution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-app-version-resources-resolution-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-version-resources-resolution-status"
                                                        "DescribeAppVersionResourcesResolutionStatus"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-version-resources-resolution-status))
(common-lisp:progn
 (common-lisp:defun describe-app-version-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version)
   (common-lisp:declare (common-lisp:ignorable app-arn app-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-app-version-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-app-version-template"
                                                        "DescribeAppVersionTemplate"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-version-template))
(common-lisp:progn
 (common-lisp:defun describe-draft-app-version-resources-import-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn)
   (common-lisp:declare (common-lisp:ignorable app-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-draft-app-version-resources-import-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-draft-app-version-resources-import-status"
                                                        "DescribeDraftAppVersionResourcesImportStatus"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-draft-app-version-resources-import-status))
(common-lisp:progn
 (common-lisp:defun describe-resiliency-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-resiliency-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describe-resiliency-policy"
                                                        "DescribeResiliencyPolicy"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resiliency-policy))
(common-lisp:progn
 (common-lisp:defun import-resources-to-draft-app-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn eks-sources import-strategy
                     source-arns terraform-sources)
   (common-lisp:declare
    (common-lisp:ignorable app-arn eks-sources import-strategy source-arns
     terraform-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-import-resources-to-draft-app-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/import-resources-to-draft-app-version"
                                                        "ImportResourcesToDraftAppVersion"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-resources-to-draft-app-version))
(common-lisp:progn
 (common-lisp:defun list-alarm-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-alarm-recommendations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-alarm-recommendations"
                                                        "ListAlarmRecommendations"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-alarm-recommendations))
(common-lisp:progn
 (common-lisp:defun list-app-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn assessment-name assessment-status
                     compliance-status invoker max-results next-token
                     reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable app-arn assessment-name assessment-status
     compliance-status invoker max-results next-token reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-app-assessments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/list-app-assessments"
                                                        "ListAppAssessments"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-assessments))
(common-lisp:progn
 (common-lisp:defun list-app-component-compliances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-app-component-compliances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-component-compliances"
                                                        "ListAppComponentCompliances"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-component-compliances))
(common-lisp:progn
 (common-lisp:defun list-app-component-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-app-component-recommendations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-component-recommendations"
                                                        "ListAppComponentRecommendations"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-component-recommendations))
(common-lisp:progn
 (common-lisp:defun list-app-input-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-app-input-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-input-sources"
                                                        "ListAppInputSources"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-input-sources))
(common-lisp:progn
 (common-lisp:defun list-app-version-app-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-app-version-app-components-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-version-app-components"
                                                        "ListAppVersionAppComponents"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-version-app-components))
(common-lisp:progn
 (common-lisp:defun list-app-version-resource-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-app-version-resource-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-version-resource-mappings"
                                                        "ListAppVersionResourceMappings"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-version-resource-mappings))
(common-lisp:progn
 (common-lisp:defun list-app-version-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version max-results
                     next-token resolution-id)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version max-results next-token
     resolution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-app-version-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-version-resources"
                                                        "ListAppVersionResources"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-version-resources))
(common-lisp:progn
 (common-lisp:defun list-app-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn max-results next-token)
   (common-lisp:declare (common-lisp:ignorable app-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-app-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-app-versions"
                                                        "ListAppVersions"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-versions))
(common-lisp:progn
 (common-lisp:defun list-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn max-results name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-arn max-results name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/list-apps" "ListApps"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps))
(common-lisp:progn
 (common-lisp:defun list-recommendation-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results name
                     next-token recommendation-template-arn reverse-order
                     status)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results name next-token
     recommendation-template-arn reverse-order status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recommendation-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/list-recommendation-templates"
                                                        "ListRecommendationTemplates"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendation-templates))
(common-lisp:progn
 (common-lisp:defun list-resiliency-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token policy-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resiliency-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/list-resiliency-policies"
                                                        "ListResiliencyPolicies"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resiliency-policies))
(common-lisp:progn
 (common-lisp:defun list-sop-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sop-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-sop-recommendations"
                                                        "ListSopRecommendations"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sop-recommendations))
(common-lisp:progn
 (common-lisp:defun list-suggested-resiliency-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-suggested-resiliency-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/list-suggested-resiliency-policies"
                                                        "ListSuggestedResiliencyPolicies"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-suggested-resiliency-policies))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-test-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assessment-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-test-recommendations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-test-recommendations"
                                                        "ListTestRecommendations"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-test-recommendations))
(common-lisp:progn
 (common-lisp:defun list-unsupported-app-version-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version max-results
                     next-token resolution-id)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version max-results next-token
     resolution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-unsupported-app-version-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-unsupported-app-version-resources"
                                                        "ListUnsupportedAppVersionResources"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-unsupported-app-version-resources))
(common-lisp:progn
 (common-lisp:defun publish-app-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn)
   (common-lisp:declare (common-lisp:ignorable app-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-app-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/publish-app-version"
                                                        "PublishAppVersion"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-app-version))
(common-lisp:progn
 (common-lisp:defun put-draft-app-version-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-template-body)
   (common-lisp:declare (common-lisp:ignorable app-arn app-template-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-draft-app-version-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/put-draft-app-version-template"
                                                        "PutDraftAppVersionTemplate"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-draft-app-version-template))
(common-lisp:progn
 (common-lisp:defun remove-draft-app-version-resource-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-registry-app-names
                     eks-source-names logical-stack-names resource-group-names
                     resource-names terraform-source-names)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-registry-app-names eks-source-names
     logical-stack-names resource-group-names resource-names
     terraform-source-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-draft-app-version-resource-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/remove-draft-app-version-resource-mappings"
                                                        "RemoveDraftAppVersionResourceMappings"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-draft-app-version-resource-mappings))
(common-lisp:progn
 (common-lisp:defun resolve-app-version-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version)
   (common-lisp:declare (common-lisp:ignorable app-arn app-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-resolve-app-version-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/resolve-app-version-resources"
                                                        "ResolveAppVersionResources"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resolve-app-version-resources))
(common-lisp:progn
 (common-lisp:defun start-app-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn app-version assessment-name
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable app-arn app-version assessment-name client-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-app-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/start-app-assessment"
                                                        "StartAppAssessment"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-app-assessment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-arn assessment-schedule
                     clear-resiliency-policy-arn description policy-arn)
   (common-lisp:declare
    (common-lisp:ignorable app-arn assessment-schedule
     clear-resiliency-policy-arn description policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update-app"
                                                        "UpdateApp"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app))
(common-lisp:progn
 (common-lisp:defun update-app-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-info app-arn)
   (common-lisp:declare (common-lisp:ignorable additional-info app-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update-app-version"
                                                        "UpdateAppVersion"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app-version))
(common-lisp:progn
 (common-lisp:defun update-app-version-app-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-info app-arn id name type)
   (common-lisp:declare
    (common-lisp:ignorable additional-info app-arn id name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-app-version-app-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update-app-version-app-component"
                                                        "UpdateAppVersionAppComponent"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app-version-app-component))
(common-lisp:progn
 (common-lisp:defun update-app-version-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-info app-arn app-components
                     aws-account-id aws-region excluded logical-resource-id
                     physical-resource-id resource-name resource-type)
   (common-lisp:declare
    (common-lisp:ignorable additional-info app-arn app-components
     aws-account-id aws-region excluded logical-resource-id
     physical-resource-id resource-name resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-app-version-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update-app-version-resource"
                                                        "UpdateAppVersionResource"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app-version-resource))
(common-lisp:progn
 (common-lisp:defun update-resiliency-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-location-constraint policy
                     policy-arn policy-description policy-name tier)
   (common-lisp:declare
    (common-lisp:ignorable data-location-constraint policy policy-arn
     policy-description policy-name tier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resiliency-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'resiliencehub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update-resiliency-policy"
                                                        "UpdateResiliencyPolicy"
                                                        "2020-04-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resiliency-policy))
