;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/apigatewaymanagementapi/api
  (:use)
  (:nicknames #:aws/apigatewaymanagementapi)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/apigatewaymanagementapi/api)
(common-lisp:progn
 (common-lisp:defclass apigatewaymanagementapi-request
                       (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "apigatewaymanagementapi"
                        :protocol :rest-json))
 (common-lisp:export 'apigatewaymanagementapi-request))
(common-lisp:progn
 (common-lisp:define-condition apigatewaymanagementapi-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'apigatewaymanagementapi-error))
(common-lisp:defvar *error-map*
  '(("ForbiddenException" . forbidden-exception)
    ("GoneException" . gone-exception)
    ("PayloadTooLargeException" . payload-too-large-exception)
    ("LimitExceededException" . limit-exceeded-exception)))
(common-lisp:deftype data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-connection-request-connection-id :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defun make-delete-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (apigatewaymanagementapi-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'forbidden-exception)))
(common-lisp:progn
 (common-lisp:defclass get-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-connection-request-connection-id :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-connection-request 'make-get-connection-request))
 (common-lisp:defun make-get-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-response common-lisp:nil
                       ((last-active-at :initarg :last-active-at :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-connection-response-last-active-at
                         :initform common-lisp:nil)
                        (identity :initarg :identity :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         %get-connection-response-identity :initform
                         common-lisp:nil)
                        (connected-at :initarg :connected-at :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %get-connection-response-connected-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-connection-response 'make-get-connection-response))
 (common-lisp:defun make-get-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-active-at identity connected-at)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-at))
      (common-lisp:list
       (common-lisp:cons "ConnectedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-active-at))
      (common-lisp:list
       (common-lisp:cons "LastActiveAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gone-exception
     (apigatewaymanagementapi-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'gone-exception)))
(common-lisp:progn
 (common-lisp:defclass identity common-lisp:nil
                       ((user-agent :initarg :user-agent :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %identity-user-agent :initform
                         (common-lisp:error ":user-agent is required"))
                        (source-ip :initarg :source-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %identity-source-ip :initform
                         (common-lisp:error ":source-ip is required"))))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defun make-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-agent source-ip)
   (common-lisp:apply #'common-lisp:make-instance 'identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "UserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition payload-too-large-exception
     (apigatewaymanagementapi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       payload-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'payload-too-large-exception
                    'payload-too-large-exception-message)))
(common-lisp:progn
 (common-lisp:defclass post-to-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %post-to-connection-request-connection-id :initform
                         (common-lisp:error ":connection-id is required"))
                        (data :initarg :data :type
                         (common-lisp:or data common-lisp:null) :accessor
                         %post-to-connection-request-data :initform
                         (common-lisp:error ":data is required"))))
 (common-lisp:export
  (common-lisp:list 'post-to-connection-request
                    'make-post-to-connection-request))
 (common-lisp:defun make-post-to-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id data)
   (common-lisp:apply #'common-lisp:make-instance 'post-to-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-to-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-to-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-to-connection-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'data))))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (apigatewaymanagementapi-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'apigatewaymanagementapi-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/@connections/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connection-id))))
        "DeleteConnection" "2018-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'apigatewaymanagementapi-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/@connections/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connection-id))))
        "GetConnection" "2018-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun post-to-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data connection-id)
   (common-lisp:declare (common-lisp:ignorable data connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-post-to-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'apigatewaymanagementapi-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/@connections/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connection-id))))
        "PostToConnection" "2018-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'post-to-connection))
